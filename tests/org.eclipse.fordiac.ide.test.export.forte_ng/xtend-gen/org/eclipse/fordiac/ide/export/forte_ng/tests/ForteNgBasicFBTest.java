/**
 * Copyright (c) 2020 Johannes Kepler University Linz
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *   Ernst Blecha
 *     - test for forte_ng
 */
package org.eclipse.fordiac.ide.export.forte_ng.tests;

import com.google.common.base.Objects;
import java.util.List;
import org.eclipse.fordiac.ide.export.forte_ng.tests.ForteNgTestBase;
import org.eclipse.fordiac.ide.export.forte_ng.tests.ForteNgTestBasicFBTypeBase;
import org.eclipse.fordiac.ide.model.libraryElement.BasicFBType;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.junit.Assert;
import org.junit.Test;

@SuppressWarnings("all")
public class ForteNgBasicFBTest extends ForteNgTestBasicFBTypeBase {
  @Test
  public void exportValidBasicFB() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("VAR");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(ForteNgTestBase.VARIABLE_NAME, "  ");
    _builder.append(" : ARRAY [0..31] OF DWORD;");
    _builder.newLineIfNotEmpty();
    _builder.append("END_VAR");
    this.functionBlock.getAlgorithm().add(this.createSTAlgorithm(ForteNgTestBase.ALGORITHM_NAME, _builder.toString()));
    final List<ForteNgTestBase<BasicFBType>.FileObject> exports = this.generateFunctionBlock(this.functionBlock);
    boolean headerfileFound = false;
    boolean cppfileFound = false;
    for (final ForteNgTestBase<BasicFBType>.FileObject export : exports) {
      String _name = export.getName();
      boolean _matched = false;
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append(ForteNgTestBase.FUNCTIONBLOCK_NAME);
      _builder_1.append(".h");
      if (Objects.equal(_name, _builder_1.toString())) {
        _matched=true;
        headerfileFound = true;
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("/*************************************************************************");
        _builder_2.newLine();
        _builder_2.append(" ");
        _builder_2.append("*** FORTE Library Element");
        _builder_2.newLine();
        _builder_2.append(" ");
        _builder_2.append("***");
        _builder_2.newLine();
        _builder_2.append(" ");
        _builder_2.append("*** This file was generated using the 4DIAC FORTE Export Filter V1.0.x NG!");
        _builder_2.newLine();
        _builder_2.append(" ");
        _builder_2.append("***");
        _builder_2.newLine();
        _builder_2.append(" ");
        _builder_2.append("*** Name: ");
        _builder_2.append(ForteNgTestBase.FUNCTIONBLOCK_NAME, " ");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append(" ");
        _builder_2.append("*** Description: ");
        _builder_2.newLine();
        _builder_2.append(" ");
        _builder_2.append("*** Version:");
        _builder_2.newLine();
        _builder_2.append(" ");
        _builder_2.append("*************************************************************************/");
        _builder_2.newLine();
        _builder_2.newLine();
        _builder_2.append("#ifndef _");
        String _upperCase = ForteNgTestBase.FUNCTIONBLOCK_NAME.toUpperCase();
        _builder_2.append(_upperCase);
        _builder_2.append("_H_");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("#define _");
        String _upperCase_1 = ForteNgTestBase.FUNCTIONBLOCK_NAME.toUpperCase();
        _builder_2.append(_upperCase_1);
        _builder_2.append("_H_");
        _builder_2.newLineIfNotEmpty();
        _builder_2.newLine();
        _builder_2.append("#include \"basicfb.h\"");
        _builder_2.newLine();
        _builder_2.append("#include \"forte_array_at.h\"");
        _builder_2.newLine();
        _builder_2.newLine();
        _builder_2.newLine();
        _builder_2.append("class ");
        _builder_2.append(ForteNgTestBase.EXPORTED_FUNCTIONBLOCK_NAME);
        _builder_2.append(": public CBasicFB {");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("  ");
        _builder_2.append("DECLARE_FIRMWARE_FB(");
        _builder_2.append(ForteNgTestBase.EXPORTED_FUNCTIONBLOCK_NAME, "  ");
        _builder_2.append(")");
        _builder_2.newLineIfNotEmpty();
        _builder_2.newLine();
        _builder_2.append("private:");
        _builder_2.newLine();
        _builder_2.append("  ");
        _builder_2.newLine();
        _builder_2.append("  ");
        _builder_2.newLine();
        _builder_2.append("  ");
        _builder_2.newLine();
        _builder_2.append("  ");
        _builder_2.newLine();
        _builder_2.newLine();
        _builder_2.append("  ");
        _builder_2.append("static const SFBInterfaceSpec scm_stFBInterfaceSpec;");
        _builder_2.newLine();
        _builder_2.newLine();
        _builder_2.newLine();
        _builder_2.append("  ");
        _builder_2.append("void ");
        _builder_2.append(ForteNgTestBase.EXPORTED_ALGORITHM_NAME, "  ");
        _builder_2.append("(void);");
        _builder_2.newLineIfNotEmpty();
        _builder_2.newLine();
        _builder_2.append("  ");
        _builder_2.newLine();
        _builder_2.newLine();
        _builder_2.append("  ");
        _builder_2.append("virtual void executeEvent(int pa_nEIID);");
        _builder_2.newLine();
        _builder_2.newLine();
        _builder_2.append("  ");
        _builder_2.append("FORTE_BASIC_FB_DATA_ARRAY(0, 0, 0, 0, 0);");
        _builder_2.newLine();
        _builder_2.newLine();
        _builder_2.append("public:");
        _builder_2.newLine();
        _builder_2.append("  ");
        _builder_2.append(ForteNgTestBase.EXPORTED_FUNCTIONBLOCK_NAME, "  ");
        _builder_2.append("(CStringDictionary::TStringId pa_nInstanceNameId, CResource *pa_poSrcRes) :");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("       ");
        _builder_2.append("CBasicFB(pa_poSrcRes, &scm_stFBInterfaceSpec, pa_nInstanceNameId, nullptr, m_anFBConnData, m_anFBVarsData) {");
        _builder_2.newLine();
        _builder_2.append("  ");
        _builder_2.append("};");
        _builder_2.newLine();
        _builder_2.newLine();
        _builder_2.append("  ");
        _builder_2.append("virtual ~");
        _builder_2.append(ForteNgTestBase.EXPORTED_FUNCTIONBLOCK_NAME, "  ");
        _builder_2.append("() = default;");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("};");
        _builder_2.newLine();
        _builder_2.newLine();
        _builder_2.append("#endif // _");
        String _upperCase_2 = ForteNgTestBase.FUNCTIONBLOCK_NAME.toUpperCase();
        _builder_2.append(_upperCase_2);
        _builder_2.append("_H_");
        _builder_2.newLineIfNotEmpty();
        _builder_2.newLine();
        Assert.assertEquals(_builder_2.toString(), export.getData().toString());
        ForteNgTestBase.assertNoErrors(export.getErrors());
        ForteNgTestBase.assertNoErrors(export.getWarnings());
        ForteNgTestBase.assertNoErrors(export.getInfos());
      }
      if (!_matched) {
        StringConcatenation _builder_3 = new StringConcatenation();
        _builder_3.append(ForteNgTestBase.FUNCTIONBLOCK_NAME);
        _builder_3.append(".cpp");
        if (Objects.equal(_name, _builder_3.toString())) {
          _matched=true;
          cppfileFound = true;
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append("/*************************************************************************");
          _builder_4.newLine();
          _builder_4.append(" ");
          _builder_4.append("*** FORTE Library Element");
          _builder_4.newLine();
          _builder_4.append(" ");
          _builder_4.append("***");
          _builder_4.newLine();
          _builder_4.append(" ");
          _builder_4.append("*** This file was generated using the 4DIAC FORTE Export Filter V1.0.x NG!");
          _builder_4.newLine();
          _builder_4.append(" ");
          _builder_4.append("***");
          _builder_4.newLine();
          _builder_4.append(" ");
          _builder_4.append("*** Name: ");
          _builder_4.append(ForteNgTestBase.FUNCTIONBLOCK_NAME, " ");
          _builder_4.newLineIfNotEmpty();
          _builder_4.append(" ");
          _builder_4.append("*** Description: ");
          _builder_4.newLine();
          _builder_4.append(" ");
          _builder_4.append("*** Version:");
          _builder_4.newLine();
          _builder_4.append(" ");
          _builder_4.append("*************************************************************************/");
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.append("#include \"");
          _builder_4.append(ForteNgTestBase.FUNCTIONBLOCK_NAME);
          _builder_4.append(".h\"");
          _builder_4.newLineIfNotEmpty();
          _builder_4.append("#ifdef FORTE_ENABLE_GENERATED_SOURCE_CPP");
          _builder_4.newLine();
          _builder_4.append("#include \"");
          _builder_4.append(ForteNgTestBase.FUNCTIONBLOCK_NAME);
          _builder_4.append("_gen.cpp\"");
          _builder_4.newLineIfNotEmpty();
          _builder_4.append("#endif");
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.append("DEFINE_FIRMWARE_FB(");
          _builder_4.append(ForteNgTestBase.EXPORTED_FUNCTIONBLOCK_NAME);
          _builder_4.append(", g_nStringId");
          _builder_4.append(ForteNgTestBase.FUNCTIONBLOCK_NAME);
          _builder_4.append(")");
          _builder_4.newLineIfNotEmpty();
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.append("const SFBInterfaceSpec ");
          _builder_4.append(ForteNgTestBase.EXPORTED_FUNCTIONBLOCK_NAME);
          _builder_4.append("::scm_stFBInterfaceSpec = {");
          _builder_4.newLineIfNotEmpty();
          _builder_4.append("  ");
          _builder_4.append("0, nullptr, nullptr, nullptr,");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("0, nullptr, nullptr, nullptr,");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("0, nullptr, nullptr,");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("0, nullptr, nullptr,");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("0, nullptr");
          _builder_4.newLine();
          _builder_4.append("};");
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.append("void ");
          _builder_4.append(ForteNgTestBase.EXPORTED_FUNCTIONBLOCK_NAME);
          _builder_4.append("::");
          _builder_4.append(ForteNgTestBase.EXPORTED_ALGORITHM_NAME);
          _builder_4.append("(void) {");
          _builder_4.newLineIfNotEmpty();
          _builder_4.append("  ");
          _builder_4.append("CIEC_DWORD ");
          _builder_4.append(ForteNgTestBase.EXPORTED_VARIABLE_NAME, "  ");
          _builder_4.append("[32];");
          _builder_4.newLineIfNotEmpty();
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.newLine();
          _builder_4.append("void ");
          _builder_4.append(ForteNgTestBase.EXPORTED_FUNCTIONBLOCK_NAME);
          _builder_4.append("::executeEvent(int pa_nEIID){");
          _builder_4.newLineIfNotEmpty();
          _builder_4.append("  ");
          _builder_4.append("bool bTransitionCleared;");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("do {");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("bTransitionCleared = true;");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("switch(m_nECCState) {");
          _builder_4.newLine();
          _builder_4.append("      ");
          _builder_4.append("default:");
          _builder_4.newLine();
          _builder_4.append("        ");
          _builder_4.append("DEVLOG_ERROR(\"The state is not in the valid range! The state value is: %d. The max value can be: 0.\", m_nECCState.operator TForteUInt16 ());");
          _builder_4.newLine();
          _builder_4.append("        ");
          _builder_4.append("m_nECCState = 0; // 0 is always the initial state");
          _builder_4.newLine();
          _builder_4.append("        ");
          _builder_4.append("break;");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.append("    ");
          _builder_4.append("pa_nEIID = cg_nInvalidEventID; // we have to clear the event after the first check in order to ensure correct behavior");
          _builder_4.newLine();
          _builder_4.append("  ");
          _builder_4.append("} while(bTransitionCleared);");
          _builder_4.newLine();
          _builder_4.append("}");
          _builder_4.newLine();
          _builder_4.newLine();
          Assert.assertEquals(_builder_4.toString(), export.getData().toString());
          ForteNgTestBase.assertNoErrors(export.getErrors());
          ForteNgTestBase.assertNoErrors(export.getWarnings());
          ForteNgTestBase.assertNoErrors(export.getInfos());
        }
      }
      if (!_matched) {
        Assert.fail("unexpected export file");
      }
    }
    Assert.assertTrue("Header-File missing", headerfileFound);
    Assert.assertTrue("CPP-File missing", cppfileFound);
  }
}
