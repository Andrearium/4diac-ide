/*******************************************************************************
 * Copyright (c) 2020 Johannes Kepler University Linz
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *
 *   Ernst Blecha - initial API and implementation and/or initial documentation
 *******************************************************************************/

/*
 * generated by Xtext 2.20.0
 */
package org.eclipse.fordiac.ide.model.structuredtext.validation

import org.eclipse.fordiac.ide.model.structuredtext.structuredText.PartialAccess
import org.eclipse.fordiac.ide.model.structuredtext.structuredText.StructuredTextPackage
import org.eclipse.fordiac.ide.model.structuredtext.structuredText.impl.PrimaryVariableImpl
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class StructuredTextValidator extends AbstractStructuredTextValidator {

	public static val INVALID_PARTIAL = 'invalidMultibitPartAccess'

	def private checkIndex(PartialAccess p, int size) {
		if (p.index >= 0 && p.index < size ) {
			return true
		} else {
			return false
		}
	}

	def private validPrimaryVariablePartialAccess(PrimaryVariableImpl v) {
		if (null !== v.part)  {
			if ( v.part.bitaccess && !v.part.byteaccess && !v.part.wordaccess && !v.part.dwordaccess ) {
				if ( v.^var.^type.name.equals("LWORD") ) {
					return checkIndex(v.part,64)
				} else if ( v.^var.^type.name.equals("DWORD") ) {
					return checkIndex(v.part,32)
				} else if ( v.^var.^type.name.equals("WORD") ) {
					return checkIndex(v.part,16)
				} else if ( v.^var.^type.name.equals("BYTE") ) {
					return checkIndex(v.part,8)
				} else {
					return false
				}
			} else if ( !v.part.bitaccess && v.part.byteaccess && !v.part.wordaccess && !v.part.dwordaccess ) {
				if ( v.^var.^type.name.equals("LWORD") ) {
					return checkIndex(v.part,8)
				} else if ( v.^var.^type.name.equals("DWORD") ) {
					return checkIndex(v.part,4)
				} else if ( v.^var.^type.name.equals("WORD") ) {
					return checkIndex(v.part,2)
				} else {
					return false
				}
			} else if ( !v.part.bitaccess && !v.part.byteaccess && v.part.wordaccess && !v.part.dwordaccess ) {
				if ( v.^var.^type.name.equals("LWORD") ) {
					return checkIndex(v.part,4)
				} else if ( v.^var.^type.name.equals("DWORD") ) {
					return checkIndex(v.part,2)
				} else {
					return false
				}
			} else if ( !v.part.bitaccess && !v.part.byteaccess && !v.part.wordaccess && v.part.dwordaccess ) {
				if ( v.^var.^type.name.equals("LWORD") ) {
					return checkIndex(v.part,2)
				} else {
					return false
				}
			}
		} else {
			return true
		}
	}

	@Check
	def checkPartialAccess(PrimaryVariableImpl v) {
		if ( !validPrimaryVariablePartialAccess(v) ) {
			error("Incorrect partial access (e.g. accessing a DWORD inside a BYTE, index not within limits, ...)", StructuredTextPackage.Literals.PRIMARY_VARIABLE__VAR)
		}
	}

}
