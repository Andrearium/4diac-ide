/*
 * generated by Xtext 2.24.0
 */
parser grammar InternalStructuredTextParser;

options {
	tokenVocab=InternalStructuredTextLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.eclipse.fordiac.ide.model.structuredtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.fordiac.ide.model.structuredtext.services.StructuredTextGrammarAccess;

}

@members {

 	private StructuredTextGrammarAccess grammarAccess;

    public InternalStructuredTextParser(TokenStream input, StructuredTextGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "StructuredTextAlgorithm";
   	}

   	@Override
   	protected StructuredTextGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleStructuredTextAlgorithm
entryRuleStructuredTextAlgorithm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructuredTextAlgorithmRule()); }
	iv_ruleStructuredTextAlgorithm=ruleStructuredTextAlgorithm
	{ $current=$iv_ruleStructuredTextAlgorithm.current; }
	EOF;

// Rule StructuredTextAlgorithm
ruleStructuredTextAlgorithm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStructuredTextAlgorithmAccess().getStructuredTextAlgorithmAction_0(),
					$current);
			}
		)
		(
			otherlv_1=VAR
			{
				newLeafNode(otherlv_1, grammarAccess.getStructuredTextAlgorithmAccess().getVARKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getStructuredTextAlgorithmAccess().getLocalVariablesVar_Decl_InitParserRuleCall_1_1_0_0());
						}
						lv_localVariables_2_0=ruleVar_Decl_Init
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStructuredTextAlgorithmRule());
							}
							add(
								$current,
								"localVariables",
								lv_localVariables_2_0,
								"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Var_Decl_Init");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=Semicolon
				{
					newLeafNode(otherlv_3, grammarAccess.getStructuredTextAlgorithmAccess().getSemicolonKeyword_1_1_1());
				}
			)*
			otherlv_4=END_VAR
			{
				newLeafNode(otherlv_4, grammarAccess.getStructuredTextAlgorithmAccess().getEND_VARKeyword_1_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStructuredTextAlgorithmAccess().getStatementsStmt_ListParserRuleCall_2_0());
				}
				lv_statements_5_0=ruleStmt_List
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructuredTextAlgorithmRule());
					}
					set(
						$current,
						"statements",
						lv_statements_5_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Stmt_List");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVar_Decl_Init
entryRuleVar_Decl_Init returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVar_Decl_InitRule()); }
	iv_ruleVar_Decl_Init=ruleVar_Decl_Init
	{ $current=$iv_ruleVar_Decl_Init.current; }
	EOF;

// Rule Var_Decl_Init
ruleVar_Decl_Init returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getVar_Decl_InitAccess().getVar_Decl_LocalParserRuleCall());
	}
	this_Var_Decl_Local_0=ruleVar_Decl_Local
	{
		$current = $this_Var_Decl_Local_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleVar_Decl_Local
entryRuleVar_Decl_Local returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVar_Decl_LocalRule()); }
	iv_ruleVar_Decl_Local=ruleVar_Decl_Local
	{ $current=$iv_ruleVar_Decl_Local.current; }
	EOF;

// Rule Var_Decl_Local
ruleVar_Decl_Local returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVar_Decl_LocalAccess().getLocalVariableAction_0(),
					$current);
			}
		)
		(
			(
				lv_constant_1_0=CONSTANT
				{
					newLeafNode(lv_constant_1_0, grammarAccess.getVar_Decl_LocalAccess().getConstantCONSTANTKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVar_Decl_LocalRule());
					}
					setWithLastConsumed($current, "constant", lv_constant_1_0 != null, "CONSTANT");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getVar_Decl_LocalAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVar_Decl_LocalRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.ID");
				}
			)
		)
		(
			(
				(
					lv_located_3_0=AT
					{
						newLeafNode(lv_located_3_0, grammarAccess.getVar_Decl_LocalAccess().getLocatedATKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVar_Decl_LocalRule());
						}
						setWithLastConsumed($current, "located", lv_located_3_0 != null, "AT");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getVar_Decl_LocalAccess().getLocationVariableParserRuleCall_3_1_0());
					}
					lv_location_4_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVar_Decl_LocalRule());
						}
						set(
							$current,
							"location",
							lv_location_4_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5=Colon
		{
			newLeafNode(otherlv_5, grammarAccess.getVar_Decl_LocalAccess().getColonKeyword_4());
		}
		(
			(
				(
					lv_array_6_0=ARRAY
					{
						newLeafNode(lv_array_6_0, grammarAccess.getVar_Decl_LocalAccess().getArrayARRAYKeyword_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVar_Decl_LocalRule());
						}
						setWithLastConsumed($current, "array", lv_array_6_0 != null, "ARRAY");
					}
				)
			)
			otherlv_7=LeftSquareBracket
			{
				newLeafNode(otherlv_7, grammarAccess.getVar_Decl_LocalAccess().getLeftSquareBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVar_Decl_LocalAccess().getArrayStartArray_SizeParserRuleCall_5_2_0());
					}
					lv_arrayStart_8_0=ruleArray_Size
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVar_Decl_LocalRule());
						}
						set(
							$current,
							"arrayStart",
							lv_arrayStart_8_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Array_Size");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=FullStopFullStop
			{
				newLeafNode(otherlv_9, grammarAccess.getVar_Decl_LocalAccess().getFullStopFullStopKeyword_5_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVar_Decl_LocalAccess().getArrayStopArray_SizeParserRuleCall_5_4_0());
					}
					lv_arrayStop_10_0=ruleArray_Size
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVar_Decl_LocalRule());
						}
						set(
							$current,
							"arrayStop",
							lv_arrayStop_10_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Array_Size");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11=RightSquareBracket
			{
				newLeafNode(otherlv_11, grammarAccess.getVar_Decl_LocalAccess().getRightSquareBracketKeyword_5_5());
			}
			otherlv_12=OF
			{
				newLeafNode(otherlv_12, grammarAccess.getVar_Decl_LocalAccess().getOFKeyword_5_6());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVar_Decl_LocalRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getVar_Decl_LocalAccess().getTypeDataTypeCrossReference_6_0());
				}
				ruleType_Name
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_initalized_14_0=ColonEqualsSign
					{
						newLeafNode(lv_initalized_14_0, grammarAccess.getVar_Decl_LocalAccess().getInitalizedColonEqualsSignKeyword_7_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVar_Decl_LocalRule());
						}
						setWithLastConsumed($current, "initalized", lv_initalized_14_0 != null, ":=");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getVar_Decl_LocalAccess().getInitialValueConstantParserRuleCall_7_1_0());
					}
					lv_initialValue_15_0=ruleConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVar_Decl_LocalRule());
						}
						set(
							$current,
							"initialValue",
							lv_initialValue_15_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleStmt_List
entryRuleStmt_List returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStmt_ListRule()); }
	iv_ruleStmt_List=ruleStmt_List
	{ $current=$iv_ruleStmt_List.current; }
	EOF;

// Rule Stmt_List
ruleStmt_List returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStmt_ListAccess().getStatementListAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStmt_ListAccess().getStatementsStmtParserRuleCall_1_0_0());
					}
					lv_statements_1_0=ruleStmt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStmt_ListRule());
						}
						add(
							$current,
							"statements",
							lv_statements_1_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Stmt");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_2=Semicolon
			{
				newLeafNode(otherlv_2, grammarAccess.getStmt_ListAccess().getSemicolonKeyword_1_1());
			}
		)*
	)
;

// Entry rule entryRuleStmt
entryRuleStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStmtRule()); }
	iv_ruleStmt=ruleStmt
	{ $current=$iv_ruleStmt.current; }
	EOF;

// Rule Stmt
ruleStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStmtAccess().getAssign_StmtParserRuleCall_0());
		}
		this_Assign_Stmt_0=ruleAssign_Stmt
		{
			$current = $this_Assign_Stmt_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStmtAccess().getSubprog_Ctrl_StmtParserRuleCall_1());
		}
		this_Subprog_Ctrl_Stmt_1=ruleSubprog_Ctrl_Stmt
		{
			$current = $this_Subprog_Ctrl_Stmt_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStmtAccess().getSelection_StmtParserRuleCall_2());
		}
		this_Selection_Stmt_2=ruleSelection_Stmt
		{
			$current = $this_Selection_Stmt_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStmtAccess().getIteration_StmtParserRuleCall_3());
		}
		this_Iteration_Stmt_3=ruleIteration_Stmt
		{
			$current = $this_Iteration_Stmt_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssign_Stmt
entryRuleAssign_Stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssign_StmtRule()); }
	iv_ruleAssign_Stmt=ruleAssign_Stmt
	{ $current=$iv_ruleAssign_Stmt.current; }
	EOF;

// Rule Assign_Stmt
ruleAssign_Stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssign_StmtAccess().getVariableVariableParserRuleCall_0_0());
				}
				lv_variable_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssign_StmtRule());
					}
					set(
						$current,
						"variable",
						lv_variable_0_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=ColonEqualsSign
		{
			newLeafNode(otherlv_1, grammarAccess.getAssign_StmtAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssign_StmtAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssign_StmtRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSubprog_Ctrl_Stmt
entryRuleSubprog_Ctrl_Stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubprog_Ctrl_StmtRule()); }
	iv_ruleSubprog_Ctrl_Stmt=ruleSubprog_Ctrl_Stmt
	{ $current=$iv_ruleSubprog_Ctrl_Stmt.current; }
	EOF;

// Rule Subprog_Ctrl_Stmt
ruleSubprog_Ctrl_Stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSubprog_Ctrl_StmtAccess().getFunc_CallParserRuleCall_0());
		}
		this_Func_Call_0=ruleFunc_Call
		{
			$current = $this_Func_Call_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSubprog_Ctrl_StmtAccess().getFB_CallParserRuleCall_1());
		}
		this_FB_Call_1=ruleFB_Call
		{
			$current = $this_FB_Call_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSubprog_Ctrl_StmtAccess().getSuperStatementAction_2_0(),
						$current);
				}
			)
			otherlv_3=SUPER
			{
				newLeafNode(otherlv_3, grammarAccess.getSubprog_Ctrl_StmtAccess().getSUPERKeyword_2_1());
			}
			otherlv_4=LeftParenthesis
			{
				newLeafNode(otherlv_4, grammarAccess.getSubprog_Ctrl_StmtAccess().getLeftParenthesisKeyword_2_2());
			}
			otherlv_5=RightParenthesis
			{
				newLeafNode(otherlv_5, grammarAccess.getSubprog_Ctrl_StmtAccess().getRightParenthesisKeyword_2_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSubprog_Ctrl_StmtAccess().getReturnStatementAction_3_0(),
						$current);
				}
			)
			otherlv_7=RETURN
			{
				newLeafNode(otherlv_7, grammarAccess.getSubprog_Ctrl_StmtAccess().getRETURNKeyword_3_1());
			}
		)
	)
;

// Entry rule entryRuleFB_Call
entryRuleFB_Call returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFB_CallRule()); }
	iv_ruleFB_Call=ruleFB_Call
	{ $current=$iv_ruleFB_Call.current; }
	EOF;

// Rule FB_Call
ruleFB_Call returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFB_CallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getFB_CallAccess().getFbFBCrossReference_0_0());
				}
			)
		)
		otherlv_1=FullStop
		{
			newLeafNode(otherlv_1, grammarAccess.getFB_CallAccess().getFullStopKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFB_CallRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getFB_CallAccess().getEventEventCrossReference_2_0());
				}
			)
		)
		otherlv_3=LeftParenthesis
		{
			newLeafNode(otherlv_3, grammarAccess.getFB_CallAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFB_CallAccess().getArgsParam_AssignParserRuleCall_4_0_0());
					}
					lv_args_4_0=ruleParam_Assign
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFB_CallRule());
						}
						add(
							$current,
							"args",
							lv_args_4_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Param_Assign");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=Comma
				{
					newLeafNode(otherlv_5, grammarAccess.getFB_CallAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFB_CallAccess().getArgsParam_AssignParserRuleCall_4_1_1_0());
						}
						lv_args_6_0=ruleParam_Assign
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFB_CallRule());
							}
							add(
								$current,
								"args",
								lv_args_6_0,
								"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Param_Assign");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7=RightParenthesis
		{
			newLeafNode(otherlv_7, grammarAccess.getFB_CallAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleSelection_Stmt
entryRuleSelection_Stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelection_StmtRule()); }
	iv_ruleSelection_Stmt=ruleSelection_Stmt
	{ $current=$iv_ruleSelection_Stmt.current; }
	EOF;

// Rule Selection_Stmt
ruleSelection_Stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSelection_StmtAccess().getIF_StmtParserRuleCall_0());
		}
		this_IF_Stmt_0=ruleIF_Stmt
		{
			$current = $this_IF_Stmt_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSelection_StmtAccess().getCase_StmtParserRuleCall_1());
		}
		this_Case_Stmt_1=ruleCase_Stmt
		{
			$current = $this_Case_Stmt_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIF_Stmt
entryRuleIF_Stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIF_StmtRule()); }
	iv_ruleIF_Stmt=ruleIF_Stmt
	{ $current=$iv_ruleIF_Stmt.current; }
	EOF;

// Rule IF_Stmt
ruleIF_Stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=IF
		{
			newLeafNode(otherlv_0, grammarAccess.getIF_StmtAccess().getIFKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIF_StmtAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIF_StmtRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=THEN
		{
			newLeafNode(otherlv_2, grammarAccess.getIF_StmtAccess().getTHENKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIF_StmtAccess().getStatmentsStmt_ListParserRuleCall_3_0());
				}
				lv_statments_3_0=ruleStmt_List
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIF_StmtRule());
					}
					set(
						$current,
						"statments",
						lv_statments_3_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Stmt_List");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIF_StmtAccess().getElseifELSIF_ClauseParserRuleCall_4_0());
				}
				lv_elseif_4_0=ruleELSIF_Clause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIF_StmtRule());
					}
					add(
						$current,
						"elseif",
						lv_elseif_4_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.ELSIF_Clause");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getIF_StmtAccess().getElseELSE_ClauseParserRuleCall_5_0());
				}
				lv_else_5_0=ruleELSE_Clause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIF_StmtRule());
					}
					set(
						$current,
						"else",
						lv_else_5_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.ELSE_Clause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_6=END_IF
		{
			newLeafNode(otherlv_6, grammarAccess.getIF_StmtAccess().getEND_IFKeyword_6());
		}
	)
;

// Entry rule entryRuleELSIF_Clause
entryRuleELSIF_Clause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getELSIF_ClauseRule()); }
	iv_ruleELSIF_Clause=ruleELSIF_Clause
	{ $current=$iv_ruleELSIF_Clause.current; }
	EOF;

// Rule ELSIF_Clause
ruleELSIF_Clause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=ELSIF
		{
			newLeafNode(otherlv_0, grammarAccess.getELSIF_ClauseAccess().getELSIFKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getELSIF_ClauseAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getELSIF_ClauseRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=THEN
		{
			newLeafNode(otherlv_2, grammarAccess.getELSIF_ClauseAccess().getTHENKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getELSIF_ClauseAccess().getStatementsStmt_ListParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStmt_List
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getELSIF_ClauseRule());
					}
					set(
						$current,
						"statements",
						lv_statements_3_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Stmt_List");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleELSE_Clause
entryRuleELSE_Clause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getELSE_ClauseRule()); }
	iv_ruleELSE_Clause=ruleELSE_Clause
	{ $current=$iv_ruleELSE_Clause.current; }
	EOF;

// Rule ELSE_Clause
ruleELSE_Clause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=ELSE
		{
			newLeafNode(otherlv_0, grammarAccess.getELSE_ClauseAccess().getELSEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getELSE_ClauseAccess().getStatementsStmt_ListParserRuleCall_1_0());
				}
				lv_statements_1_0=ruleStmt_List
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getELSE_ClauseRule());
					}
					set(
						$current,
						"statements",
						lv_statements_1_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Stmt_List");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCase_Stmt
entryRuleCase_Stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCase_StmtRule()); }
	iv_ruleCase_Stmt=ruleCase_Stmt
	{ $current=$iv_ruleCase_Stmt.current; }
	EOF;

// Rule Case_Stmt
ruleCase_Stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=CASE
		{
			newLeafNode(otherlv_0, grammarAccess.getCase_StmtAccess().getCASEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCase_StmtAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCase_StmtRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=OF
		{
			newLeafNode(otherlv_2, grammarAccess.getCase_StmtAccess().getOFKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCase_StmtAccess().getCaseCase_SelectionParserRuleCall_3_0());
				}
				lv_case_3_0=ruleCase_Selection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCase_StmtRule());
					}
					add(
						$current,
						"case",
						lv_case_3_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Case_Selection");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getCase_StmtAccess().getElseELSE_ClauseParserRuleCall_4_0());
				}
				lv_else_4_0=ruleELSE_Clause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCase_StmtRule());
					}
					set(
						$current,
						"else",
						lv_else_4_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.ELSE_Clause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=END_CASE
		{
			newLeafNode(otherlv_5, grammarAccess.getCase_StmtAccess().getEND_CASEKeyword_5());
		}
	)
;

// Entry rule entryRuleCase_Selection
entryRuleCase_Selection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCase_SelectionRule()); }
	iv_ruleCase_Selection=ruleCase_Selection
	{ $current=$iv_ruleCase_Selection.current; }
	EOF;

// Rule Case_Selection
ruleCase_Selection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCase_SelectionAccess().getCaseConstantParserRuleCall_0_0());
				}
				lv_case_0_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCase_SelectionRule());
					}
					add(
						$current,
						"case",
						lv_case_0_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=Comma
			{
				newLeafNode(otherlv_1, grammarAccess.getCase_SelectionAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCase_SelectionAccess().getCaseConstantParserRuleCall_1_1_0());
					}
					lv_case_2_0=ruleConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCase_SelectionRule());
						}
						add(
							$current,
							"case",
							lv_case_2_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_3=Colon
		{
			newLeafNode(otherlv_3, grammarAccess.getCase_SelectionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCase_SelectionAccess().getStatementsStmt_ListParserRuleCall_3_0());
				}
				lv_statements_4_0=ruleStmt_List
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCase_SelectionRule());
					}
					set(
						$current,
						"statements",
						lv_statements_4_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Stmt_List");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIteration_Stmt
entryRuleIteration_Stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIteration_StmtRule()); }
	iv_ruleIteration_Stmt=ruleIteration_Stmt
	{ $current=$iv_ruleIteration_Stmt.current; }
	EOF;

// Rule Iteration_Stmt
ruleIteration_Stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIteration_StmtAccess().getFor_StmtParserRuleCall_0());
		}
		this_For_Stmt_0=ruleFor_Stmt
		{
			$current = $this_For_Stmt_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIteration_StmtAccess().getWhile_StmtParserRuleCall_1());
		}
		this_While_Stmt_1=ruleWhile_Stmt
		{
			$current = $this_While_Stmt_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIteration_StmtAccess().getRepeat_StmtParserRuleCall_2());
		}
		this_Repeat_Stmt_2=ruleRepeat_Stmt
		{
			$current = $this_Repeat_Stmt_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getIteration_StmtAccess().getExitStatementAction_3_0(),
						$current);
				}
			)
			otherlv_4=EXIT
			{
				newLeafNode(otherlv_4, grammarAccess.getIteration_StmtAccess().getEXITKeyword_3_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getIteration_StmtAccess().getContinueStatementAction_4_0(),
						$current);
				}
			)
			otherlv_6=CONTINUE
			{
				newLeafNode(otherlv_6, grammarAccess.getIteration_StmtAccess().getCONTINUEKeyword_4_1());
			}
		)
	)
;

// Entry rule entryRuleFor_Stmt
entryRuleFor_Stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFor_StmtRule()); }
	iv_ruleFor_Stmt=ruleFor_Stmt
	{ $current=$iv_ruleFor_Stmt.current; }
	EOF;

// Rule For_Stmt
ruleFor_Stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=FOR
		{
			newLeafNode(otherlv_0, grammarAccess.getFor_StmtAccess().getFORKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFor_StmtAccess().getVariableVariable_PrimaryParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleVariable_Primary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFor_StmtRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Variable_Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=ColonEqualsSign
		{
			newLeafNode(otherlv_2, grammarAccess.getFor_StmtAccess().getColonEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFor_StmtAccess().getFromExpressionParserRuleCall_3_0());
				}
				lv_from_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFor_StmtRule());
					}
					set(
						$current,
						"from",
						lv_from_3_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=TO
		{
			newLeafNode(otherlv_4, grammarAccess.getFor_StmtAccess().getTOKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFor_StmtAccess().getToExpressionParserRuleCall_5_0());
				}
				lv_to_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFor_StmtRule());
					}
					set(
						$current,
						"to",
						lv_to_5_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=BY
			{
				newLeafNode(otherlv_6, grammarAccess.getFor_StmtAccess().getBYKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFor_StmtAccess().getByExpressionParserRuleCall_6_1_0());
					}
					lv_by_7_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFor_StmtRule());
						}
						set(
							$current,
							"by",
							lv_by_7_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8=DO
		{
			newLeafNode(otherlv_8, grammarAccess.getFor_StmtAccess().getDOKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFor_StmtAccess().getStatementsStmt_ListParserRuleCall_8_0());
				}
				lv_statements_9_0=ruleStmt_List
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFor_StmtRule());
					}
					set(
						$current,
						"statements",
						lv_statements_9_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Stmt_List");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=END_FOR
		{
			newLeafNode(otherlv_10, grammarAccess.getFor_StmtAccess().getEND_FORKeyword_9());
		}
	)
;

// Entry rule entryRuleWhile_Stmt
entryRuleWhile_Stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhile_StmtRule()); }
	iv_ruleWhile_Stmt=ruleWhile_Stmt
	{ $current=$iv_ruleWhile_Stmt.current; }
	EOF;

// Rule While_Stmt
ruleWhile_Stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=WHILE
		{
			newLeafNode(otherlv_0, grammarAccess.getWhile_StmtAccess().getWHILEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhile_StmtAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhile_StmtRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=DO
		{
			newLeafNode(otherlv_2, grammarAccess.getWhile_StmtAccess().getDOKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhile_StmtAccess().getStatementsStmt_ListParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStmt_List
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhile_StmtRule());
					}
					set(
						$current,
						"statements",
						lv_statements_3_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Stmt_List");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=END_WHILE
		{
			newLeafNode(otherlv_4, grammarAccess.getWhile_StmtAccess().getEND_WHILEKeyword_4());
		}
	)
;

// Entry rule entryRuleRepeat_Stmt
entryRuleRepeat_Stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeat_StmtRule()); }
	iv_ruleRepeat_Stmt=ruleRepeat_Stmt
	{ $current=$iv_ruleRepeat_Stmt.current; }
	EOF;

// Rule Repeat_Stmt
ruleRepeat_Stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=REPEAT
		{
			newLeafNode(otherlv_0, grammarAccess.getRepeat_StmtAccess().getREPEATKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeat_StmtAccess().getStatementsStmt_ListParserRuleCall_1_0());
				}
				lv_statements_1_0=ruleStmt_List
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeat_StmtRule());
					}
					set(
						$current,
						"statements",
						lv_statements_1_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Stmt_List");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=UNTIL
		{
			newLeafNode(otherlv_2, grammarAccess.getRepeat_StmtAccess().getUNTILKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeat_StmtAccess().getExpressionExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeat_StmtRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=END_REPEAT
		{
			newLeafNode(otherlv_4, grammarAccess.getRepeat_StmtAccess().getEND_REPEATKeyword_4());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getOr_ExpressionParserRuleCall());
	}
	this_Or_Expression_0=ruleOr_Expression
	{
		$current = $this_Or_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOr_Expression
entryRuleOr_Expression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOr_ExpressionRule()); }
	iv_ruleOr_Expression=ruleOr_Expression
	{ $current=$iv_ruleOr_Expression.current; }
	EOF;

// Rule Or_Expression
ruleOr_Expression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOr_ExpressionAccess().getXor_ExprParserRuleCall_0());
		}
		this_Xor_Expr_0=ruleXor_Expr
		{
			$current = $this_Xor_Expr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOr_ExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOr_ExpressionAccess().getOperatorOr_OperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleOr_Operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOr_ExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Or_Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOr_ExpressionAccess().getRightXor_ExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXor_Expr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOr_ExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Xor_Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXor_Expr
entryRuleXor_Expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXor_ExprRule()); }
	iv_ruleXor_Expr=ruleXor_Expr
	{ $current=$iv_ruleXor_Expr.current; }
	EOF;

// Rule Xor_Expr
ruleXor_Expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXor_ExprAccess().getAnd_ExprParserRuleCall_0());
		}
		this_And_Expr_0=ruleAnd_Expr
		{
			$current = $this_And_Expr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXor_ExprAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXor_ExprAccess().getOperatorXor_OperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleXor_Operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXor_ExprRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Xor_Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXor_ExprAccess().getRightAnd_ExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd_Expr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXor_ExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.And_Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd_Expr
entryRuleAnd_Expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnd_ExprRule()); }
	iv_ruleAnd_Expr=ruleAnd_Expr
	{ $current=$iv_ruleAnd_Expr.current; }
	EOF;

// Rule And_Expr
ruleAnd_Expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAnd_ExprAccess().getCompare_ExprParserRuleCall_0());
		}
		this_Compare_Expr_0=ruleCompare_Expr
		{
			$current = $this_Compare_Expr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAnd_ExprAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAnd_ExprAccess().getOperatorAnd_OperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleAnd_Operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAnd_ExprRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.And_Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAnd_ExprAccess().getRightCompare_ExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleCompare_Expr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAnd_ExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Compare_Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCompare_Expr
entryRuleCompare_Expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompare_ExprRule()); }
	iv_ruleCompare_Expr=ruleCompare_Expr
	{ $current=$iv_ruleCompare_Expr.current; }
	EOF;

// Rule Compare_Expr
ruleCompare_Expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompare_ExprAccess().getEqu_ExprParserRuleCall_0());
		}
		this_Equ_Expr_0=ruleEqu_Expr
		{
			$current = $this_Equ_Expr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getCompare_ExprAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompare_ExprAccess().getOperatorCompare_OperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleCompare_Operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompare_ExprRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Compare_Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompare_ExprAccess().getRightEqu_ExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEqu_Expr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompare_ExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Equ_Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEqu_Expr
entryRuleEqu_Expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqu_ExprRule()); }
	iv_ruleEqu_Expr=ruleEqu_Expr
	{ $current=$iv_ruleEqu_Expr.current; }
	EOF;

// Rule Equ_Expr
ruleEqu_Expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqu_ExprAccess().getAdd_ExprParserRuleCall_0());
		}
		this_Add_Expr_0=ruleAdd_Expr
		{
			$current = $this_Add_Expr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqu_ExprAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqu_ExprAccess().getOperatorEqu_OperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleEqu_Operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqu_ExprRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Equ_Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqu_ExprAccess().getRightAdd_ExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAdd_Expr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqu_ExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Add_Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAdd_Expr
entryRuleAdd_Expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdd_ExprRule()); }
	iv_ruleAdd_Expr=ruleAdd_Expr
	{ $current=$iv_ruleAdd_Expr.current; }
	EOF;

// Rule Add_Expr
ruleAdd_Expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdd_ExprAccess().getTermParserRuleCall_0());
		}
		this_Term_0=ruleTerm
		{
			$current = $this_Term_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdd_ExprAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdd_ExprAccess().getOperatorAdd_OperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleAdd_Operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdd_ExprRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Add_Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdd_ExprAccess().getRightTermParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdd_ExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTermAccess().getPower_ExprParserRuleCall_0());
		}
		this_Power_Expr_0=rulePower_Expr
		{
			$current = $this_Power_Expr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getTermAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getOperatorTerm_OperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleTerm_Operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Term_Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getRightPower_ExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePower_Expr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Power_Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePower_Expr
entryRulePower_Expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPower_ExprRule()); }
	iv_rulePower_Expr=rulePower_Expr
	{ $current=$iv_rulePower_Expr.current; }
	EOF;

// Rule Power_Expr
rulePower_Expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPower_ExprAccess().getUnary_ExprParserRuleCall_0());
		}
		this_Unary_Expr_0=ruleUnary_Expr
		{
			$current = $this_Unary_Expr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPower_ExprAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPower_ExprAccess().getOperatorPower_OperatorEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=rulePower_Operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPower_ExprRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Power_Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPower_ExprAccess().getRightUnary_ExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleUnary_Expr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPower_ExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Unary_Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnary_Expr
entryRuleUnary_Expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnary_ExprRule()); }
	iv_ruleUnary_Expr=ruleUnary_Expr
	{ $current=$iv_ruleUnary_Expr.current; }
	EOF;

// Rule Unary_Expr
ruleUnary_Expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnary_ExprAccess().getUnaryExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnary_ExprAccess().getOperatorUnary_OperatorEnumRuleCall_0_1_0());
					}
					lv_operator_1_0=ruleUnary_Operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnary_ExprRule());
						}
						set(
							$current,
							"operator",
							lv_operator_1_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Unary_Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnary_ExprAccess().getExpressionPrimary_ExprParserRuleCall_0_2_0());
					}
					lv_expression_2_0=rulePrimary_Expr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnary_ExprRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Primary_Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getUnary_ExprAccess().getPrimary_ExprParserRuleCall_1());
		}
		this_Primary_Expr_3=rulePrimary_Expr
		{
			$current = $this_Primary_Expr_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnary_ExprAccess().getConstantParserRuleCall_2());
		}
		this_Constant_4=ruleConstant
		{
			$current = $this_Constant_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimary_Expr
entryRulePrimary_Expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimary_ExprRule()); }
	iv_rulePrimary_Expr=rulePrimary_Expr
	{ $current=$iv_rulePrimary_Expr.current; }
	EOF;

// Rule Primary_Expr
rulePrimary_Expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimary_ExprAccess().getVariableParserRuleCall_0());
		}
		this_Variable_0=ruleVariable
		{
			$current = $this_Variable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimary_ExprAccess().getFunc_CallParserRuleCall_1());
		}
		this_Func_Call_1=ruleFunc_Call
		{
			$current = $this_Func_Call_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_2=LeftParenthesis
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimary_ExprAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimary_ExprAccess().getExpressionParserRuleCall_2_1());
			}
			this_Expression_3=ruleExpression
			{
				$current = $this_Expression_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=RightParenthesis
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimary_ExprAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleFunc_Call
entryRuleFunc_Call returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunc_CallRule()); }
	iv_ruleFunc_Call=ruleFunc_Call
	{ $current=$iv_ruleFunc_Call.current; }
	EOF;

// Rule Func_Call
ruleFunc_Call returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_func_0_1=RULE_ID
					{
						newLeafNode(lv_func_0_1, grammarAccess.getFunc_CallAccess().getFuncIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunc_CallRule());
						}
						setWithLastConsumed(
							$current,
							"func",
							lv_func_0_1,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.ID");
					}
					    |
					lv_func_0_2=TIME
					{
						newLeafNode(lv_func_0_2, grammarAccess.getFunc_CallAccess().getFuncTIMEKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunc_CallRule());
						}
						setWithLastConsumed($current, "func", lv_func_0_2, null);
					}
				)
			)
		)
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getFunc_CallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunc_CallAccess().getArgsParam_AssignParserRuleCall_2_0_0());
					}
					lv_args_2_0=ruleParam_Assign
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunc_CallRule());
						}
						add(
							$current,
							"args",
							lv_args_2_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Param_Assign");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=Comma
				{
					newLeafNode(otherlv_3, grammarAccess.getFunc_CallAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunc_CallAccess().getArgsParam_AssignParserRuleCall_2_1_1_0());
						}
						lv_args_4_0=ruleParam_Assign
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunc_CallRule());
							}
							add(
								$current,
								"args",
								lv_args_4_0,
								"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Param_Assign");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=RightParenthesis
		{
			newLeafNode(otherlv_5, grammarAccess.getFunc_CallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleParam_Assign
entryRuleParam_Assign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParam_AssignRule()); }
	iv_ruleParam_Assign=ruleParam_Assign
	{ $current=$iv_ruleParam_Assign.current; }
	EOF;

// Rule Param_Assign
ruleParam_Assign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParam_AssignAccess().getParam_Assign_InParserRuleCall_0());
		}
		this_Param_Assign_In_0=ruleParam_Assign_In
		{
			$current = $this_Param_Assign_In_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getParam_AssignAccess().getParam_Assign_OutParserRuleCall_1());
		}
		this_Param_Assign_Out_1=ruleParam_Assign_Out
		{
			$current = $this_Param_Assign_Out_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParam_Assign_In
entryRuleParam_Assign_In returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParam_Assign_InRule()); }
	iv_ruleParam_Assign_In=ruleParam_Assign_In
	{ $current=$iv_ruleParam_Assign_In.current; }
	EOF;

// Rule Param_Assign_In
ruleParam_Assign_In returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_var_0_0=RULE_ID
					{
						newLeafNode(lv_var_0_0, grammarAccess.getParam_Assign_InAccess().getVarIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParam_Assign_InRule());
						}
						setWithLastConsumed(
							$current,
							"var",
							lv_var_0_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.ID");
					}
				)
			)
			otherlv_1=ColonEqualsSign
			{
				newLeafNode(otherlv_1, grammarAccess.getParam_Assign_InAccess().getColonEqualsSignKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getParam_Assign_InAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParam_Assign_InRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParam_Assign_Out
entryRuleParam_Assign_Out returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParam_Assign_OutRule()); }
	iv_ruleParam_Assign_Out=ruleParam_Assign_Out
	{ $current=$iv_ruleParam_Assign_Out.current; }
	EOF;

// Rule Param_Assign_Out
ruleParam_Assign_Out returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_not_0_0=NOT
				{
					newLeafNode(lv_not_0_0, grammarAccess.getParam_Assign_OutAccess().getNotNOTKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParam_Assign_OutRule());
					}
					setWithLastConsumed($current, "not", lv_not_0_0 != null, "NOT");
				}
			)
		)?
		(
			(
				lv_var_1_0=RULE_ID
				{
					newLeafNode(lv_var_1_0, grammarAccess.getParam_Assign_OutAccess().getVarIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParam_Assign_OutRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_1_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.ID");
				}
			)
		)
		otherlv_2=EqualsSignGreaterThanSign
		{
			newLeafNode(otherlv_2, grammarAccess.getParam_Assign_OutAccess().getEqualsSignGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParam_Assign_OutAccess().getExprVariableParserRuleCall_3_0());
				}
				lv_expr_3_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParam_Assign_OutRule());
					}
					set(
						$current,
						"expr",
						lv_expr_3_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableAccess().getVariable_SubscriptParserRuleCall_0());
		}
		this_Variable_Subscript_0=ruleVariable_Subscript
		{
			$current = $this_Variable_Subscript_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getPartMultibit_Part_AccessParserRuleCall_1_0());
				}
				lv_part_1_0=ruleMultibit_Part_Access
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"part",
						lv_part_1_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Multibit_Part_Access");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleVariable_Subscript
entryRuleVariable_Subscript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_SubscriptRule()); }
	iv_ruleVariable_Subscript=ruleVariable_Subscript
	{ $current=$iv_ruleVariable_Subscript.current; }
	EOF;

// Rule Variable_Subscript
ruleVariable_Subscript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getVariable_SubscriptAccess().getVariable_PrimaryParserRuleCall_0_0());
			}
			this_Variable_Primary_0=ruleVariable_Primary
			{
				$current = $this_Variable_Primary_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getVariable_SubscriptAccess().getVariable_AdapterParserRuleCall_0_1());
			}
			this_Variable_Adapter_1=ruleVariable_Adapter
			{
				$current = $this_Variable_Adapter_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getVariable_SubscriptAccess().getArrayVariableArrayAction_1_0(),
						$current);
				}
			)
			otherlv_3=LeftSquareBracket
			{
				newLeafNode(otherlv_3, grammarAccess.getVariable_SubscriptAccess().getLeftSquareBracketKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariable_SubscriptAccess().getIndexExpressionParserRuleCall_1_2_0());
					}
					lv_index_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariable_SubscriptRule());
						}
						add(
							$current,
							"index",
							lv_index_4_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=Comma
				{
					newLeafNode(otherlv_5, grammarAccess.getVariable_SubscriptAccess().getCommaKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVariable_SubscriptAccess().getIndexExpressionParserRuleCall_1_3_1_0());
						}
						lv_index_6_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVariable_SubscriptRule());
							}
							add(
								$current,
								"index",
								lv_index_6_0,
								"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7=RightSquareBracket
			{
				newLeafNode(otherlv_7, grammarAccess.getVariable_SubscriptAccess().getRightSquareBracketKeyword_1_4());
			}
		)?
	)
;

// Entry rule entryRuleVariable_Adapter
entryRuleVariable_Adapter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_AdapterRule()); }
	iv_ruleVariable_Adapter=ruleVariable_Adapter
	{ $current=$iv_ruleVariable_Adapter.current; }
	EOF;

// Rule Variable_Adapter
ruleVariable_Adapter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariable_AdapterAccess().getAdapterRootParserRuleCall_0());
		}
		this_AdapterRoot_0=ruleAdapterRoot
		{
			$current = $this_AdapterRoot_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getVariable_AdapterAccess().getAdapterVariableCurrAction_1_0(),
						$current);
				}
			)
			otherlv_2=FullStop
			{
				newLeafNode(otherlv_2, grammarAccess.getVariable_AdapterAccess().getFullStopKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariable_AdapterRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getVariable_AdapterAccess().getVarVarDeclarationCrossReference_1_2_0());
					}
					ruleVariable_Name
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleAdapterRoot
entryRuleAdapterRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdapterRootRule()); }
	iv_ruleAdapterRoot=ruleAdapterRoot
	{ $current=$iv_ruleAdapterRoot.current; }
	EOF;

// Rule AdapterRoot
ruleAdapterRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAdapterRootAccess().getAdapterRootAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAdapterRootRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAdapterRootAccess().getAdapterVarDeclarationCrossReference_1_0());
				}
				ruleAdapter_Name
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMultibit_Part_Access
entryRuleMultibit_Part_Access returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultibit_Part_AccessRule()); }
	iv_ruleMultibit_Part_Access=ruleMultibit_Part_Access
	{ $current=$iv_ruleMultibit_Part_Access.current; }
	EOF;

// Rule Multibit_Part_Access
ruleMultibit_Part_Access returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_dwordaccess_0_0=D
					{
						newLeafNode(lv_dwordaccess_0_0, grammarAccess.getMultibit_Part_AccessAccess().getDwordaccessDKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultibit_Part_AccessRule());
						}
						setWithLastConsumed($current, "dwordaccess", lv_dwordaccess_0_0 != null, ".\%D");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultibit_Part_AccessAccess().getIndexPartial_ValueParserRuleCall_0_1_0());
					}
					lv_index_1_0=rulePartial_Value
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultibit_Part_AccessRule());
						}
						set(
							$current,
							"index",
							lv_index_1_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Partial_Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_wordaccess_2_0=W
					{
						newLeafNode(lv_wordaccess_2_0, grammarAccess.getMultibit_Part_AccessAccess().getWordaccessWKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultibit_Part_AccessRule());
						}
						setWithLastConsumed($current, "wordaccess", lv_wordaccess_2_0 != null, ".\%W");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultibit_Part_AccessAccess().getIndexPartial_ValueParserRuleCall_1_1_0());
					}
					lv_index_3_0=rulePartial_Value
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultibit_Part_AccessRule());
						}
						set(
							$current,
							"index",
							lv_index_3_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Partial_Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_byteaccess_4_0=B
					{
						newLeafNode(lv_byteaccess_4_0, grammarAccess.getMultibit_Part_AccessAccess().getByteaccessBKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultibit_Part_AccessRule());
						}
						setWithLastConsumed($current, "byteaccess", lv_byteaccess_4_0 != null, ".\%B");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultibit_Part_AccessAccess().getIndexPartial_ValueParserRuleCall_2_1_0());
					}
					lv_index_5_0=rulePartial_Value
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultibit_Part_AccessRule());
						}
						set(
							$current,
							"index",
							lv_index_5_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Partial_Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_bitaccess_6_0=X
					{
						newLeafNode(lv_bitaccess_6_0, grammarAccess.getMultibit_Part_AccessAccess().getBitaccessXKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultibit_Part_AccessRule());
						}
						setWithLastConsumed($current, "bitaccess", lv_bitaccess_6_0 != null, ".\%X");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultibit_Part_AccessAccess().getIndexPartial_ValueParserRuleCall_3_1_0());
					}
					lv_index_7_0=rulePartial_Value
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultibit_Part_AccessRule());
						}
						set(
							$current,
							"index",
							lv_index_7_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Partial_Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_bitaccess_8_0=FullStop
					{
						newLeafNode(lv_bitaccess_8_0, grammarAccess.getMultibit_Part_AccessAccess().getBitaccessFullStopKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMultibit_Part_AccessRule());
						}
						setWithLastConsumed($current, "bitaccess", lv_bitaccess_8_0 != null, ".");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultibit_Part_AccessAccess().getIndexPartial_ValueParserRuleCall_4_1_0());
					}
					lv_index_9_0=rulePartial_Value
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultibit_Part_AccessRule());
						}
						set(
							$current,
							"index",
							lv_index_9_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Partial_Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAdapter_Name
entryRuleAdapter_Name returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAdapter_NameRule()); }
	iv_ruleAdapter_Name=ruleAdapter_Name
	{ $current=$iv_ruleAdapter_Name.current.getText(); }
	EOF;

// Rule Adapter_Name
ruleAdapter_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getAdapter_NameAccess().getIDTerminalRuleCall_0());
		}
		    |
		kw=T
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdapter_NameAccess().getTKeyword_1());
		}
		    |
		kw=LT
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdapter_NameAccess().getLTKeyword_2());
		}
		    |
		kw=DT
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdapter_NameAccess().getDTKeyword_3());
		}
	)
;

// Entry rule entryRuleVariable_Primary
entryRuleVariable_Primary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_PrimaryRule()); }
	iv_ruleVariable_Primary=ruleVariable_Primary
	{ $current=$iv_ruleVariable_Primary.current; }
	EOF;

// Rule Variable_Primary
ruleVariable_Primary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariable_PrimaryRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getVariable_PrimaryAccess().getVarVarDeclarationCrossReference_0());
			}
			ruleVariable_Name
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleVariable_Name
entryRuleVariable_Name returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVariable_NameRule()); }
	iv_ruleVariable_Name=ruleVariable_Name
	{ $current=$iv_ruleVariable_Name.current.getText(); }
	EOF;

// Rule Variable_Name
ruleVariable_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getVariable_NameAccess().getIDTerminalRuleCall_0());
		}
		    |
		kw=T
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariable_NameAccess().getTKeyword_1());
		}
		    |
		kw=LT
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariable_NameAccess().getLTKeyword_2());
		}
		    |
		kw=DT
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariable_NameAccess().getDTKeyword_3());
		}
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstantAccess().getNumeric_LiteralParserRuleCall_0());
		}
		this_Numeric_Literal_0=ruleNumeric_Literal
		{
			$current = $this_Numeric_Literal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getChar_LiteralParserRuleCall_1());
		}
		this_Char_Literal_1=ruleChar_Literal
		{
			$current = $this_Char_Literal_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getTime_LiteralParserRuleCall_2());
		}
		this_Time_Literal_2=ruleTime_Literal
		{
			$current = $this_Time_Literal_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getBool_LiteralParserRuleCall_3());
		}
		this_Bool_Literal_3=ruleBool_Literal
		{
			$current = $this_Bool_Literal_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumeric_Literal
entryRuleNumeric_Literal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumeric_LiteralRule()); }
	iv_ruleNumeric_Literal=ruleNumeric_Literal
	{ $current=$iv_ruleNumeric_Literal.current; }
	EOF;

// Rule Numeric_Literal
ruleNumeric_Literal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumeric_LiteralAccess().getInt_LiteralParserRuleCall_0());
		}
		this_Int_Literal_0=ruleInt_Literal
		{
			$current = $this_Int_Literal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumeric_LiteralAccess().getReal_LiteralParserRuleCall_1());
		}
		this_Real_Literal_1=ruleReal_Literal
		{
			$current = $this_Real_Literal_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInt_Literal
entryRuleInt_Literal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInt_LiteralRule()); }
	iv_ruleInt_Literal=ruleInt_Literal
	{ $current=$iv_ruleInt_Literal.current; }
	EOF;

// Rule Int_Literal
ruleInt_Literal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getInt_LiteralAccess().getTypeInt_Type_NameEnumRuleCall_0_0_0());
					}
					lv_type_0_0=ruleInt_Type_Name
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInt_LiteralRule());
						}
						set(
							$current,
							"type",
							lv_type_0_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Int_Type_Name");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=NumberSign
			{
				newLeafNode(otherlv_1, grammarAccess.getInt_LiteralAccess().getNumberSignKeyword_0_1());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getInt_LiteralAccess().getValueSigned_IntParserRuleCall_1_0_0());
					}
					lv_value_2_1=ruleSigned_Int
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInt_LiteralRule());
						}
						set(
							$current,
							"value",
							lv_value_2_1,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Signed_Int");
						afterParserOrEnumRuleCall();
					}
					    |
					lv_value_2_2=RULE_BINARY_INT
					{
						newLeafNode(lv_value_2_2, grammarAccess.getInt_LiteralAccess().getValueBINARY_INTTerminalRuleCall_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInt_LiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_2,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.BINARY_INT");
					}
					    |
					lv_value_2_3=RULE_OCTAL_INT
					{
						newLeafNode(lv_value_2_3, grammarAccess.getInt_LiteralAccess().getValueOCTAL_INTTerminalRuleCall_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInt_LiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_3,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.OCTAL_INT");
					}
					    |
					lv_value_2_4=RULE_HEX_INT
					{
						newLeafNode(lv_value_2_4, grammarAccess.getInt_LiteralAccess().getValueHEX_INTTerminalRuleCall_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInt_LiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_4,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.HEX_INT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSigned_Int
entryRuleSigned_Int returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSigned_IntRule()); }
	iv_ruleSigned_Int=ruleSigned_Int
	{ $current=$iv_ruleSigned_Int.current.getText(); }
	EOF;

// Rule Signed_Int
ruleSigned_Int returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=PlusSign
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSigned_IntAccess().getPlusSignKeyword_0_0());
			}
			    |
			kw=HyphenMinus
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSigned_IntAccess().getHyphenMinusKeyword_0_1());
			}
		)?
		this_UNSIGNED_INT_2=RULE_UNSIGNED_INT
		{
			$current.merge(this_UNSIGNED_INT_2);
		}
		{
			newLeafNode(this_UNSIGNED_INT_2, grammarAccess.getSigned_IntAccess().getUNSIGNED_INTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulePartial_Value
entryRulePartial_Value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPartial_ValueRule()); }
	iv_rulePartial_Value=rulePartial_Value
	{ $current=$iv_rulePartial_Value.current.getText(); }
	EOF;

// Rule Partial_Value
rulePartial_Value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_UNSIGNED_INT_0=RULE_UNSIGNED_INT
	{
		$current.merge(this_UNSIGNED_INT_0);
	}
	{
		newLeafNode(this_UNSIGNED_INT_0, grammarAccess.getPartial_ValueAccess().getUNSIGNED_INTTerminalRuleCall());
	}
;

// Entry rule entryRuleArray_Size
entryRuleArray_Size returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArray_SizeRule()); }
	iv_ruleArray_Size=ruleArray_Size
	{ $current=$iv_ruleArray_Size.current.getText(); }
	EOF;

// Rule Array_Size
ruleArray_Size returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_UNSIGNED_INT_0=RULE_UNSIGNED_INT
	{
		$current.merge(this_UNSIGNED_INT_0);
	}
	{
		newLeafNode(this_UNSIGNED_INT_0, grammarAccess.getArray_SizeAccess().getUNSIGNED_INTTerminalRuleCall());
	}
;

// Entry rule entryRuleReal_Literal
entryRuleReal_Literal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReal_LiteralRule()); }
	iv_ruleReal_Literal=ruleReal_Literal
	{ $current=$iv_ruleReal_Literal.current; }
	EOF;

// Rule Real_Literal
ruleReal_Literal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getReal_LiteralAccess().getTypeReal_Type_NameEnumRuleCall_0_0_0());
					}
					lv_type_0_0=ruleReal_Type_Name
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReal_LiteralRule());
						}
						set(
							$current,
							"type",
							lv_type_0_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Real_Type_Name");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=NumberSign
			{
				newLeafNode(otherlv_1, grammarAccess.getReal_LiteralAccess().getNumberSignKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getReal_LiteralAccess().getValueReal_ValueParserRuleCall_1_0());
				}
				lv_value_2_0=ruleReal_Value
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReal_LiteralRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Real_Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReal_Value
entryRuleReal_Value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReal_ValueRule()); }
	iv_ruleReal_Value=ruleReal_Value
	{ $current=$iv_ruleReal_Value.current.getText(); }
	EOF;

// Rule Real_Value
ruleReal_Value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getReal_ValueAccess().getSigned_IntParserRuleCall_0());
		}
		this_Signed_Int_0=ruleSigned_Int
		{
			$current.merge(this_Signed_Int_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=FullStop
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getReal_ValueAccess().getFullStopKeyword_1());
		}
		this_UNSIGNED_INT_2=RULE_UNSIGNED_INT
		{
			$current.merge(this_UNSIGNED_INT_2);
		}
		{
			newLeafNode(this_UNSIGNED_INT_2, grammarAccess.getReal_ValueAccess().getUNSIGNED_INTTerminalRuleCall_2());
		}
		(
			kw=E
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getReal_ValueAccess().getEKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getReal_ValueAccess().getSigned_IntParserRuleCall_3_1());
			}
			this_Signed_Int_4=ruleSigned_Int
			{
				$current.merge(this_Signed_Int_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleBool_Literal
entryRuleBool_Literal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBool_LiteralRule()); }
	iv_ruleBool_Literal=ruleBool_Literal
	{ $current=$iv_ruleBool_Literal.current; }
	EOF;

// Rule Bool_Literal
ruleBool_Literal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBool_LiteralAccess().getTypeBool_Type_NameEnumRuleCall_0_0_0());
					}
					lv_type_0_0=ruleBool_Type_Name
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBool_LiteralRule());
						}
						set(
							$current,
							"type",
							lv_type_0_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Bool_Type_Name");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=NumberSign
			{
				newLeafNode(otherlv_1, grammarAccess.getBool_LiteralAccess().getNumberSignKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBool_LiteralAccess().getValueBool_ValueParserRuleCall_1_0());
				}
				lv_value_2_0=ruleBool_Value
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBool_LiteralRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.Bool_Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBool_Value
entryRuleBool_Value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBool_ValueRule()); }
	iv_ruleBool_Value=ruleBool_Value
	{ $current=$iv_ruleBool_Value.current.getText(); }
	EOF;

// Rule Bool_Value
ruleBool_Value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=FALSE
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBool_ValueAccess().getFALSEKeyword_0());
		}
		    |
		kw=TRUE
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBool_ValueAccess().getTRUEKeyword_1());
		}
	)
;

// Entry rule entryRuleChar_Literal
entryRuleChar_Literal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChar_LiteralRule()); }
	iv_ruleChar_Literal=ruleChar_Literal
	{ $current=$iv_ruleChar_Literal.current; }
	EOF;

// Rule Char_Literal
ruleChar_Literal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getChar_LiteralAccess().getTypeString_Type_NameEnumRuleCall_0_0_0());
					}
					lv_type_0_0=ruleString_Type_Name
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChar_LiteralRule());
						}
						set(
							$current,
							"type",
							lv_type_0_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.String_Type_Name");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_length_1_0=RULE_UNSIGNED_INT
					{
						newLeafNode(lv_length_1_0, grammarAccess.getChar_LiteralAccess().getLengthUNSIGNED_INTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChar_LiteralRule());
						}
						setWithLastConsumed(
							$current,
							"length",
							lv_length_1_0,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.UNSIGNED_INT");
					}
				)
			)?
			otherlv_2=NumberSign
			{
				newLeafNode(otherlv_2, grammarAccess.getChar_LiteralAccess().getNumberSignKeyword_0_2());
			}
		)?
		(
			(
				(
					lv_value_3_1=RULE_S_BYTE_CHAR_STR
					{
						newLeafNode(lv_value_3_1, grammarAccess.getChar_LiteralAccess().getValueS_BYTE_CHAR_STRTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChar_LiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_1,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.S_BYTE_CHAR_STR");
					}
					    |
					lv_value_3_2=RULE_D_BYTE_CHAR_STR
					{
						newLeafNode(lv_value_3_2, grammarAccess.getChar_LiteralAccess().getValueD_BYTE_CHAR_STRTerminalRuleCall_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChar_LiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_2,
							"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.D_BYTE_CHAR_STR");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTime_Literal
entryRuleTime_Literal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTime_LiteralRule()); }
	iv_ruleTime_Literal=ruleTime_Literal
	{ $current=$iv_ruleTime_Literal.current; }
	EOF;

// Rule Time_Literal
ruleTime_Literal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_literal_0_1=RULE_TIME
				{
					newLeafNode(lv_literal_0_1, grammarAccess.getTime_LiteralAccess().getLiteralTIMETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTime_LiteralRule());
					}
					setWithLastConsumed(
						$current,
						"literal",
						lv_literal_0_1,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.TIME");
				}
				    |
				lv_literal_0_2=RULE_DATE
				{
					newLeafNode(lv_literal_0_2, grammarAccess.getTime_LiteralAccess().getLiteralDATETerminalRuleCall_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTime_LiteralRule());
					}
					setWithLastConsumed(
						$current,
						"literal",
						lv_literal_0_2,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.DATE");
				}
				    |
				lv_literal_0_3=RULE_TIMEOFDAY
				{
					newLeafNode(lv_literal_0_3, grammarAccess.getTime_LiteralAccess().getLiteralTIMEOFDAYTerminalRuleCall_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTime_LiteralRule());
					}
					setWithLastConsumed(
						$current,
						"literal",
						lv_literal_0_3,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.TIMEOFDAY");
				}
				    |
				lv_literal_0_4=RULE_DATETIME
				{
					newLeafNode(lv_literal_0_4, grammarAccess.getTime_LiteralAccess().getLiteralDATETIMETerminalRuleCall_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTime_LiteralRule());
					}
					setWithLastConsumed(
						$current,
						"literal",
						lv_literal_0_4,
						"org.eclipse.fordiac.ide.model.structuredtext.StructuredText.DATETIME");
				}
			)
		)
	)
;

// Entry rule entryRuleType_Name
entryRuleType_Name returns [String current=null]:
	{ newCompositeNode(grammarAccess.getType_NameRule()); }
	iv_ruleType_Name=ruleType_Name
	{ $current=$iv_ruleType_Name.current.getText(); }
	EOF;

// Rule Type_Name
ruleType_Name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getType_NameAccess().getIDTerminalRuleCall_0());
		}
		    |
		kw=DINT
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getDINTKeyword_1());
		}
		    |
		kw=INT
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getINTKeyword_2());
		}
		    |
		kw=SINT
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getSINTKeyword_3());
		}
		    |
		kw=LINT
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getLINTKeyword_4());
		}
		    |
		kw=UINT
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getUINTKeyword_5());
		}
		    |
		kw=USINT
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getUSINTKeyword_6());
		}
		    |
		kw=UDINT
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getUDINTKeyword_7());
		}
		    |
		kw=ULINT
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getULINTKeyword_8());
		}
		    |
		kw=REAL
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getREALKeyword_9());
		}
		    |
		kw=LREAL
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getLREALKeyword_10());
		}
		    |
		kw=STRING
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getSTRINGKeyword_11());
		}
		    |
		kw=WSTRING
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getWSTRINGKeyword_12());
		}
		    |
		kw=CHAR
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getCHARKeyword_13());
		}
		    |
		kw=WCHAR
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getWCHARKeyword_14());
		}
		    |
		kw=TIME
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getTIMEKeyword_15());
		}
		    |
		kw=LTIME
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getLTIMEKeyword_16());
		}
		    |
		kw=TIME_OF_DAY
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getTIME_OF_DAYKeyword_17());
		}
		    |
		kw=LTIME_OF_DAY
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getLTIME_OF_DAYKeyword_18());
		}
		    |
		kw=TOD
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getTODKeyword_19());
		}
		    |
		kw=LTOD
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getLTODKeyword_20());
		}
		    |
		kw=DATE
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getDATEKeyword_21());
		}
		    |
		kw=LDATE
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getLDATEKeyword_22());
		}
		    |
		kw=DATE_AND_TIME
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getDATE_AND_TIMEKeyword_23());
		}
		    |
		kw=LDATE_AND_TIME
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getLDATE_AND_TIMEKeyword_24());
		}
		    |
		kw=BOOL
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getBOOLKeyword_25());
		}
		    |
		kw=LWORD
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getLWORDKeyword_26());
		}
		    |
		kw=DWORD
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getDWORDKeyword_27());
		}
		    |
		kw=WORD
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getWORDKeyword_28());
		}
		    |
		kw=BYTE
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_NameAccess().getBYTEKeyword_29());
		}
	)
;

// Rule Or_Operator
ruleOr_Operator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=OR
		{
			$current = grammarAccess.getOr_OperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getOr_OperatorAccess().getOREnumLiteralDeclaration());
		}
	)
;

// Rule Xor_Operator
ruleXor_Operator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=XOR
		{
			$current = grammarAccess.getXor_OperatorAccess().getXOREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getXor_OperatorAccess().getXOREnumLiteralDeclaration());
		}
	)
;

// Rule And_Operator
ruleAnd_Operator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=AND
			{
				$current = grammarAccess.getAnd_OperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAnd_OperatorAccess().getANDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Ampersand
			{
				$current = grammarAccess.getAnd_OperatorAccess().getAMPERSANDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAnd_OperatorAccess().getAMPERSANDEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Compare_Operator
ruleCompare_Operator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=EqualsSign
			{
				$current = grammarAccess.getCompare_OperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompare_OperatorAccess().getEQEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=LessThanSignGreaterThanSign
			{
				$current = grammarAccess.getCompare_OperatorAccess().getNEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompare_OperatorAccess().getNEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Equ_Operator
ruleEqu_Operator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=LessThanSign
			{
				$current = grammarAccess.getEqu_OperatorAccess().getLTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEqu_OperatorAccess().getLTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=LessThanSignEqualsSign
			{
				$current = grammarAccess.getEqu_OperatorAccess().getLEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEqu_OperatorAccess().getLEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=GreaterThanSign
			{
				$current = grammarAccess.getEqu_OperatorAccess().getGTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEqu_OperatorAccess().getGTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=GreaterThanSignEqualsSign
			{
				$current = grammarAccess.getEqu_OperatorAccess().getGEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getEqu_OperatorAccess().getGEEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule Add_Operator
ruleAdd_Operator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=PlusSign
			{
				$current = grammarAccess.getAdd_OperatorAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAdd_OperatorAccess().getADDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=HyphenMinus
			{
				$current = grammarAccess.getAdd_OperatorAccess().getSUBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAdd_OperatorAccess().getSUBEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Term_Operator
ruleTerm_Operator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Asterisk
			{
				$current = grammarAccess.getTerm_OperatorAccess().getMULEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTerm_OperatorAccess().getMULEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Solidus
			{
				$current = grammarAccess.getTerm_OperatorAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTerm_OperatorAccess().getDIVEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=MOD
			{
				$current = grammarAccess.getTerm_OperatorAccess().getMODEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTerm_OperatorAccess().getMODEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Power_Operator
rulePower_Operator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=AsteriskAsterisk
		{
			$current = grammarAccess.getPower_OperatorAccess().getPOWEREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getPower_OperatorAccess().getPOWEREnumLiteralDeclaration());
		}
	)
;

// Rule Unary_Operator
ruleUnary_Operator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=HyphenMinus
			{
				$current = grammarAccess.getUnary_OperatorAccess().getMINUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnary_OperatorAccess().getMINUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=PlusSign
			{
				$current = grammarAccess.getUnary_OperatorAccess().getPLUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnary_OperatorAccess().getPLUSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=NOT
			{
				$current = grammarAccess.getUnary_OperatorAccess().getNOTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getUnary_OperatorAccess().getNOTEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Int_Type_Name
ruleInt_Type_Name returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=DINT
			{
				$current = grammarAccess.getInt_Type_NameAccess().getDINTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getInt_Type_NameAccess().getDINTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=INT
			{
				$current = grammarAccess.getInt_Type_NameAccess().getINTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getInt_Type_NameAccess().getINTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=SINT
			{
				$current = grammarAccess.getInt_Type_NameAccess().getSINTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getInt_Type_NameAccess().getSINTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=LINT
			{
				$current = grammarAccess.getInt_Type_NameAccess().getLINTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getInt_Type_NameAccess().getLINTEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4=UINT
			{
				$current = grammarAccess.getInt_Type_NameAccess().getUINTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getInt_Type_NameAccess().getUINTEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5=USINT
			{
				$current = grammarAccess.getInt_Type_NameAccess().getUSINTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getInt_Type_NameAccess().getUSINTEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6=UDINT
			{
				$current = grammarAccess.getInt_Type_NameAccess().getUDINTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getInt_Type_NameAccess().getUDINTEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7=ULINT
			{
				$current = grammarAccess.getInt_Type_NameAccess().getULINTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getInt_Type_NameAccess().getULINTEnumLiteralDeclaration_7());
			}
		)
	)
;

// Rule Real_Type_Name
ruleReal_Type_Name returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=REAL
			{
				$current = grammarAccess.getReal_Type_NameAccess().getREALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getReal_Type_NameAccess().getREALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=LREAL
			{
				$current = grammarAccess.getReal_Type_NameAccess().getLREALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getReal_Type_NameAccess().getLREALEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule String_Type_Name
ruleString_Type_Name returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=STRING
			{
				$current = grammarAccess.getString_Type_NameAccess().getSTRINGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getString_Type_NameAccess().getSTRINGEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=WSTRING
			{
				$current = grammarAccess.getString_Type_NameAccess().getWSTRINGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getString_Type_NameAccess().getWSTRINGEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=CHAR
			{
				$current = grammarAccess.getString_Type_NameAccess().getCHAREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getString_Type_NameAccess().getCHAREnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=WCHAR
			{
				$current = grammarAccess.getString_Type_NameAccess().getWCHAREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getString_Type_NameAccess().getWCHAREnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule Bool_Type_Name
ruleBool_Type_Name returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=BOOL
		{
			$current = grammarAccess.getBool_Type_NameAccess().getBOOLEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getBool_Type_NameAccess().getBOOLEnumLiteralDeclaration());
		}
	)
;
