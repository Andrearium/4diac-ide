/*
 * generated by Xtext 2.25.0
 */
parser grammar InternalSTAlgorithmParser;

options {
	tokenVocab=InternalSTAlgorithmLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@header {
package org.eclipse.fordiac.ide.structuredtextalgorithm.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.fordiac.ide.structuredtextalgorithm.services.STAlgorithmGrammarAccess;

}
@members {
	private STAlgorithmGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("Ampersand", "'&'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("D", "'D'");
		tokenNameToValue.put("H", "'H'");
		tokenNameToValue.put("M", "'M'");
		tokenNameToValue.put("S", "'S'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("KW__", "'_'");
		tokenNameToValue.put("B", "'\%B'");
		tokenNameToValue.put("D_1", "'\%D'");
		tokenNameToValue.put("L", "'\%L'");
		tokenNameToValue.put("W", "'\%W'");
		tokenNameToValue.put("X", "'\%X'");
		tokenNameToValue.put("AsteriskAsterisk", "'**'");
		tokenNameToValue.put("FullStopFullStop", "'..'");
		tokenNameToValue.put("ColonEqualsSign", "':='");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("AT", "'AT'");
		tokenNameToValue.put("BY", "'BY'");
		tokenNameToValue.put("D_2", "'D#'");
		tokenNameToValue.put("DO", "'DO'");
		tokenNameToValue.put("IF", "'IF'");
		tokenNameToValue.put("MS", "'MS'");
		tokenNameToValue.put("NS", "'NS'");
		tokenNameToValue.put("OF", "'OF'");
		tokenNameToValue.put("OR", "'OR'");
		tokenNameToValue.put("T", "'T#'");
		tokenNameToValue.put("TO", "'TO'");
		tokenNameToValue.put("US", "'US'");
		tokenNameToValue.put("AND", "'AND'");
		tokenNameToValue.put("DT", "'DT#'");
		tokenNameToValue.put("FOR", "'FOR'");
		tokenNameToValue.put("LD", "'LD#'");
		tokenNameToValue.put("LT", "'LT#'");
		tokenNameToValue.put("MOD", "'MOD'");
		tokenNameToValue.put("NOT", "'NOT'");
		tokenNameToValue.put("VAR", "'VAR'");
		tokenNameToValue.put("XOR", "'XOR'");
		tokenNameToValue.put("CASE", "'CASE'");
		tokenNameToValue.put("ELSE", "'ELSE'");
		tokenNameToValue.put("EXIT", "'EXIT'");
		tokenNameToValue.put("INT", "'INT#'");
		tokenNameToValue.put("LDT", "'LDT#'");
		tokenNameToValue.put("THEN", "'THEN'");
		tokenNameToValue.put("TOD", "'TOD#'");
		tokenNameToValue.put("TRUE", "'TRUE'");
		tokenNameToValue.put("ARRAY", "'ARRAY'");
		tokenNameToValue.put("BOOL", "'BOOL#'");
		tokenNameToValue.put("BYTE", "'BYTE#'");
		tokenNameToValue.put("CHAR", "'CHAR#'");
		tokenNameToValue.put("DATE", "'DATE#'");
		tokenNameToValue.put("DINT", "'DINT#'");
		tokenNameToValue.put("ELSIF", "'ELSIF'");
		tokenNameToValue.put("FALSE", "'FALSE'");
		tokenNameToValue.put("LINT", "'LINT#'");
		tokenNameToValue.put("LTOD", "'LTOD#'");
		tokenNameToValue.put("REAL", "'REAL#'");
		tokenNameToValue.put("SINT", "'SINT#'");
		tokenNameToValue.put("TIME", "'TIME#'");
		tokenNameToValue.put("UINT", "'UINT#'");
		tokenNameToValue.put("UNTIL", "'UNTIL'");
		tokenNameToValue.put("WHILE", "'WHILE'");
		tokenNameToValue.put("WORD", "'WORD#'");
		tokenNameToValue.put("DWORD", "'DWORD#'");
		tokenNameToValue.put("END_IF", "'END_IF'");
		tokenNameToValue.put("LDATE", "'LDATE#'");
		tokenNameToValue.put("LREAL", "'LREAL#'");
		tokenNameToValue.put("LTIME", "'LTIME#'");
		tokenNameToValue.put("LWORD", "'LWORD#'");
		tokenNameToValue.put("REPEAT", "'REPEAT'");
		tokenNameToValue.put("RETURN", "'RETURN'");
		tokenNameToValue.put("UDINT", "'UDINT#'");
		tokenNameToValue.put("ULINT", "'ULINT#'");
		tokenNameToValue.put("USINT", "'USINT#'");
		tokenNameToValue.put("WCHAR", "'WCHAR#'");
		tokenNameToValue.put("END_FOR", "'END_FOR'");
		tokenNameToValue.put("END_VAR", "'END_VAR'");
		tokenNameToValue.put("STRING", "'STRING#'");
		tokenNameToValue.put("CONSTANT", "'CONSTANT'");
		tokenNameToValue.put("CONTINUE", "'CONTINUE'");
		tokenNameToValue.put("END_CASE", "'END_CASE'");
		tokenNameToValue.put("VAR_TEMP", "'VAR_TEMP'");
		tokenNameToValue.put("WSTRING", "'WSTRING#'");
		tokenNameToValue.put("ALGORITHM", "'ALGORITHM'");
		tokenNameToValue.put("END_WHILE", "'END_WHILE'");
		tokenNameToValue.put("VAR_INPUT", "'VAR_INPUT'");
		tokenNameToValue.put("END_REPEAT", "'END_REPEAT'");
		tokenNameToValue.put("VAR_OUTPUT", "'VAR_OUTPUT'");
		tokenNameToValue.put("TIME_OF_DAY", "'TIME_OF_DAY#'");
		tokenNameToValue.put("END_ALGORITHM", "'END_ALGORITHM'");
		tokenNameToValue.put("DATE_AND_TIME", "'DATE_AND_TIME#'");
		tokenNameToValue.put("LDATE_AND_TIME", "'LDATE_AND_TIME#'");
	}

	public void setGrammarAccess(STAlgorithmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleSTAlgorithms
entryRuleSTAlgorithms
:
{ before(grammarAccess.getSTAlgorithmsRule()); }
	 ruleSTAlgorithms
{ after(grammarAccess.getSTAlgorithmsRule()); } 
	 EOF 
;

// Rule STAlgorithms
ruleSTAlgorithms 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTAlgorithmsAccess().getGroup()); }
		(rule__STAlgorithms__Group__0)
		{ after(grammarAccess.getSTAlgorithmsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTAlgorithm
entryRuleSTAlgorithm
:
{ before(grammarAccess.getSTAlgorithmRule()); }
	 ruleSTAlgorithm
{ after(grammarAccess.getSTAlgorithmRule()); } 
	 EOF 
;

// Rule STAlgorithm
ruleSTAlgorithm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTAlgorithmAccess().getGroup()); }
		(rule__STAlgorithm__Group__0)
		{ after(grammarAccess.getSTAlgorithmAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTAlgorithmBody
entryRuleSTAlgorithmBody
:
{ before(grammarAccess.getSTAlgorithmBodyRule()); }
	 ruleSTAlgorithmBody
{ after(grammarAccess.getSTAlgorithmBodyRule()); } 
	 EOF 
;

// Rule STAlgorithmBody
ruleSTAlgorithmBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTAlgorithmBodyAccess().getGroup()); }
		(rule__STAlgorithmBody__Group__0)
		{ after(grammarAccess.getSTAlgorithmBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarTempDeclarationBlock
entryRuleVarTempDeclarationBlock
:
{ before(grammarAccess.getVarTempDeclarationBlockRule()); }
	 ruleVarTempDeclarationBlock
{ after(grammarAccess.getVarTempDeclarationBlockRule()); } 
	 EOF 
;

// Rule VarTempDeclarationBlock
ruleVarTempDeclarationBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarTempDeclarationBlockAccess().getGroup()); }
		(rule__VarTempDeclarationBlock__Group__0)
		{ after(grammarAccess.getVarTempDeclarationBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup()); }
		(rule__VarDeclaration__Group__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInitializerExpression
entryRuleInitializerExpression
:
{ before(grammarAccess.getInitializerExpressionRule()); }
	 ruleInitializerExpression
{ after(grammarAccess.getInitializerExpressionRule()); } 
	 EOF 
;

// Rule InitializerExpression
ruleInitializerExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInitializerExpressionAccess().getAlternatives()); }
		(rule__InitializerExpression__Alternatives)
		{ after(grammarAccess.getInitializerExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArrayInitializerExpression
entryRuleArrayInitializerExpression
:
{ before(grammarAccess.getArrayInitializerExpressionRule()); }
	 ruleArrayInitializerExpression
{ after(grammarAccess.getArrayInitializerExpressionRule()); } 
	 EOF 
;

// Rule ArrayInitializerExpression
ruleArrayInitializerExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayInitializerExpressionAccess().getGroup()); }
		(rule__ArrayInitializerExpression__Group__0)
		{ after(grammarAccess.getArrayInitializerExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArrayInitElement
entryRuleArrayInitElement
:
{ before(grammarAccess.getArrayInitElementRule()); }
	 ruleArrayInitElement
{ after(grammarAccess.getArrayInitElementRule()); } 
	 EOF 
;

// Rule ArrayInitElement
ruleArrayInitElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayInitElementAccess().getGroup()); }
		(rule__ArrayInitElement__Group__0)
		{ after(grammarAccess.getArrayInitElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTStatement
entryRuleSTStatement
:
{ before(grammarAccess.getSTStatementRule()); }
	 ruleSTStatement
{ after(grammarAccess.getSTStatementRule()); } 
	 EOF 
;

// Rule STStatement
ruleSTStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTStatementAccess().getAlternatives()); }
		(rule__STStatement__Alternatives)
		{ after(grammarAccess.getSTStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTAssignmentStatement
entryRuleSTAssignmentStatement
:
{ before(grammarAccess.getSTAssignmentStatementRule()); }
	 ruleSTAssignmentStatement
{ after(grammarAccess.getSTAssignmentStatementRule()); } 
	 EOF 
;

// Rule STAssignmentStatement
ruleSTAssignmentStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTAssignmentStatementAccess().getGroup()); }
		(rule__STAssignmentStatement__Group__0)
		{ after(grammarAccess.getSTAssignmentStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTIfStatment
entryRuleSTIfStatment
:
{ before(grammarAccess.getSTIfStatmentRule()); }
	 ruleSTIfStatment
{ after(grammarAccess.getSTIfStatmentRule()); } 
	 EOF 
;

// Rule STIfStatment
ruleSTIfStatment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTIfStatmentAccess().getGroup()); }
		(rule__STIfStatment__Group__0)
		{ after(grammarAccess.getSTIfStatmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTElseIfPart
entryRuleSTElseIfPart
:
{ before(grammarAccess.getSTElseIfPartRule()); }
	 ruleSTElseIfPart
{ after(grammarAccess.getSTElseIfPartRule()); } 
	 EOF 
;

// Rule STElseIfPart
ruleSTElseIfPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTElseIfPartAccess().getGroup()); }
		(rule__STElseIfPart__Group__0)
		{ after(grammarAccess.getSTElseIfPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTCaseStatement
entryRuleSTCaseStatement
:
{ before(grammarAccess.getSTCaseStatementRule()); }
	 ruleSTCaseStatement
{ after(grammarAccess.getSTCaseStatementRule()); } 
	 EOF 
;

// Rule STCaseStatement
ruleSTCaseStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTCaseStatementAccess().getGroup()); }
		(rule__STCaseStatement__Group__0)
		{ after(grammarAccess.getSTCaseStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTCaseCases
entryRuleSTCaseCases
:
{ before(grammarAccess.getSTCaseCasesRule()); }
	 ruleSTCaseCases
{ after(grammarAccess.getSTCaseCasesRule()); } 
	 EOF 
;

// Rule STCaseCases
ruleSTCaseCases 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTCaseCasesAccess().getGroup()); }
		(rule__STCaseCases__Group__0)
		{ after(grammarAccess.getSTCaseCasesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTElsePart
entryRuleSTElsePart
:
{ before(grammarAccess.getSTElsePartRule()); }
	 ruleSTElsePart
{ after(grammarAccess.getSTElsePartRule()); } 
	 EOF 
;

// Rule STElsePart
ruleSTElsePart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTElsePartAccess().getGroup()); }
		(rule__STElsePart__Group__0)
		{ after(grammarAccess.getSTElsePartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTForStatement
entryRuleSTForStatement
:
{ before(grammarAccess.getSTForStatementRule()); }
	 ruleSTForStatement
{ after(grammarAccess.getSTForStatementRule()); } 
	 EOF 
;

// Rule STForStatement
ruleSTForStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTForStatementAccess().getGroup()); }
		(rule__STForStatement__Group__0)
		{ after(grammarAccess.getSTForStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTWhileStatement
entryRuleSTWhileStatement
:
{ before(grammarAccess.getSTWhileStatementRule()); }
	 ruleSTWhileStatement
{ after(grammarAccess.getSTWhileStatementRule()); } 
	 EOF 
;

// Rule STWhileStatement
ruleSTWhileStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTWhileStatementAccess().getGroup()); }
		(rule__STWhileStatement__Group__0)
		{ after(grammarAccess.getSTWhileStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTRepeatStatement
entryRuleSTRepeatStatement
:
{ before(grammarAccess.getSTRepeatStatementRule()); }
	 ruleSTRepeatStatement
{ after(grammarAccess.getSTRepeatStatementRule()); } 
	 EOF 
;

// Rule STRepeatStatement
ruleSTRepeatStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTRepeatStatementAccess().getGroup()); }
		(rule__STRepeatStatement__Group__0)
		{ after(grammarAccess.getSTRepeatStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTExpression
entryRuleSTExpression
:
{ before(grammarAccess.getSTExpressionRule()); }
	 ruleSTExpression
{ after(grammarAccess.getSTExpressionRule()); } 
	 EOF 
;

// Rule STExpression
ruleSTExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTExpressionAccess().getSTSubrangeExpressionParserRuleCall()); }
		ruleSTSubrangeExpression
		{ after(grammarAccess.getSTExpressionAccess().getSTSubrangeExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTSubrangeExpression
entryRuleSTSubrangeExpression
:
{ before(grammarAccess.getSTSubrangeExpressionRule()); }
	 ruleSTSubrangeExpression
{ after(grammarAccess.getSTSubrangeExpressionRule()); } 
	 EOF 
;

// Rule STSubrangeExpression
ruleSTSubrangeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTSubrangeExpressionAccess().getGroup()); }
		(rule__STSubrangeExpression__Group__0)
		{ after(grammarAccess.getSTSubrangeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTOrExpression
entryRuleSTOrExpression
:
{ before(grammarAccess.getSTOrExpressionRule()); }
	 ruleSTOrExpression
{ after(grammarAccess.getSTOrExpressionRule()); } 
	 EOF 
;

// Rule STOrExpression
ruleSTOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTOrExpressionAccess().getGroup()); }
		(rule__STOrExpression__Group__0)
		{ after(grammarAccess.getSTOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTXorExpression
entryRuleSTXorExpression
:
{ before(grammarAccess.getSTXorExpressionRule()); }
	 ruleSTXorExpression
{ after(grammarAccess.getSTXorExpressionRule()); } 
	 EOF 
;

// Rule STXorExpression
ruleSTXorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTXorExpressionAccess().getGroup()); }
		(rule__STXorExpression__Group__0)
		{ after(grammarAccess.getSTXorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTAndExpression
entryRuleSTAndExpression
:
{ before(grammarAccess.getSTAndExpressionRule()); }
	 ruleSTAndExpression
{ after(grammarAccess.getSTAndExpressionRule()); } 
	 EOF 
;

// Rule STAndExpression
ruleSTAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTAndExpressionAccess().getGroup()); }
		(rule__STAndExpression__Group__0)
		{ after(grammarAccess.getSTAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTEqualityExpression
entryRuleSTEqualityExpression
:
{ before(grammarAccess.getSTEqualityExpressionRule()); }
	 ruleSTEqualityExpression
{ after(grammarAccess.getSTEqualityExpressionRule()); } 
	 EOF 
;

// Rule STEqualityExpression
ruleSTEqualityExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTEqualityExpressionAccess().getGroup()); }
		(rule__STEqualityExpression__Group__0)
		{ after(grammarAccess.getSTEqualityExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTComparisonExpression
entryRuleSTComparisonExpression
:
{ before(grammarAccess.getSTComparisonExpressionRule()); }
	 ruleSTComparisonExpression
{ after(grammarAccess.getSTComparisonExpressionRule()); } 
	 EOF 
;

// Rule STComparisonExpression
ruleSTComparisonExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTComparisonExpressionAccess().getGroup()); }
		(rule__STComparisonExpression__Group__0)
		{ after(grammarAccess.getSTComparisonExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTAddSubExpression
entryRuleSTAddSubExpression
:
{ before(grammarAccess.getSTAddSubExpressionRule()); }
	 ruleSTAddSubExpression
{ after(grammarAccess.getSTAddSubExpressionRule()); } 
	 EOF 
;

// Rule STAddSubExpression
ruleSTAddSubExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTAddSubExpressionAccess().getGroup()); }
		(rule__STAddSubExpression__Group__0)
		{ after(grammarAccess.getSTAddSubExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTMulDivModExpression
entryRuleSTMulDivModExpression
:
{ before(grammarAccess.getSTMulDivModExpressionRule()); }
	 ruleSTMulDivModExpression
{ after(grammarAccess.getSTMulDivModExpressionRule()); } 
	 EOF 
;

// Rule STMulDivModExpression
ruleSTMulDivModExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTMulDivModExpressionAccess().getGroup()); }
		(rule__STMulDivModExpression__Group__0)
		{ after(grammarAccess.getSTMulDivModExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTPowerExpression
entryRuleSTPowerExpression
:
{ before(grammarAccess.getSTPowerExpressionRule()); }
	 ruleSTPowerExpression
{ after(grammarAccess.getSTPowerExpressionRule()); } 
	 EOF 
;

// Rule STPowerExpression
ruleSTPowerExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTPowerExpressionAccess().getGroup()); }
		(rule__STPowerExpression__Group__0)
		{ after(grammarAccess.getSTPowerExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTUnaryExpression
entryRuleSTUnaryExpression
:
{ before(grammarAccess.getSTUnaryExpressionRule()); }
	 ruleSTUnaryExpression
{ after(grammarAccess.getSTUnaryExpressionRule()); } 
	 EOF 
;

// Rule STUnaryExpression
ruleSTUnaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTUnaryExpressionAccess().getAlternatives()); }
		(rule__STUnaryExpression__Alternatives)
		{ after(grammarAccess.getSTUnaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTAccessExpression
entryRuleSTAccessExpression
:
{ before(grammarAccess.getSTAccessExpressionRule()); }
	 ruleSTAccessExpression
{ after(grammarAccess.getSTAccessExpressionRule()); } 
	 EOF 
;

// Rule STAccessExpression
ruleSTAccessExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTAccessExpressionAccess().getGroup()); }
		(rule__STAccessExpression__Group__0)
		{ after(grammarAccess.getSTAccessExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTPrimaryExpression
entryRuleSTPrimaryExpression
:
{ before(grammarAccess.getSTPrimaryExpressionRule()); }
	 ruleSTPrimaryExpression
{ after(grammarAccess.getSTPrimaryExpressionRule()); } 
	 EOF 
;

// Rule STPrimaryExpression
ruleSTPrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTPrimaryExpressionAccess().getAlternatives()); }
		(rule__STPrimaryExpression__Alternatives)
		{ after(grammarAccess.getSTPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTFeatureExpression
entryRuleSTFeatureExpression
:
{ before(grammarAccess.getSTFeatureExpressionRule()); }
	 ruleSTFeatureExpression
{ after(grammarAccess.getSTFeatureExpressionRule()); } 
	 EOF 
;

// Rule STFeatureExpression
ruleSTFeatureExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTFeatureExpressionAccess().getGroup()); }
		(rule__STFeatureExpression__Group__0)
		{ after(grammarAccess.getSTFeatureExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTMultibitPartialExpression
entryRuleSTMultibitPartialExpression
:
{ before(grammarAccess.getSTMultibitPartialExpressionRule()); }
	 ruleSTMultibitPartialExpression
{ after(grammarAccess.getSTMultibitPartialExpressionRule()); } 
	 EOF 
;

// Rule STMultibitPartialExpression
ruleSTMultibitPartialExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTMultibitPartialExpressionAccess().getGroup()); }
		(rule__STMultibitPartialExpression__Group__0)
		{ after(grammarAccess.getSTMultibitPartialExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTLiteralExpressions
entryRuleSTLiteralExpressions
:
{ before(grammarAccess.getSTLiteralExpressionsRule()); }
	 ruleSTLiteralExpressions
{ after(grammarAccess.getSTLiteralExpressionsRule()); } 
	 EOF 
;

// Rule STLiteralExpressions
ruleSTLiteralExpressions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getAlternatives()); }
		(rule__STLiteralExpressions__Alternatives)
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTNumericLiteralType
entryRuleSTNumericLiteralType
:
{ before(grammarAccess.getSTNumericLiteralTypeRule()); }
	 ruleSTNumericLiteralType
{ after(grammarAccess.getSTNumericLiteralTypeRule()); } 
	 EOF 
;

// Rule STNumericLiteralType
ruleSTNumericLiteralType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getAlternatives()); }
		(rule__STNumericLiteralType__Alternatives)
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTNumericLiteral
entryRuleSTNumericLiteral
:
{ before(grammarAccess.getSTNumericLiteralRule()); }
	 ruleSTNumericLiteral
{ after(grammarAccess.getSTNumericLiteralRule()); } 
	 EOF 
;

// Rule STNumericLiteral
ruleSTNumericLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTNumericLiteralAccess().getGroup()); }
		(rule__STNumericLiteral__Group__0)
		{ after(grammarAccess.getSTNumericLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTDateLiteralType
entryRuleSTDateLiteralType
:
{ before(grammarAccess.getSTDateLiteralTypeRule()); }
	 ruleSTDateLiteralType
{ after(grammarAccess.getSTDateLiteralTypeRule()); } 
	 EOF 
;

// Rule STDateLiteralType
ruleSTDateLiteralType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTDateLiteralTypeAccess().getAlternatives()); }
		(rule__STDateLiteralType__Alternatives)
		{ after(grammarAccess.getSTDateLiteralTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTDateLiteral
entryRuleSTDateLiteral
:
{ before(grammarAccess.getSTDateLiteralRule()); }
	 ruleSTDateLiteral
{ after(grammarAccess.getSTDateLiteralRule()); } 
	 EOF 
;

// Rule STDateLiteral
ruleSTDateLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTDateLiteralAccess().getGroup()); }
		(rule__STDateLiteral__Group__0)
		{ after(grammarAccess.getSTDateLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTTimeLiteralType
entryRuleSTTimeLiteralType
:
{ before(grammarAccess.getSTTimeLiteralTypeRule()); }
	 ruleSTTimeLiteralType
{ after(grammarAccess.getSTTimeLiteralTypeRule()); } 
	 EOF 
;

// Rule STTimeLiteralType
ruleSTTimeLiteralType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTTimeLiteralTypeAccess().getAlternatives()); }
		(rule__STTimeLiteralType__Alternatives)
		{ after(grammarAccess.getSTTimeLiteralTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTTimeLiteral
entryRuleSTTimeLiteral
:
{ before(grammarAccess.getSTTimeLiteralRule()); }
	 ruleSTTimeLiteral
{ after(grammarAccess.getSTTimeLiteralRule()); } 
	 EOF 
;

// Rule STTimeLiteral
ruleSTTimeLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTTimeLiteralAccess().getGroup()); }
		(rule__STTimeLiteral__Group__0)
		{ after(grammarAccess.getSTTimeLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTTimeOfDayLiteralType
entryRuleSTTimeOfDayLiteralType
:
{ before(grammarAccess.getSTTimeOfDayLiteralTypeRule()); }
	 ruleSTTimeOfDayLiteralType
{ after(grammarAccess.getSTTimeOfDayLiteralTypeRule()); } 
	 EOF 
;

// Rule STTimeOfDayLiteralType
ruleSTTimeOfDayLiteralType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTTimeOfDayLiteralTypeAccess().getAlternatives()); }
		(rule__STTimeOfDayLiteralType__Alternatives)
		{ after(grammarAccess.getSTTimeOfDayLiteralTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTTimeOfDayLiteral
entryRuleSTTimeOfDayLiteral
:
{ before(grammarAccess.getSTTimeOfDayLiteralRule()); }
	 ruleSTTimeOfDayLiteral
{ after(grammarAccess.getSTTimeOfDayLiteralRule()); } 
	 EOF 
;

// Rule STTimeOfDayLiteral
ruleSTTimeOfDayLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTTimeOfDayLiteralAccess().getGroup()); }
		(rule__STTimeOfDayLiteral__Group__0)
		{ after(grammarAccess.getSTTimeOfDayLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTDateAndTimeLiteralType
entryRuleSTDateAndTimeLiteralType
:
{ before(grammarAccess.getSTDateAndTimeLiteralTypeRule()); }
	 ruleSTDateAndTimeLiteralType
{ after(grammarAccess.getSTDateAndTimeLiteralTypeRule()); } 
	 EOF 
;

// Rule STDateAndTimeLiteralType
ruleSTDateAndTimeLiteralType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTDateAndTimeLiteralTypeAccess().getAlternatives()); }
		(rule__STDateAndTimeLiteralType__Alternatives)
		{ after(grammarAccess.getSTDateAndTimeLiteralTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTDateAndTimeLiteral
entryRuleSTDateAndTimeLiteral
:
{ before(grammarAccess.getSTDateAndTimeLiteralRule()); }
	 ruleSTDateAndTimeLiteral
{ after(grammarAccess.getSTDateAndTimeLiteralRule()); } 
	 EOF 
;

// Rule STDateAndTimeLiteral
ruleSTDateAndTimeLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTDateAndTimeLiteralAccess().getGroup()); }
		(rule__STDateAndTimeLiteral__Group__0)
		{ after(grammarAccess.getSTDateAndTimeLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTStringLiteralType
entryRuleSTStringLiteralType
:
{ before(grammarAccess.getSTStringLiteralTypeRule()); }
	 ruleSTStringLiteralType
{ after(grammarAccess.getSTStringLiteralTypeRule()); } 
	 EOF 
;

// Rule STStringLiteralType
ruleSTStringLiteralType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTStringLiteralTypeAccess().getAlternatives()); }
		(rule__STStringLiteralType__Alternatives)
		{ after(grammarAccess.getSTStringLiteralTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTStringLiteral
entryRuleSTStringLiteral
:
{ before(grammarAccess.getSTStringLiteralRule()); }
	 ruleSTStringLiteral
{ after(grammarAccess.getSTStringLiteralRule()); } 
	 EOF 
;

// Rule STStringLiteral
ruleSTStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTStringLiteralAccess().getGroup()); }
		(rule__STStringLiteral__Group__0)
		{ after(grammarAccess.getSTStringLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral
:
{ before(grammarAccess.getBoolLiteralRule()); }
	 ruleBoolLiteral
{ after(grammarAccess.getBoolLiteralRule()); } 
	 EOF 
;

// Rule BoolLiteral
ruleBoolLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolLiteralAccess().getAlternatives()); }
		(rule__BoolLiteral__Alternatives)
		{ after(grammarAccess.getBoolLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getGroup()); }
		(rule__Number__Group__0)
		{ after(grammarAccess.getNumberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDate
entryRuleDate
:
{ before(grammarAccess.getDateRule()); }
	 ruleDate
{ after(grammarAccess.getDateRule()); } 
	 EOF 
;

// Rule Date
ruleDate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDateAccess().getGroup()); }
		(rule__Date__Group__0)
		{ after(grammarAccess.getDateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeOfDay
entryRuleTimeOfDay
:
{ before(grammarAccess.getTimeOfDayRule()); }
	 ruleTimeOfDay
{ after(grammarAccess.getTimeOfDayRule()); } 
	 EOF 
;

// Rule TimeOfDay
ruleTimeOfDay 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeOfDayAccess().getGroup()); }
		(rule__TimeOfDay__Group__0)
		{ after(grammarAccess.getTimeOfDayAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTime
entryRuleTime
:
{ before(grammarAccess.getTimeRule()); }
	 ruleTime
{ after(grammarAccess.getTimeRule()); } 
	 EOF 
;

// Rule Time
ruleTime 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getTimeAccess().getGroup()); }
			(rule__Time__Group__0)
			{ after(grammarAccess.getTimeAccess().getGroup()); }
		)
		(
			{ before(grammarAccess.getTimeAccess().getGroup()); }
			(rule__Time__Group__0)*
			{ after(grammarAccess.getTimeAccess().getGroup()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule SubrangeOperator
ruleSubrangeOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubrangeOperatorAccess().getRangeEnumLiteralDeclaration()); }
		(FullStopFullStop)
		{ after(grammarAccess.getSubrangeOperatorAccess().getRangeEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule OrOperator
ruleOrOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); }
		(OR)
		{ after(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule XorOperator
ruleXorOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorOperatorAccess().getXOREnumLiteralDeclaration()); }
		(XOR)
		{ after(grammarAccess.getXorOperatorAccess().getXOREnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AndOperator
ruleAndOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndOperatorAccess().getAlternatives()); }
		(rule__AndOperator__Alternatives)
		{ after(grammarAccess.getAndOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule EqualityOperator
ruleEqualityOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
		(rule__EqualityOperator__Alternatives)
		{ after(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CompareOperator
ruleCompareOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
		(rule__CompareOperator__Alternatives)
		{ after(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AddSubOperator
ruleAddSubOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddSubOperatorAccess().getAlternatives()); }
		(rule__AddSubOperator__Alternatives)
		{ after(grammarAccess.getAddSubOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule MulDivModOperator
ruleMulDivModOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulDivModOperatorAccess().getAlternatives()); }
		(rule__MulDivModOperator__Alternatives)
		{ after(grammarAccess.getMulDivModOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PowerOperator
rulePowerOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerOperatorAccess().getPOWEREnumLiteralDeclaration()); }
		(AsteriskAsterisk)
		{ after(grammarAccess.getPowerOperatorAccess().getPOWEREnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule UnaryOperator
ruleUnaryOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
		(rule__UnaryOperator__Alternatives)
		{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule STMultiBitAccessSpecifier
ruleSTMultiBitAccessSpecifier
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTMultiBitAccessSpecifierAccess().getAlternatives()); }
		(rule__STMultiBitAccessSpecifier__Alternatives)
		{ after(grammarAccess.getSTMultiBitAccessSpecifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Alternatives_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup_4_1_0()); }
		(rule__VarDeclaration__Group_4_1_0__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup_4_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup_4_1_1()); }
		(rule__VarDeclaration__Group_4_1_1__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup_4_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitializerExpressionAccess().getSTExpressionParserRuleCall_0()); }
		ruleSTExpression
		{ after(grammarAccess.getInitializerExpressionAccess().getSTExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInitializerExpressionAccess().getArrayInitializerExpressionParserRuleCall_1()); }
		ruleArrayInitializerExpression
		{ after(grammarAccess.getInitializerExpressionAccess().getArrayInitializerExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTStatementAccess().getGroup_0()); }
		(rule__STStatement__Group_0__0)
		{ after(grammarAccess.getSTStatementAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getGroup_1()); }
		(rule__STStatement__Group_1__0)
		{ after(grammarAccess.getSTStatementAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Alternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTStatementAccess().getSTIfStatmentParserRuleCall_0_0_0()); }
		ruleSTIfStatment
		{ after(grammarAccess.getSTStatementAccess().getSTIfStatmentParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getSTCaseStatementParserRuleCall_0_0_1()); }
		ruleSTCaseStatement
		{ after(grammarAccess.getSTStatementAccess().getSTCaseStatementParserRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getSTForStatementParserRuleCall_0_0_2()); }
		ruleSTForStatement
		{ after(grammarAccess.getSTStatementAccess().getSTForStatementParserRuleCall_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getSTWhileStatementParserRuleCall_0_0_3()); }
		ruleSTWhileStatement
		{ after(grammarAccess.getSTStatementAccess().getSTWhileStatementParserRuleCall_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getSTRepeatStatementParserRuleCall_0_0_4()); }
		ruleSTRepeatStatement
		{ after(grammarAccess.getSTStatementAccess().getSTRepeatStatementParserRuleCall_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getSTAssignmentStatementParserRuleCall_0_0_5()); }
		ruleSTAssignmentStatement
		{ after(grammarAccess.getSTStatementAccess().getSTAssignmentStatementParserRuleCall_0_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getGroup_0_0_6()); }
		(rule__STStatement__Group_0_0_6__0)
		{ after(grammarAccess.getSTStatementAccess().getGroup_0_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getGroup_0_0_7()); }
		(rule__STStatement__Group_0_0_7__0)
		{ after(grammarAccess.getSTStatementAccess().getGroup_0_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getGroup_0_0_8()); }
		(rule__STStatement__Group_0_0_8__0)
		{ after(grammarAccess.getSTStatementAccess().getGroup_0_0_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STUnaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTUnaryExpressionAccess().getSTAccessExpressionParserRuleCall_0()); }
		(ruleSTAccessExpression)
		{ after(grammarAccess.getSTUnaryExpressionAccess().getSTAccessExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTUnaryExpressionAccess().getGroup_1()); }
		(rule__STUnaryExpression__Group_1__0)
		{ after(grammarAccess.getSTUnaryExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAccessExpressionAccess().getGroup_1_0()); }
		(rule__STAccessExpression__Group_1_0__0)
		{ after(grammarAccess.getSTAccessExpressionAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTAccessExpressionAccess().getGroup_1_1()); }
		(rule__STAccessExpression__Group_1_1__0)
		{ after(grammarAccess.getSTAccessExpressionAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__MemberAlternatives_1_0_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAccessExpressionAccess().getMemberSTFeatureExpressionParserRuleCall_1_0_2_0_0()); }
		ruleSTFeatureExpression
		{ after(grammarAccess.getSTAccessExpressionAccess().getMemberSTFeatureExpressionParserRuleCall_1_0_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTAccessExpressionAccess().getMemberSTMultibitPartialExpressionParserRuleCall_1_0_2_0_1()); }
		ruleSTMultibitPartialExpression
		{ after(grammarAccess.getSTAccessExpressionAccess().getMemberSTMultibitPartialExpressionParserRuleCall_1_0_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STPrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTPrimaryExpressionAccess().getGroup_0()); }
		(rule__STPrimaryExpression__Group_0__0)
		{ after(grammarAccess.getSTPrimaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTPrimaryExpressionAccess().getSTFeatureExpressionParserRuleCall_1()); }
		ruleSTFeatureExpression
		{ after(grammarAccess.getSTPrimaryExpressionAccess().getSTFeatureExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTPrimaryExpressionAccess().getSTLiteralExpressionsParserRuleCall_2()); }
		ruleSTLiteralExpressions
		{ after(grammarAccess.getSTPrimaryExpressionAccess().getSTLiteralExpressionsParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getSTNumericLiteralParserRuleCall_0()); }
		ruleSTNumericLiteral
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getSTNumericLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getSTDateLiteralParserRuleCall_1()); }
		ruleSTDateLiteral
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getSTDateLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeLiteralParserRuleCall_2()); }
		ruleSTTimeLiteral
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeLiteralParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeOfDayLiteralParserRuleCall_3()); }
		ruleSTTimeOfDayLiteral
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeOfDayLiteralParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getSTDateAndTimeLiteralParserRuleCall_4()); }
		ruleSTDateAndTimeLiteral
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getSTDateAndTimeLiteralParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getSTStringLiteralParserRuleCall_5()); }
		ruleSTStringLiteral
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getSTStringLiteralParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STNumericLiteralType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getBOOLKeyword_0()); }
		BOOL
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getBOOLKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getBYTEKeyword_1()); }
		BYTE
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getBYTEKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getWORDKeyword_2()); }
		WORD
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getWORDKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getDWORDKeyword_3()); }
		DWORD
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getDWORDKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getLWORDKeyword_4()); }
		LWORD
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getLWORDKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getSINTKeyword_5()); }
		SINT
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getSINTKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getINTKeyword_6()); }
		INT
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getINTKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getDINTKeyword_7()); }
		DINT
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getDINTKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getLINTKeyword_8()); }
		LINT
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getLINTKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getUSINTKeyword_9()); }
		USINT
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getUSINTKeyword_9()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getUINTKeyword_10()); }
		UINT
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getUINTKeyword_10()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getUDINTKeyword_11()); }
		UDINT
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getUDINTKeyword_11()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getULINTKeyword_12()); }
		ULINT
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getULINTKeyword_12()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getREALKeyword_13()); }
		REAL
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getREALKeyword_13()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralTypeAccess().getLREALKeyword_14()); }
		LREAL
		{ after(grammarAccess.getSTNumericLiteralTypeAccess().getLREALKeyword_14()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STNumericLiteral__ValueAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTNumericLiteralAccess().getValueBoolLiteralParserRuleCall_1_0_0()); }
		ruleBoolLiteral
		{ after(grammarAccess.getSTNumericLiteralAccess().getValueBoolLiteralParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralAccess().getValueNumberParserRuleCall_1_0_1()); }
		ruleNumber
		{ after(grammarAccess.getSTNumericLiteralAccess().getValueNumberParserRuleCall_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTNumericLiteralAccess().getValueNON_DECIMALTerminalRuleCall_1_0_2()); }
		RULE_NON_DECIMAL
		{ after(grammarAccess.getSTNumericLiteralAccess().getValueNON_DECIMALTerminalRuleCall_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateLiteralType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTDateLiteralTypeAccess().getDATEKeyword_0()); }
		DATE
		{ after(grammarAccess.getSTDateLiteralTypeAccess().getDATEKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTDateLiteralTypeAccess().getLDATEKeyword_1()); }
		LDATE
		{ after(grammarAccess.getSTDateLiteralTypeAccess().getLDATEKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTDateLiteralTypeAccess().getDKeyword_2()); }
		D_2
		{ after(grammarAccess.getSTDateLiteralTypeAccess().getDKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getSTDateLiteralTypeAccess().getLDKeyword_3()); }
		LD
		{ after(grammarAccess.getSTDateLiteralTypeAccess().getLDKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STTimeLiteralType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTTimeLiteralTypeAccess().getTIMEKeyword_0()); }
		TIME
		{ after(grammarAccess.getSTTimeLiteralTypeAccess().getTIMEKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTTimeLiteralTypeAccess().getLTIMEKeyword_1()); }
		LTIME
		{ after(grammarAccess.getSTTimeLiteralTypeAccess().getLTIMEKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTTimeLiteralTypeAccess().getTKeyword_2()); }
		T
		{ after(grammarAccess.getSTTimeLiteralTypeAccess().getTKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getSTTimeLiteralTypeAccess().getLTKeyword_3()); }
		LT
		{ after(grammarAccess.getSTTimeLiteralTypeAccess().getLTKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STTimeOfDayLiteralType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTTimeOfDayLiteralTypeAccess().getTIME_OF_DAYKeyword_0()); }
		TIME_OF_DAY
		{ after(grammarAccess.getSTTimeOfDayLiteralTypeAccess().getTIME_OF_DAYKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTTimeOfDayLiteralTypeAccess().getTODKeyword_1()); }
		TOD
		{ after(grammarAccess.getSTTimeOfDayLiteralTypeAccess().getTODKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTTimeOfDayLiteralTypeAccess().getLTODKeyword_2()); }
		LTOD
		{ after(grammarAccess.getSTTimeOfDayLiteralTypeAccess().getLTODKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateAndTimeLiteralType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTDateAndTimeLiteralTypeAccess().getDATE_AND_TIMEKeyword_0()); }
		DATE_AND_TIME
		{ after(grammarAccess.getSTDateAndTimeLiteralTypeAccess().getDATE_AND_TIMEKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTDateAndTimeLiteralTypeAccess().getLDATE_AND_TIMEKeyword_1()); }
		LDATE_AND_TIME
		{ after(grammarAccess.getSTDateAndTimeLiteralTypeAccess().getLDATE_AND_TIMEKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTDateAndTimeLiteralTypeAccess().getDTKeyword_2()); }
		DT
		{ after(grammarAccess.getSTDateAndTimeLiteralTypeAccess().getDTKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getSTDateAndTimeLiteralTypeAccess().getLDTKeyword_3()); }
		LDT
		{ after(grammarAccess.getSTDateAndTimeLiteralTypeAccess().getLDTKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStringLiteralType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTStringLiteralTypeAccess().getSTRINGKeyword_0()); }
		STRING
		{ after(grammarAccess.getSTStringLiteralTypeAccess().getSTRINGKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTStringLiteralTypeAccess().getWSTRINGKeyword_1()); }
		WSTRING
		{ after(grammarAccess.getSTStringLiteralTypeAccess().getWSTRINGKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTStringLiteralTypeAccess().getCHARKeyword_2()); }
		CHAR
		{ after(grammarAccess.getSTStringLiteralTypeAccess().getCHARKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getSTStringLiteralTypeAccess().getWCHARKeyword_3()); }
		WCHAR
		{ after(grammarAccess.getSTStringLiteralTypeAccess().getWCHARKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStringLiteral__ValueAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getSTStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTStringLiteralAccess().getValueWSTRINGTerminalRuleCall_1_0_1()); }
		RULE_WSTRING
		{ after(grammarAccess.getSTStringLiteralAccess().getValueWSTRINGTerminalRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolLiteralAccess().getTRUEKeyword_0()); }
		TRUE
		{ after(grammarAccess.getBoolLiteralAccess().getTRUEKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolLiteralAccess().getFALSEKeyword_1()); }
		FALSE
		{ after(grammarAccess.getBoolLiteralAccess().getFALSEKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getPlusSignKeyword_0_0()); }
		PlusSign
		{ after(grammarAccess.getNumberAccess().getPlusSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getHyphenMinusKeyword_0_1()); }
		HyphenMinus
		{ after(grammarAccess.getNumberAccess().getHyphenMinusKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getEXT_INTTerminalRuleCall_2_1_0()); }
		RULE_EXT_INT
		{ after(grammarAccess.getNumberAccess().getEXT_INTTerminalRuleCall_2_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_2_1_1()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_2_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeAccess().getDKeyword_1_0()); }
		D
		{ after(grammarAccess.getTimeAccess().getDKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getTimeAccess().getHKeyword_1_1()); }
		H
		{ after(grammarAccess.getTimeAccess().getHKeyword_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getTimeAccess().getMKeyword_1_2()); }
		M
		{ after(grammarAccess.getTimeAccess().getMKeyword_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getTimeAccess().getSKeyword_1_3()); }
		S
		{ after(grammarAccess.getTimeAccess().getSKeyword_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getTimeAccess().getMSKeyword_1_4()); }
		MS
		{ after(grammarAccess.getTimeAccess().getMSKeyword_1_4()); }
	)
	|
	(
		{ before(grammarAccess.getTimeAccess().getUSKeyword_1_5()); }
		US
		{ after(grammarAccess.getTimeAccess().getUSKeyword_1_5()); }
	)
	|
	(
		{ before(grammarAccess.getTimeAccess().getNSKeyword_1_6()); }
		NS
		{ after(grammarAccess.getTimeAccess().getNSKeyword_1_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration_0()); }
		(AND)
		{ after(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAndOperatorAccess().getAMPERSANDEnumLiteralDeclaration_1()); }
		(Ampersand)
		{ after(grammarAccess.getAndOperatorAccess().getAMPERSANDEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityOperatorAccess().getEQEnumLiteralDeclaration_0()); }
		(EqualsSign)
		{ after(grammarAccess.getEqualityOperatorAccess().getEQEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityOperatorAccess().getNEEnumLiteralDeclaration_1()); }
		(LessThanSignGreaterThanSign)
		{ after(grammarAccess.getEqualityOperatorAccess().getNEEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_0()); }
		(LessThanSign)
		{ after(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOperatorAccess().getLEEnumLiteralDeclaration_1()); }
		(LessThanSignEqualsSign)
		{ after(grammarAccess.getCompareOperatorAccess().getLEEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_2()); }
		(GreaterThanSign)
		{ after(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOperatorAccess().getGEEnumLiteralDeclaration_3()); }
		(GreaterThanSignEqualsSign)
		{ after(grammarAccess.getCompareOperatorAccess().getGEEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddSubOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddSubOperatorAccess().getADDEnumLiteralDeclaration_0()); }
		(PlusSign)
		{ after(grammarAccess.getAddSubOperatorAccess().getADDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddSubOperatorAccess().getSUBEnumLiteralDeclaration_1()); }
		(HyphenMinus)
		{ after(grammarAccess.getAddSubOperatorAccess().getSUBEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDivModOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulDivModOperatorAccess().getMULEnumLiteralDeclaration_0()); }
		(Asterisk)
		{ after(grammarAccess.getMulDivModOperatorAccess().getMULEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMulDivModOperatorAccess().getDIVEnumLiteralDeclaration_1()); }
		(Solidus)
		{ after(grammarAccess.getMulDivModOperatorAccess().getDIVEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getMulDivModOperatorAccess().getMODEnumLiteralDeclaration_2()); }
		(MOD)
		{ after(grammarAccess.getMulDivModOperatorAccess().getMODEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_0()); }
		(HyphenMinus)
		{ after(grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_1()); }
		(PlusSign)
		{ after(grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_2()); }
		(NOT)
		{ after(grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMultiBitAccessSpecifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTMultiBitAccessSpecifierAccess().getLEnumLiteralDeclaration_0()); }
		(L)
		{ after(grammarAccess.getSTMultiBitAccessSpecifierAccess().getLEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTMultiBitAccessSpecifierAccess().getDEnumLiteralDeclaration_1()); }
		(D_1)
		{ after(grammarAccess.getSTMultiBitAccessSpecifierAccess().getDEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTMultiBitAccessSpecifierAccess().getWEnumLiteralDeclaration_2()); }
		(W)
		{ after(grammarAccess.getSTMultiBitAccessSpecifierAccess().getWEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getSTMultiBitAccessSpecifierAccess().getBEnumLiteralDeclaration_3()); }
		(B)
		{ after(grammarAccess.getSTMultiBitAccessSpecifierAccess().getBEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getSTMultiBitAccessSpecifierAccess().getXEnumLiteralDeclaration_4()); }
		(X)
		{ after(grammarAccess.getSTMultiBitAccessSpecifierAccess().getXEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithms__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAlgorithms__Group__0__Impl
	rule__STAlgorithms__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithms__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAlgorithmsAccess().getSTAlgorithmsAction_0()); }
	()
	{ after(grammarAccess.getSTAlgorithmsAccess().getSTAlgorithmsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithms__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAlgorithms__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithms__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAlgorithmsAccess().getAlgorithmsAssignment_1()); }
	(rule__STAlgorithms__AlgorithmsAssignment_1)*
	{ after(grammarAccess.getSTAlgorithmsAccess().getAlgorithmsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAlgorithm__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAlgorithm__Group__0__Impl
	rule__STAlgorithm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithm__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAlgorithmAccess().getALGORITHMKeyword_0()); }
	ALGORITHM
	{ after(grammarAccess.getSTAlgorithmAccess().getALGORITHMKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithm__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAlgorithm__Group__1__Impl
	rule__STAlgorithm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithm__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAlgorithmAccess().getNameAssignment_1()); }
	(rule__STAlgorithm__NameAssignment_1)
	{ after(grammarAccess.getSTAlgorithmAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithm__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAlgorithm__Group__2__Impl
	rule__STAlgorithm__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithm__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAlgorithmAccess().getBodyAssignment_2()); }
	(rule__STAlgorithm__BodyAssignment_2)
	{ after(grammarAccess.getSTAlgorithmAccess().getBodyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithm__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAlgorithm__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithm__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAlgorithmAccess().getEND_ALGORITHMKeyword_3()); }
	END_ALGORITHM
	{ after(grammarAccess.getSTAlgorithmAccess().getEND_ALGORITHMKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAlgorithmBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAlgorithmBody__Group__0__Impl
	rule__STAlgorithmBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithmBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAlgorithmBodyAccess().getSTAlgorithmBodyAction_0()); }
	()
	{ after(grammarAccess.getSTAlgorithmBodyAccess().getSTAlgorithmBodyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithmBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAlgorithmBody__Group__1__Impl
	rule__STAlgorithmBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithmBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAlgorithmBodyAccess().getVarTempDeclarationsAssignment_1()); }
	(rule__STAlgorithmBody__VarTempDeclarationsAssignment_1)*
	{ after(grammarAccess.getSTAlgorithmBodyAccess().getVarTempDeclarationsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithmBody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAlgorithmBody__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithmBody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAlgorithmBodyAccess().getStatementsAssignment_2()); }
	(rule__STAlgorithmBody__StatementsAssignment_2)*
	{ after(grammarAccess.getSTAlgorithmBodyAccess().getStatementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarTempDeclarationBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarTempDeclarationBlock__Group__0__Impl
	rule__VarTempDeclarationBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationBlockAction_0()); }
	()
	{ after(grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarTempDeclarationBlock__Group__1__Impl
	rule__VarTempDeclarationBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarTempDeclarationBlockAccess().getVAR_TEMPKeyword_1()); }
	VAR_TEMP
	{ after(grammarAccess.getVarTempDeclarationBlockAccess().getVAR_TEMPKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarTempDeclarationBlock__Group__2__Impl
	rule__VarTempDeclarationBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarTempDeclarationBlockAccess().getConstantAssignment_2()); }
	(rule__VarTempDeclarationBlock__ConstantAssignment_2)?
	{ after(grammarAccess.getVarTempDeclarationBlockAccess().getConstantAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarTempDeclarationBlock__Group__3__Impl
	rule__VarTempDeclarationBlock__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationsAssignment_3()); }
	(rule__VarTempDeclarationBlock__VarDeclarationsAssignment_3)*
	{ after(grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarTempDeclarationBlock__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarTempDeclarationBlockAccess().getEND_VARKeyword_4()); }
	END_VAR
	{ after(grammarAccess.getVarTempDeclarationBlockAccess().getEND_VARKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__0__Impl
	rule__VarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getVarDeclarationAction_0()); }
	()
	{ after(grammarAccess.getVarDeclarationAccess().getVarDeclarationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__1__Impl
	rule__VarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getNameAssignment_1()); }
	(rule__VarDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVarDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__2__Impl
	rule__VarDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_2()); }
	(rule__VarDeclaration__Group_2__0)?
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__3__Impl
	rule__VarDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getColonKeyword_3()); }
	Colon
	{ after(grammarAccess.getVarDeclarationAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__4__Impl
	rule__VarDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_4()); }
	(rule__VarDeclaration__Group_4__0)?
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__5__Impl
	rule__VarDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getTypeAssignment_5()); }
	(rule__VarDeclaration__TypeAssignment_5)
	{ after(grammarAccess.getVarDeclarationAccess().getTypeAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__6__Impl
	rule__VarDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_6()); }
	(rule__VarDeclaration__Group_6__0)?
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__7__Impl
	rule__VarDeclaration__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_7()); }
	(rule__VarDeclaration__Group_7__0)?
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getSemicolonKeyword_8()); }
	Semicolon
	{ after(grammarAccess.getVarDeclarationAccess().getSemicolonKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_2__0__Impl
	rule__VarDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getATKeyword_2_0()); }
	AT
	{ after(grammarAccess.getVarDeclarationAccess().getATKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getLocatedAtAssignment_2_1()); }
	(rule__VarDeclaration__LocatedAtAssignment_2_1)
	{ after(grammarAccess.getVarDeclarationAccess().getLocatedAtAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4__0__Impl
	rule__VarDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getArrayAssignment_4_0()); }
	(rule__VarDeclaration__ArrayAssignment_4_0)
	{ after(grammarAccess.getVarDeclarationAccess().getArrayAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4__1__Impl
	rule__VarDeclaration__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getAlternatives_4_1()); }
	(rule__VarDeclaration__Alternatives_4_1)
	{ after(grammarAccess.getVarDeclarationAccess().getAlternatives_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getOFKeyword_4_2()); }
	OF
	{ after(grammarAccess.getVarDeclarationAccess().getOFKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_4_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4_1_0__0__Impl
	rule__VarDeclaration__Group_4_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_4_1_0_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_4_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4_1_0__1__Impl
	rule__VarDeclaration__Group_4_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getRangesAssignment_4_1_0_1()); }
	(rule__VarDeclaration__RangesAssignment_4_1_0_1)
	{ after(grammarAccess.getVarDeclarationAccess().getRangesAssignment_4_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4_1_0__2__Impl
	rule__VarDeclaration__Group_4_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_4_1_0_2()); }
	(rule__VarDeclaration__Group_4_1_0_2__0)*
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_4_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_4_1_0_3()); }
	RightSquareBracket
	{ after(grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_4_1_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_4_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4_1_0_2__0__Impl
	rule__VarDeclaration__Group_4_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getCommaKeyword_4_1_0_2_0()); }
	Comma
	{ after(grammarAccess.getVarDeclarationAccess().getCommaKeyword_4_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getRangesAssignment_4_1_0_2_1()); }
	(rule__VarDeclaration__RangesAssignment_4_1_0_2_1)
	{ after(grammarAccess.getVarDeclarationAccess().getRangesAssignment_4_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_4_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4_1_1__0__Impl
	rule__VarDeclaration__Group_4_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_4_1_1_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_4_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4_1_1__1__Impl
	rule__VarDeclaration__Group_4_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getCountAssignment_4_1_1_1()); }
	(rule__VarDeclaration__CountAssignment_4_1_1_1)
	{ after(grammarAccess.getVarDeclarationAccess().getCountAssignment_4_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4_1_1__2__Impl
	rule__VarDeclaration__Group_4_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_4_1_1_2()); }
	(rule__VarDeclaration__Group_4_1_1_2__0)*
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_4_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_4_1_1_3()); }
	RightSquareBracket
	{ after(grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_4_1_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_4_1_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4_1_1_2__0__Impl
	rule__VarDeclaration__Group_4_1_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getCommaKeyword_4_1_1_2_0()); }
	Comma
	{ after(grammarAccess.getVarDeclarationAccess().getCommaKeyword_4_1_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_4_1_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_4_1_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getCountAssignment_4_1_1_2_1()); }
	(rule__VarDeclaration__CountAssignment_4_1_1_2_1)
	{ after(grammarAccess.getVarDeclarationAccess().getCountAssignment_4_1_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_6__0__Impl
	rule__VarDeclaration__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_6_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_6__1__Impl
	rule__VarDeclaration__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getMaxLengthAssignment_6_1()); }
	(rule__VarDeclaration__MaxLengthAssignment_6_1)
	{ after(grammarAccess.getVarDeclarationAccess().getMaxLengthAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_6_2()); }
	RightSquareBracket
	{ after(grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_7__0__Impl
	rule__VarDeclaration__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getColonEqualsSignKeyword_7_0()); }
	ColonEqualsSign
	{ after(grammarAccess.getVarDeclarationAccess().getColonEqualsSignKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getDefaultValueAssignment_7_1()); }
	(rule__VarDeclaration__DefaultValueAssignment_7_1)
	{ after(grammarAccess.getVarDeclarationAccess().getDefaultValueAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializerExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitializerExpression__Group__0__Impl
	rule__ArrayInitializerExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitializerExpressionAccess().getLeftSquareBracketKeyword_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getArrayInitializerExpressionAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitializerExpression__Group__1__Impl
	rule__ArrayInitializerExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitializerExpressionAccess().getValuesAssignment_1()); }
	(rule__ArrayInitializerExpression__ValuesAssignment_1)
	{ after(grammarAccess.getArrayInitializerExpressionAccess().getValuesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitializerExpression__Group__2__Impl
	rule__ArrayInitializerExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitializerExpressionAccess().getGroup_2()); }
	(rule__ArrayInitializerExpression__Group_2__0)*
	{ after(grammarAccess.getArrayInitializerExpressionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitializerExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitializerExpressionAccess().getRightSquareBracketKeyword_3()); }
	RightSquareBracket
	{ after(grammarAccess.getArrayInitializerExpressionAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializerExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitializerExpression__Group_2__0__Impl
	rule__ArrayInitializerExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitializerExpressionAccess().getCommaKeyword_2_0()); }
	Comma
	{ after(grammarAccess.getArrayInitializerExpressionAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitializerExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitializerExpressionAccess().getValuesAssignment_2_1()); }
	(rule__ArrayInitializerExpression__ValuesAssignment_2_1)
	{ after(grammarAccess.getArrayInitializerExpressionAccess().getValuesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitElement__Group__0__Impl
	rule__ArrayInitElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitElementAccess().getIndexOrInitExpressionAssignment_0()); }
	(rule__ArrayInitElement__IndexOrInitExpressionAssignment_0)
	{ after(grammarAccess.getArrayInitElementAccess().getIndexOrInitExpressionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitElementAccess().getGroup_1()); }
	(rule__ArrayInitElement__Group_1__0)?
	{ after(grammarAccess.getArrayInitElementAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitElement__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitElement__Group_1__0__Impl
	rule__ArrayInitElement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitElementAccess().getLeftParenthesisKeyword_1_0()); }
	LeftParenthesis
	{ after(grammarAccess.getArrayInitElementAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitElement__Group_1__1__Impl
	rule__ArrayInitElement__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitElementAccess().getInitExpressionAssignment_1_1()); }
	(rule__ArrayInitElement__InitExpressionAssignment_1_1)
	{ after(grammarAccess.getArrayInitElementAccess().getInitExpressionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitElement__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitElementAccess().getRightParenthesisKeyword_1_2()); }
	RightParenthesis
	{ after(grammarAccess.getArrayInitElementAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STStatement__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_0__0__Impl
	rule__STStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getAlternatives_0_0()); }
	(rule__STStatement__Alternatives_0_0)
	{ after(grammarAccess.getSTStatementAccess().getAlternatives_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSemicolonKeyword_0_1()); }
	Semicolon
	{ after(grammarAccess.getSTStatementAccess().getSemicolonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STStatement__Group_0_0_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_0_0_6__0__Impl
	rule__STStatement__Group_0_0_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0_0_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSTReturnAction_0_0_6_0()); }
	()
	{ after(grammarAccess.getSTStatementAccess().getSTReturnAction_0_0_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0_0_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_0_0_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0_0_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getRETURNKeyword_0_0_6_1()); }
	RETURN
	{ after(grammarAccess.getSTStatementAccess().getRETURNKeyword_0_0_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STStatement__Group_0_0_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_0_0_7__0__Impl
	rule__STStatement__Group_0_0_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0_0_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSTContinueAction_0_0_7_0()); }
	()
	{ after(grammarAccess.getSTStatementAccess().getSTContinueAction_0_0_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0_0_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_0_0_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0_0_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getCONTINUEKeyword_0_0_7_1()); }
	CONTINUE
	{ after(grammarAccess.getSTStatementAccess().getCONTINUEKeyword_0_0_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STStatement__Group_0_0_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_0_0_8__0__Impl
	rule__STStatement__Group_0_0_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0_0_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSTExitAction_0_0_8_0()); }
	()
	{ after(grammarAccess.getSTStatementAccess().getSTExitAction_0_0_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0_0_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_0_0_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0_0_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getEXITKeyword_0_0_8_1()); }
	EXIT
	{ after(grammarAccess.getSTStatementAccess().getEXITKeyword_0_0_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STStatement__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_1__0__Impl
	rule__STStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSTNopAction_1_0()); }
	()
	{ after(grammarAccess.getSTStatementAccess().getSTNopAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSemicolonKeyword_1_1()); }
	Semicolon
	{ after(grammarAccess.getSTStatementAccess().getSemicolonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAssignmentStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAssignmentStatement__Group__0__Impl
	rule__STAssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAssignmentStatementAccess().getLeftAssignment_0()); }
	(rule__STAssignmentStatement__LeftAssignment_0)
	{ after(grammarAccess.getSTAssignmentStatementAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAssignmentStatement__Group__1__Impl
	rule__STAssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAssignmentStatementAccess().getColonEqualsSignKeyword_1()); }
	ColonEqualsSign
	{ after(grammarAccess.getSTAssignmentStatementAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAssignmentStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAssignmentStatementAccess().getRightAssignment_2()); }
	(rule__STAssignmentStatement__RightAssignment_2)
	{ after(grammarAccess.getSTAssignmentStatementAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STIfStatment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__0__Impl
	rule__STIfStatment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getIFKeyword_0()); }
	IF
	{ after(grammarAccess.getSTIfStatmentAccess().getIFKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__1__Impl
	rule__STIfStatment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getConditionAssignment_1()); }
	(rule__STIfStatment__ConditionAssignment_1)
	{ after(grammarAccess.getSTIfStatmentAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__2__Impl
	rule__STIfStatment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getTHENKeyword_2()); }
	THEN
	{ after(grammarAccess.getSTIfStatmentAccess().getTHENKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__3__Impl
	rule__STIfStatment__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getStatementsAssignment_3()); }
	(rule__STIfStatment__StatementsAssignment_3)*
	{ after(grammarAccess.getSTIfStatmentAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__4__Impl
	rule__STIfStatment__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getElseifsAssignment_4()); }
	(rule__STIfStatment__ElseifsAssignment_4)*
	{ after(grammarAccess.getSTIfStatmentAccess().getElseifsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__5__Impl
	rule__STIfStatment__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getElseAssignment_5()); }
	(rule__STIfStatment__ElseAssignment_5)?
	{ after(grammarAccess.getSTIfStatmentAccess().getElseAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getEND_IFKeyword_6()); }
	END_IF
	{ after(grammarAccess.getSTIfStatmentAccess().getEND_IFKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STElseIfPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElseIfPart__Group__0__Impl
	rule__STElseIfPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElseIfPartAccess().getELSIFKeyword_0()); }
	ELSIF
	{ after(grammarAccess.getSTElseIfPartAccess().getELSIFKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElseIfPart__Group__1__Impl
	rule__STElseIfPart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElseIfPartAccess().getConditionAssignment_1()); }
	(rule__STElseIfPart__ConditionAssignment_1)
	{ after(grammarAccess.getSTElseIfPartAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElseIfPart__Group__2__Impl
	rule__STElseIfPart__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElseIfPartAccess().getTHENKeyword_2()); }
	THEN
	{ after(grammarAccess.getSTElseIfPartAccess().getTHENKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElseIfPart__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElseIfPartAccess().getStatementsAssignment_3()); }
	(rule__STElseIfPart__StatementsAssignment_3)*
	{ after(grammarAccess.getSTElseIfPartAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STCaseStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseStatement__Group__0__Impl
	rule__STCaseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseStatementAccess().getCASEKeyword_0()); }
	CASE
	{ after(grammarAccess.getSTCaseStatementAccess().getCASEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseStatement__Group__1__Impl
	rule__STCaseStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseStatementAccess().getSelectorAssignment_1()); }
	(rule__STCaseStatement__SelectorAssignment_1)
	{ after(grammarAccess.getSTCaseStatementAccess().getSelectorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseStatement__Group__2__Impl
	rule__STCaseStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseStatementAccess().getOFKeyword_2()); }
	OF
	{ after(grammarAccess.getSTCaseStatementAccess().getOFKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseStatement__Group__3__Impl
	rule__STCaseStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSTCaseStatementAccess().getCasesAssignment_3()); }
		(rule__STCaseStatement__CasesAssignment_3)
		{ after(grammarAccess.getSTCaseStatementAccess().getCasesAssignment_3()); }
	)
	(
		{ before(grammarAccess.getSTCaseStatementAccess().getCasesAssignment_3()); }
		(rule__STCaseStatement__CasesAssignment_3)*
		{ after(grammarAccess.getSTCaseStatementAccess().getCasesAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseStatement__Group__4__Impl
	rule__STCaseStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseStatementAccess().getElseAssignment_4()); }
	(rule__STCaseStatement__ElseAssignment_4)?
	{ after(grammarAccess.getSTCaseStatementAccess().getElseAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseStatementAccess().getEND_CASEKeyword_5()); }
	END_CASE
	{ after(grammarAccess.getSTCaseStatementAccess().getEND_CASEKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STCaseCases__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseCases__Group__0__Impl
	rule__STCaseCases__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseCasesAccess().getConditionsAssignment_0()); }
	(rule__STCaseCases__ConditionsAssignment_0)
	{ after(grammarAccess.getSTCaseCasesAccess().getConditionsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseCases__Group__1__Impl
	rule__STCaseCases__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseCasesAccess().getGroup_1()); }
	(rule__STCaseCases__Group_1__0)*
	{ after(grammarAccess.getSTCaseCasesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseCases__Group__2__Impl
	rule__STCaseCases__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseCasesAccess().getColonKeyword_2()); }
	Colon
	{ after(grammarAccess.getSTCaseCasesAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseCases__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseCasesAccess().getStatementsAssignment_3()); }
	(rule__STCaseCases__StatementsAssignment_3)*
	{ after(grammarAccess.getSTCaseCasesAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STCaseCases__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseCases__Group_1__0__Impl
	rule__STCaseCases__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseCasesAccess().getCommaKeyword_1_0()); }
	Comma
	{ after(grammarAccess.getSTCaseCasesAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseCases__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseCasesAccess().getConditionsAssignment_1_1()); }
	(rule__STCaseCases__ConditionsAssignment_1_1)
	{ after(grammarAccess.getSTCaseCasesAccess().getConditionsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STElsePart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElsePart__Group__0__Impl
	rule__STElsePart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STElsePart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElsePartAccess().getSTElsePartAction_0()); }
	()
	{ after(grammarAccess.getSTElsePartAccess().getSTElsePartAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElsePart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElsePart__Group__1__Impl
	rule__STElsePart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STElsePart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElsePartAccess().getELSEKeyword_1()); }
	ELSE
	{ after(grammarAccess.getSTElsePartAccess().getELSEKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElsePart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElsePart__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STElsePart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElsePartAccess().getStatementsAssignment_2()); }
	(rule__STElsePart__StatementsAssignment_2)*
	{ after(grammarAccess.getSTElsePartAccess().getStatementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STForStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__0__Impl
	rule__STForStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getFORKeyword_0()); }
	FOR
	{ after(grammarAccess.getSTForStatementAccess().getFORKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__1__Impl
	rule__STForStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getForAssignment_1()); }
	(rule__STForStatement__ForAssignment_1)
	{ after(grammarAccess.getSTForStatementAccess().getForAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__2__Impl
	rule__STForStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getTOKeyword_2()); }
	TO
	{ after(grammarAccess.getSTForStatementAccess().getTOKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__3__Impl
	rule__STForStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getToAssignment_3()); }
	(rule__STForStatement__ToAssignment_3)
	{ after(grammarAccess.getSTForStatementAccess().getToAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__4__Impl
	rule__STForStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getGroup_4()); }
	(rule__STForStatement__Group_4__0)?
	{ after(grammarAccess.getSTForStatementAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__5__Impl
	rule__STForStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getDOKeyword_5()); }
	DO
	{ after(grammarAccess.getSTForStatementAccess().getDOKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__6__Impl
	rule__STForStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getStatementsAssignment_6()); }
	(rule__STForStatement__StatementsAssignment_6)*
	{ after(grammarAccess.getSTForStatementAccess().getStatementsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getEND_FORKeyword_7()); }
	END_FOR
	{ after(grammarAccess.getSTForStatementAccess().getEND_FORKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STForStatement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group_4__0__Impl
	rule__STForStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getBYKeyword_4_0()); }
	BY
	{ after(grammarAccess.getSTForStatementAccess().getBYKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getByAssignment_4_1()); }
	(rule__STForStatement__ByAssignment_4_1)
	{ after(grammarAccess.getSTForStatementAccess().getByAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STWhileStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STWhileStatement__Group__0__Impl
	rule__STWhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTWhileStatementAccess().getWHILEKeyword_0()); }
	WHILE
	{ after(grammarAccess.getSTWhileStatementAccess().getWHILEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STWhileStatement__Group__1__Impl
	rule__STWhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTWhileStatementAccess().getConditionAssignment_1()); }
	(rule__STWhileStatement__ConditionAssignment_1)
	{ after(grammarAccess.getSTWhileStatementAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STWhileStatement__Group__2__Impl
	rule__STWhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTWhileStatementAccess().getDOKeyword_2()); }
	DO
	{ after(grammarAccess.getSTWhileStatementAccess().getDOKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STWhileStatement__Group__3__Impl
	rule__STWhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTWhileStatementAccess().getStatementsAssignment_3()); }
	(rule__STWhileStatement__StatementsAssignment_3)*
	{ after(grammarAccess.getSTWhileStatementAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STWhileStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTWhileStatementAccess().getEND_WHILEKeyword_4()); }
	END_WHILE
	{ after(grammarAccess.getSTWhileStatementAccess().getEND_WHILEKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STRepeatStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STRepeatStatement__Group__0__Impl
	rule__STRepeatStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTRepeatStatementAccess().getREPEATKeyword_0()); }
	REPEAT
	{ after(grammarAccess.getSTRepeatStatementAccess().getREPEATKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STRepeatStatement__Group__1__Impl
	rule__STRepeatStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTRepeatStatementAccess().getStatementsAssignment_1()); }
	(rule__STRepeatStatement__StatementsAssignment_1)*
	{ after(grammarAccess.getSTRepeatStatementAccess().getStatementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STRepeatStatement__Group__2__Impl
	rule__STRepeatStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTRepeatStatementAccess().getUNTILKeyword_2()); }
	UNTIL
	{ after(grammarAccess.getSTRepeatStatementAccess().getUNTILKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STRepeatStatement__Group__3__Impl
	rule__STRepeatStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTRepeatStatementAccess().getConditionAssignment_3()); }
	(rule__STRepeatStatement__ConditionAssignment_3)
	{ after(grammarAccess.getSTRepeatStatementAccess().getConditionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STRepeatStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTRepeatStatementAccess().getEND_REPEATKeyword_4()); }
	END_REPEAT
	{ after(grammarAccess.getSTRepeatStatementAccess().getEND_REPEATKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSubrangeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSubrangeExpression__Group__0__Impl
	rule__STSubrangeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSubrangeExpressionAccess().getSTOrExpressionParserRuleCall_0()); }
	ruleSTOrExpression
	{ after(grammarAccess.getSTSubrangeExpressionAccess().getSTOrExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSubrangeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSubrangeExpressionAccess().getGroup_1()); }
	(rule__STSubrangeExpression__Group_1__0)*
	{ after(grammarAccess.getSTSubrangeExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSubrangeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSubrangeExpression__Group_1__0__Impl
	rule__STSubrangeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSubrangeExpressionAccess().getGroup_1_0()); }
	(rule__STSubrangeExpression__Group_1_0__0)
	{ after(grammarAccess.getSTSubrangeExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSubrangeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSubrangeExpressionAccess().getRightAssignment_1_1()); }
	(rule__STSubrangeExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTSubrangeExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSubrangeExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSubrangeExpression__Group_1_0__0__Impl
	rule__STSubrangeExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSubrangeExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTSubrangeExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSubrangeExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSubrangeExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STSubrangeExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTSubrangeExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STOrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STOrExpression__Group__0__Impl
	rule__STOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOrExpressionAccess().getSTXorExpressionParserRuleCall_0()); }
	ruleSTXorExpression
	{ after(grammarAccess.getSTOrExpressionAccess().getSTXorExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOrExpressionAccess().getGroup_1()); }
	(rule__STOrExpression__Group_1__0)*
	{ after(grammarAccess.getSTOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STOrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STOrExpression__Group_1__0__Impl
	rule__STOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOrExpressionAccess().getGroup_1_0()); }
	(rule__STOrExpression__Group_1_0__0)
	{ after(grammarAccess.getSTOrExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STOrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOrExpressionAccess().getRightAssignment_1_1()); }
	(rule__STOrExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTOrExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STOrExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STOrExpression__Group_1_0__0__Impl
	rule__STOrExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOrExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTOrExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STOrExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOrExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STOrExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTOrExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STXorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STXorExpression__Group__0__Impl
	rule__STXorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTXorExpressionAccess().getSTAndExpressionParserRuleCall_0()); }
	ruleSTAndExpression
	{ after(grammarAccess.getSTXorExpressionAccess().getSTAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STXorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTXorExpressionAccess().getGroup_1()); }
	(rule__STXorExpression__Group_1__0)*
	{ after(grammarAccess.getSTXorExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STXorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STXorExpression__Group_1__0__Impl
	rule__STXorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTXorExpressionAccess().getGroup_1_0()); }
	(rule__STXorExpression__Group_1_0__0)
	{ after(grammarAccess.getSTXorExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STXorExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTXorExpressionAccess().getRightAssignment_1_1()); }
	(rule__STXorExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTXorExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STXorExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STXorExpression__Group_1_0__0__Impl
	rule__STXorExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTXorExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTXorExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STXorExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTXorExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STXorExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTXorExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAndExpression__Group__0__Impl
	rule__STAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAndExpressionAccess().getSTEqualityExpressionParserRuleCall_0()); }
	ruleSTEqualityExpression
	{ after(grammarAccess.getSTAndExpressionAccess().getSTEqualityExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAndExpressionAccess().getGroup_1()); }
	(rule__STAndExpression__Group_1__0)*
	{ after(grammarAccess.getSTAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAndExpression__Group_1__0__Impl
	rule__STAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAndExpressionAccess().getGroup_1_0()); }
	(rule__STAndExpression__Group_1_0__0)
	{ after(grammarAccess.getSTAndExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAndExpressionAccess().getRightAssignment_1_1()); }
	(rule__STAndExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTAndExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAndExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAndExpression__Group_1_0__0__Impl
	rule__STAndExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAndExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTAndExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAndExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAndExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STAndExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTAndExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STEqualityExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STEqualityExpression__Group__0__Impl
	rule__STEqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTEqualityExpressionAccess().getSTComparisonExpressionParserRuleCall_0()); }
	ruleSTComparisonExpression
	{ after(grammarAccess.getSTEqualityExpressionAccess().getSTComparisonExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STEqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTEqualityExpressionAccess().getGroup_1()); }
	(rule__STEqualityExpression__Group_1__0)*
	{ after(grammarAccess.getSTEqualityExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STEqualityExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STEqualityExpression__Group_1__0__Impl
	rule__STEqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTEqualityExpressionAccess().getGroup_1_0()); }
	(rule__STEqualityExpression__Group_1_0__0)
	{ after(grammarAccess.getSTEqualityExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STEqualityExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTEqualityExpressionAccess().getRightAssignment_1_1()); }
	(rule__STEqualityExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTEqualityExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STEqualityExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STEqualityExpression__Group_1_0__0__Impl
	rule__STEqualityExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTEqualityExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTEqualityExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STEqualityExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTEqualityExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STEqualityExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTEqualityExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STComparisonExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STComparisonExpression__Group__0__Impl
	rule__STComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTComparisonExpressionAccess().getSTAddSubExpressionParserRuleCall_0()); }
	ruleSTAddSubExpression
	{ after(grammarAccess.getSTComparisonExpressionAccess().getSTAddSubExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTComparisonExpressionAccess().getGroup_1()); }
	(rule__STComparisonExpression__Group_1__0)*
	{ after(grammarAccess.getSTComparisonExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STComparisonExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STComparisonExpression__Group_1__0__Impl
	rule__STComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTComparisonExpressionAccess().getGroup_1_0()); }
	(rule__STComparisonExpression__Group_1_0__0)
	{ after(grammarAccess.getSTComparisonExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STComparisonExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTComparisonExpressionAccess().getRightAssignment_1_1()); }
	(rule__STComparisonExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTComparisonExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STComparisonExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STComparisonExpression__Group_1_0__0__Impl
	rule__STComparisonExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTComparisonExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTComparisonExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STComparisonExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTComparisonExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STComparisonExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTComparisonExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAddSubExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAddSubExpression__Group__0__Impl
	rule__STAddSubExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAddSubExpressionAccess().getSTMulDivModExpressionParserRuleCall_0()); }
	ruleSTMulDivModExpression
	{ after(grammarAccess.getSTAddSubExpressionAccess().getSTMulDivModExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAddSubExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAddSubExpressionAccess().getGroup_1()); }
	(rule__STAddSubExpression__Group_1__0)*
	{ after(grammarAccess.getSTAddSubExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAddSubExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAddSubExpression__Group_1__0__Impl
	rule__STAddSubExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAddSubExpressionAccess().getGroup_1_0()); }
	(rule__STAddSubExpression__Group_1_0__0)
	{ after(grammarAccess.getSTAddSubExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAddSubExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAddSubExpressionAccess().getRightAssignment_1_1()); }
	(rule__STAddSubExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTAddSubExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAddSubExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAddSubExpression__Group_1_0__0__Impl
	rule__STAddSubExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAddSubExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTAddSubExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAddSubExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAddSubExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STAddSubExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTAddSubExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STMulDivModExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMulDivModExpression__Group__0__Impl
	rule__STMulDivModExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMulDivModExpressionAccess().getSTPowerExpressionParserRuleCall_0()); }
	ruleSTPowerExpression
	{ after(grammarAccess.getSTMulDivModExpressionAccess().getSTPowerExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMulDivModExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMulDivModExpressionAccess().getGroup_1()); }
	(rule__STMulDivModExpression__Group_1__0)*
	{ after(grammarAccess.getSTMulDivModExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STMulDivModExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMulDivModExpression__Group_1__0__Impl
	rule__STMulDivModExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMulDivModExpressionAccess().getGroup_1_0()); }
	(rule__STMulDivModExpression__Group_1_0__0)
	{ after(grammarAccess.getSTMulDivModExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMulDivModExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMulDivModExpressionAccess().getRightAssignment_1_1()); }
	(rule__STMulDivModExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTMulDivModExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STMulDivModExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMulDivModExpression__Group_1_0__0__Impl
	rule__STMulDivModExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMulDivModExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTMulDivModExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMulDivModExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMulDivModExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STMulDivModExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTMulDivModExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STPowerExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPowerExpression__Group__0__Impl
	rule__STPowerExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPowerExpressionAccess().getSTUnaryExpressionParserRuleCall_0()); }
	ruleSTUnaryExpression
	{ after(grammarAccess.getSTPowerExpressionAccess().getSTUnaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPowerExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPowerExpressionAccess().getGroup_1()); }
	(rule__STPowerExpression__Group_1__0)*
	{ after(grammarAccess.getSTPowerExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STPowerExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPowerExpression__Group_1__0__Impl
	rule__STPowerExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPowerExpressionAccess().getGroup_1_0()); }
	(rule__STPowerExpression__Group_1_0__0)
	{ after(grammarAccess.getSTPowerExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPowerExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPowerExpressionAccess().getRightAssignment_1_1()); }
	(rule__STPowerExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTPowerExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STPowerExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPowerExpression__Group_1_0__0__Impl
	rule__STPowerExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPowerExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTPowerExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPowerExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPowerExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STPowerExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTPowerExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STUnaryExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STUnaryExpression__Group_1__0__Impl
	rule__STUnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STUnaryExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTUnaryExpressionAccess().getSTUnaryExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getSTUnaryExpressionAccess().getSTUnaryExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STUnaryExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STUnaryExpression__Group_1__1__Impl
	rule__STUnaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STUnaryExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTUnaryExpressionAccess().getOpAssignment_1_1()); }
	(rule__STUnaryExpression__OpAssignment_1_1)
	{ after(grammarAccess.getSTUnaryExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STUnaryExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STUnaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STUnaryExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTUnaryExpressionAccess().getExpressionAssignment_1_2()); }
	(rule__STUnaryExpression__ExpressionAssignment_1_2)
	{ after(grammarAccess.getSTUnaryExpressionAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAccessExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAccessExpression__Group__0__Impl
	rule__STAccessExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAccessExpressionAccess().getSTPrimaryExpressionParserRuleCall_0()); }
	ruleSTPrimaryExpression
	{ after(grammarAccess.getSTAccessExpressionAccess().getSTPrimaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAccessExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAccessExpressionAccess().getAlternatives_1()); }
	(rule__STAccessExpression__Alternatives_1)*
	{ after(grammarAccess.getSTAccessExpressionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAccessExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAccessExpression__Group_1_0__0__Impl
	rule__STAccessExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAccessExpressionAccess().getSTMemberAccessExpressionReceiverAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTAccessExpressionAccess().getSTMemberAccessExpressionReceiverAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAccessExpression__Group_1_0__1__Impl
	rule__STAccessExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAccessExpressionAccess().getFullStopKeyword_1_0_1()); }
	FullStop
	{ after(grammarAccess.getSTAccessExpressionAccess().getFullStopKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAccessExpression__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAccessExpressionAccess().getMemberAssignment_1_0_2()); }
	(rule__STAccessExpression__MemberAssignment_1_0_2)
	{ after(grammarAccess.getSTAccessExpressionAccess().getMemberAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAccessExpression__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAccessExpression__Group_1_1__0__Impl
	rule__STAccessExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAccessExpressionAccess().getSTArrayAccessExpressionReceiverAction_1_1_0()); }
	()
	{ after(grammarAccess.getSTAccessExpressionAccess().getSTArrayAccessExpressionReceiverAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAccessExpression__Group_1_1__1__Impl
	rule__STAccessExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAccessExpressionAccess().getLeftSquareBracketKeyword_1_1_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getSTAccessExpressionAccess().getLeftSquareBracketKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAccessExpression__Group_1_1__2__Impl
	rule__STAccessExpression__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAccessExpressionAccess().getIndexAssignment_1_1_2()); }
	(rule__STAccessExpression__IndexAssignment_1_1_2)
	{ after(grammarAccess.getSTAccessExpressionAccess().getIndexAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAccessExpression__Group_1_1__3__Impl
	rule__STAccessExpression__Group_1_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAccessExpressionAccess().getGroup_1_1_3()); }
	(rule__STAccessExpression__Group_1_1_3__0)*
	{ after(grammarAccess.getSTAccessExpressionAccess().getGroup_1_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAccessExpression__Group_1_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAccessExpressionAccess().getRightSquareBracketKeyword_1_1_4()); }
	RightSquareBracket
	{ after(grammarAccess.getSTAccessExpressionAccess().getRightSquareBracketKeyword_1_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAccessExpression__Group_1_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAccessExpression__Group_1_1_3__0__Impl
	rule__STAccessExpression__Group_1_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAccessExpressionAccess().getCommaKeyword_1_1_3_0()); }
	Comma
	{ after(grammarAccess.getSTAccessExpressionAccess().getCommaKeyword_1_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAccessExpression__Group_1_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__Group_1_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAccessExpressionAccess().getIndexAssignment_1_1_3_1()); }
	(rule__STAccessExpression__IndexAssignment_1_1_3_1)
	{ after(grammarAccess.getSTAccessExpressionAccess().getIndexAssignment_1_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STPrimaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPrimaryExpression__Group_0__0__Impl
	rule__STPrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STPrimaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getSTPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STPrimaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPrimaryExpression__Group_0__1__Impl
	rule__STPrimaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STPrimaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPrimaryExpressionAccess().getSTExpressionParserRuleCall_0_1()); }
	ruleSTExpression
	{ after(grammarAccess.getSTPrimaryExpressionAccess().getSTExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STPrimaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPrimaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STPrimaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
	RightParenthesis
	{ after(grammarAccess.getSTPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STFeatureExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STFeatureExpression__Group__0__Impl
	rule__STFeatureExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTFeatureExpressionAccess().getSTFeatureExpressionAction_0()); }
	()
	{ after(grammarAccess.getSTFeatureExpressionAccess().getSTFeatureExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STFeatureExpression__Group__1__Impl
	rule__STFeatureExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTFeatureExpressionAccess().getFeatureAssignment_1()); }
	(rule__STFeatureExpression__FeatureAssignment_1)
	{ after(grammarAccess.getSTFeatureExpressionAccess().getFeatureAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STFeatureExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTFeatureExpressionAccess().getGroup_2()); }
	(rule__STFeatureExpression__Group_2__0)?
	{ after(grammarAccess.getSTFeatureExpressionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STFeatureExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STFeatureExpression__Group_2__0__Impl
	rule__STFeatureExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTFeatureExpressionAccess().getLeftParenthesisKeyword_2_0()); }
	(LeftParenthesis)
	{ after(grammarAccess.getSTFeatureExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STFeatureExpression__Group_2__1__Impl
	rule__STFeatureExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTFeatureExpressionAccess().getGroup_2_1()); }
	(rule__STFeatureExpression__Group_2_1__0)?
	{ after(grammarAccess.getSTFeatureExpressionAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STFeatureExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTFeatureExpressionAccess().getRightParenthesisKeyword_2_2()); }
	RightParenthesis
	{ after(grammarAccess.getSTFeatureExpressionAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STFeatureExpression__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STFeatureExpression__Group_2_1__0__Impl
	rule__STFeatureExpression__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTFeatureExpressionAccess().getParametersAssignment_2_1_0()); }
	(rule__STFeatureExpression__ParametersAssignment_2_1_0)
	{ after(grammarAccess.getSTFeatureExpressionAccess().getParametersAssignment_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STFeatureExpression__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTFeatureExpressionAccess().getGroup_2_1_1()); }
	(rule__STFeatureExpression__Group_2_1_1__0)*
	{ after(grammarAccess.getSTFeatureExpressionAccess().getGroup_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STFeatureExpression__Group_2_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STFeatureExpression__Group_2_1_1__0__Impl
	rule__STFeatureExpression__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group_2_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTFeatureExpressionAccess().getCommaKeyword_2_1_1_0()); }
	Comma
	{ after(grammarAccess.getSTFeatureExpressionAccess().getCommaKeyword_2_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group_2_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STFeatureExpression__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__Group_2_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTFeatureExpressionAccess().getParametersAssignment_2_1_1_1()); }
	(rule__STFeatureExpression__ParametersAssignment_2_1_1_1)
	{ after(grammarAccess.getSTFeatureExpressionAccess().getParametersAssignment_2_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STMultibitPartialExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMultibitPartialExpression__Group__0__Impl
	rule__STMultibitPartialExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STMultibitPartialExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMultibitPartialExpressionAccess().getSTMultibitPartialExpressionAction_0()); }
	()
	{ after(grammarAccess.getSTMultibitPartialExpressionAccess().getSTMultibitPartialExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMultibitPartialExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMultibitPartialExpression__Group__1__Impl
	rule__STMultibitPartialExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STMultibitPartialExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMultibitPartialExpressionAccess().getSpecifierAssignment_1()); }
	(rule__STMultibitPartialExpression__SpecifierAssignment_1)?
	{ after(grammarAccess.getSTMultibitPartialExpressionAccess().getSpecifierAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMultibitPartialExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMultibitPartialExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STMultibitPartialExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMultibitPartialExpressionAccess().getIndexAssignment_2()); }
	(rule__STMultibitPartialExpression__IndexAssignment_2)
	{ after(grammarAccess.getSTMultibitPartialExpressionAccess().getIndexAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STNumericLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STNumericLiteral__Group__0__Impl
	rule__STNumericLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STNumericLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTNumericLiteralAccess().getTypeAssignment_0()); }
	(rule__STNumericLiteral__TypeAssignment_0)?
	{ after(grammarAccess.getSTNumericLiteralAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STNumericLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STNumericLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STNumericLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTNumericLiteralAccess().getValueAssignment_1()); }
	(rule__STNumericLiteral__ValueAssignment_1)
	{ after(grammarAccess.getSTNumericLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STDateLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STDateLiteral__Group__0__Impl
	rule__STDateLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTDateLiteralAccess().getTypeAssignment_0()); }
	(rule__STDateLiteral__TypeAssignment_0)
	{ after(grammarAccess.getSTDateLiteralAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STDateLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTDateLiteralAccess().getValueAssignment_1()); }
	(rule__STDateLiteral__ValueAssignment_1)
	{ after(grammarAccess.getSTDateLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STTimeLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STTimeLiteral__Group__0__Impl
	rule__STTimeLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STTimeLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTTimeLiteralAccess().getTypeAssignment_0()); }
	(rule__STTimeLiteral__TypeAssignment_0)
	{ after(grammarAccess.getSTTimeLiteralAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STTimeLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STTimeLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STTimeLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTTimeLiteralAccess().getValueAssignment_1()); }
	(rule__STTimeLiteral__ValueAssignment_1)
	{ after(grammarAccess.getSTTimeLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STTimeOfDayLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STTimeOfDayLiteral__Group__0__Impl
	rule__STTimeOfDayLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STTimeOfDayLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTTimeOfDayLiteralAccess().getTypeAssignment_0()); }
	(rule__STTimeOfDayLiteral__TypeAssignment_0)
	{ after(grammarAccess.getSTTimeOfDayLiteralAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STTimeOfDayLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STTimeOfDayLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STTimeOfDayLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTTimeOfDayLiteralAccess().getValueAssignment_1()); }
	(rule__STTimeOfDayLiteral__ValueAssignment_1)
	{ after(grammarAccess.getSTTimeOfDayLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STDateAndTimeLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STDateAndTimeLiteral__Group__0__Impl
	rule__STDateAndTimeLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateAndTimeLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTDateAndTimeLiteralAccess().getTypeAssignment_0()); }
	(rule__STDateAndTimeLiteral__TypeAssignment_0)
	{ after(grammarAccess.getSTDateAndTimeLiteralAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateAndTimeLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STDateAndTimeLiteral__Group__1__Impl
	rule__STDateAndTimeLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateAndTimeLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTDateAndTimeLiteralAccess().getDateValueAssignment_1()); }
	(rule__STDateAndTimeLiteral__DateValueAssignment_1)
	{ after(grammarAccess.getSTDateAndTimeLiteralAccess().getDateValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateAndTimeLiteral__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STDateAndTimeLiteral__Group__2__Impl
	rule__STDateAndTimeLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateAndTimeLiteral__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTDateAndTimeLiteralAccess().getHyphenMinusKeyword_2()); }
	HyphenMinus
	{ after(grammarAccess.getSTDateAndTimeLiteralAccess().getHyphenMinusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateAndTimeLiteral__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STDateAndTimeLiteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateAndTimeLiteral__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTDateAndTimeLiteralAccess().getTimeOfDayValueAssignment_3()); }
	(rule__STDateAndTimeLiteral__TimeOfDayValueAssignment_3)
	{ after(grammarAccess.getSTDateAndTimeLiteralAccess().getTimeOfDayValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STStringLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStringLiteral__Group__0__Impl
	rule__STStringLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STStringLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStringLiteralAccess().getTypeAssignment_0()); }
	(rule__STStringLiteral__TypeAssignment_0)?
	{ after(grammarAccess.getSTStringLiteralAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStringLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStringLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STStringLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStringLiteralAccess().getValueAssignment_1()); }
	(rule__STStringLiteral__ValueAssignment_1)
	{ after(grammarAccess.getSTStringLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__0__Impl
	rule__Number__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getAlternatives_0()); }
	(rule__Number__Alternatives_0)?
	{ after(grammarAccess.getNumberAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__1__Impl
	rule__Number__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getGroup_2()); }
	(rule__Number__Group_2__0)?
	{ after(grammarAccess.getNumberAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_2__0__Impl
	rule__Number__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getFullStopKeyword_2_0()); }
	(FullStop)
	{ after(grammarAccess.getNumberAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getAlternatives_2_1()); }
	(rule__Number__Alternatives_2_1)
	{ after(grammarAccess.getNumberAccess().getAlternatives_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Date__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group__0__Impl
	rule__Date__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getDateAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group__1__Impl
	rule__Date__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getHyphenMinusKeyword_1()); }
	HyphenMinus
	{ after(grammarAccess.getDateAccess().getHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group__2__Impl
	rule__Date__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getDateAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group__3__Impl
	rule__Date__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getHyphenMinusKeyword_3()); }
	HyphenMinus
	{ after(grammarAccess.getDateAccess().getHyphenMinusKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getINTTerminalRuleCall_4()); }
	RULE_INT
	{ after(grammarAccess.getDateAccess().getINTTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeOfDay__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeOfDay__Group__0__Impl
	rule__TimeOfDay__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeOfDay__Group__1__Impl
	rule__TimeOfDay__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeOfDayAccess().getColonKeyword_1()); }
	Colon
	{ after(grammarAccess.getTimeOfDayAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeOfDay__Group__2__Impl
	rule__TimeOfDay__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeOfDay__Group__3__Impl
	rule__TimeOfDay__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeOfDayAccess().getColonKeyword_3()); }
	Colon
	{ after(grammarAccess.getTimeOfDayAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeOfDay__Group__4__Impl
	rule__TimeOfDay__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_4()); }
	RULE_INT
	{ after(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeOfDay__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeOfDayAccess().getGroup_5()); }
	(rule__TimeOfDay__Group_5__0)?
	{ after(grammarAccess.getTimeOfDayAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeOfDay__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeOfDay__Group_5__0__Impl
	rule__TimeOfDay__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeOfDayAccess().getFullStopKeyword_5_0()); }
	(FullStop)
	{ after(grammarAccess.getTimeOfDayAccess().getFullStopKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeOfDay__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeOfDay__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_5_1()); }
	RULE_INT
	{ after(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Time__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__0__Impl
	rule__Time__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getNumberParserRuleCall_0()); }
	ruleNumber
	{ after(grammarAccess.getTimeAccess().getNumberParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__1__Impl
	rule__Time__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getAlternatives_1()); }
	(rule__Time__Alternatives_1)
	{ after(grammarAccess.getTimeAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().get_Keyword_2()); }
	(KW__)?
	{ after(grammarAccess.getTimeAccess().get_Keyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAlgorithms__AlgorithmsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAlgorithmsAccess().getAlgorithmsSTAlgorithmParserRuleCall_1_0()); }
		ruleSTAlgorithm
		{ after(grammarAccess.getSTAlgorithmsAccess().getAlgorithmsSTAlgorithmParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithm__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAlgorithmAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSTAlgorithmAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithm__BodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAlgorithmAccess().getBodySTAlgorithmBodyParserRuleCall_2_0()); }
		ruleSTAlgorithmBody
		{ after(grammarAccess.getSTAlgorithmAccess().getBodySTAlgorithmBodyParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithmBody__VarTempDeclarationsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAlgorithmBodyAccess().getVarTempDeclarationsVarTempDeclarationBlockParserRuleCall_1_0()); }
		ruleVarTempDeclarationBlock
		{ after(grammarAccess.getSTAlgorithmBodyAccess().getVarTempDeclarationsVarTempDeclarationBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAlgorithmBody__StatementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAlgorithmBodyAccess().getStatementsSTStatementParserRuleCall_2_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTAlgorithmBodyAccess().getStatementsSTStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__ConstantAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarTempDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
		(
			{ before(grammarAccess.getVarTempDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
			CONSTANT
			{ after(grammarAccess.getVarTempDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
		)
		{ after(grammarAccess.getVarTempDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__VarDeclarationsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__LocatedAtAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getLocatedAtINamedElementCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getVarDeclarationAccess().getLocatedAtINamedElementIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVarDeclarationAccess().getLocatedAtINamedElementIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getVarDeclarationAccess().getLocatedAtINamedElementCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__ArrayAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getArrayARRAYKeyword_4_0_0()); }
		(
			{ before(grammarAccess.getVarDeclarationAccess().getArrayARRAYKeyword_4_0_0()); }
			ARRAY
			{ after(grammarAccess.getVarDeclarationAccess().getArrayARRAYKeyword_4_0_0()); }
		)
		{ after(grammarAccess.getVarDeclarationAccess().getArrayARRAYKeyword_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__RangesAssignment_4_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getRangesSTExpressionParserRuleCall_4_1_0_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getVarDeclarationAccess().getRangesSTExpressionParserRuleCall_4_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__RangesAssignment_4_1_0_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getRangesSTExpressionParserRuleCall_4_1_0_2_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getVarDeclarationAccess().getRangesSTExpressionParserRuleCall_4_1_0_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__CountAssignment_4_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_1_0()); }
		(
			{ before(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_1_0()); }
			Asterisk
			{ after(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_1_0()); }
		)
		{ after(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__CountAssignment_4_1_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_2_1_0()); }
		(
			{ before(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_2_1_0()); }
			Asterisk
			{ after(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_2_1_0()); }
		)
		{ after(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__TypeAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getTypeLibraryElementCrossReference_5_0()); }
		(
			{ before(grammarAccess.getVarDeclarationAccess().getTypeLibraryElementIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVarDeclarationAccess().getTypeLibraryElementIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getVarDeclarationAccess().getTypeLibraryElementCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__MaxLengthAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getMaxLengthSTExpressionParserRuleCall_6_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getVarDeclarationAccess().getMaxLengthSTExpressionParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__DefaultValueAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getDefaultValueInitializerExpressionParserRuleCall_7_1_0()); }
		ruleInitializerExpression
		{ after(grammarAccess.getVarDeclarationAccess().getDefaultValueInitializerExpressionParserRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__ValuesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayInitializerExpressionAccess().getValuesArrayInitElementParserRuleCall_1_0()); }
		ruleArrayInitElement
		{ after(grammarAccess.getArrayInitializerExpressionAccess().getValuesArrayInitElementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__ValuesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayInitializerExpressionAccess().getValuesArrayInitElementParserRuleCall_2_1_0()); }
		ruleArrayInitElement
		{ after(grammarAccess.getArrayInitializerExpressionAccess().getValuesArrayInitElementParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__IndexOrInitExpressionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayInitElementAccess().getIndexOrInitExpressionSTExpressionParserRuleCall_0_0()); }
		ruleSTExpression
		{ after(grammarAccess.getArrayInitElementAccess().getIndexOrInitExpressionSTExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__InitExpressionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayInitElementAccess().getInitExpressionSTExpressionParserRuleCall_1_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getArrayInitElementAccess().getInitExpressionSTExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAssignmentStatementAccess().getLeftSTAccessExpressionParserRuleCall_0_0()); }
		ruleSTAccessExpression
		{ after(grammarAccess.getSTAssignmentStatementAccess().getLeftSTAccessExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAssignmentStatementAccess().getRightSTExpressionParserRuleCall_2_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTAssignmentStatementAccess().getRightSTExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTIfStatmentAccess().getConditionSTExpressionParserRuleCall_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTIfStatmentAccess().getConditionSTExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTIfStatmentAccess().getStatementsSTStatementParserRuleCall_3_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTIfStatmentAccess().getStatementsSTStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__ElseifsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTIfStatmentAccess().getElseifsSTElseIfPartParserRuleCall_4_0()); }
		ruleSTElseIfPart
		{ after(grammarAccess.getSTIfStatmentAccess().getElseifsSTElseIfPartParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__ElseAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTIfStatmentAccess().getElseSTElsePartParserRuleCall_5_0()); }
		ruleSTElsePart
		{ after(grammarAccess.getSTIfStatmentAccess().getElseSTElsePartParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTElseIfPartAccess().getConditionSTExpressionParserRuleCall_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTElseIfPartAccess().getConditionSTExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTElseIfPartAccess().getStatementsSTStatementParserRuleCall_3_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTElseIfPartAccess().getStatementsSTStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__SelectorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTCaseStatementAccess().getSelectorSTExpressionParserRuleCall_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTCaseStatementAccess().getSelectorSTExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__CasesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTCaseStatementAccess().getCasesSTCaseCasesParserRuleCall_3_0()); }
		ruleSTCaseCases
		{ after(grammarAccess.getSTCaseStatementAccess().getCasesSTCaseCasesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__ElseAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTCaseStatementAccess().getElseSTElsePartParserRuleCall_4_0()); }
		ruleSTElsePart
		{ after(grammarAccess.getSTCaseStatementAccess().getElseSTElsePartParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__ConditionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_0_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__ConditionsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_1_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTCaseCasesAccess().getStatementsSTStatementParserRuleCall_3_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTCaseCasesAccess().getStatementsSTStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElsePart__StatementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTElsePartAccess().getStatementsSTStatementParserRuleCall_2_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTElsePartAccess().getStatementsSTStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__ForAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTForStatementAccess().getForSTExpressionParserRuleCall_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTForStatementAccess().getForSTExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__ToAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTForStatementAccess().getToSTExpressionParserRuleCall_3_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTForStatementAccess().getToSTExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__ByAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTForStatementAccess().getBySTExpressionParserRuleCall_4_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTForStatementAccess().getBySTExpressionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__StatementsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTForStatementAccess().getStatementsSTStatementParserRuleCall_6_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTForStatementAccess().getStatementsSTStatementParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTWhileStatementAccess().getConditionSTExpressionParserRuleCall_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTWhileStatementAccess().getConditionSTExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTWhileStatementAccess().getStatementsSTStatementParserRuleCall_3_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTWhileStatementAccess().getStatementsSTStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTRepeatStatementAccess().getStatementsSTStatementParserRuleCall_1_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTRepeatStatementAccess().getStatementsSTStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__ConditionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTRepeatStatementAccess().getConditionSTExpressionParserRuleCall_3_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTRepeatStatementAccess().getConditionSTExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSubrangeExpressionAccess().getOpSubrangeOperatorEnumRuleCall_1_0_1_0()); }
		ruleSubrangeOperator
		{ after(grammarAccess.getSTSubrangeExpressionAccess().getOpSubrangeOperatorEnumRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSubrangeExpressionAccess().getRightSTOrExpressionParserRuleCall_1_1_0()); }
		ruleSTOrExpression
		{ after(grammarAccess.getSTSubrangeExpressionAccess().getRightSTOrExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTOrExpressionAccess().getOpOrOperatorEnumRuleCall_1_0_1_0()); }
		ruleOrOperator
		{ after(grammarAccess.getSTOrExpressionAccess().getOpOrOperatorEnumRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTOrExpressionAccess().getRightSTXorExpressionParserRuleCall_1_1_0()); }
		ruleSTXorExpression
		{ after(grammarAccess.getSTOrExpressionAccess().getRightSTXorExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTXorExpressionAccess().getOpXorOperatorEnumRuleCall_1_0_1_0()); }
		ruleXorOperator
		{ after(grammarAccess.getSTXorExpressionAccess().getOpXorOperatorEnumRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTXorExpressionAccess().getRightSTAndExpressionParserRuleCall_1_1_0()); }
		ruleSTAndExpression
		{ after(grammarAccess.getSTXorExpressionAccess().getRightSTAndExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAndExpressionAccess().getOpAndOperatorEnumRuleCall_1_0_1_0()); }
		ruleAndOperator
		{ after(grammarAccess.getSTAndExpressionAccess().getOpAndOperatorEnumRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAndExpressionAccess().getRightSTEqualityExpressionParserRuleCall_1_1_0()); }
		ruleSTEqualityExpression
		{ after(grammarAccess.getSTAndExpressionAccess().getRightSTEqualityExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_1_0()); }
		ruleEqualityOperator
		{ after(grammarAccess.getSTEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTEqualityExpressionAccess().getRightSTComparisonExpressionParserRuleCall_1_1_0()); }
		ruleSTComparisonExpression
		{ after(grammarAccess.getSTEqualityExpressionAccess().getRightSTComparisonExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTComparisonExpressionAccess().getOpCompareOperatorEnumRuleCall_1_0_1_0()); }
		ruleCompareOperator
		{ after(grammarAccess.getSTComparisonExpressionAccess().getOpCompareOperatorEnumRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTComparisonExpressionAccess().getRightSTAddSubExpressionParserRuleCall_1_1_0()); }
		ruleSTAddSubExpression
		{ after(grammarAccess.getSTComparisonExpressionAccess().getRightSTAddSubExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAddSubExpressionAccess().getOpAddSubOperatorEnumRuleCall_1_0_1_0()); }
		ruleAddSubOperator
		{ after(grammarAccess.getSTAddSubExpressionAccess().getOpAddSubOperatorEnumRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAddSubExpressionAccess().getRightSTMulDivModExpressionParserRuleCall_1_1_0()); }
		ruleSTMulDivModExpression
		{ after(grammarAccess.getSTAddSubExpressionAccess().getRightSTMulDivModExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTMulDivModExpressionAccess().getOpMulDivModOperatorEnumRuleCall_1_0_1_0()); }
		ruleMulDivModOperator
		{ after(grammarAccess.getSTMulDivModExpressionAccess().getOpMulDivModOperatorEnumRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTMulDivModExpressionAccess().getRightSTPowerExpressionParserRuleCall_1_1_0()); }
		ruleSTPowerExpression
		{ after(grammarAccess.getSTMulDivModExpressionAccess().getRightSTPowerExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTPowerExpressionAccess().getOpPowerOperatorEnumRuleCall_1_0_1_0()); }
		rulePowerOperator
		{ after(grammarAccess.getSTPowerExpressionAccess().getOpPowerOperatorEnumRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTPowerExpressionAccess().getRightSTUnaryExpressionParserRuleCall_1_1_0()); }
		ruleSTUnaryExpression
		{ after(grammarAccess.getSTPowerExpressionAccess().getRightSTUnaryExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STUnaryExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0()); }
		ruleUnaryOperator
		{ after(grammarAccess.getSTUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STUnaryExpression__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTUnaryExpressionAccess().getExpressionSTUnaryExpressionParserRuleCall_1_2_0()); }
		ruleSTUnaryExpression
		{ after(grammarAccess.getSTUnaryExpressionAccess().getExpressionSTUnaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__MemberAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAccessExpressionAccess().getMemberAlternatives_1_0_2_0()); }
		(rule__STAccessExpression__MemberAlternatives_1_0_2_0)
		{ after(grammarAccess.getSTAccessExpressionAccess().getMemberAlternatives_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__IndexAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAccessExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_2_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTAccessExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAccessExpression__IndexAssignment_1_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAccessExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_3_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTAccessExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__FeatureAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTFeatureExpressionAccess().getFeatureINamedElementCrossReference_1_0()); }
		(
			{ before(grammarAccess.getSTFeatureExpressionAccess().getFeatureINamedElementIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSTFeatureExpressionAccess().getFeatureINamedElementIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getSTFeatureExpressionAccess().getFeatureINamedElementCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__ParametersAssignment_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTFeatureExpressionAccess().getParametersSTExpressionParserRuleCall_2_1_0_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTFeatureExpressionAccess().getParametersSTExpressionParserRuleCall_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STFeatureExpression__ParametersAssignment_2_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTFeatureExpressionAccess().getParametersSTExpressionParserRuleCall_2_1_1_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTFeatureExpressionAccess().getParametersSTExpressionParserRuleCall_2_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMultibitPartialExpression__SpecifierAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTMultibitPartialExpressionAccess().getSpecifierSTMultiBitAccessSpecifierEnumRuleCall_1_0()); }
		ruleSTMultiBitAccessSpecifier
		{ after(grammarAccess.getSTMultibitPartialExpressionAccess().getSpecifierSTMultiBitAccessSpecifierEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMultibitPartialExpression__IndexAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTMultibitPartialExpressionAccess().getIndexINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getSTMultibitPartialExpressionAccess().getIndexINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STNumericLiteral__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTNumericLiteralAccess().getTypeSTNumericLiteralTypeParserRuleCall_0_0()); }
		ruleSTNumericLiteralType
		{ after(grammarAccess.getSTNumericLiteralAccess().getTypeSTNumericLiteralTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STNumericLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTNumericLiteralAccess().getValueAlternatives_1_0()); }
		(rule__STNumericLiteral__ValueAlternatives_1_0)
		{ after(grammarAccess.getSTNumericLiteralAccess().getValueAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateLiteral__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTDateLiteralAccess().getTypeSTDateLiteralTypeParserRuleCall_0_0()); }
		ruleSTDateLiteralType
		{ after(grammarAccess.getSTDateLiteralAccess().getTypeSTDateLiteralTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTDateLiteralAccess().getValueDateParserRuleCall_1_0()); }
		ruleDate
		{ after(grammarAccess.getSTDateLiteralAccess().getValueDateParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STTimeLiteral__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTTimeLiteralAccess().getTypeSTTimeLiteralTypeParserRuleCall_0_0()); }
		ruleSTTimeLiteralType
		{ after(grammarAccess.getSTTimeLiteralAccess().getTypeSTTimeLiteralTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STTimeLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTTimeLiteralAccess().getValueTimeParserRuleCall_1_0()); }
		ruleTime
		{ after(grammarAccess.getSTTimeLiteralAccess().getValueTimeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STTimeOfDayLiteral__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTTimeOfDayLiteralAccess().getTypeSTTimeOfDayLiteralTypeParserRuleCall_0_0()); }
		ruleSTTimeOfDayLiteralType
		{ after(grammarAccess.getSTTimeOfDayLiteralAccess().getTypeSTTimeOfDayLiteralTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STTimeOfDayLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTTimeOfDayLiteralAccess().getValueTimeOfDayParserRuleCall_1_0()); }
		ruleTimeOfDay
		{ after(grammarAccess.getSTTimeOfDayLiteralAccess().getValueTimeOfDayParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateAndTimeLiteral__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTDateAndTimeLiteralAccess().getTypeSTDateAndTimeLiteralTypeParserRuleCall_0_0()); }
		ruleSTDateAndTimeLiteralType
		{ after(grammarAccess.getSTDateAndTimeLiteralAccess().getTypeSTDateAndTimeLiteralTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateAndTimeLiteral__DateValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTDateAndTimeLiteralAccess().getDateValueDateParserRuleCall_1_0()); }
		ruleDate
		{ after(grammarAccess.getSTDateAndTimeLiteralAccess().getDateValueDateParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STDateAndTimeLiteral__TimeOfDayValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTDateAndTimeLiteralAccess().getTimeOfDayValueTimeOfDayParserRuleCall_3_0()); }
		ruleTimeOfDay
		{ after(grammarAccess.getSTDateAndTimeLiteralAccess().getTimeOfDayValueTimeOfDayParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStringLiteral__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTStringLiteralAccess().getTypeSTStringLiteralTypeParserRuleCall_0_0()); }
		ruleSTStringLiteralType
		{ after(grammarAccess.getSTStringLiteralAccess().getTypeSTStringLiteralTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStringLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTStringLiteralAccess().getValueAlternatives_1_0()); }
		(rule__STStringLiteral__ValueAlternatives_1_0)
		{ after(grammarAccess.getSTStringLiteralAccess().getValueAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
