/*
 * generated by Xtext 2.25.0
 */
package org.eclipse.fordiac.ide.structuredtextcore.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class STCoreGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class CodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.Code");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsSTStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Code:
		//    statements+=STStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=STStatement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//STStatement
		public RuleCall getStatementsSTStatementParserRuleCall_0() { return cStatementsSTStatementParserRuleCall_0; }
	}
	public class VarDeclarationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.VarDeclarationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDeclarationBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVARKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cConstantCONSTANTKeyword_2_0 = (Keyword)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVarDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarDeclarationsVarDeclarationParserRuleCall_3_0 = (RuleCall)cVarDeclarationsAssignment_3.eContents().get(0);
		private final Keyword cEND_VARKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VarDeclarationBlock returns VarDeclarationBlock:
		//    {VarDeclarationBlock} 'VAR' (constant?='CONSTANT')?
		//    varDeclarations+=VarDeclaration*
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{VarDeclarationBlock} 'VAR' (constant?='CONSTANT')?
		//varDeclarations+=VarDeclaration*
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{VarDeclarationBlock}
		public Action getVarDeclarationBlockAction_0() { return cVarDeclarationBlockAction_0; }
		
		//'VAR'
		public Keyword getVARKeyword_1() { return cVARKeyword_1; }
		
		//(constant?='CONSTANT')?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//'CONSTANT'
		public Keyword getConstantCONSTANTKeyword_2_0() { return cConstantCONSTANTKeyword_2_0; }
		
		//varDeclarations+=VarDeclaration*
		public Assignment getVarDeclarationsAssignment_3() { return cVarDeclarationsAssignment_3; }
		
		//VarDeclaration
		public RuleCall getVarDeclarationsVarDeclarationParserRuleCall_3_0() { return cVarDeclarationsVarDeclarationParserRuleCall_3_0; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_4() { return cEND_VARKeyword_4; }
	}
	public class VarTempDeclarationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.VarTempDeclarationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDeclarationBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_TEMPKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cConstantCONSTANTKeyword_2_0 = (Keyword)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVarDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarDeclarationsVarDeclarationParserRuleCall_3_0 = (RuleCall)cVarDeclarationsAssignment_3.eContents().get(0);
		private final Keyword cEND_VARKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VarTempDeclarationBlock returns VarDeclarationBlock:
		//    {VarDeclarationBlock} 'VAR_TEMP' (constant?='CONSTANT')?
		//    varDeclarations+=VarDeclaration*
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{VarDeclarationBlock} 'VAR_TEMP' (constant?='CONSTANT')?
		//varDeclarations+=VarDeclaration*
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{VarDeclarationBlock}
		public Action getVarDeclarationBlockAction_0() { return cVarDeclarationBlockAction_0; }
		
		//'VAR_TEMP'
		public Keyword getVAR_TEMPKeyword_1() { return cVAR_TEMPKeyword_1; }
		
		//(constant?='CONSTANT')?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//'CONSTANT'
		public Keyword getConstantCONSTANTKeyword_2_0() { return cConstantCONSTANTKeyword_2_0; }
		
		//varDeclarations+=VarDeclaration*
		public Assignment getVarDeclarationsAssignment_3() { return cVarDeclarationsAssignment_3; }
		
		//VarDeclaration
		public RuleCall getVarDeclarationsVarDeclarationParserRuleCall_3_0() { return cVarDeclarationsVarDeclarationParserRuleCall_3_0; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_4() { return cEND_VARKeyword_4; }
	}
	public class VarInputDeclarationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.VarInputDeclarationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDeclarationBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_INPUTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cConstantCONSTANTKeyword_2_0 = (Keyword)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVarDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarDeclarationsVarDeclarationParserRuleCall_3_0 = (RuleCall)cVarDeclarationsAssignment_3.eContents().get(0);
		private final Keyword cEND_VARKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VarInputDeclarationBlock returns VarDeclarationBlock:
		//    {VarDeclarationBlock} 'VAR_INPUT' (constant?='CONSTANT')?
		//    varDeclarations+=VarDeclaration*
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{VarDeclarationBlock} 'VAR_INPUT' (constant?='CONSTANT')?
		//varDeclarations+=VarDeclaration*
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{VarDeclarationBlock}
		public Action getVarDeclarationBlockAction_0() { return cVarDeclarationBlockAction_0; }
		
		//'VAR_INPUT'
		public Keyword getVAR_INPUTKeyword_1() { return cVAR_INPUTKeyword_1; }
		
		//(constant?='CONSTANT')?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//'CONSTANT'
		public Keyword getConstantCONSTANTKeyword_2_0() { return cConstantCONSTANTKeyword_2_0; }
		
		//varDeclarations+=VarDeclaration*
		public Assignment getVarDeclarationsAssignment_3() { return cVarDeclarationsAssignment_3; }
		
		//VarDeclaration
		public RuleCall getVarDeclarationsVarDeclarationParserRuleCall_3_0() { return cVarDeclarationsVarDeclarationParserRuleCall_3_0; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_4() { return cEND_VARKeyword_4; }
	}
	public class VarOutputDeclarationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.VarOutputDeclarationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDeclarationBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_OUTPUTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cConstantCONSTANTKeyword_2_0 = (Keyword)cConstantAssignment_2.eContents().get(0);
		private final Assignment cVarDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarDeclarationsVarDeclarationParserRuleCall_3_0 = (RuleCall)cVarDeclarationsAssignment_3.eContents().get(0);
		private final Keyword cEND_VARKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VarOutputDeclarationBlock returns VarDeclarationBlock:
		//    {VarDeclarationBlock} 'VAR_OUTPUT' (constant?='CONSTANT')?
		//    varDeclarations+=VarDeclaration*
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{VarDeclarationBlock} 'VAR_OUTPUT' (constant?='CONSTANT')?
		//varDeclarations+=VarDeclaration*
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{VarDeclarationBlock}
		public Action getVarDeclarationBlockAction_0() { return cVarDeclarationBlockAction_0; }
		
		//'VAR_OUTPUT'
		public Keyword getVAR_OUTPUTKeyword_1() { return cVAR_OUTPUTKeyword_1; }
		
		//(constant?='CONSTANT')?
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//'CONSTANT'
		public Keyword getConstantCONSTANTKeyword_2_0() { return cConstantCONSTANTKeyword_2_0; }
		
		//varDeclarations+=VarDeclaration*
		public Assignment getVarDeclarationsAssignment_3() { return cVarDeclarationsAssignment_3; }
		
		//VarDeclaration
		public RuleCall getVarDeclarationsVarDeclarationParserRuleCall_3_0() { return cVarDeclarationsVarDeclarationParserRuleCall_3_0; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_4() { return cEND_VARKeyword_4; }
	}
	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cATKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLocatedAtAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cLocatedAtVarDeclarationCrossReference_1_1_0 = (CrossReference)cLocatedAtAssignment_1_1.eContents().get(0);
		private final RuleCall cLocatedAtVarDeclarationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cLocatedAtVarDeclarationCrossReference_1_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArrayAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cArrayARRAYKeyword_3_0_0 = (Keyword)cArrayAssignment_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cRangesAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cRangesSTExpressionParserRuleCall_3_1_0_1_0 = (RuleCall)cRangesAssignment_3_1_0_1.eContents().get(0);
		private final Group cGroup_3_1_0_2 = (Group)cGroup_3_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_1_0_2_0 = (Keyword)cGroup_3_1_0_2.eContents().get(0);
		private final Assignment cRangesAssignment_3_1_0_2_1 = (Assignment)cGroup_3_1_0_2.eContents().get(1);
		private final RuleCall cRangesSTExpressionParserRuleCall_3_1_0_2_1_0 = (RuleCall)cRangesAssignment_3_1_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1_0_3 = (Keyword)cGroup_3_1_0.eContents().get(3);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cCountAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final Keyword cCountAsteriskKeyword_3_1_1_1_0 = (Keyword)cCountAssignment_3_1_1_1.eContents().get(0);
		private final Group cGroup_3_1_1_2 = (Group)cGroup_3_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_1_1_2_0 = (Keyword)cGroup_3_1_1_2.eContents().get(0);
		private final Assignment cCountAssignment_3_1_1_2_1 = (Assignment)cGroup_3_1_1_2.eContents().get(1);
		private final Keyword cCountAsteriskKeyword_3_1_1_2_1_0 = (Keyword)cCountAssignment_3_1_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1_1_3 = (Keyword)cGroup_3_1_1.eContents().get(3);
		private final Keyword cOFKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeLibraryElementCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeLibraryElementIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeLibraryElementCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMaxLengthAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMaxLengthSTExpressionParserRuleCall_5_1_0 = (RuleCall)cMaxLengthAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDefaultValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDefaultValueInitializerExpressionParserRuleCall_6_1_0 = (RuleCall)cDefaultValueAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//VarDeclaration returns VarDeclaration:
		//    name=ID ('AT' locatedAt=[VarDeclaration])? ':' (array?='ARRAY' (('[' ranges+=(STExpression) (','
		//    ranges+=STExpression)* ']') | ('[' count+='*' (',' count+='*')* ']')) 'OF')? (type=[libraryElement::LibraryElement]) ('[' maxLength=STExpression ']')? (':='
		//    defaultValue=InitializerExpression)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('AT' locatedAt=[VarDeclaration])? ':' (array?='ARRAY' (('[' ranges+=(STExpression) (','
		//ranges+=STExpression)* ']') | ('[' count+='*' (',' count+='*')* ']')) 'OF')? (type=[libraryElement::LibraryElement]) ('[' maxLength=STExpression ']')? (':='
		//defaultValue=InitializerExpression)? ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('AT' locatedAt=[VarDeclaration])?
		public Group getGroup_1() { return cGroup_1; }
		
		//'AT'
		public Keyword getATKeyword_1_0() { return cATKeyword_1_0; }
		
		//locatedAt=[VarDeclaration]
		public Assignment getLocatedAtAssignment_1_1() { return cLocatedAtAssignment_1_1; }
		
		//[VarDeclaration]
		public CrossReference getLocatedAtVarDeclarationCrossReference_1_1_0() { return cLocatedAtVarDeclarationCrossReference_1_1_0; }
		
		//ID
		public RuleCall getLocatedAtVarDeclarationIDTerminalRuleCall_1_1_0_1() { return cLocatedAtVarDeclarationIDTerminalRuleCall_1_1_0_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(array?='ARRAY' (('[' ranges+=(STExpression) (','
		//   ranges+=STExpression)* ']') | ('[' count+='*' (',' count+='*')* ']')) 'OF')?
		public Group getGroup_3() { return cGroup_3; }
		
		//array?='ARRAY'
		public Assignment getArrayAssignment_3_0() { return cArrayAssignment_3_0; }
		
		//'ARRAY'
		public Keyword getArrayARRAYKeyword_3_0_0() { return cArrayARRAYKeyword_3_0_0; }
		
		//(('[' ranges+=(STExpression) (','
		//   ranges+=STExpression)* ']') | ('[' count+='*' (',' count+='*')* ']'))
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//('[' ranges+=(STExpression) (','
		//    ranges+=STExpression)* ']')
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_1_0_0() { return cLeftSquareBracketKeyword_3_1_0_0; }
		
		//ranges+=(STExpression)
		public Assignment getRangesAssignment_3_1_0_1() { return cRangesAssignment_3_1_0_1; }
		
		//(STExpression)
		public RuleCall getRangesSTExpressionParserRuleCall_3_1_0_1_0() { return cRangesSTExpressionParserRuleCall_3_1_0_1_0; }
		
		//(','
		//   ranges+=STExpression)*
		public Group getGroup_3_1_0_2() { return cGroup_3_1_0_2; }
		
		//','
		public Keyword getCommaKeyword_3_1_0_2_0() { return cCommaKeyword_3_1_0_2_0; }
		
		//ranges+=STExpression
		public Assignment getRangesAssignment_3_1_0_2_1() { return cRangesAssignment_3_1_0_2_1; }
		
		//STExpression
		public RuleCall getRangesSTExpressionParserRuleCall_3_1_0_2_1_0() { return cRangesSTExpressionParserRuleCall_3_1_0_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_1_0_3() { return cRightSquareBracketKeyword_3_1_0_3; }
		
		//('[' count+='*' (',' count+='*')* ']')
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_1_1_0() { return cLeftSquareBracketKeyword_3_1_1_0; }
		
		//count+='*'
		public Assignment getCountAssignment_3_1_1_1() { return cCountAssignment_3_1_1_1; }
		
		//'*'
		public Keyword getCountAsteriskKeyword_3_1_1_1_0() { return cCountAsteriskKeyword_3_1_1_1_0; }
		
		//(',' count+='*')*
		public Group getGroup_3_1_1_2() { return cGroup_3_1_1_2; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_2_0() { return cCommaKeyword_3_1_1_2_0; }
		
		//count+='*'
		public Assignment getCountAssignment_3_1_1_2_1() { return cCountAssignment_3_1_1_2_1; }
		
		//'*'
		public Keyword getCountAsteriskKeyword_3_1_1_2_1_0() { return cCountAsteriskKeyword_3_1_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_1_1_3() { return cRightSquareBracketKeyword_3_1_1_3; }
		
		//'OF'
		public Keyword getOFKeyword_3_2() { return cOFKeyword_3_2; }
		
		//(type=[libraryElement::LibraryElement])
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[libraryElement::LibraryElement]
		public CrossReference getTypeLibraryElementCrossReference_4_0() { return cTypeLibraryElementCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeLibraryElementIDTerminalRuleCall_4_0_1() { return cTypeLibraryElementIDTerminalRuleCall_4_0_1; }
		
		//('[' maxLength=STExpression ']')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }
		
		//maxLength=STExpression
		public Assignment getMaxLengthAssignment_5_1() { return cMaxLengthAssignment_5_1; }
		
		//STExpression
		public RuleCall getMaxLengthSTExpressionParserRuleCall_5_1_0() { return cMaxLengthSTExpressionParserRuleCall_5_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }
		
		//(':='
		//   defaultValue=InitializerExpression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_6_0() { return cColonEqualsSignKeyword_6_0; }
		
		//defaultValue=InitializerExpression
		public Assignment getDefaultValueAssignment_6_1() { return cDefaultValueAssignment_6_1; }
		
		//InitializerExpression
		public RuleCall getDefaultValueInitializerExpressionParserRuleCall_6_1_0() { return cDefaultValueInitializerExpressionParserRuleCall_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class InitializerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.InitializerExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayInitializerExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InitializerExpression:
		//    STExpression | ArrayInitializerExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//STExpression | ArrayInitializerExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STExpression
		public RuleCall getSTExpressionParserRuleCall_0() { return cSTExpressionParserRuleCall_0; }
		
		//ArrayInitializerExpression
		public RuleCall getArrayInitializerExpressionParserRuleCall_1() { return cArrayInitializerExpressionParserRuleCall_1; }
	}
	public class ArrayInitializerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.ArrayInitializerExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesArrayInitElementParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesArrayInitElementParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayInitializerExpression:
		//    '[' values+=ArrayInitElement (',' values+=ArrayInitElement)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' values+=ArrayInitElement (',' values+=ArrayInitElement)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//values+=ArrayInitElement
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//ArrayInitElement
		public RuleCall getValuesArrayInitElementParserRuleCall_1_0() { return cValuesArrayInitElementParserRuleCall_1_0; }
		
		//(',' values+=ArrayInitElement)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//values+=ArrayInitElement
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//ArrayInitElement
		public RuleCall getValuesArrayInitElementParserRuleCall_2_1_0() { return cValuesArrayInitElementParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ArrayInitElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.ArrayInitElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIndexOrInitExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIndexOrInitExpressionSTExpressionParserRuleCall_0_0 = (RuleCall)cIndexOrInitExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInitExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitExpressionSTExpressionParserRuleCall_1_1_0 = (RuleCall)cInitExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ArrayInitElement:
		//    indexOrInitExpression=STExpression ('(' initExpression=STExpression ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//indexOrInitExpression=STExpression ('(' initExpression=STExpression ')')?
		public Group getGroup() { return cGroup; }
		
		//indexOrInitExpression=STExpression
		public Assignment getIndexOrInitExpressionAssignment_0() { return cIndexOrInitExpressionAssignment_0; }
		
		//STExpression
		public RuleCall getIndexOrInitExpressionSTExpressionParserRuleCall_0_0() { return cIndexOrInitExpressionSTExpressionParserRuleCall_0_0; }
		
		//('(' initExpression=STExpression ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//initExpression=STExpression
		public Assignment getInitExpressionAssignment_1_1() { return cInitExpressionAssignment_1_1; }
		
		//STExpression
		public RuleCall getInitExpressionSTExpressionParserRuleCall_1_1_0() { return cInitExpressionSTExpressionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class STStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cSTIfStatmentParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cSTCaseStatementParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cSTForStatementParserRuleCall_0_0_2 = (RuleCall)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cSTWhileStatementParserRuleCall_0_0_3 = (RuleCall)cAlternatives_0_0.eContents().get(3);
		private final RuleCall cSTRepeatStatementParserRuleCall_0_0_4 = (RuleCall)cAlternatives_0_0.eContents().get(4);
		private final RuleCall cSTAssignmentStatementParserRuleCall_0_0_5 = (RuleCall)cAlternatives_0_0.eContents().get(5);
		private final Group cGroup_0_0_6 = (Group)cAlternatives_0_0.eContents().get(6);
		private final Action cSTReturnAction_0_0_6_0 = (Action)cGroup_0_0_6.eContents().get(0);
		private final Keyword cRETURNKeyword_0_0_6_1 = (Keyword)cGroup_0_0_6.eContents().get(1);
		private final Group cGroup_0_0_7 = (Group)cAlternatives_0_0.eContents().get(7);
		private final Action cSTContinueAction_0_0_7_0 = (Action)cGroup_0_0_7.eContents().get(0);
		private final Keyword cCONTINUEKeyword_0_0_7_1 = (Keyword)cGroup_0_0_7.eContents().get(1);
		private final Group cGroup_0_0_8 = (Group)cAlternatives_0_0.eContents().get(8);
		private final Action cSTExitAction_0_0_8_0 = (Action)cGroup_0_0_8.eContents().get(0);
		private final Keyword cEXITKeyword_0_0_8_1 = (Keyword)cGroup_0_0_8.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSTNopAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//STStatement:
		//    (STIfStatment |
		//    STCaseStatement |
		//    STForStatement |
		//    STWhileStatement |
		//    STRepeatStatement |
		//    STAssignmentStatement |
		//    {STReturn} 'RETURN' |
		//    {STContinue} 'CONTINUE' |
		//    {STExit} 'EXIT') ';' |
		//    {STNop} ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(STIfStatment |
		//STCaseStatement |
		//STForStatement |
		//STWhileStatement |
		//STRepeatStatement |
		//STAssignmentStatement |
		//{STReturn} 'RETURN' |
		//{STContinue} 'CONTINUE' |
		//{STExit} 'EXIT') ';' |
		//{STNop} ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(STIfStatment |
		//STCaseStatement |
		//STForStatement |
		//STWhileStatement |
		//STRepeatStatement |
		//STAssignmentStatement |
		//{STReturn} 'RETURN' |
		//{STContinue} 'CONTINUE' |
		//{STExit} 'EXIT') ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//(STIfStatment |
		//STCaseStatement |
		//STForStatement |
		//STWhileStatement |
		//STRepeatStatement |
		//STAssignmentStatement |
		//{STReturn} 'RETURN' |
		//{STContinue} 'CONTINUE' |
		//{STExit} 'EXIT')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//STIfStatment
		public RuleCall getSTIfStatmentParserRuleCall_0_0_0() { return cSTIfStatmentParserRuleCall_0_0_0; }
		
		//STCaseStatement
		public RuleCall getSTCaseStatementParserRuleCall_0_0_1() { return cSTCaseStatementParserRuleCall_0_0_1; }
		
		//STForStatement
		public RuleCall getSTForStatementParserRuleCall_0_0_2() { return cSTForStatementParserRuleCall_0_0_2; }
		
		//STWhileStatement
		public RuleCall getSTWhileStatementParserRuleCall_0_0_3() { return cSTWhileStatementParserRuleCall_0_0_3; }
		
		//STRepeatStatement
		public RuleCall getSTRepeatStatementParserRuleCall_0_0_4() { return cSTRepeatStatementParserRuleCall_0_0_4; }
		
		//STAssignmentStatement
		public RuleCall getSTAssignmentStatementParserRuleCall_0_0_5() { return cSTAssignmentStatementParserRuleCall_0_0_5; }
		
		//{STReturn} 'RETURN'
		public Group getGroup_0_0_6() { return cGroup_0_0_6; }
		
		//{STReturn}
		public Action getSTReturnAction_0_0_6_0() { return cSTReturnAction_0_0_6_0; }
		
		//'RETURN'
		public Keyword getRETURNKeyword_0_0_6_1() { return cRETURNKeyword_0_0_6_1; }
		
		//{STContinue} 'CONTINUE'
		public Group getGroup_0_0_7() { return cGroup_0_0_7; }
		
		//{STContinue}
		public Action getSTContinueAction_0_0_7_0() { return cSTContinueAction_0_0_7_0; }
		
		//'CONTINUE'
		public Keyword getCONTINUEKeyword_0_0_7_1() { return cCONTINUEKeyword_0_0_7_1; }
		
		//{STExit} 'EXIT'
		public Group getGroup_0_0_8() { return cGroup_0_0_8; }
		
		//{STExit}
		public Action getSTExitAction_0_0_8_0() { return cSTExitAction_0_0_8_0; }
		
		//'EXIT'
		public Keyword getEXITKeyword_0_0_8_1() { return cEXITKeyword_0_0_8_1; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//{STNop} ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//{STNop}
		public Action getSTNopAction_1_0() { return cSTNopAction_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class STAssignmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STAssignmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLhsVarDeclarationCrossReference_0_0 = (CrossReference)cLhsAssignment_0.eContents().get(0);
		private final RuleCall cLhsVarDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cLhsVarDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsSTExpressionParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//STAssignmentStatement:
		//    lhs=[VarDeclaration] ':=' rhs=STExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=[VarDeclaration] ':=' rhs=STExpression
		public Group getGroup() { return cGroup; }
		
		//lhs=[VarDeclaration]
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//[VarDeclaration]
		public CrossReference getLhsVarDeclarationCrossReference_0_0() { return cLhsVarDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getLhsVarDeclarationIDTerminalRuleCall_0_0_1() { return cLhsVarDeclarationIDTerminalRuleCall_0_0_1; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//rhs=STExpression
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//STExpression
		public RuleCall getRhsSTExpressionParserRuleCall_2_0() { return cRhsSTExpressionParserRuleCall_2_0; }
	}
	public class STIfStatmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STIfStatment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionSTExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsSTStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Assignment cElseifsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseifsSTElseIfPartParserRuleCall_4_0 = (RuleCall)cElseifsAssignment_4.eContents().get(0);
		private final Assignment cElseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseSTElsePartParserRuleCall_5_0 = (RuleCall)cElseAssignment_5.eContents().get(0);
		private final Keyword cEND_IFKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//STIfStatment:
		//    'IF' condition=STExpression 'THEN' statements+=STStatement* elseifs+=(STElseIfPart)* (else=STElsePart)? 'END_IF';
		@Override public ParserRule getRule() { return rule; }
		
		//'IF' condition=STExpression 'THEN' statements+=STStatement* elseifs+=(STElseIfPart)* (else=STElsePart)? 'END_IF'
		public Group getGroup() { return cGroup; }
		
		//'IF'
		public Keyword getIFKeyword_0() { return cIFKeyword_0; }
		
		//condition=STExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//STExpression
		public RuleCall getConditionSTExpressionParserRuleCall_1_0() { return cConditionSTExpressionParserRuleCall_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }
		
		//statements+=STStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//STStatement
		public RuleCall getStatementsSTStatementParserRuleCall_3_0() { return cStatementsSTStatementParserRuleCall_3_0; }
		
		//elseifs+=(STElseIfPart)*
		public Assignment getElseifsAssignment_4() { return cElseifsAssignment_4; }
		
		//(STElseIfPart)
		public RuleCall getElseifsSTElseIfPartParserRuleCall_4_0() { return cElseifsSTElseIfPartParserRuleCall_4_0; }
		
		//(else=STElsePart)?
		public Assignment getElseAssignment_5() { return cElseAssignment_5; }
		
		//STElsePart
		public RuleCall getElseSTElsePartParserRuleCall_5_0() { return cElseSTElsePartParserRuleCall_5_0; }
		
		//'END_IF'
		public Keyword getEND_IFKeyword_6() { return cEND_IFKeyword_6; }
	}
	public class STElseIfPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STElseIfPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cELSIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionSTExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsSTStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//STElseIfPart:
		//    'ELSIF' condition=STExpression 'THEN' statements+=STStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//'ELSIF' condition=STExpression 'THEN' statements+=STStatement*
		public Group getGroup() { return cGroup; }
		
		//'ELSIF'
		public Keyword getELSIFKeyword_0() { return cELSIFKeyword_0; }
		
		//condition=STExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//STExpression
		public RuleCall getConditionSTExpressionParserRuleCall_1_0() { return cConditionSTExpressionParserRuleCall_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }
		
		//statements+=STStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//STStatement
		public RuleCall getStatementsSTStatementParserRuleCall_3_0() { return cStatementsSTStatementParserRuleCall_3_0; }
	}
	public class STCaseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STCaseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCASEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectorSTExpressionParserRuleCall_1_0 = (RuleCall)cSelectorAssignment_1.eContents().get(0);
		private final Keyword cOFKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCasesSTCaseCasesParserRuleCall_3_0 = (RuleCall)cCasesAssignment_3.eContents().get(0);
		private final Assignment cElseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseSTElsePartParserRuleCall_4_0 = (RuleCall)cElseAssignment_4.eContents().get(0);
		private final Keyword cEND_CASEKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//STCaseStatement:
		//    'CASE' selector=STExpression 'OF' cases+=STCaseCases+ (else=STElsePart)? 'END_CASE';
		@Override public ParserRule getRule() { return rule; }
		
		//'CASE' selector=STExpression 'OF' cases+=STCaseCases+ (else=STElsePart)? 'END_CASE'
		public Group getGroup() { return cGroup; }
		
		//'CASE'
		public Keyword getCASEKeyword_0() { return cCASEKeyword_0; }
		
		//selector=STExpression
		public Assignment getSelectorAssignment_1() { return cSelectorAssignment_1; }
		
		//STExpression
		public RuleCall getSelectorSTExpressionParserRuleCall_1_0() { return cSelectorSTExpressionParserRuleCall_1_0; }
		
		//'OF'
		public Keyword getOFKeyword_2() { return cOFKeyword_2; }
		
		//cases+=STCaseCases+
		public Assignment getCasesAssignment_3() { return cCasesAssignment_3; }
		
		//STCaseCases
		public RuleCall getCasesSTCaseCasesParserRuleCall_3_0() { return cCasesSTCaseCasesParserRuleCall_3_0; }
		
		//(else=STElsePart)?
		public Assignment getElseAssignment_4() { return cElseAssignment_4; }
		
		//STElsePart
		public RuleCall getElseSTElsePartParserRuleCall_4_0() { return cElseSTElsePartParserRuleCall_4_0; }
		
		//'END_CASE'
		public Keyword getEND_CASEKeyword_5() { return cEND_CASEKeyword_5; }
	}
	public class STCaseCasesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STCaseCases");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionsSTExpressionParserRuleCall_0_0 = (RuleCall)cConditionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionsSTExpressionParserRuleCall_1_1_0 = (RuleCall)cConditionsAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsSTStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//STCaseCases:
		//    conditions+=STExpression (',' conditions+=STExpression)* ':'=> statements+=STStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//conditions+=STExpression (',' conditions+=STExpression)* ':'=> statements+=STStatement*
		public Group getGroup() { return cGroup; }
		
		//conditions+=STExpression
		public Assignment getConditionsAssignment_0() { return cConditionsAssignment_0; }
		
		//STExpression
		public RuleCall getConditionsSTExpressionParserRuleCall_0_0() { return cConditionsSTExpressionParserRuleCall_0_0; }
		
		//(',' conditions+=STExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//conditions+=STExpression
		public Assignment getConditionsAssignment_1_1() { return cConditionsAssignment_1_1; }
		
		//STExpression
		public RuleCall getConditionsSTExpressionParserRuleCall_1_1_0() { return cConditionsSTExpressionParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//=> statements+=STStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//STStatement
		public RuleCall getStatementsSTStatementParserRuleCall_3_0() { return cStatementsSTStatementParserRuleCall_3_0; }
	}
	public class STElsePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STElsePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSTElsePartAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cELSEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsSTStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		
		//STElsePart:
		//    {STElsePart} 'ELSE' statements+=STStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{STElsePart} 'ELSE' statements+=STStatement*
		public Group getGroup() { return cGroup; }
		
		//{STElsePart}
		public Action getSTElsePartAction_0() { return cSTElsePartAction_0; }
		
		//'ELSE'
		public Keyword getELSEKeyword_1() { return cELSEKeyword_1; }
		
		//statements+=STStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//STStatement
		public RuleCall getStatementsSTStatementParserRuleCall_2_0() { return cStatementsSTStatementParserRuleCall_2_0; }
	}
	public class STForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFORKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cForAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cForSTExpressionParserRuleCall_1_0 = (RuleCall)cForAssignment_1.eContents().get(0);
		private final Keyword cTOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToSTExpressionParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBYKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cByAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBySTExpressionParserRuleCall_4_1_0 = (RuleCall)cByAssignment_4_1.eContents().get(0);
		private final Keyword cDOKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsSTStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cEND_FORKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//STForStatement:
		//    'FOR' for=STExpression 'TO' to=STExpression ('BY' by=STExpression)? 'DO'
		//    statements+=STStatement*
		//    'END_FOR';
		@Override public ParserRule getRule() { return rule; }
		
		//'FOR' for=STExpression 'TO' to=STExpression ('BY' by=STExpression)? 'DO'
		//statements+=STStatement*
		//'END_FOR'
		public Group getGroup() { return cGroup; }
		
		//'FOR'
		public Keyword getFORKeyword_0() { return cFORKeyword_0; }
		
		//for=STExpression
		public Assignment getForAssignment_1() { return cForAssignment_1; }
		
		//STExpression
		public RuleCall getForSTExpressionParserRuleCall_1_0() { return cForSTExpressionParserRuleCall_1_0; }
		
		//'TO'
		public Keyword getTOKeyword_2() { return cTOKeyword_2; }
		
		//to=STExpression
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//STExpression
		public RuleCall getToSTExpressionParserRuleCall_3_0() { return cToSTExpressionParserRuleCall_3_0; }
		
		//('BY' by=STExpression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'BY'
		public Keyword getBYKeyword_4_0() { return cBYKeyword_4_0; }
		
		//by=STExpression
		public Assignment getByAssignment_4_1() { return cByAssignment_4_1; }
		
		//STExpression
		public RuleCall getBySTExpressionParserRuleCall_4_1_0() { return cBySTExpressionParserRuleCall_4_1_0; }
		
		//'DO'
		public Keyword getDOKeyword_5() { return cDOKeyword_5; }
		
		//statements+=STStatement*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }
		
		//STStatement
		public RuleCall getStatementsSTStatementParserRuleCall_6_0() { return cStatementsSTStatementParserRuleCall_6_0; }
		
		//'END_FOR'
		public Keyword getEND_FORKeyword_7() { return cEND_FORKeyword_7; }
	}
	public class STWhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STWhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHILEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionSTExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cDOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsSTStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cEND_WHILEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//STWhileStatement:
		//    'WHILE' condition=STExpression 'DO'
		//    statements+=STStatement*
		//    'END_WHILE';
		@Override public ParserRule getRule() { return rule; }
		
		//'WHILE' condition=STExpression 'DO'
		//statements+=STStatement*
		//'END_WHILE'
		public Group getGroup() { return cGroup; }
		
		//'WHILE'
		public Keyword getWHILEKeyword_0() { return cWHILEKeyword_0; }
		
		//condition=STExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//STExpression
		public RuleCall getConditionSTExpressionParserRuleCall_1_0() { return cConditionSTExpressionParserRuleCall_1_0; }
		
		//'DO'
		public Keyword getDOKeyword_2() { return cDOKeyword_2; }
		
		//statements+=STStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//STStatement
		public RuleCall getStatementsSTStatementParserRuleCall_3_0() { return cStatementsSTStatementParserRuleCall_3_0; }
		
		//'END_WHILE'
		public Keyword getEND_WHILEKeyword_4() { return cEND_WHILEKeyword_4; }
	}
	public class STRepeatStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STRepeatStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREPEATKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsSTStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Keyword cUNTILKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionSTExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cEND_REPEATKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//STRepeatStatement:
		//    'REPEAT'
		//    statements+=STStatement*
		//    'UNTIL' condition=STExpression
		//    'END_REPEAT';
		@Override public ParserRule getRule() { return rule; }
		
		//'REPEAT'
		//statements+=STStatement*
		//'UNTIL' condition=STExpression
		//'END_REPEAT'
		public Group getGroup() { return cGroup; }
		
		//'REPEAT'
		public Keyword getREPEATKeyword_0() { return cREPEATKeyword_0; }
		
		//statements+=STStatement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//STStatement
		public RuleCall getStatementsSTStatementParserRuleCall_1_0() { return cStatementsSTStatementParserRuleCall_1_0; }
		
		//'UNTIL'
		public Keyword getUNTILKeyword_2() { return cUNTILKeyword_2; }
		
		//condition=STExpression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//STExpression
		public RuleCall getConditionSTExpressionParserRuleCall_3_0() { return cConditionSTExpressionParserRuleCall_3_0; }
		
		//'END_REPEAT'
		public Keyword getEND_REPEATKeyword_4() { return cEND_REPEATKeyword_4; }
	}
	public class STExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
		private final RuleCall cSTSubrangeExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//STExpression returns STExpression:
		//    STSubrangeExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//STSubrangeExpression
		public RuleCall getSTSubrangeExpressionParserRuleCall() { return cSTSubrangeExpressionParserRuleCall; }
	}
	public class STSubrangeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STSubrangeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cSTBinaryExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpSubrangeOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSTOrExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//STSubrangeExpression returns STExpression:
		//    STOrExpression (({STBinaryExpression.left=current} op=SubrangeOperator) right=STOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//STOrExpression (({STBinaryExpression.left=current} op=SubrangeOperator) right=STOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//STOrExpression
		public RuleCall getSTOrExpressionParserRuleCall_0() { return cSTOrExpressionParserRuleCall_0; }
		
		//(({STBinaryExpression.left=current} op=SubrangeOperator) right=STOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({STBinaryExpression.left=current} op=SubrangeOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{STBinaryExpression.left=current}
		public Action getSTBinaryExpressionLeftAction_1_0_0() { return cSTBinaryExpressionLeftAction_1_0_0; }
		
		//op=SubrangeOperator
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//SubrangeOperator
		public RuleCall getOpSubrangeOperatorEnumRuleCall_1_0_1_0() { return cOpSubrangeOperatorEnumRuleCall_1_0_1_0; }
		
		//right=STOrExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//STOrExpression
		public RuleCall getRightSTOrExpressionParserRuleCall_1_1_0() { return cRightSTOrExpressionParserRuleCall_1_1_0; }
	}
	public class STOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cSTBinaryExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpOrOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSTXorExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//STOrExpression returns STExpression:
		//    STXorExpression (({STBinaryExpression.left=current} op=OrOperator) right=STXorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//STXorExpression (({STBinaryExpression.left=current} op=OrOperator) right=STXorExpression)*
		public Group getGroup() { return cGroup; }
		
		//STXorExpression
		public RuleCall getSTXorExpressionParserRuleCall_0() { return cSTXorExpressionParserRuleCall_0; }
		
		//(({STBinaryExpression.left=current} op=OrOperator) right=STXorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({STBinaryExpression.left=current} op=OrOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{STBinaryExpression.left=current}
		public Action getSTBinaryExpressionLeftAction_1_0_0() { return cSTBinaryExpressionLeftAction_1_0_0; }
		
		//op=OrOperator
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//OrOperator
		public RuleCall getOpOrOperatorEnumRuleCall_1_0_1_0() { return cOpOrOperatorEnumRuleCall_1_0_1_0; }
		
		//right=STXorExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//STXorExpression
		public RuleCall getRightSTXorExpressionParserRuleCall_1_1_0() { return cRightSTXorExpressionParserRuleCall_1_1_0; }
	}
	public class STXorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STXorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cSTBinaryExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpXorOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSTAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//STXorExpression returns STExpression:
		//    STAndExpression (({STBinaryExpression.left=current} op=XorOperator) right=STAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//STAndExpression (({STBinaryExpression.left=current} op=XorOperator) right=STAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//STAndExpression
		public RuleCall getSTAndExpressionParserRuleCall_0() { return cSTAndExpressionParserRuleCall_0; }
		
		//(({STBinaryExpression.left=current} op=XorOperator) right=STAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({STBinaryExpression.left=current} op=XorOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{STBinaryExpression.left=current}
		public Action getSTBinaryExpressionLeftAction_1_0_0() { return cSTBinaryExpressionLeftAction_1_0_0; }
		
		//op=XorOperator
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//XorOperator
		public RuleCall getOpXorOperatorEnumRuleCall_1_0_1_0() { return cOpXorOperatorEnumRuleCall_1_0_1_0; }
		
		//right=STAndExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//STAndExpression
		public RuleCall getRightSTAndExpressionParserRuleCall_1_1_0() { return cRightSTAndExpressionParserRuleCall_1_1_0; }
	}
	public class STAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cSTBinaryExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpAndOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSTEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//STAndExpression returns STExpression:
		//    STEqualityExpression (({STBinaryExpression.left=current} op=AndOperator) right=STEqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//STEqualityExpression (({STBinaryExpression.left=current} op=AndOperator) right=STEqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//STEqualityExpression
		public RuleCall getSTEqualityExpressionParserRuleCall_0() { return cSTEqualityExpressionParserRuleCall_0; }
		
		//(({STBinaryExpression.left=current} op=AndOperator) right=STEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({STBinaryExpression.left=current} op=AndOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{STBinaryExpression.left=current}
		public Action getSTBinaryExpressionLeftAction_1_0_0() { return cSTBinaryExpressionLeftAction_1_0_0; }
		
		//op=AndOperator
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//AndOperator
		public RuleCall getOpAndOperatorEnumRuleCall_1_0_1_0() { return cOpAndOperatorEnumRuleCall_1_0_1_0; }
		
		//right=STEqualityExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//STEqualityExpression
		public RuleCall getRightSTEqualityExpressionParserRuleCall_1_1_0() { return cRightSTEqualityExpressionParserRuleCall_1_1_0; }
	}
	public class STEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cSTBinaryExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpEqualityOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSTComparisonExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//STEqualityExpression returns STExpression:
		//    STComparisonExpression (({STBinaryExpression.left=current} op=EqualityOperator) right=STComparisonExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//STComparisonExpression (({STBinaryExpression.left=current} op=EqualityOperator) right=STComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//STComparisonExpression
		public RuleCall getSTComparisonExpressionParserRuleCall_0() { return cSTComparisonExpressionParserRuleCall_0; }
		
		//(({STBinaryExpression.left=current} op=EqualityOperator) right=STComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({STBinaryExpression.left=current} op=EqualityOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{STBinaryExpression.left=current}
		public Action getSTBinaryExpressionLeftAction_1_0_0() { return cSTBinaryExpressionLeftAction_1_0_0; }
		
		//op=EqualityOperator
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//EqualityOperator
		public RuleCall getOpEqualityOperatorEnumRuleCall_1_0_1_0() { return cOpEqualityOperatorEnumRuleCall_1_0_1_0; }
		
		//right=STComparisonExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//STComparisonExpression
		public RuleCall getRightSTComparisonExpressionParserRuleCall_1_1_0() { return cRightSTComparisonExpressionParserRuleCall_1_1_0; }
	}
	public class STComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTAddSubExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cSTBinaryExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpCompareOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSTAddSubExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//STComparisonExpression returns STExpression:
		//    STAddSubExpression (({STBinaryExpression.left=current} op=CompareOperator) right=STAddSubExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//STAddSubExpression (({STBinaryExpression.left=current} op=CompareOperator) right=STAddSubExpression)*
		public Group getGroup() { return cGroup; }
		
		//STAddSubExpression
		public RuleCall getSTAddSubExpressionParserRuleCall_0() { return cSTAddSubExpressionParserRuleCall_0; }
		
		//(({STBinaryExpression.left=current} op=CompareOperator) right=STAddSubExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({STBinaryExpression.left=current} op=CompareOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{STBinaryExpression.left=current}
		public Action getSTBinaryExpressionLeftAction_1_0_0() { return cSTBinaryExpressionLeftAction_1_0_0; }
		
		//op=CompareOperator
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//CompareOperator
		public RuleCall getOpCompareOperatorEnumRuleCall_1_0_1_0() { return cOpCompareOperatorEnumRuleCall_1_0_1_0; }
		
		//right=STAddSubExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//STAddSubExpression
		public RuleCall getRightSTAddSubExpressionParserRuleCall_1_1_0() { return cRightSTAddSubExpressionParserRuleCall_1_1_0; }
	}
	public class STAddSubExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STAddSubExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTMulDivModExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cSTBinaryExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpAddSubOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSTMulDivModExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//STAddSubExpression returns STExpression:
		//    STMulDivModExpression (({STBinaryExpression.left=current} op=AddSubOperator) right=STMulDivModExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//STMulDivModExpression (({STBinaryExpression.left=current} op=AddSubOperator) right=STMulDivModExpression)*
		public Group getGroup() { return cGroup; }
		
		//STMulDivModExpression
		public RuleCall getSTMulDivModExpressionParserRuleCall_0() { return cSTMulDivModExpressionParserRuleCall_0; }
		
		//(({STBinaryExpression.left=current} op=AddSubOperator) right=STMulDivModExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({STBinaryExpression.left=current} op=AddSubOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{STBinaryExpression.left=current}
		public Action getSTBinaryExpressionLeftAction_1_0_0() { return cSTBinaryExpressionLeftAction_1_0_0; }
		
		//op=AddSubOperator
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//AddSubOperator
		public RuleCall getOpAddSubOperatorEnumRuleCall_1_0_1_0() { return cOpAddSubOperatorEnumRuleCall_1_0_1_0; }
		
		//right=STMulDivModExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//STMulDivModExpression
		public RuleCall getRightSTMulDivModExpressionParserRuleCall_1_1_0() { return cRightSTMulDivModExpressionParserRuleCall_1_1_0; }
	}
	public class STMulDivModExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STMulDivModExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTPowerExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cSTBinaryExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpMulDivModOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSTPowerExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//STMulDivModExpression returns STExpression:
		//    STPowerExpression (({STBinaryExpression.left=current} op=MulDivModOperator) right=STPowerExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//STPowerExpression (({STBinaryExpression.left=current} op=MulDivModOperator) right=STPowerExpression)*
		public Group getGroup() { return cGroup; }
		
		//STPowerExpression
		public RuleCall getSTPowerExpressionParserRuleCall_0() { return cSTPowerExpressionParserRuleCall_0; }
		
		//(({STBinaryExpression.left=current} op=MulDivModOperator) right=STPowerExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({STBinaryExpression.left=current} op=MulDivModOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{STBinaryExpression.left=current}
		public Action getSTBinaryExpressionLeftAction_1_0_0() { return cSTBinaryExpressionLeftAction_1_0_0; }
		
		//op=MulDivModOperator
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//MulDivModOperator
		public RuleCall getOpMulDivModOperatorEnumRuleCall_1_0_1_0() { return cOpMulDivModOperatorEnumRuleCall_1_0_1_0; }
		
		//right=STPowerExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//STPowerExpression
		public RuleCall getRightSTPowerExpressionParserRuleCall_1_1_0() { return cRightSTPowerExpressionParserRuleCall_1_1_0; }
	}
	public class STPowerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STPowerExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTSignumExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cSTBinaryExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpPowerOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSTSignumExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//STPowerExpression returns STExpression:
		//    STSignumExpression (({STBinaryExpression.left=current} op=PowerOperator) right=STSignumExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//STSignumExpression (({STBinaryExpression.left=current} op=PowerOperator) right=STSignumExpression)*
		public Group getGroup() { return cGroup; }
		
		//STSignumExpression
		public RuleCall getSTSignumExpressionParserRuleCall_0() { return cSTSignumExpressionParserRuleCall_0; }
		
		//(({STBinaryExpression.left=current} op=PowerOperator) right=STSignumExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({STBinaryExpression.left=current} op=PowerOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{STBinaryExpression.left=current}
		public Action getSTBinaryExpressionLeftAction_1_0_0() { return cSTBinaryExpressionLeftAction_1_0_0; }
		
		//op=PowerOperator
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//PowerOperator
		public RuleCall getOpPowerOperatorEnumRuleCall_1_0_1_0() { return cOpPowerOperatorEnumRuleCall_1_0_1_0; }
		
		//right=STSignumExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//STSignumExpression
		public RuleCall getRightSTSignumExpressionParserRuleCall_1_1_0() { return cRightSTSignumExpressionParserRuleCall_1_1_0; }
	}
	public class STSignumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STSignumExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTLiteralExpressionsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTSelectionExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSTUnaryExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOpUnaryOperatorEnumRuleCall_2_1_0 = (RuleCall)cOpAssignment_2_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionSTSelectionExpressionParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		
		//STSignumExpression returns STExpression:
		//    STLiteralExpressions | STSelectionExpression | ({STUnaryExpression} op=UnaryOperator
		//    expression=STSelectionExpression);
		@Override public ParserRule getRule() { return rule; }
		
		//STLiteralExpressions | STSelectionExpression | ({STUnaryExpression} op=UnaryOperator
		//expression=STSelectionExpression)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STLiteralExpressions
		public RuleCall getSTLiteralExpressionsParserRuleCall_0() { return cSTLiteralExpressionsParserRuleCall_0; }
		
		//STSelectionExpression
		public RuleCall getSTSelectionExpressionParserRuleCall_1() { return cSTSelectionExpressionParserRuleCall_1; }
		
		//({STUnaryExpression} op=UnaryOperator
		//   expression=STSelectionExpression)
		public Group getGroup_2() { return cGroup_2; }
		
		//{STUnaryExpression}
		public Action getSTUnaryExpressionAction_2_0() { return cSTUnaryExpressionAction_2_0; }
		
		//op=UnaryOperator
		public Assignment getOpAssignment_2_1() { return cOpAssignment_2_1; }
		
		//UnaryOperator
		public RuleCall getOpUnaryOperatorEnumRuleCall_2_1_0() { return cOpUnaryOperatorEnumRuleCall_2_1_0; }
		
		//expression=STSelectionExpression
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//STSelectionExpression
		public RuleCall getExpressionSTSelectionExpressionParserRuleCall_2_2_0() { return cExpressionSTSelectionExpressionParserRuleCall_2_2_0; }
	}
	public class STSelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STSelectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTAtomicExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSTMemberSelectionReceiverAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cStructAccessAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final Keyword cStructAccessFullStopKeyword_1_1_0_0_0 = (Keyword)cStructAccessAssignment_1_1_0_0.eContents().get(0);
		private final Assignment cMemberAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final CrossReference cMemberVarDeclarationCrossReference_1_1_0_1_0 = (CrossReference)cMemberAssignment_1_1_0_1.eContents().get(0);
		private final RuleCall cMemberVarDeclarationIDTerminalRuleCall_1_1_0_1_0_1 = (RuleCall)cMemberVarDeclarationCrossReference_1_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cArrayAccessAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Keyword cArrayAccessLeftSquareBracketKeyword_1_1_1_0_0 = (Keyword)cArrayAccessAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cIndexAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cIndexSTExpressionParserRuleCall_1_1_1_1_0 = (RuleCall)cIndexAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cIndexAssignment_1_1_1_2_1 = (Assignment)cGroup_1_1_1_2.eContents().get(1);
		private final RuleCall cIndexSTExpressionParserRuleCall_1_1_1_2_1_0 = (RuleCall)cIndexAssignment_1_1_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_1_3 = (Keyword)cGroup_1_1_1.eContents().get(3);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cPoeInvocationAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final Keyword cPoeInvocationLeftParenthesisKeyword_1_2_0_0 = (Keyword)cPoeInvocationAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Assignment cParametersAssignment_1_2_1_0 = (Assignment)cGroup_1_2_1.eContents().get(0);
		private final RuleCall cParametersSTExpressionParserRuleCall_1_2_1_0_0 = (RuleCall)cParametersAssignment_1_2_1_0.eContents().get(0);
		private final Group cGroup_1_2_1_1 = (Group)cGroup_1_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_1_0 = (Keyword)cGroup_1_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_2_1_1_1 = (Assignment)cGroup_1_2_1_1.eContents().get(1);
		private final RuleCall cParametersSTExpressionParserRuleCall_1_2_1_1_1_0 = (RuleCall)cParametersAssignment_1_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cBitaccessorAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cBitaccessorMultibitPartialAccessParserRuleCall_1_3_0 = (RuleCall)cBitaccessorAssignment_1_3.eContents().get(0);
		
		//STSelectionExpression returns STExpression:
		//    STAtomicExpression
		//    ({STMemberSelection.receiver=current} (structAccess?='.' member=[VarDeclaration] | arrayAccess?='['
		//    index+=STExpression (',' index+=STExpression)* ']')
		//    (=>poeInvocation?='(' (parameters+=STExpression (',' parameters+=STExpression)*)? ')')?
		//    (=>bitaccessor=MultibitPartialAccess)?
		//    )*;
		@Override public ParserRule getRule() { return rule; }
		
		//STAtomicExpression
		//({STMemberSelection.receiver=current} (structAccess?='.' member=[VarDeclaration] | arrayAccess?='['
		//index+=STExpression (',' index+=STExpression)* ']')
		//(=>poeInvocation?='(' (parameters+=STExpression (',' parameters+=STExpression)*)? ')')?
		//(=>bitaccessor=MultibitPartialAccess)?
		//)*
		public Group getGroup() { return cGroup; }
		
		//STAtomicExpression
		public RuleCall getSTAtomicExpressionParserRuleCall_0() { return cSTAtomicExpressionParserRuleCall_0; }
		
		//({STMemberSelection.receiver=current} (structAccess?='.' member=[VarDeclaration] | arrayAccess?='['
		//index+=STExpression (',' index+=STExpression)* ']')
		//(=>poeInvocation?='(' (parameters+=STExpression (',' parameters+=STExpression)*)? ')')?
		//(=>bitaccessor=MultibitPartialAccess)?
		//)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{STMemberSelection.receiver=current}
		public Action getSTMemberSelectionReceiverAction_1_0() { return cSTMemberSelectionReceiverAction_1_0; }
		
		//(structAccess?='.' member=[VarDeclaration] | arrayAccess?='['
		//   index+=STExpression (',' index+=STExpression)* ']')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//structAccess?='.' member=[VarDeclaration]
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//structAccess?='.'
		public Assignment getStructAccessAssignment_1_1_0_0() { return cStructAccessAssignment_1_1_0_0; }
		
		//'.'
		public Keyword getStructAccessFullStopKeyword_1_1_0_0_0() { return cStructAccessFullStopKeyword_1_1_0_0_0; }
		
		//member=[VarDeclaration]
		public Assignment getMemberAssignment_1_1_0_1() { return cMemberAssignment_1_1_0_1; }
		
		//[VarDeclaration]
		public CrossReference getMemberVarDeclarationCrossReference_1_1_0_1_0() { return cMemberVarDeclarationCrossReference_1_1_0_1_0; }
		
		//ID
		public RuleCall getMemberVarDeclarationIDTerminalRuleCall_1_1_0_1_0_1() { return cMemberVarDeclarationIDTerminalRuleCall_1_1_0_1_0_1; }
		
		//arrayAccess?='['
		//   index+=STExpression (',' index+=STExpression)* ']'
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//arrayAccess?='['
		public Assignment getArrayAccessAssignment_1_1_1_0() { return cArrayAccessAssignment_1_1_1_0; }
		
		//'['
		public Keyword getArrayAccessLeftSquareBracketKeyword_1_1_1_0_0() { return cArrayAccessLeftSquareBracketKeyword_1_1_1_0_0; }
		
		//index+=STExpression
		public Assignment getIndexAssignment_1_1_1_1() { return cIndexAssignment_1_1_1_1; }
		
		//STExpression
		public RuleCall getIndexSTExpressionParserRuleCall_1_1_1_1_0() { return cIndexSTExpressionParserRuleCall_1_1_1_1_0; }
		
		//(',' index+=STExpression)*
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_2_0() { return cCommaKeyword_1_1_1_2_0; }
		
		//index+=STExpression
		public Assignment getIndexAssignment_1_1_1_2_1() { return cIndexAssignment_1_1_1_2_1; }
		
		//STExpression
		public RuleCall getIndexSTExpressionParserRuleCall_1_1_1_2_1_0() { return cIndexSTExpressionParserRuleCall_1_1_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_1_3() { return cRightSquareBracketKeyword_1_1_1_3; }
		
		//(=>poeInvocation?='(' (parameters+=STExpression (',' parameters+=STExpression)*)? ')')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//=>poeInvocation?='('
		public Assignment getPoeInvocationAssignment_1_2_0() { return cPoeInvocationAssignment_1_2_0; }
		
		//'('
		public Keyword getPoeInvocationLeftParenthesisKeyword_1_2_0_0() { return cPoeInvocationLeftParenthesisKeyword_1_2_0_0; }
		
		//(parameters+=STExpression (',' parameters+=STExpression)*)?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//parameters+=STExpression
		public Assignment getParametersAssignment_1_2_1_0() { return cParametersAssignment_1_2_1_0; }
		
		//STExpression
		public RuleCall getParametersSTExpressionParserRuleCall_1_2_1_0_0() { return cParametersSTExpressionParserRuleCall_1_2_1_0_0; }
		
		//(',' parameters+=STExpression)*
		public Group getGroup_1_2_1_1() { return cGroup_1_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_2_1_1_0() { return cCommaKeyword_1_2_1_1_0; }
		
		//parameters+=STExpression
		public Assignment getParametersAssignment_1_2_1_1_1() { return cParametersAssignment_1_2_1_1_1; }
		
		//STExpression
		public RuleCall getParametersSTExpressionParserRuleCall_1_2_1_1_1_0() { return cParametersSTExpressionParserRuleCall_1_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2_2() { return cRightParenthesisKeyword_1_2_2; }
		
		//(=>bitaccessor=MultibitPartialAccess)?
		public Assignment getBitaccessorAssignment_1_3() { return cBitaccessorAssignment_1_3; }
		
		//MultibitPartialAccess
		public RuleCall getBitaccessorMultibitPartialAccessParserRuleCall_1_3_0() { return cBitaccessorMultibitPartialAccessParserRuleCall_1_3_0; }
	}
	public class MultibitPartialAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.MultibitPartialAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessSpecifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessSpecifierMultiBitAccessSpecifierEnumRuleCall_0_0 = (RuleCall)cAccessSpecifierAssignment_0.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		
		//MultibitPartialAccess:
		//    (accessSpecifier=MultiBitAccessSpecifier) index=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//(accessSpecifier=MultiBitAccessSpecifier) index=INT
		public Group getGroup() { return cGroup; }
		
		//(accessSpecifier=MultiBitAccessSpecifier)
		public Assignment getAccessSpecifierAssignment_0() { return cAccessSpecifierAssignment_0; }
		
		//MultiBitAccessSpecifier
		public RuleCall getAccessSpecifierMultiBitAccessSpecifierEnumRuleCall_0_0() { return cAccessSpecifierMultiBitAccessSpecifierEnumRuleCall_0_0; }
		
		//index=INT
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_1_0() { return cIndexINTTerminalRuleCall_1_0; }
	}
	public class STAtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STAtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSTExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSTSymbolAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final CrossReference cTypeDataTypeCrossReference_1_1_0_0 = (CrossReference)cTypeAssignment_1_1_0.eContents().get(0);
		private final RuleCall cTypeDataTypeIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cTypeDataTypeCrossReference_1_1_0_0.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cSymbolAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cSymbolVarDeclarationCrossReference_1_2_0 = (CrossReference)cSymbolAssignment_1_2.eContents().get(0);
		private final RuleCall cSymbolVarDeclarationIDTerminalRuleCall_1_2_0_1 = (RuleCall)cSymbolVarDeclarationCrossReference_1_2_0.eContents().get(1);
		private final Assignment cBitaccessorAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cBitaccessorMultibitPartialAccessParserRuleCall_1_3_0 = (RuleCall)cBitaccessorAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Assignment cPoeInvocationAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final Keyword cPoeInvocationLeftParenthesisKeyword_1_4_0_0 = (Keyword)cPoeInvocationAssignment_1_4_0.eContents().get(0);
		private final Group cGroup_1_4_1 = (Group)cGroup_1_4.eContents().get(1);
		private final Assignment cParametersAssignment_1_4_1_0 = (Assignment)cGroup_1_4_1.eContents().get(0);
		private final RuleCall cParametersSTExpressionParserRuleCall_1_4_1_0_0 = (RuleCall)cParametersAssignment_1_4_1_0.eContents().get(0);
		private final Group cGroup_1_4_1_1 = (Group)cGroup_1_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_4_1_1_0 = (Keyword)cGroup_1_4_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_4_1_1_1 = (Assignment)cGroup_1_4_1_1.eContents().get(1);
		private final RuleCall cParametersSTExpressionParserRuleCall_1_4_1_1_1_0 = (RuleCall)cParametersAssignment_1_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		
		//STAtomicExpression returns STExpression:
		//    '(' STExpression ')' |
		//    {STSymbol} (type=[datatype::DataType] '#')? symbol=[VarDeclaration] (bitaccessor=MultibitPartialAccess)? (=>poeInvocation?=
		//    '(' (parameters+=STExpression (',' parameters+=STExpression)*)? ')')? ;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' STExpression ')' |
		//{STSymbol} (type=[datatype::DataType] '#')? symbol=[VarDeclaration] (bitaccessor=MultibitPartialAccess)? (=>poeInvocation?=
		//'(' (parameters+=STExpression (',' parameters+=STExpression)*)? ')')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' STExpression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//STExpression
		public RuleCall getSTExpressionParserRuleCall_0_1() { return cSTExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{STSymbol} (type=[datatype::DataType] '#')? symbol=[VarDeclaration] (bitaccessor=MultibitPartialAccess)? (=>poeInvocation?=
		//'(' (parameters+=STExpression (',' parameters+=STExpression)*)? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{STSymbol}
		public Action getSTSymbolAction_1_0() { return cSTSymbolAction_1_0; }
		
		//(type=[datatype::DataType] '#')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//type=[datatype::DataType]
		public Assignment getTypeAssignment_1_1_0() { return cTypeAssignment_1_1_0; }
		
		//[datatype::DataType]
		public CrossReference getTypeDataTypeCrossReference_1_1_0_0() { return cTypeDataTypeCrossReference_1_1_0_0; }
		
		//ID
		public RuleCall getTypeDataTypeIDTerminalRuleCall_1_1_0_0_1() { return cTypeDataTypeIDTerminalRuleCall_1_1_0_0_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_1_1() { return cNumberSignKeyword_1_1_1; }
		
		//symbol=[VarDeclaration]
		public Assignment getSymbolAssignment_1_2() { return cSymbolAssignment_1_2; }
		
		//[VarDeclaration]
		public CrossReference getSymbolVarDeclarationCrossReference_1_2_0() { return cSymbolVarDeclarationCrossReference_1_2_0; }
		
		//ID
		public RuleCall getSymbolVarDeclarationIDTerminalRuleCall_1_2_0_1() { return cSymbolVarDeclarationIDTerminalRuleCall_1_2_0_1; }
		
		//(bitaccessor=MultibitPartialAccess)?
		public Assignment getBitaccessorAssignment_1_3() { return cBitaccessorAssignment_1_3; }
		
		//MultibitPartialAccess
		public RuleCall getBitaccessorMultibitPartialAccessParserRuleCall_1_3_0() { return cBitaccessorMultibitPartialAccessParserRuleCall_1_3_0; }
		
		//(=>poeInvocation?=
		//   '(' (parameters+=STExpression (',' parameters+=STExpression)*)? ')')?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//=>poeInvocation?=
		//    '('
		public Assignment getPoeInvocationAssignment_1_4_0() { return cPoeInvocationAssignment_1_4_0; }
		
		//'('
		public Keyword getPoeInvocationLeftParenthesisKeyword_1_4_0_0() { return cPoeInvocationLeftParenthesisKeyword_1_4_0_0; }
		
		//(parameters+=STExpression (',' parameters+=STExpression)*)?
		public Group getGroup_1_4_1() { return cGroup_1_4_1; }
		
		//parameters+=STExpression
		public Assignment getParametersAssignment_1_4_1_0() { return cParametersAssignment_1_4_1_0; }
		
		//STExpression
		public RuleCall getParametersSTExpressionParserRuleCall_1_4_1_0_0() { return cParametersSTExpressionParserRuleCall_1_4_1_0_0; }
		
		//(',' parameters+=STExpression)*
		public Group getGroup_1_4_1_1() { return cGroup_1_4_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_4_1_1_0() { return cCommaKeyword_1_4_1_1_0; }
		
		//parameters+=STExpression
		public Assignment getParametersAssignment_1_4_1_1_1() { return cParametersAssignment_1_4_1_1_1; }
		
		//STExpression
		public RuleCall getParametersSTExpressionParserRuleCall_1_4_1_1_1_0() { return cParametersSTExpressionParserRuleCall_1_4_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4_2() { return cRightParenthesisKeyword_1_4_2; }
	}
	public class STLiteralExpressionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STLiteralExpressions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSTBoolLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cBoolLiteralAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBoolLiteralBOOL_LITERALParserRuleCall_0_1_0 = (RuleCall)cBoolLiteralAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSTNumericLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNumericLiteralAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNumericLiteralNUMERIC_LITERALParserRuleCall_1_1_0 = (RuleCall)cNumericLiteralAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSTDateLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cDateLiteralAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDateLiteralDATE_LITERALParserRuleCall_2_1_0 = (RuleCall)cDateLiteralAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSTTimeLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cTimeLiteralAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTimeLiteralTIME_LITERALParserRuleCall_3_1_0 = (RuleCall)cTimeLiteralAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cSTTimeOfDayLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cTimeOfDayLiteralAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTimeOfDayLiteralTIME_OF_DAY_LITERALParserRuleCall_4_1_0 = (RuleCall)cTimeOfDayLiteralAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSTDateAndTimeLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cTimeLiteralAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTimeLiteralDATE_AND_TIME_LITERALParserRuleCall_5_1_0 = (RuleCall)cTimeLiteralAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cSTStringLiteralAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cStringLiteralAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cStringLiteralSTRING_LITERALParserRuleCall_6_1_0 = (RuleCall)cStringLiteralAssignment_6_1.eContents().get(0);
		
		//STLiteralExpressions returns STExpression:
		//    {STBoolLiteral} boolLiteral=BOOL_LITERAL |
		//    {STNumericLiteral} numericLiteral=NUMERIC_LITERAL |
		//    {STDateLiteral} dateLiteral=DATE_LITERAL |
		//    {STTimeLiteral} timeLiteral=TIME_LITERAL |
		//    {STTimeOfDayLiteral} timeOfDayLiteral=TIME_OF_DAY_LITERAL |
		//    {STDateAndTimeLiteral} timeLiteral=DATE_AND_TIME_LITERAL |
		//    {STStringLiteral} stringLiteral=STRING_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//{STBoolLiteral} boolLiteral=BOOL_LITERAL |
		//{STNumericLiteral} numericLiteral=NUMERIC_LITERAL |
		//{STDateLiteral} dateLiteral=DATE_LITERAL |
		//{STTimeLiteral} timeLiteral=TIME_LITERAL |
		//{STTimeOfDayLiteral} timeOfDayLiteral=TIME_OF_DAY_LITERAL |
		//{STDateAndTimeLiteral} timeLiteral=DATE_AND_TIME_LITERAL |
		//{STStringLiteral} stringLiteral=STRING_LITERAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{STBoolLiteral} boolLiteral=BOOL_LITERAL
		public Group getGroup_0() { return cGroup_0; }
		
		//{STBoolLiteral}
		public Action getSTBoolLiteralAction_0_0() { return cSTBoolLiteralAction_0_0; }
		
		//boolLiteral=BOOL_LITERAL
		public Assignment getBoolLiteralAssignment_0_1() { return cBoolLiteralAssignment_0_1; }
		
		//BOOL_LITERAL
		public RuleCall getBoolLiteralBOOL_LITERALParserRuleCall_0_1_0() { return cBoolLiteralBOOL_LITERALParserRuleCall_0_1_0; }
		
		//{STNumericLiteral} numericLiteral=NUMERIC_LITERAL
		public Group getGroup_1() { return cGroup_1; }
		
		//{STNumericLiteral}
		public Action getSTNumericLiteralAction_1_0() { return cSTNumericLiteralAction_1_0; }
		
		//numericLiteral=NUMERIC_LITERAL
		public Assignment getNumericLiteralAssignment_1_1() { return cNumericLiteralAssignment_1_1; }
		
		//NUMERIC_LITERAL
		public RuleCall getNumericLiteralNUMERIC_LITERALParserRuleCall_1_1_0() { return cNumericLiteralNUMERIC_LITERALParserRuleCall_1_1_0; }
		
		//{STDateLiteral} dateLiteral=DATE_LITERAL
		public Group getGroup_2() { return cGroup_2; }
		
		//{STDateLiteral}
		public Action getSTDateLiteralAction_2_0() { return cSTDateLiteralAction_2_0; }
		
		//dateLiteral=DATE_LITERAL
		public Assignment getDateLiteralAssignment_2_1() { return cDateLiteralAssignment_2_1; }
		
		//DATE_LITERAL
		public RuleCall getDateLiteralDATE_LITERALParserRuleCall_2_1_0() { return cDateLiteralDATE_LITERALParserRuleCall_2_1_0; }
		
		//{STTimeLiteral} timeLiteral=TIME_LITERAL
		public Group getGroup_3() { return cGroup_3; }
		
		//{STTimeLiteral}
		public Action getSTTimeLiteralAction_3_0() { return cSTTimeLiteralAction_3_0; }
		
		//timeLiteral=TIME_LITERAL
		public Assignment getTimeLiteralAssignment_3_1() { return cTimeLiteralAssignment_3_1; }
		
		//TIME_LITERAL
		public RuleCall getTimeLiteralTIME_LITERALParserRuleCall_3_1_0() { return cTimeLiteralTIME_LITERALParserRuleCall_3_1_0; }
		
		//{STTimeOfDayLiteral} timeOfDayLiteral=TIME_OF_DAY_LITERAL
		public Group getGroup_4() { return cGroup_4; }
		
		//{STTimeOfDayLiteral}
		public Action getSTTimeOfDayLiteralAction_4_0() { return cSTTimeOfDayLiteralAction_4_0; }
		
		//timeOfDayLiteral=TIME_OF_DAY_LITERAL
		public Assignment getTimeOfDayLiteralAssignment_4_1() { return cTimeOfDayLiteralAssignment_4_1; }
		
		//TIME_OF_DAY_LITERAL
		public RuleCall getTimeOfDayLiteralTIME_OF_DAY_LITERALParserRuleCall_4_1_0() { return cTimeOfDayLiteralTIME_OF_DAY_LITERALParserRuleCall_4_1_0; }
		
		//{STDateAndTimeLiteral} timeLiteral=DATE_AND_TIME_LITERAL
		public Group getGroup_5() { return cGroup_5; }
		
		//{STDateAndTimeLiteral}
		public Action getSTDateAndTimeLiteralAction_5_0() { return cSTDateAndTimeLiteralAction_5_0; }
		
		//timeLiteral=DATE_AND_TIME_LITERAL
		public Assignment getTimeLiteralAssignment_5_1() { return cTimeLiteralAssignment_5_1; }
		
		//DATE_AND_TIME_LITERAL
		public RuleCall getTimeLiteralDATE_AND_TIME_LITERALParserRuleCall_5_1_0() { return cTimeLiteralDATE_AND_TIME_LITERALParserRuleCall_5_1_0; }
		
		//{STStringLiteral} stringLiteral=STRING_LITERAL
		public Group getGroup_6() { return cGroup_6; }
		
		//{STStringLiteral}
		public Action getSTStringLiteralAction_6_0() { return cSTStringLiteralAction_6_0; }
		
		//stringLiteral=STRING_LITERAL
		public Assignment getStringLiteralAssignment_6_1() { return cStringLiteralAssignment_6_1; }
		
		//STRING_LITERAL
		public RuleCall getStringLiteralSTRING_LITERALParserRuleCall_6_1_0() { return cStringLiteralSTRING_LITERALParserRuleCall_6_1_0; }
	}
	public class BOOL_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.BOOL_LITERAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNotNOTKeyword_0_0 = (Keyword)cNotAssignment_0.eContents().get(0);
		private final Keyword cBOOLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyWordValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyWordValueBOOL_VALUESTerminalRuleCall_2_0 = (RuleCall)cKeyWordValueAssignment_2.eContents().get(0);
		
		//BOOL_LITERAL:
		//    (not='NOT')? ('BOOL#')? keyWordValue=BOOL_VALUES
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(not='NOT')? ('BOOL#')? keyWordValue=BOOL_VALUES
		public Group getGroup() { return cGroup; }
		
		//(not='NOT')?
		public Assignment getNotAssignment_0() { return cNotAssignment_0; }
		
		//'NOT'
		public Keyword getNotNOTKeyword_0_0() { return cNotNOTKeyword_0_0; }
		
		//('BOOL#')?
		public Keyword getBOOLKeyword_1() { return cBOOLKeyword_1; }
		
		//keyWordValue=BOOL_VALUES
		public Assignment getKeyWordValueAssignment_2() { return cKeyWordValueAssignment_2; }
		
		//BOOL_VALUES
		public RuleCall getKeyWordValueBOOL_VALUESTerminalRuleCall_2_0() { return cKeyWordValueBOOL_VALUESTerminalRuleCall_2_0; }
	}
	public class NUMERIC_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.NUMERIC_LITERAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNotNOTKeyword_0_0 = (Keyword)cNotAssignment_0.eContents().get(0);
		private final Assignment cKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cKeywordAlternatives_1_0 = (Alternatives)cKeywordAssignment_1.eContents().get(0);
		private final Keyword cKeywordBYTEKeyword_1_0_0 = (Keyword)cKeywordAlternatives_1_0.eContents().get(0);
		private final Keyword cKeywordWORDKeyword_1_0_1 = (Keyword)cKeywordAlternatives_1_0.eContents().get(1);
		private final Keyword cKeywordDWORDKeyword_1_0_2 = (Keyword)cKeywordAlternatives_1_0.eContents().get(2);
		private final Keyword cKeywordLWORDKeyword_1_0_3 = (Keyword)cKeywordAlternatives_1_0.eContents().get(3);
		private final Keyword cKeywordSINTKeyword_1_0_4 = (Keyword)cKeywordAlternatives_1_0.eContents().get(4);
		private final Keyword cKeywordINTKeyword_1_0_5 = (Keyword)cKeywordAlternatives_1_0.eContents().get(5);
		private final Keyword cKeywordDINTKeyword_1_0_6 = (Keyword)cKeywordAlternatives_1_0.eContents().get(6);
		private final Keyword cKeywordLINTKeyword_1_0_7 = (Keyword)cKeywordAlternatives_1_0.eContents().get(7);
		private final Keyword cKeywordUSINTKeyword_1_0_8 = (Keyword)cKeywordAlternatives_1_0.eContents().get(8);
		private final Keyword cKeywordUINTKeyword_1_0_9 = (Keyword)cKeywordAlternatives_1_0.eContents().get(9);
		private final Keyword cKeywordUDINTKeyword_1_0_10 = (Keyword)cKeywordAlternatives_1_0.eContents().get(10);
		private final Keyword cKeywordULINTKeyword_1_0_11 = (Keyword)cKeywordAlternatives_1_0.eContents().get(11);
		private final Keyword cKeywordREALKeyword_1_0_12 = (Keyword)cKeywordAlternatives_1_0.eContents().get(12);
		private final Keyword cKeywordLREALKeyword_1_0_13 = (Keyword)cKeywordAlternatives_1_0.eContents().get(13);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIntValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIntValueINTEGERParserRuleCall_2_0_0 = (RuleCall)cIntValueAssignment_2_0.eContents().get(0);
		private final Assignment cRealValueAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cRealValueREALParserRuleCall_2_1_0 = (RuleCall)cRealValueAssignment_2_1.eContents().get(0);
		private final Assignment cHexValueAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cHexValueNON_DECIMALTerminalRuleCall_2_2_0 = (RuleCall)cHexValueAssignment_2_2.eContents().get(0);
		
		//NUMERIC_LITERAL:
		//    (not='NOT')?
		//    (keyword=('BYTE#' | 'WORD#' | 'DWORD#' | 'LWORD#' | 'SINT#' | 'INT#' | 'DINT#' | 'LINT#' | 'USINT#' |
		//    'UINT#' | 'UDINT#' | 'ULINT#' |    'REAL#' | 'LREAL#'))?
		//    (intValue=INTEGER | realValue=REAL | hexValue=NON_DECIMAL);
		@Override public ParserRule getRule() { return rule; }
		
		//(not='NOT')?
		//(keyword=('BYTE#' | 'WORD#' | 'DWORD#' | 'LWORD#' | 'SINT#' | 'INT#' | 'DINT#' | 'LINT#' | 'USINT#' |
		//'UINT#' | 'UDINT#' | 'ULINT#' |    'REAL#' | 'LREAL#'))?
		//(intValue=INTEGER | realValue=REAL | hexValue=NON_DECIMAL)
		public Group getGroup() { return cGroup; }
		
		//(not='NOT')?
		public Assignment getNotAssignment_0() { return cNotAssignment_0; }
		
		//'NOT'
		public Keyword getNotNOTKeyword_0_0() { return cNotNOTKeyword_0_0; }
		
		//(keyword=('BYTE#' | 'WORD#' | 'DWORD#' | 'LWORD#' | 'SINT#' | 'INT#' | 'DINT#' | 'LINT#' | 'USINT#' |
		//'UINT#' | 'UDINT#' | 'ULINT#' |    'REAL#' | 'LREAL#'))?
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }
		
		//('BYTE#' | 'WORD#' | 'DWORD#' | 'LWORD#' | 'SINT#' | 'INT#' | 'DINT#' | 'LINT#' | 'USINT#' |
		//    'UINT#' | 'UDINT#' | 'ULINT#' |    'REAL#' | 'LREAL#')
		public Alternatives getKeywordAlternatives_1_0() { return cKeywordAlternatives_1_0; }
		
		//'BYTE#'
		public Keyword getKeywordBYTEKeyword_1_0_0() { return cKeywordBYTEKeyword_1_0_0; }
		
		//'WORD#'
		public Keyword getKeywordWORDKeyword_1_0_1() { return cKeywordWORDKeyword_1_0_1; }
		
		//'DWORD#'
		public Keyword getKeywordDWORDKeyword_1_0_2() { return cKeywordDWORDKeyword_1_0_2; }
		
		//'LWORD#'
		public Keyword getKeywordLWORDKeyword_1_0_3() { return cKeywordLWORDKeyword_1_0_3; }
		
		//'SINT#'
		public Keyword getKeywordSINTKeyword_1_0_4() { return cKeywordSINTKeyword_1_0_4; }
		
		//'INT#'
		public Keyword getKeywordINTKeyword_1_0_5() { return cKeywordINTKeyword_1_0_5; }
		
		//'DINT#'
		public Keyword getKeywordDINTKeyword_1_0_6() { return cKeywordDINTKeyword_1_0_6; }
		
		//'LINT#'
		public Keyword getKeywordLINTKeyword_1_0_7() { return cKeywordLINTKeyword_1_0_7; }
		
		//'USINT#'
		public Keyword getKeywordUSINTKeyword_1_0_8() { return cKeywordUSINTKeyword_1_0_8; }
		
		//'UINT#'
		public Keyword getKeywordUINTKeyword_1_0_9() { return cKeywordUINTKeyword_1_0_9; }
		
		//'UDINT#'
		public Keyword getKeywordUDINTKeyword_1_0_10() { return cKeywordUDINTKeyword_1_0_10; }
		
		//'ULINT#'
		public Keyword getKeywordULINTKeyword_1_0_11() { return cKeywordULINTKeyword_1_0_11; }
		
		//'REAL#'
		public Keyword getKeywordREALKeyword_1_0_12() { return cKeywordREALKeyword_1_0_12; }
		
		//'LREAL#'
		public Keyword getKeywordLREALKeyword_1_0_13() { return cKeywordLREALKeyword_1_0_13; }
		
		//(intValue=INTEGER | realValue=REAL | hexValue=NON_DECIMAL)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//intValue=INTEGER
		public Assignment getIntValueAssignment_2_0() { return cIntValueAssignment_2_0; }
		
		//INTEGER
		public RuleCall getIntValueINTEGERParserRuleCall_2_0_0() { return cIntValueINTEGERParserRuleCall_2_0_0; }
		
		//realValue=REAL
		public Assignment getRealValueAssignment_2_1() { return cRealValueAssignment_2_1; }
		
		//REAL
		public RuleCall getRealValueREALParserRuleCall_2_1_0() { return cRealValueREALParserRuleCall_2_1_0; }
		
		//hexValue=NON_DECIMAL
		public Assignment getHexValueAssignment_2_2() { return cHexValueAssignment_2_2; }
		
		//NON_DECIMAL
		public RuleCall getHexValueNON_DECIMALTerminalRuleCall_2_2_0() { return cHexValueNON_DECIMALTerminalRuleCall_2_2_0; }
	}
	public class DATE_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.DATE_LITERAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cKeywordAlternatives_0_0 = (Alternatives)cKeywordAssignment_0.eContents().get(0);
		private final Keyword cKeywordDATEKeyword_0_0_0 = (Keyword)cKeywordAlternatives_0_0.eContents().get(0);
		private final Keyword cKeywordLDATEKeyword_0_0_1 = (Keyword)cKeywordAlternatives_0_0.eContents().get(1);
		private final Keyword cKeywordDKeyword_0_0_2 = (Keyword)cKeywordAlternatives_0_0.eContents().get(2);
		private final Keyword cKeywordLDKeyword_0_0_3 = (Keyword)cKeywordAlternatives_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDATEParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DATE_LITERAL:
		//    keyword=('DATE#' | 'LDATE#' | 'D#' | 'LD#') value=DATE;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=('DATE#' | 'LDATE#' | 'D#' | 'LD#') value=DATE
		public Group getGroup() { return cGroup; }
		
		//keyword=('DATE#' | 'LDATE#' | 'D#' | 'LD#')
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//('DATE#' | 'LDATE#' | 'D#' | 'LD#')
		public Alternatives getKeywordAlternatives_0_0() { return cKeywordAlternatives_0_0; }
		
		//'DATE#'
		public Keyword getKeywordDATEKeyword_0_0_0() { return cKeywordDATEKeyword_0_0_0; }
		
		//'LDATE#'
		public Keyword getKeywordLDATEKeyword_0_0_1() { return cKeywordLDATEKeyword_0_0_1; }
		
		//'D#'
		public Keyword getKeywordDKeyword_0_0_2() { return cKeywordDKeyword_0_0_2; }
		
		//'LD#'
		public Keyword getKeywordLDKeyword_0_0_3() { return cKeywordLDKeyword_0_0_3; }
		
		//value=DATE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//DATE
		public RuleCall getValueDATEParserRuleCall_1_0() { return cValueDATEParserRuleCall_1_0; }
	}
	public class TIME_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.TIME_LITERAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cKeywordAlternatives_0_0 = (Alternatives)cKeywordAssignment_0.eContents().get(0);
		private final Keyword cKeywordTIMEKeyword_0_0_0 = (Keyword)cKeywordAlternatives_0_0.eContents().get(0);
		private final Keyword cKeywordLTIMEKeyword_0_0_1 = (Keyword)cKeywordAlternatives_0_0.eContents().get(1);
		private final Keyword cKeywordTKeyword_0_0_2 = (Keyword)cKeywordAlternatives_0_0.eContents().get(2);
		private final Keyword cKeywordLTKeyword_0_0_3 = (Keyword)cKeywordAlternatives_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTIMETerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//TIME_LITERAL:
		//    keyword=('TIME#' | 'LTIME#' | 'T#' | 'LT#') value=TIME;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=('TIME#' | 'LTIME#' | 'T#' | 'LT#') value=TIME
		public Group getGroup() { return cGroup; }
		
		//keyword=('TIME#' | 'LTIME#' | 'T#' | 'LT#')
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//('TIME#' | 'LTIME#' | 'T#' | 'LT#')
		public Alternatives getKeywordAlternatives_0_0() { return cKeywordAlternatives_0_0; }
		
		//'TIME#'
		public Keyword getKeywordTIMEKeyword_0_0_0() { return cKeywordTIMEKeyword_0_0_0; }
		
		//'LTIME#'
		public Keyword getKeywordLTIMEKeyword_0_0_1() { return cKeywordLTIMEKeyword_0_0_1; }
		
		//'T#'
		public Keyword getKeywordTKeyword_0_0_2() { return cKeywordTKeyword_0_0_2; }
		
		//'LT#'
		public Keyword getKeywordLTKeyword_0_0_3() { return cKeywordLTKeyword_0_0_3; }
		
		//value=TIME
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//TIME
		public RuleCall getValueTIMETerminalRuleCall_1_0() { return cValueTIMETerminalRuleCall_1_0; }
	}
	public class TIME_OF_DAY_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.TIME_OF_DAY_LITERAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cKeywordAlternatives_0_0 = (Alternatives)cKeywordAssignment_0.eContents().get(0);
		private final Keyword cKeywordTIME_OF_DAYKeyword_0_0_0 = (Keyword)cKeywordAlternatives_0_0.eContents().get(0);
		private final Keyword cKeywordTODKeyword_0_0_1 = (Keyword)cKeywordAlternatives_0_0.eContents().get(1);
		private final Keyword cKeywordLTODKeyword_0_0_2 = (Keyword)cKeywordAlternatives_0_0.eContents().get(2);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTIME_OF_DAYParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//TIME_OF_DAY_LITERAL:
		//    keyword=('TIME_OF_DAY#' | 'TOD#' | 'LTOD#') value=TIME_OF_DAY;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=('TIME_OF_DAY#' | 'TOD#' | 'LTOD#') value=TIME_OF_DAY
		public Group getGroup() { return cGroup; }
		
		//keyword=('TIME_OF_DAY#' | 'TOD#' | 'LTOD#')
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//('TIME_OF_DAY#' | 'TOD#' | 'LTOD#')
		public Alternatives getKeywordAlternatives_0_0() { return cKeywordAlternatives_0_0; }
		
		//'TIME_OF_DAY#'
		public Keyword getKeywordTIME_OF_DAYKeyword_0_0_0() { return cKeywordTIME_OF_DAYKeyword_0_0_0; }
		
		//'TOD#'
		public Keyword getKeywordTODKeyword_0_0_1() { return cKeywordTODKeyword_0_0_1; }
		
		//'LTOD#'
		public Keyword getKeywordLTODKeyword_0_0_2() { return cKeywordLTODKeyword_0_0_2; }
		
		//value=TIME_OF_DAY
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//TIME_OF_DAY
		public RuleCall getValueTIME_OF_DAYParserRuleCall_1_0() { return cValueTIME_OF_DAYParserRuleCall_1_0; }
	}
	public class DATE_AND_TIME_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.DATE_AND_TIME_LITERAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cKeywordAlternatives_0_0 = (Alternatives)cKeywordAssignment_0.eContents().get(0);
		private final Keyword cKeywordDATE_AND_TIMEKeyword_0_0_0 = (Keyword)cKeywordAlternatives_0_0.eContents().get(0);
		private final Keyword cKeywordLDATE_AND_TIMEKeyword_0_0_1 = (Keyword)cKeywordAlternatives_0_0.eContents().get(1);
		private final Keyword cKeywordDTKeyword_0_0_2 = (Keyword)cKeywordAlternatives_0_0.eContents().get(2);
		private final Keyword cKeywordLDTKeyword_0_0_3 = (Keyword)cKeywordAlternatives_0_0.eContents().get(3);
		private final Assignment cDateValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDateValueDATEParserRuleCall_1_0 = (RuleCall)cDateValueAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTimeOfDayValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimeOfDayValueTIME_OF_DAYParserRuleCall_3_0 = (RuleCall)cTimeOfDayValueAssignment_3.eContents().get(0);
		
		//DATE_AND_TIME_LITERAL:
		//    keyword=('DATE_AND_TIME#' | 'LDATE_AND_TIME#' | 'DT#' | 'LDT#') dateValue=DATE '-' timeOfDayValue=TIME_OF_DAY;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=('DATE_AND_TIME#' | 'LDATE_AND_TIME#' | 'DT#' | 'LDT#') dateValue=DATE '-' timeOfDayValue=TIME_OF_DAY
		public Group getGroup() { return cGroup; }
		
		//keyword=('DATE_AND_TIME#' | 'LDATE_AND_TIME#' | 'DT#' | 'LDT#')
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//('DATE_AND_TIME#' | 'LDATE_AND_TIME#' | 'DT#' | 'LDT#')
		public Alternatives getKeywordAlternatives_0_0() { return cKeywordAlternatives_0_0; }
		
		//'DATE_AND_TIME#'
		public Keyword getKeywordDATE_AND_TIMEKeyword_0_0_0() { return cKeywordDATE_AND_TIMEKeyword_0_0_0; }
		
		//'LDATE_AND_TIME#'
		public Keyword getKeywordLDATE_AND_TIMEKeyword_0_0_1() { return cKeywordLDATE_AND_TIMEKeyword_0_0_1; }
		
		//'DT#'
		public Keyword getKeywordDTKeyword_0_0_2() { return cKeywordDTKeyword_0_0_2; }
		
		//'LDT#'
		public Keyword getKeywordLDTKeyword_0_0_3() { return cKeywordLDTKeyword_0_0_3; }
		
		//dateValue=DATE
		public Assignment getDateValueAssignment_1() { return cDateValueAssignment_1; }
		
		//DATE
		public RuleCall getDateValueDATEParserRuleCall_1_0() { return cDateValueDATEParserRuleCall_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//timeOfDayValue=TIME_OF_DAY
		public Assignment getTimeOfDayValueAssignment_3() { return cTimeOfDayValueAssignment_3; }
		
		//TIME_OF_DAY
		public RuleCall getTimeOfDayValueTIME_OF_DAYParserRuleCall_3_0() { return cTimeOfDayValueTIME_OF_DAYParserRuleCall_3_0; }
	}
	public class STRING_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STRING_LITERAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cKeywordSTRINGKeyword_0_0_0 = (Keyword)cKeywordAssignment_0_0.eContents().get(0);
		private final Keyword cWSTRINGKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cCHARKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cWCHARKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//STRING_LITERAL:
		//    (keyword='STRING#' | 'WSTRING#' | 'CHAR#' | 'WCHAR#')? value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//(keyword='STRING#' | 'WSTRING#' | 'CHAR#' | 'WCHAR#')? value=STRING
		public Group getGroup() { return cGroup; }
		
		//(keyword='STRING#' | 'WSTRING#' | 'CHAR#' | 'WCHAR#')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//keyword='STRING#'
		public Assignment getKeywordAssignment_0_0() { return cKeywordAssignment_0_0; }
		
		//'STRING#'
		public Keyword getKeywordSTRINGKeyword_0_0_0() { return cKeywordSTRINGKeyword_0_0_0; }
		
		//'WSTRING#'
		public Keyword getWSTRINGKeyword_0_1() { return cWSTRINGKeyword_0_1; }
		
		//'CHAR#'
		public Keyword getCHARKeyword_0_2() { return cCHARKeyword_0_2; }
		
		//'WCHAR#'
		public Keyword getWCHARKeyword_0_3() { return cWCHARKeyword_0_3; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class INTEGERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.INTEGER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//INTEGER returns ecore::EBigInteger:
		//    ('+' | '-')? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//('+' | '-')? INT
		public Group getGroup() { return cGroup; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTEGERParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cEXT_INTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//REAL returns ecore::EBigDecimal:
		//    INTEGER '.' (EXT_INT | INT);
		@Override public ParserRule getRule() { return rule; }
		
		//INTEGER '.' (EXT_INT | INT)
		public Group getGroup() { return cGroup; }
		
		//INTEGER
		public RuleCall getINTEGERParserRuleCall_0() { return cINTEGERParserRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//(EXT_INT | INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//EXT_INT
		public RuleCall getEXT_INTTerminalRuleCall_2_0() { return cEXT_INTTerminalRuleCall_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class DATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.DATE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		// // INT ? '.' (EXT_INT | INT);
		//DATE returns ecore::EDate:
		//    INT '-' INT '-' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '-' INT '-' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
	}
	public class TIME_OF_DAYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.TIME_OF_DAY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFullStopKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		
		//TIME_OF_DAY:
		//    INT ':' INT ':' INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ':' INT ':' INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
		
		//('.' INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'.'
		public Keyword getFullStopKeyword_5_0() { return cFullStopKeyword_5_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5_1() { return cINTTerminalRuleCall_5_1; }
	}
	
	public class SubrangeOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.SubrangeOperator");
		private final EnumLiteralDeclaration cRangeEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cRangeFullStopFullStopKeyword_0 = (Keyword)cRangeEnumLiteralDeclaration.eContents().get(0);
		
		//enum SubrangeOperator returns BinaryOperator: Range='..';
		public EnumRule getRule() { return rule; }
		
		//Range='..'
		public EnumLiteralDeclaration getRangeEnumLiteralDeclaration() { return cRangeEnumLiteralDeclaration; }
		
		//'..'
		public Keyword getRangeFullStopFullStopKeyword_0() { return cRangeFullStopFullStopKeyword_0; }
	}
	public class OrOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.OrOperator");
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cORORKeyword_0 = (Keyword)cOREnumLiteralDeclaration.eContents().get(0);
		
		//enum OrOperator returns BinaryOperator: OR;
		public EnumRule getRule() { return rule; }
		
		//OR
		public EnumLiteralDeclaration getOREnumLiteralDeclaration() { return cOREnumLiteralDeclaration; }
		
		public Keyword getORORKeyword_0() { return cORORKeyword_0; }
	}
	public class XorOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.XorOperator");
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cXORXORKeyword_0 = (Keyword)cXOREnumLiteralDeclaration.eContents().get(0);
		
		//enum XorOperator returns BinaryOperator: XOR;
		public EnumRule getRule() { return rule; }
		
		//XOR
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration() { return cXOREnumLiteralDeclaration; }
		
		public Keyword getXORXORKeyword_0() { return cXORXORKeyword_0; }
	}
	public class AndOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.AndOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAMPERSANDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAMPERSANDAmpersandKeyword_1_0 = (Keyword)cAMPERSANDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AndOperator returns BinaryOperator: AND | AMPERSAND='&';
		public EnumRule getRule() { return rule; }
		
		//AND | AMPERSAND='&'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//AMPERSAND='&'
		public EnumLiteralDeclaration getAMPERSANDEnumLiteralDeclaration_1() { return cAMPERSANDEnumLiteralDeclaration_1; }
		
		//'&'
		public Keyword getAMPERSANDAmpersandKeyword_1_0() { return cAMPERSANDAmpersandKeyword_1_0; }
	}
	public class EqualityOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNELessThanSignGreaterThanSignKeyword_1_0 = (Keyword)cNEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqualityOperator returns BinaryOperator: EQ='=' | NE='<>';
		public EnumRule getRule() { return rule; }
		
		//EQ='=' | NE='<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ='='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQEqualsSignKeyword_0_0() { return cEQEqualsSignKeyword_0_0; }
		
		//NE='<>'
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_1() { return cNEEnumLiteralDeclaration_1; }
		
		//'<>'
		public Keyword getNELessThanSignGreaterThanSignKeyword_1_0() { return cNELessThanSignGreaterThanSignKeyword_1_0; }
	}
	public class CompareOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLTLessThanSignKeyword_0_0 = (Keyword)cLTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLELessThanSignEqualsSignKeyword_1_0 = (Keyword)cLEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGTGreaterThanSignKeyword_2_0 = (Keyword)cGTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CompareOperator returns BinaryOperator: LT='<' | LE='<=' | GT='>' | GE='>=';
		public EnumRule getRule() { return rule; }
		
		//LT='<' | LE='<=' | GT='>' | GE='>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LT='<'
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_0() { return cLTEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLTLessThanSignKeyword_0_0() { return cLTLessThanSignKeyword_0_0; }
		
		//LE='<='
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_1() { return cLEEnumLiteralDeclaration_1; }
		
		//'<='
		public Keyword getLELessThanSignEqualsSignKeyword_1_0() { return cLELessThanSignEqualsSignKeyword_1_0; }
		
		//GT='>'
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_2() { return cGTEnumLiteralDeclaration_2; }
		
		//'>'
		public Keyword getGTGreaterThanSignKeyword_2_0() { return cGTGreaterThanSignKeyword_2_0; }
		
		//GE='>='
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_3() { return cGEEnumLiteralDeclaration_3; }
		
		//'>='
		public Keyword getGEGreaterThanSignEqualsSignKeyword_3_0() { return cGEGreaterThanSignEqualsSignKeyword_3_0; }
	}
	public class AddSubOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.AddSubOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBHyphenMinusKeyword_1_0 = (Keyword)cSUBEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AddSubOperator returns BinaryOperator: ADD='+' | SUB='-';
		public EnumRule getRule() { return rule; }
		
		//ADD='+' | SUB='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD='+'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUB='-'
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_1() { return cSUBEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getSUBHyphenMinusKeyword_1_0() { return cSUBHyphenMinusKeyword_1_0; }
	}
	public class MulDivModOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.MulDivModOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULAsteriskKeyword_0_0 = (Keyword)cMULEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_1_0 = (Keyword)cDIVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODMODKeyword_2_0 = (Keyword)cMODEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MulDivModOperator returns BinaryOperator: MUL='*' | DIV='/' | MOD;
		public EnumRule getRule() { return rule; }
		
		//MUL='*' | DIV='/' | MOD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MUL='*'
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_0() { return cMULEnumLiteralDeclaration_0; }
		
		//'*'
		public Keyword getMULAsteriskKeyword_0_0() { return cMULAsteriskKeyword_0_0; }
		
		//DIV='/'
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_1() { return cDIVEnumLiteralDeclaration_1; }
		
		//'/'
		public Keyword getDIVSolidusKeyword_1_0() { return cDIVSolidusKeyword_1_0; }
		
		//MOD
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_2() { return cMODEnumLiteralDeclaration_2; }
		
		public Keyword getMODMODKeyword_2_0() { return cMODMODKeyword_2_0; }
	}
	public class PowerOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.PowerOperator");
		private final EnumLiteralDeclaration cPOWEREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPOWERAsteriskAsteriskKeyword_0 = (Keyword)cPOWEREnumLiteralDeclaration.eContents().get(0);
		
		//enum PowerOperator returns BinaryOperator: POWER='**';
		public EnumRule getRule() { return rule; }
		
		//POWER='**'
		public EnumLiteralDeclaration getPOWEREnumLiteralDeclaration() { return cPOWEREnumLiteralDeclaration; }
		
		//'**'
		public Keyword getPOWERAsteriskAsteriskKeyword_0() { return cPOWERAsteriskAsteriskKeyword_0; }
	}
	public class UnaryOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINUSHyphenMinusKeyword_0_0 = (Keyword)cMINUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPLUSPlusSignKeyword_1_0 = (Keyword)cPLUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNOTNOTKeyword_2_0 = (Keyword)cNOTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UnaryOperator returns UnaryOperator: MINUS='-' | PLUS='+' | NOT;
		public EnumRule getRule() { return rule; }
		
		//MINUS='-' | PLUS='+' | NOT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MINUS='-'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_0() { return cMINUSEnumLiteralDeclaration_0; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_0_0() { return cMINUSHyphenMinusKeyword_0_0; }
		
		//PLUS='+'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_1() { return cPLUSEnumLiteralDeclaration_1; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_1_0() { return cPLUSPlusSignKeyword_1_0; }
		
		//NOT
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_2() { return cNOTEnumLiteralDeclaration_2; }
		
		public Keyword getNOTNOTKeyword_2_0() { return cNOTNOTKeyword_2_0; }
	}
	public class MultiBitAccessSpecifierElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.MultiBitAccessSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLwordAccessEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLwordAccessLKeyword_0_0 = (Keyword)cLwordAccessEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDwordAccessEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDwordAccessDKeyword_1_0 = (Keyword)cDwordAccessEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWordAccessEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWordAccessWKeyword_2_0 = (Keyword)cWordAccessEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cByteAccessEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cByteAccessBKeyword_3_0 = (Keyword)cByteAccessEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBitAccessEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBitAccessXKeyword_4_0 = (Keyword)cBitAccessEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cBitAccessShortcutEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cBitAccessShortcutFullStopKeyword_5_0 = (Keyword)cBitAccessShortcutEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum MultiBitAccessSpecifier:
		//    lwordAccess='.%L' | dwordAccess='.%D' | wordAccess='.%W' | byteAccess='.%B' | bitAccess='.%X' |
		//    bitAccessShortcut='.';
		public EnumRule getRule() { return rule; }
		
		//lwordAccess='.%L' | dwordAccess='.%D' | wordAccess='.%W' | byteAccess='.%B' | bitAccess='.%X' |
		//bitAccessShortcut='.'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//lwordAccess='.%L'
		public EnumLiteralDeclaration getLwordAccessEnumLiteralDeclaration_0() { return cLwordAccessEnumLiteralDeclaration_0; }
		
		//'.%L'
		public Keyword getLwordAccessLKeyword_0_0() { return cLwordAccessLKeyword_0_0; }
		
		//dwordAccess='.%D'
		public EnumLiteralDeclaration getDwordAccessEnumLiteralDeclaration_1() { return cDwordAccessEnumLiteralDeclaration_1; }
		
		//'.%D'
		public Keyword getDwordAccessDKeyword_1_0() { return cDwordAccessDKeyword_1_0; }
		
		//wordAccess='.%W'
		public EnumLiteralDeclaration getWordAccessEnumLiteralDeclaration_2() { return cWordAccessEnumLiteralDeclaration_2; }
		
		//'.%W'
		public Keyword getWordAccessWKeyword_2_0() { return cWordAccessWKeyword_2_0; }
		
		//byteAccess='.%B'
		public EnumLiteralDeclaration getByteAccessEnumLiteralDeclaration_3() { return cByteAccessEnumLiteralDeclaration_3; }
		
		//'.%B'
		public Keyword getByteAccessBKeyword_3_0() { return cByteAccessBKeyword_3_0; }
		
		//bitAccess='.%X'
		public EnumLiteralDeclaration getBitAccessEnumLiteralDeclaration_4() { return cBitAccessEnumLiteralDeclaration_4; }
		
		//'.%X'
		public Keyword getBitAccessXKeyword_4_0() { return cBitAccessXKeyword_4_0; }
		
		//bitAccessShortcut='.'
		public EnumLiteralDeclaration getBitAccessShortcutEnumLiteralDeclaration_5() { return cBitAccessShortcutEnumLiteralDeclaration_5; }
		
		//'.'
		public Keyword getBitAccessShortcutFullStopKeyword_5_0() { return cBitAccessShortcutFullStopKeyword_5_0; }
	}
	
	private final CodeElements pCode;
	private final VarDeclarationBlockElements pVarDeclarationBlock;
	private final VarTempDeclarationBlockElements pVarTempDeclarationBlock;
	private final VarInputDeclarationBlockElements pVarInputDeclarationBlock;
	private final VarOutputDeclarationBlockElements pVarOutputDeclarationBlock;
	private final VarDeclarationElements pVarDeclaration;
	private final InitializerExpressionElements pInitializerExpression;
	private final ArrayInitializerExpressionElements pArrayInitializerExpression;
	private final ArrayInitElementElements pArrayInitElement;
	private final STStatementElements pSTStatement;
	private final STAssignmentStatementElements pSTAssignmentStatement;
	private final STIfStatmentElements pSTIfStatment;
	private final STElseIfPartElements pSTElseIfPart;
	private final STCaseStatementElements pSTCaseStatement;
	private final STCaseCasesElements pSTCaseCases;
	private final STElsePartElements pSTElsePart;
	private final STForStatementElements pSTForStatement;
	private final STWhileStatementElements pSTWhileStatement;
	private final STRepeatStatementElements pSTRepeatStatement;
	private final STExpressionElements pSTExpression;
	private final SubrangeOperatorElements eSubrangeOperator;
	private final STSubrangeExpressionElements pSTSubrangeExpression;
	private final OrOperatorElements eOrOperator;
	private final STOrExpressionElements pSTOrExpression;
	private final XorOperatorElements eXorOperator;
	private final STXorExpressionElements pSTXorExpression;
	private final AndOperatorElements eAndOperator;
	private final STAndExpressionElements pSTAndExpression;
	private final EqualityOperatorElements eEqualityOperator;
	private final STEqualityExpressionElements pSTEqualityExpression;
	private final CompareOperatorElements eCompareOperator;
	private final STComparisonExpressionElements pSTComparisonExpression;
	private final AddSubOperatorElements eAddSubOperator;
	private final STAddSubExpressionElements pSTAddSubExpression;
	private final MulDivModOperatorElements eMulDivModOperator;
	private final STMulDivModExpressionElements pSTMulDivModExpression;
	private final PowerOperatorElements ePowerOperator;
	private final STPowerExpressionElements pSTPowerExpression;
	private final UnaryOperatorElements eUnaryOperator;
	private final STSignumExpressionElements pSTSignumExpression;
	private final STSelectionExpressionElements pSTSelectionExpression;
	private final MultibitPartialAccessElements pMultibitPartialAccess;
	private final MultiBitAccessSpecifierElements eMultiBitAccessSpecifier;
	private final STAtomicExpressionElements pSTAtomicExpression;
	private final STLiteralExpressionsElements pSTLiteralExpressions;
	private final BOOL_LITERALElements pBOOL_LITERAL;
	private final NUMERIC_LITERALElements pNUMERIC_LITERAL;
	private final DATE_LITERALElements pDATE_LITERAL;
	private final TIME_LITERALElements pTIME_LITERAL;
	private final TIME_OF_DAY_LITERALElements pTIME_OF_DAY_LITERAL;
	private final DATE_AND_TIME_LITERALElements pDATE_AND_TIME_LITERAL;
	private final STRING_LITERALElements pSTRING_LITERAL;
	private final TerminalRule tBOOL_VALUES;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tNON_DECIMAL;
	private final TerminalRule tINT;
	private final QualifiedNameElements pQualifiedName;
	private final INTEGERElements pINTEGER;
	private final REALElements pREAL;
	private final DATEElements pDATE;
	private final TerminalRule tTIME;
	private final TIME_OF_DAYElements pTIME_OF_DAY;
	private final TerminalRule tEXT_INT;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tWSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public STCoreGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pCode = new CodeElements();
		this.pVarDeclarationBlock = new VarDeclarationBlockElements();
		this.pVarTempDeclarationBlock = new VarTempDeclarationBlockElements();
		this.pVarInputDeclarationBlock = new VarInputDeclarationBlockElements();
		this.pVarOutputDeclarationBlock = new VarOutputDeclarationBlockElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pInitializerExpression = new InitializerExpressionElements();
		this.pArrayInitializerExpression = new ArrayInitializerExpressionElements();
		this.pArrayInitElement = new ArrayInitElementElements();
		this.pSTStatement = new STStatementElements();
		this.pSTAssignmentStatement = new STAssignmentStatementElements();
		this.pSTIfStatment = new STIfStatmentElements();
		this.pSTElseIfPart = new STElseIfPartElements();
		this.pSTCaseStatement = new STCaseStatementElements();
		this.pSTCaseCases = new STCaseCasesElements();
		this.pSTElsePart = new STElsePartElements();
		this.pSTForStatement = new STForStatementElements();
		this.pSTWhileStatement = new STWhileStatementElements();
		this.pSTRepeatStatement = new STRepeatStatementElements();
		this.pSTExpression = new STExpressionElements();
		this.eSubrangeOperator = new SubrangeOperatorElements();
		this.pSTSubrangeExpression = new STSubrangeExpressionElements();
		this.eOrOperator = new OrOperatorElements();
		this.pSTOrExpression = new STOrExpressionElements();
		this.eXorOperator = new XorOperatorElements();
		this.pSTXorExpression = new STXorExpressionElements();
		this.eAndOperator = new AndOperatorElements();
		this.pSTAndExpression = new STAndExpressionElements();
		this.eEqualityOperator = new EqualityOperatorElements();
		this.pSTEqualityExpression = new STEqualityExpressionElements();
		this.eCompareOperator = new CompareOperatorElements();
		this.pSTComparisonExpression = new STComparisonExpressionElements();
		this.eAddSubOperator = new AddSubOperatorElements();
		this.pSTAddSubExpression = new STAddSubExpressionElements();
		this.eMulDivModOperator = new MulDivModOperatorElements();
		this.pSTMulDivModExpression = new STMulDivModExpressionElements();
		this.ePowerOperator = new PowerOperatorElements();
		this.pSTPowerExpression = new STPowerExpressionElements();
		this.eUnaryOperator = new UnaryOperatorElements();
		this.pSTSignumExpression = new STSignumExpressionElements();
		this.pSTSelectionExpression = new STSelectionExpressionElements();
		this.pMultibitPartialAccess = new MultibitPartialAccessElements();
		this.eMultiBitAccessSpecifier = new MultiBitAccessSpecifierElements();
		this.pSTAtomicExpression = new STAtomicExpressionElements();
		this.pSTLiteralExpressions = new STLiteralExpressionsElements();
		this.pBOOL_LITERAL = new BOOL_LITERALElements();
		this.pNUMERIC_LITERAL = new NUMERIC_LITERALElements();
		this.pDATE_LITERAL = new DATE_LITERALElements();
		this.pTIME_LITERAL = new TIME_LITERALElements();
		this.pTIME_OF_DAY_LITERAL = new TIME_OF_DAY_LITERALElements();
		this.pDATE_AND_TIME_LITERAL = new DATE_AND_TIME_LITERALElements();
		this.pSTRING_LITERAL = new STRING_LITERALElements();
		this.tBOOL_VALUES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.BOOL_VALUES");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.HEX_DIGIT");
		this.tNON_DECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.NON_DECIMAL");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.INT");
		this.pQualifiedName = new QualifiedNameElements();
		this.pINTEGER = new INTEGERElements();
		this.pREAL = new REALElements();
		this.pDATE = new DATEElements();
		this.tTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.TIME");
		this.pTIME_OF_DAY = new TIME_OF_DAYElements();
		this.tEXT_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.EXT_INT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.STRING");
		this.tWSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.WSTRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.fordiac.ide.structuredtextcore.STCore.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.fordiac.ide.structuredtextcore.STCore".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Code:
	//    statements+=STStatement*;
	public CodeElements getCodeAccess() {
		return pCode;
	}
	
	public ParserRule getCodeRule() {
		return getCodeAccess().getRule();
	}
	
	//VarDeclarationBlock returns VarDeclarationBlock:
	//    {VarDeclarationBlock} 'VAR' (constant?='CONSTANT')?
	//    varDeclarations+=VarDeclaration*
	//    'END_VAR';
	public VarDeclarationBlockElements getVarDeclarationBlockAccess() {
		return pVarDeclarationBlock;
	}
	
	public ParserRule getVarDeclarationBlockRule() {
		return getVarDeclarationBlockAccess().getRule();
	}
	
	//VarTempDeclarationBlock returns VarDeclarationBlock:
	//    {VarDeclarationBlock} 'VAR_TEMP' (constant?='CONSTANT')?
	//    varDeclarations+=VarDeclaration*
	//    'END_VAR';
	public VarTempDeclarationBlockElements getVarTempDeclarationBlockAccess() {
		return pVarTempDeclarationBlock;
	}
	
	public ParserRule getVarTempDeclarationBlockRule() {
		return getVarTempDeclarationBlockAccess().getRule();
	}
	
	//VarInputDeclarationBlock returns VarDeclarationBlock:
	//    {VarDeclarationBlock} 'VAR_INPUT' (constant?='CONSTANT')?
	//    varDeclarations+=VarDeclaration*
	//    'END_VAR';
	public VarInputDeclarationBlockElements getVarInputDeclarationBlockAccess() {
		return pVarInputDeclarationBlock;
	}
	
	public ParserRule getVarInputDeclarationBlockRule() {
		return getVarInputDeclarationBlockAccess().getRule();
	}
	
	//VarOutputDeclarationBlock returns VarDeclarationBlock:
	//    {VarDeclarationBlock} 'VAR_OUTPUT' (constant?='CONSTANT')?
	//    varDeclarations+=VarDeclaration*
	//    'END_VAR';
	public VarOutputDeclarationBlockElements getVarOutputDeclarationBlockAccess() {
		return pVarOutputDeclarationBlock;
	}
	
	public ParserRule getVarOutputDeclarationBlockRule() {
		return getVarOutputDeclarationBlockAccess().getRule();
	}
	
	//VarDeclaration returns VarDeclaration:
	//    name=ID ('AT' locatedAt=[VarDeclaration])? ':' (array?='ARRAY' (('[' ranges+=(STExpression) (','
	//    ranges+=STExpression)* ']') | ('[' count+='*' (',' count+='*')* ']')) 'OF')? (type=[libraryElement::LibraryElement]) ('[' maxLength=STExpression ']')? (':='
	//    defaultValue=InitializerExpression)? ';';
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}
	
	//InitializerExpression:
	//    STExpression | ArrayInitializerExpression;
	public InitializerExpressionElements getInitializerExpressionAccess() {
		return pInitializerExpression;
	}
	
	public ParserRule getInitializerExpressionRule() {
		return getInitializerExpressionAccess().getRule();
	}
	
	//ArrayInitializerExpression:
	//    '[' values+=ArrayInitElement (',' values+=ArrayInitElement)* ']';
	public ArrayInitializerExpressionElements getArrayInitializerExpressionAccess() {
		return pArrayInitializerExpression;
	}
	
	public ParserRule getArrayInitializerExpressionRule() {
		return getArrayInitializerExpressionAccess().getRule();
	}
	
	//ArrayInitElement:
	//    indexOrInitExpression=STExpression ('(' initExpression=STExpression ')')?;
	public ArrayInitElementElements getArrayInitElementAccess() {
		return pArrayInitElement;
	}
	
	public ParserRule getArrayInitElementRule() {
		return getArrayInitElementAccess().getRule();
	}
	
	//STStatement:
	//    (STIfStatment |
	//    STCaseStatement |
	//    STForStatement |
	//    STWhileStatement |
	//    STRepeatStatement |
	//    STAssignmentStatement |
	//    {STReturn} 'RETURN' |
	//    {STContinue} 'CONTINUE' |
	//    {STExit} 'EXIT') ';' |
	//    {STNop} ';';
	public STStatementElements getSTStatementAccess() {
		return pSTStatement;
	}
	
	public ParserRule getSTStatementRule() {
		return getSTStatementAccess().getRule();
	}
	
	//STAssignmentStatement:
	//    lhs=[VarDeclaration] ':=' rhs=STExpression
	//;
	public STAssignmentStatementElements getSTAssignmentStatementAccess() {
		return pSTAssignmentStatement;
	}
	
	public ParserRule getSTAssignmentStatementRule() {
		return getSTAssignmentStatementAccess().getRule();
	}
	
	//STIfStatment:
	//    'IF' condition=STExpression 'THEN' statements+=STStatement* elseifs+=(STElseIfPart)* (else=STElsePart)? 'END_IF';
	public STIfStatmentElements getSTIfStatmentAccess() {
		return pSTIfStatment;
	}
	
	public ParserRule getSTIfStatmentRule() {
		return getSTIfStatmentAccess().getRule();
	}
	
	//STElseIfPart:
	//    'ELSIF' condition=STExpression 'THEN' statements+=STStatement*;
	public STElseIfPartElements getSTElseIfPartAccess() {
		return pSTElseIfPart;
	}
	
	public ParserRule getSTElseIfPartRule() {
		return getSTElseIfPartAccess().getRule();
	}
	
	//STCaseStatement:
	//    'CASE' selector=STExpression 'OF' cases+=STCaseCases+ (else=STElsePart)? 'END_CASE';
	public STCaseStatementElements getSTCaseStatementAccess() {
		return pSTCaseStatement;
	}
	
	public ParserRule getSTCaseStatementRule() {
		return getSTCaseStatementAccess().getRule();
	}
	
	//STCaseCases:
	//    conditions+=STExpression (',' conditions+=STExpression)* ':'=> statements+=STStatement*;
	public STCaseCasesElements getSTCaseCasesAccess() {
		return pSTCaseCases;
	}
	
	public ParserRule getSTCaseCasesRule() {
		return getSTCaseCasesAccess().getRule();
	}
	
	//STElsePart:
	//    {STElsePart} 'ELSE' statements+=STStatement*;
	public STElsePartElements getSTElsePartAccess() {
		return pSTElsePart;
	}
	
	public ParserRule getSTElsePartRule() {
		return getSTElsePartAccess().getRule();
	}
	
	//STForStatement:
	//    'FOR' for=STExpression 'TO' to=STExpression ('BY' by=STExpression)? 'DO'
	//    statements+=STStatement*
	//    'END_FOR';
	public STForStatementElements getSTForStatementAccess() {
		return pSTForStatement;
	}
	
	public ParserRule getSTForStatementRule() {
		return getSTForStatementAccess().getRule();
	}
	
	//STWhileStatement:
	//    'WHILE' condition=STExpression 'DO'
	//    statements+=STStatement*
	//    'END_WHILE';
	public STWhileStatementElements getSTWhileStatementAccess() {
		return pSTWhileStatement;
	}
	
	public ParserRule getSTWhileStatementRule() {
		return getSTWhileStatementAccess().getRule();
	}
	
	//STRepeatStatement:
	//    'REPEAT'
	//    statements+=STStatement*
	//    'UNTIL' condition=STExpression
	//    'END_REPEAT';
	public STRepeatStatementElements getSTRepeatStatementAccess() {
		return pSTRepeatStatement;
	}
	
	public ParserRule getSTRepeatStatementRule() {
		return getSTRepeatStatementAccess().getRule();
	}
	
	//STExpression returns STExpression:
	//    STSubrangeExpression;
	public STExpressionElements getSTExpressionAccess() {
		return pSTExpression;
	}
	
	public ParserRule getSTExpressionRule() {
		return getSTExpressionAccess().getRule();
	}
	
	//enum SubrangeOperator returns BinaryOperator: Range='..';
	public SubrangeOperatorElements getSubrangeOperatorAccess() {
		return eSubrangeOperator;
	}
	
	public EnumRule getSubrangeOperatorRule() {
		return getSubrangeOperatorAccess().getRule();
	}
	
	//STSubrangeExpression returns STExpression:
	//    STOrExpression (({STBinaryExpression.left=current} op=SubrangeOperator) right=STOrExpression)*;
	public STSubrangeExpressionElements getSTSubrangeExpressionAccess() {
		return pSTSubrangeExpression;
	}
	
	public ParserRule getSTSubrangeExpressionRule() {
		return getSTSubrangeExpressionAccess().getRule();
	}
	
	//enum OrOperator returns BinaryOperator: OR;
	public OrOperatorElements getOrOperatorAccess() {
		return eOrOperator;
	}
	
	public EnumRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}
	
	//STOrExpression returns STExpression:
	//    STXorExpression (({STBinaryExpression.left=current} op=OrOperator) right=STXorExpression)*;
	public STOrExpressionElements getSTOrExpressionAccess() {
		return pSTOrExpression;
	}
	
	public ParserRule getSTOrExpressionRule() {
		return getSTOrExpressionAccess().getRule();
	}
	
	//enum XorOperator returns BinaryOperator: XOR;
	public XorOperatorElements getXorOperatorAccess() {
		return eXorOperator;
	}
	
	public EnumRule getXorOperatorRule() {
		return getXorOperatorAccess().getRule();
	}
	
	//STXorExpression returns STExpression:
	//    STAndExpression (({STBinaryExpression.left=current} op=XorOperator) right=STAndExpression)*;
	public STXorExpressionElements getSTXorExpressionAccess() {
		return pSTXorExpression;
	}
	
	public ParserRule getSTXorExpressionRule() {
		return getSTXorExpressionAccess().getRule();
	}
	
	//enum AndOperator returns BinaryOperator: AND | AMPERSAND='&';
	public AndOperatorElements getAndOperatorAccess() {
		return eAndOperator;
	}
	
	public EnumRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}
	
	//STAndExpression returns STExpression:
	//    STEqualityExpression (({STBinaryExpression.left=current} op=AndOperator) right=STEqualityExpression)*;
	public STAndExpressionElements getSTAndExpressionAccess() {
		return pSTAndExpression;
	}
	
	public ParserRule getSTAndExpressionRule() {
		return getSTAndExpressionAccess().getRule();
	}
	
	//enum EqualityOperator returns BinaryOperator: EQ='=' | NE='<>';
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return eEqualityOperator;
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//STEqualityExpression returns STExpression:
	//    STComparisonExpression (({STBinaryExpression.left=current} op=EqualityOperator) right=STComparisonExpression)*;
	public STEqualityExpressionElements getSTEqualityExpressionAccess() {
		return pSTEqualityExpression;
	}
	
	public ParserRule getSTEqualityExpressionRule() {
		return getSTEqualityExpressionAccess().getRule();
	}
	
	//enum CompareOperator returns BinaryOperator: LT='<' | LE='<=' | GT='>' | GE='>=';
	public CompareOperatorElements getCompareOperatorAccess() {
		return eCompareOperator;
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//STComparisonExpression returns STExpression:
	//    STAddSubExpression (({STBinaryExpression.left=current} op=CompareOperator) right=STAddSubExpression)*;
	public STComparisonExpressionElements getSTComparisonExpressionAccess() {
		return pSTComparisonExpression;
	}
	
	public ParserRule getSTComparisonExpressionRule() {
		return getSTComparisonExpressionAccess().getRule();
	}
	
	//enum AddSubOperator returns BinaryOperator: ADD='+' | SUB='-';
	public AddSubOperatorElements getAddSubOperatorAccess() {
		return eAddSubOperator;
	}
	
	public EnumRule getAddSubOperatorRule() {
		return getAddSubOperatorAccess().getRule();
	}
	
	//STAddSubExpression returns STExpression:
	//    STMulDivModExpression (({STBinaryExpression.left=current} op=AddSubOperator) right=STMulDivModExpression)*;
	public STAddSubExpressionElements getSTAddSubExpressionAccess() {
		return pSTAddSubExpression;
	}
	
	public ParserRule getSTAddSubExpressionRule() {
		return getSTAddSubExpressionAccess().getRule();
	}
	
	//enum MulDivModOperator returns BinaryOperator: MUL='*' | DIV='/' | MOD;
	public MulDivModOperatorElements getMulDivModOperatorAccess() {
		return eMulDivModOperator;
	}
	
	public EnumRule getMulDivModOperatorRule() {
		return getMulDivModOperatorAccess().getRule();
	}
	
	//STMulDivModExpression returns STExpression:
	//    STPowerExpression (({STBinaryExpression.left=current} op=MulDivModOperator) right=STPowerExpression)*;
	public STMulDivModExpressionElements getSTMulDivModExpressionAccess() {
		return pSTMulDivModExpression;
	}
	
	public ParserRule getSTMulDivModExpressionRule() {
		return getSTMulDivModExpressionAccess().getRule();
	}
	
	//enum PowerOperator returns BinaryOperator: POWER='**';
	public PowerOperatorElements getPowerOperatorAccess() {
		return ePowerOperator;
	}
	
	public EnumRule getPowerOperatorRule() {
		return getPowerOperatorAccess().getRule();
	}
	
	//STPowerExpression returns STExpression:
	//    STSignumExpression (({STBinaryExpression.left=current} op=PowerOperator) right=STSignumExpression)*;
	public STPowerExpressionElements getSTPowerExpressionAccess() {
		return pSTPowerExpression;
	}
	
	public ParserRule getSTPowerExpressionRule() {
		return getSTPowerExpressionAccess().getRule();
	}
	
	//enum UnaryOperator returns UnaryOperator: MINUS='-' | PLUS='+' | NOT;
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return eUnaryOperator;
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//STSignumExpression returns STExpression:
	//    STLiteralExpressions | STSelectionExpression | ({STUnaryExpression} op=UnaryOperator
	//    expression=STSelectionExpression);
	public STSignumExpressionElements getSTSignumExpressionAccess() {
		return pSTSignumExpression;
	}
	
	public ParserRule getSTSignumExpressionRule() {
		return getSTSignumExpressionAccess().getRule();
	}
	
	//STSelectionExpression returns STExpression:
	//    STAtomicExpression
	//    ({STMemberSelection.receiver=current} (structAccess?='.' member=[VarDeclaration] | arrayAccess?='['
	//    index+=STExpression (',' index+=STExpression)* ']')
	//    (=>poeInvocation?='(' (parameters+=STExpression (',' parameters+=STExpression)*)? ')')?
	//    (=>bitaccessor=MultibitPartialAccess)?
	//    )*;
	public STSelectionExpressionElements getSTSelectionExpressionAccess() {
		return pSTSelectionExpression;
	}
	
	public ParserRule getSTSelectionExpressionRule() {
		return getSTSelectionExpressionAccess().getRule();
	}
	
	//MultibitPartialAccess:
	//    (accessSpecifier=MultiBitAccessSpecifier) index=INT;
	public MultibitPartialAccessElements getMultibitPartialAccessAccess() {
		return pMultibitPartialAccess;
	}
	
	public ParserRule getMultibitPartialAccessRule() {
		return getMultibitPartialAccessAccess().getRule();
	}
	
	//enum MultiBitAccessSpecifier:
	//    lwordAccess='.%L' | dwordAccess='.%D' | wordAccess='.%W' | byteAccess='.%B' | bitAccess='.%X' |
	//    bitAccessShortcut='.';
	public MultiBitAccessSpecifierElements getMultiBitAccessSpecifierAccess() {
		return eMultiBitAccessSpecifier;
	}
	
	public EnumRule getMultiBitAccessSpecifierRule() {
		return getMultiBitAccessSpecifierAccess().getRule();
	}
	
	//STAtomicExpression returns STExpression:
	//    '(' STExpression ')' |
	//    {STSymbol} (type=[datatype::DataType] '#')? symbol=[VarDeclaration] (bitaccessor=MultibitPartialAccess)? (=>poeInvocation?=
	//    '(' (parameters+=STExpression (',' parameters+=STExpression)*)? ')')? ;
	public STAtomicExpressionElements getSTAtomicExpressionAccess() {
		return pSTAtomicExpression;
	}
	
	public ParserRule getSTAtomicExpressionRule() {
		return getSTAtomicExpressionAccess().getRule();
	}
	
	//STLiteralExpressions returns STExpression:
	//    {STBoolLiteral} boolLiteral=BOOL_LITERAL |
	//    {STNumericLiteral} numericLiteral=NUMERIC_LITERAL |
	//    {STDateLiteral} dateLiteral=DATE_LITERAL |
	//    {STTimeLiteral} timeLiteral=TIME_LITERAL |
	//    {STTimeOfDayLiteral} timeOfDayLiteral=TIME_OF_DAY_LITERAL |
	//    {STDateAndTimeLiteral} timeLiteral=DATE_AND_TIME_LITERAL |
	//    {STStringLiteral} stringLiteral=STRING_LITERAL;
	public STLiteralExpressionsElements getSTLiteralExpressionsAccess() {
		return pSTLiteralExpressions;
	}
	
	public ParserRule getSTLiteralExpressionsRule() {
		return getSTLiteralExpressionsAccess().getRule();
	}
	
	//BOOL_LITERAL:
	//    (not='NOT')? ('BOOL#')? keyWordValue=BOOL_VALUES
	//;
	public BOOL_LITERALElements getBOOL_LITERALAccess() {
		return pBOOL_LITERAL;
	}
	
	public ParserRule getBOOL_LITERALRule() {
		return getBOOL_LITERALAccess().getRule();
	}
	
	//NUMERIC_LITERAL:
	//    (not='NOT')?
	//    (keyword=('BYTE#' | 'WORD#' | 'DWORD#' | 'LWORD#' | 'SINT#' | 'INT#' | 'DINT#' | 'LINT#' | 'USINT#' |
	//    'UINT#' | 'UDINT#' | 'ULINT#' |    'REAL#' | 'LREAL#'))?
	//    (intValue=INTEGER | realValue=REAL | hexValue=NON_DECIMAL);
	public NUMERIC_LITERALElements getNUMERIC_LITERALAccess() {
		return pNUMERIC_LITERAL;
	}
	
	public ParserRule getNUMERIC_LITERALRule() {
		return getNUMERIC_LITERALAccess().getRule();
	}
	
	//DATE_LITERAL:
	//    keyword=('DATE#' | 'LDATE#' | 'D#' | 'LD#') value=DATE;
	public DATE_LITERALElements getDATE_LITERALAccess() {
		return pDATE_LITERAL;
	}
	
	public ParserRule getDATE_LITERALRule() {
		return getDATE_LITERALAccess().getRule();
	}
	
	//TIME_LITERAL:
	//    keyword=('TIME#' | 'LTIME#' | 'T#' | 'LT#') value=TIME;
	public TIME_LITERALElements getTIME_LITERALAccess() {
		return pTIME_LITERAL;
	}
	
	public ParserRule getTIME_LITERALRule() {
		return getTIME_LITERALAccess().getRule();
	}
	
	//TIME_OF_DAY_LITERAL:
	//    keyword=('TIME_OF_DAY#' | 'TOD#' | 'LTOD#') value=TIME_OF_DAY;
	public TIME_OF_DAY_LITERALElements getTIME_OF_DAY_LITERALAccess() {
		return pTIME_OF_DAY_LITERAL;
	}
	
	public ParserRule getTIME_OF_DAY_LITERALRule() {
		return getTIME_OF_DAY_LITERALAccess().getRule();
	}
	
	//DATE_AND_TIME_LITERAL:
	//    keyword=('DATE_AND_TIME#' | 'LDATE_AND_TIME#' | 'DT#' | 'LDT#') dateValue=DATE '-' timeOfDayValue=TIME_OF_DAY;
	public DATE_AND_TIME_LITERALElements getDATE_AND_TIME_LITERALAccess() {
		return pDATE_AND_TIME_LITERAL;
	}
	
	public ParserRule getDATE_AND_TIME_LITERALRule() {
		return getDATE_AND_TIME_LITERALAccess().getRule();
	}
	
	//STRING_LITERAL:
	//    (keyword='STRING#' | 'WSTRING#' | 'CHAR#' | 'WCHAR#')? value=STRING;
	public STRING_LITERALElements getSTRING_LITERALAccess() {
		return pSTRING_LITERAL;
	}
	
	public ParserRule getSTRING_LITERALRule() {
		return getSTRING_LITERALAccess().getRule();
	}
	
	//terminal BOOL_VALUES returns ecore::EBoolean:
	//    'TRUE' | 'FALSE';
	public TerminalRule getBOOL_VALUESRule() {
		return tBOOL_VALUES;
	}
	
	//terminal fragment HEX_DIGIT:
	//    '0'..'9' | 'a'..'f' | 'A'..'F' | '_';
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal NON_DECIMAL returns ecore::EBigInteger:
	//    ('2#' | '8#' | '16#') HEX_DIGIT+;
	public TerminalRule getNON_DECIMALRule() {
		return tNON_DECIMAL;
	}
	
	//terminal INT returns ecore::EBigInteger:
	//    ('0'..'9') ('_'? '0'..'9')*;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//QualifiedName:
	//    ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//INTEGER returns ecore::EBigInteger:
	//    ('+' | '-')? INT;
	public INTEGERElements getINTEGERAccess() {
		return pINTEGER;
	}
	
	public ParserRule getINTEGERRule() {
		return getINTEGERAccess().getRule();
	}
	
	//REAL returns ecore::EBigDecimal:
	//    INTEGER '.' (EXT_INT | INT);
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	// // INT ? '.' (EXT_INT | INT);
	//DATE returns ecore::EDate:
	//    INT '-' INT '-' INT;
	public DATEElements getDATEAccess() {
		return pDATE;
	}
	
	public ParserRule getDATERule() {
		return getDATEAccess().getRule();
	}
	
	//terminal TIME:
	//    ('+' | '-')? (INT ('.' INT)? ('D' | 'H' | 'M' | 'S' | 'MS' | 'US' | 'NS') ('_')?)+;
	public TerminalRule getTIMERule() {
		return tTIME;
	}
	
	//TIME_OF_DAY:
	//    INT ':' INT ':' INT ('.' INT)?;
	public TIME_OF_DAYElements getTIME_OF_DAYAccess() {
		return pTIME_OF_DAY;
	}
	
	public ParserRule getTIME_OF_DAYRule() {
		return getTIME_OF_DAYAccess().getRule();
	}
	
	//terminal EXT_INT:
	//    INT ('e' | 'E') ('-' | '+')? INT;
	public TerminalRule getEXT_INTRule() {
		return tEXT_INT;
	}
	
	//terminal ID:
	//    '^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal STRING returns ecore::EString:
	//    '"' ('$' . /* 'L'|'N'|'P'|'R'|'T'|'"'|'$' */ | !('$' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal WSTRING returns ecore::EString:
	//    "'" ('$' . /* "L"|"N"|"P"|"R"|"T"|"'"|"$" */ | !('$' | "'"))* "'";
	public TerminalRule getWSTRINGRule() {
		return tWSTRING;
	}
	
	//terminal ML_COMMENT:
	//    '/*'->'*/' | '(*'->'*)';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//    '//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//    (' ' | '\t' | '\r' | '\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//    .;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
