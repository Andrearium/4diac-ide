/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl;

import java.util.Date;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.fordiac.ide.model.data.DataType;

import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCorePackage;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STDateAndTimeLiteral;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ST Date And Time Literal</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STDateAndTimeLiteralImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STDateAndTimeLiteralImpl#getDateValue <em>Date Value</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STDateAndTimeLiteralImpl#getTimeOfDayValue <em>Time Of Day Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class STDateAndTimeLiteralImpl extends STExpressionImpl implements STDateAndTimeLiteral
{
  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected DataType type;

  /**
   * The default value of the '{@link #getDateValue() <em>Date Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDateValue()
   * @generated
   * @ordered
   */
  protected static final Date DATE_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDateValue() <em>Date Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDateValue()
   * @generated
   * @ordered
   */
  protected Date dateValue = DATE_VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getTimeOfDayValue() <em>Time Of Day Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeOfDayValue()
   * @generated
   * @ordered
   */
  protected static final String TIME_OF_DAY_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTimeOfDayValue() <em>Time Of Day Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeOfDayValue()
   * @generated
   * @ordered
   */
  protected String timeOfDayValue = TIME_OF_DAY_VALUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected STDateAndTimeLiteralImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return STCorePackage.Literals.ST_DATE_AND_TIME_LITERAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(DataType newType, NotificationChain msgs)
  {
    DataType oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, STCorePackage.ST_DATE_AND_TIME_LITERAL__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(DataType newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - STCorePackage.ST_DATE_AND_TIME_LITERAL__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - STCorePackage.ST_DATE_AND_TIME_LITERAL__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.ST_DATE_AND_TIME_LITERAL__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Date getDateValue()
  {
    return dateValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDateValue(Date newDateValue)
  {
    Date oldDateValue = dateValue;
    dateValue = newDateValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.ST_DATE_AND_TIME_LITERAL__DATE_VALUE, oldDateValue, dateValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTimeOfDayValue()
  {
    return timeOfDayValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeOfDayValue(String newTimeOfDayValue)
  {
    String oldTimeOfDayValue = timeOfDayValue;
    timeOfDayValue = newTimeOfDayValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.ST_DATE_AND_TIME_LITERAL__TIME_OF_DAY_VALUE, oldTimeOfDayValue, timeOfDayValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case STCorePackage.ST_DATE_AND_TIME_LITERAL__TYPE:
        return basicSetType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case STCorePackage.ST_DATE_AND_TIME_LITERAL__TYPE:
        return getType();
      case STCorePackage.ST_DATE_AND_TIME_LITERAL__DATE_VALUE:
        return getDateValue();
      case STCorePackage.ST_DATE_AND_TIME_LITERAL__TIME_OF_DAY_VALUE:
        return getTimeOfDayValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case STCorePackage.ST_DATE_AND_TIME_LITERAL__TYPE:
        setType((DataType)newValue);
        return;
      case STCorePackage.ST_DATE_AND_TIME_LITERAL__DATE_VALUE:
        setDateValue((Date)newValue);
        return;
      case STCorePackage.ST_DATE_AND_TIME_LITERAL__TIME_OF_DAY_VALUE:
        setTimeOfDayValue((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case STCorePackage.ST_DATE_AND_TIME_LITERAL__TYPE:
        setType((DataType)null);
        return;
      case STCorePackage.ST_DATE_AND_TIME_LITERAL__DATE_VALUE:
        setDateValue(DATE_VALUE_EDEFAULT);
        return;
      case STCorePackage.ST_DATE_AND_TIME_LITERAL__TIME_OF_DAY_VALUE:
        setTimeOfDayValue(TIME_OF_DAY_VALUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case STCorePackage.ST_DATE_AND_TIME_LITERAL__TYPE:
        return type != null;
      case STCorePackage.ST_DATE_AND_TIME_LITERAL__DATE_VALUE:
        return DATE_VALUE_EDEFAULT == null ? dateValue != null : !DATE_VALUE_EDEFAULT.equals(dateValue);
      case STCorePackage.ST_DATE_AND_TIME_LITERAL__TIME_OF_DAY_VALUE:
        return TIME_OF_DAY_VALUE_EDEFAULT == null ? timeOfDayValue != null : !TIME_OF_DAY_VALUE_EDEFAULT.equals(timeOfDayValue);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (dateValue: ");
    result.append(dateValue);
    result.append(", timeOfDayValue: ");
    result.append(timeOfDayValue);
    result.append(')');
    return result.toString();
  }

} //STDateAndTimeLiteralImpl
