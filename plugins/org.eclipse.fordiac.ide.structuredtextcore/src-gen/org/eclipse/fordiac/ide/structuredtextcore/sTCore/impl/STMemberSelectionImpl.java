/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.fordiac.ide.structuredtextcore.sTCore.MultibitPartialAccess;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCorePackage;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STMemberSelection;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.VarDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ST Member Selection</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STMemberSelectionImpl#getReceiver <em>Receiver</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STMemberSelectionImpl#isStructAccess <em>Struct Access</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STMemberSelectionImpl#getMember <em>Member</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STMemberSelectionImpl#isArrayAccess <em>Array Access</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STMemberSelectionImpl#getIndex <em>Index</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STMemberSelectionImpl#isPoeInvocation <em>Poe Invocation</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STMemberSelectionImpl#getParameters <em>Parameters</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STMemberSelectionImpl#getBitaccessor <em>Bitaccessor</em>}</li>
 * </ul>
 *
 * @generated
 */
public class STMemberSelectionImpl extends STExpressionImpl implements STMemberSelection
{
  /**
   * The cached value of the '{@link #getReceiver() <em>Receiver</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReceiver()
   * @generated
   * @ordered
   */
  protected STExpression receiver;

  /**
   * The default value of the '{@link #isStructAccess() <em>Struct Access</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStructAccess()
   * @generated
   * @ordered
   */
  protected static final boolean STRUCT_ACCESS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isStructAccess() <em>Struct Access</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStructAccess()
   * @generated
   * @ordered
   */
  protected boolean structAccess = STRUCT_ACCESS_EDEFAULT;

  /**
   * The cached value of the '{@link #getMember() <em>Member</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMember()
   * @generated
   * @ordered
   */
  protected VarDeclaration member;

  /**
   * The default value of the '{@link #isArrayAccess() <em>Array Access</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isArrayAccess()
   * @generated
   * @ordered
   */
  protected static final boolean ARRAY_ACCESS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isArrayAccess() <em>Array Access</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isArrayAccess()
   * @generated
   * @ordered
   */
  protected boolean arrayAccess = ARRAY_ACCESS_EDEFAULT;

  /**
   * The cached value of the '{@link #getIndex() <em>Index</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected EList<STExpression> index;

  /**
   * The default value of the '{@link #isPoeInvocation() <em>Poe Invocation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPoeInvocation()
   * @generated
   * @ordered
   */
  protected static final boolean POE_INVOCATION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPoeInvocation() <em>Poe Invocation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPoeInvocation()
   * @generated
   * @ordered
   */
  protected boolean poeInvocation = POE_INVOCATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected EList<STExpression> parameters;

  /**
   * The cached value of the '{@link #getBitaccessor() <em>Bitaccessor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBitaccessor()
   * @generated
   * @ordered
   */
  protected MultibitPartialAccess bitaccessor;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected STMemberSelectionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return STCorePackage.Literals.ST_MEMBER_SELECTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STExpression getReceiver()
  {
    return receiver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReceiver(STExpression newReceiver, NotificationChain msgs)
  {
    STExpression oldReceiver = receiver;
    receiver = newReceiver;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, STCorePackage.ST_MEMBER_SELECTION__RECEIVER, oldReceiver, newReceiver);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReceiver(STExpression newReceiver)
  {
    if (newReceiver != receiver)
    {
      NotificationChain msgs = null;
      if (receiver != null)
        msgs = ((InternalEObject)receiver).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - STCorePackage.ST_MEMBER_SELECTION__RECEIVER, null, msgs);
      if (newReceiver != null)
        msgs = ((InternalEObject)newReceiver).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - STCorePackage.ST_MEMBER_SELECTION__RECEIVER, null, msgs);
      msgs = basicSetReceiver(newReceiver, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.ST_MEMBER_SELECTION__RECEIVER, newReceiver, newReceiver));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isStructAccess()
  {
    return structAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStructAccess(boolean newStructAccess)
  {
    boolean oldStructAccess = structAccess;
    structAccess = newStructAccess;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.ST_MEMBER_SELECTION__STRUCT_ACCESS, oldStructAccess, structAccess));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDeclaration getMember()
  {
    if (member != null && member.eIsProxy())
    {
      InternalEObject oldMember = (InternalEObject)member;
      member = (VarDeclaration)eResolveProxy(oldMember);
      if (member != oldMember)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, STCorePackage.ST_MEMBER_SELECTION__MEMBER, oldMember, member));
      }
    }
    return member;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarDeclaration basicGetMember()
  {
    return member;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMember(VarDeclaration newMember)
  {
    VarDeclaration oldMember = member;
    member = newMember;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.ST_MEMBER_SELECTION__MEMBER, oldMember, member));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isArrayAccess()
  {
    return arrayAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArrayAccess(boolean newArrayAccess)
  {
    boolean oldArrayAccess = arrayAccess;
    arrayAccess = newArrayAccess;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.ST_MEMBER_SELECTION__ARRAY_ACCESS, oldArrayAccess, arrayAccess));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<STExpression> getIndex()
  {
    if (index == null)
    {
      index = new EObjectContainmentEList<STExpression>(STExpression.class, this, STCorePackage.ST_MEMBER_SELECTION__INDEX);
    }
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isPoeInvocation()
  {
    return poeInvocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPoeInvocation(boolean newPoeInvocation)
  {
    boolean oldPoeInvocation = poeInvocation;
    poeInvocation = newPoeInvocation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.ST_MEMBER_SELECTION__POE_INVOCATION, oldPoeInvocation, poeInvocation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<STExpression> getParameters()
  {
    if (parameters == null)
    {
      parameters = new EObjectContainmentEList<STExpression>(STExpression.class, this, STCorePackage.ST_MEMBER_SELECTION__PARAMETERS);
    }
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultibitPartialAccess getBitaccessor()
  {
    return bitaccessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBitaccessor(MultibitPartialAccess newBitaccessor, NotificationChain msgs)
  {
    MultibitPartialAccess oldBitaccessor = bitaccessor;
    bitaccessor = newBitaccessor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, STCorePackage.ST_MEMBER_SELECTION__BITACCESSOR, oldBitaccessor, newBitaccessor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBitaccessor(MultibitPartialAccess newBitaccessor)
  {
    if (newBitaccessor != bitaccessor)
    {
      NotificationChain msgs = null;
      if (bitaccessor != null)
        msgs = ((InternalEObject)bitaccessor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - STCorePackage.ST_MEMBER_SELECTION__BITACCESSOR, null, msgs);
      if (newBitaccessor != null)
        msgs = ((InternalEObject)newBitaccessor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - STCorePackage.ST_MEMBER_SELECTION__BITACCESSOR, null, msgs);
      msgs = basicSetBitaccessor(newBitaccessor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.ST_MEMBER_SELECTION__BITACCESSOR, newBitaccessor, newBitaccessor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case STCorePackage.ST_MEMBER_SELECTION__RECEIVER:
        return basicSetReceiver(null, msgs);
      case STCorePackage.ST_MEMBER_SELECTION__INDEX:
        return ((InternalEList<?>)getIndex()).basicRemove(otherEnd, msgs);
      case STCorePackage.ST_MEMBER_SELECTION__PARAMETERS:
        return ((InternalEList<?>)getParameters()).basicRemove(otherEnd, msgs);
      case STCorePackage.ST_MEMBER_SELECTION__BITACCESSOR:
        return basicSetBitaccessor(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case STCorePackage.ST_MEMBER_SELECTION__RECEIVER:
        return getReceiver();
      case STCorePackage.ST_MEMBER_SELECTION__STRUCT_ACCESS:
        return isStructAccess();
      case STCorePackage.ST_MEMBER_SELECTION__MEMBER:
        if (resolve) return getMember();
        return basicGetMember();
      case STCorePackage.ST_MEMBER_SELECTION__ARRAY_ACCESS:
        return isArrayAccess();
      case STCorePackage.ST_MEMBER_SELECTION__INDEX:
        return getIndex();
      case STCorePackage.ST_MEMBER_SELECTION__POE_INVOCATION:
        return isPoeInvocation();
      case STCorePackage.ST_MEMBER_SELECTION__PARAMETERS:
        return getParameters();
      case STCorePackage.ST_MEMBER_SELECTION__BITACCESSOR:
        return getBitaccessor();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case STCorePackage.ST_MEMBER_SELECTION__RECEIVER:
        setReceiver((STExpression)newValue);
        return;
      case STCorePackage.ST_MEMBER_SELECTION__STRUCT_ACCESS:
        setStructAccess((Boolean)newValue);
        return;
      case STCorePackage.ST_MEMBER_SELECTION__MEMBER:
        setMember((VarDeclaration)newValue);
        return;
      case STCorePackage.ST_MEMBER_SELECTION__ARRAY_ACCESS:
        setArrayAccess((Boolean)newValue);
        return;
      case STCorePackage.ST_MEMBER_SELECTION__INDEX:
        getIndex().clear();
        getIndex().addAll((Collection<? extends STExpression>)newValue);
        return;
      case STCorePackage.ST_MEMBER_SELECTION__POE_INVOCATION:
        setPoeInvocation((Boolean)newValue);
        return;
      case STCorePackage.ST_MEMBER_SELECTION__PARAMETERS:
        getParameters().clear();
        getParameters().addAll((Collection<? extends STExpression>)newValue);
        return;
      case STCorePackage.ST_MEMBER_SELECTION__BITACCESSOR:
        setBitaccessor((MultibitPartialAccess)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case STCorePackage.ST_MEMBER_SELECTION__RECEIVER:
        setReceiver((STExpression)null);
        return;
      case STCorePackage.ST_MEMBER_SELECTION__STRUCT_ACCESS:
        setStructAccess(STRUCT_ACCESS_EDEFAULT);
        return;
      case STCorePackage.ST_MEMBER_SELECTION__MEMBER:
        setMember((VarDeclaration)null);
        return;
      case STCorePackage.ST_MEMBER_SELECTION__ARRAY_ACCESS:
        setArrayAccess(ARRAY_ACCESS_EDEFAULT);
        return;
      case STCorePackage.ST_MEMBER_SELECTION__INDEX:
        getIndex().clear();
        return;
      case STCorePackage.ST_MEMBER_SELECTION__POE_INVOCATION:
        setPoeInvocation(POE_INVOCATION_EDEFAULT);
        return;
      case STCorePackage.ST_MEMBER_SELECTION__PARAMETERS:
        getParameters().clear();
        return;
      case STCorePackage.ST_MEMBER_SELECTION__BITACCESSOR:
        setBitaccessor((MultibitPartialAccess)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case STCorePackage.ST_MEMBER_SELECTION__RECEIVER:
        return receiver != null;
      case STCorePackage.ST_MEMBER_SELECTION__STRUCT_ACCESS:
        return structAccess != STRUCT_ACCESS_EDEFAULT;
      case STCorePackage.ST_MEMBER_SELECTION__MEMBER:
        return member != null;
      case STCorePackage.ST_MEMBER_SELECTION__ARRAY_ACCESS:
        return arrayAccess != ARRAY_ACCESS_EDEFAULT;
      case STCorePackage.ST_MEMBER_SELECTION__INDEX:
        return index != null && !index.isEmpty();
      case STCorePackage.ST_MEMBER_SELECTION__POE_INVOCATION:
        return poeInvocation != POE_INVOCATION_EDEFAULT;
      case STCorePackage.ST_MEMBER_SELECTION__PARAMETERS:
        return parameters != null && !parameters.isEmpty();
      case STCorePackage.ST_MEMBER_SELECTION__BITACCESSOR:
        return bitaccessor != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (structAccess: ");
    result.append(structAccess);
    result.append(", arrayAccess: ");
    result.append(arrayAccess);
    result.append(", poeInvocation: ");
    result.append(poeInvocation);
    result.append(')');
    return result.toString();
  }

} //STMemberSelectionImpl
