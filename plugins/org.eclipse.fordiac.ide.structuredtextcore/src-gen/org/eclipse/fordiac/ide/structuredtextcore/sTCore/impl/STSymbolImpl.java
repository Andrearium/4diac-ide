/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.fordiac.ide.model.data.DataType;

import org.eclipse.fordiac.ide.structuredtextcore.sTCore.MultibitPartialAccess;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCorePackage;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STSymbol;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.VarDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ST Symbol</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STSymbolImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STSymbolImpl#getSymbol <em>Symbol</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STSymbolImpl#getBitaccessor <em>Bitaccessor</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STSymbolImpl#isPoeInvocation <em>Poe Invocation</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.STSymbolImpl#getParameters <em>Parameters</em>}</li>
 * </ul>
 *
 * @generated
 */
public class STSymbolImpl extends STExpressionImpl implements STSymbol
{
  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected DataType type;

  /**
   * The cached value of the '{@link #getSymbol() <em>Symbol</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSymbol()
   * @generated
   * @ordered
   */
  protected VarDeclaration symbol;

  /**
   * The cached value of the '{@link #getBitaccessor() <em>Bitaccessor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBitaccessor()
   * @generated
   * @ordered
   */
  protected MultibitPartialAccess bitaccessor;

  /**
   * The default value of the '{@link #isPoeInvocation() <em>Poe Invocation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPoeInvocation()
   * @generated
   * @ordered
   */
  protected static final boolean POE_INVOCATION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPoeInvocation() <em>Poe Invocation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPoeInvocation()
   * @generated
   * @ordered
   */
  protected boolean poeInvocation = POE_INVOCATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected EList<STExpression> parameters;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected STSymbolImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return STCorePackage.Literals.ST_SYMBOL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataType getType()
  {
    if (type != null && type.eIsProxy())
    {
      InternalEObject oldType = (InternalEObject)type;
      type = (DataType)eResolveProxy(oldType);
      if (type != oldType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, STCorePackage.ST_SYMBOL__TYPE, oldType, type));
      }
    }
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataType basicGetType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(DataType newType)
  {
    DataType oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.ST_SYMBOL__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDeclaration getSymbol()
  {
    if (symbol != null && symbol.eIsProxy())
    {
      InternalEObject oldSymbol = (InternalEObject)symbol;
      symbol = (VarDeclaration)eResolveProxy(oldSymbol);
      if (symbol != oldSymbol)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, STCorePackage.ST_SYMBOL__SYMBOL, oldSymbol, symbol));
      }
    }
    return symbol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarDeclaration basicGetSymbol()
  {
    return symbol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSymbol(VarDeclaration newSymbol)
  {
    VarDeclaration oldSymbol = symbol;
    symbol = newSymbol;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.ST_SYMBOL__SYMBOL, oldSymbol, symbol));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultibitPartialAccess getBitaccessor()
  {
    return bitaccessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBitaccessor(MultibitPartialAccess newBitaccessor, NotificationChain msgs)
  {
    MultibitPartialAccess oldBitaccessor = bitaccessor;
    bitaccessor = newBitaccessor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, STCorePackage.ST_SYMBOL__BITACCESSOR, oldBitaccessor, newBitaccessor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBitaccessor(MultibitPartialAccess newBitaccessor)
  {
    if (newBitaccessor != bitaccessor)
    {
      NotificationChain msgs = null;
      if (bitaccessor != null)
        msgs = ((InternalEObject)bitaccessor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - STCorePackage.ST_SYMBOL__BITACCESSOR, null, msgs);
      if (newBitaccessor != null)
        msgs = ((InternalEObject)newBitaccessor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - STCorePackage.ST_SYMBOL__BITACCESSOR, null, msgs);
      msgs = basicSetBitaccessor(newBitaccessor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.ST_SYMBOL__BITACCESSOR, newBitaccessor, newBitaccessor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isPoeInvocation()
  {
    return poeInvocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPoeInvocation(boolean newPoeInvocation)
  {
    boolean oldPoeInvocation = poeInvocation;
    poeInvocation = newPoeInvocation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.ST_SYMBOL__POE_INVOCATION, oldPoeInvocation, poeInvocation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<STExpression> getParameters()
  {
    if (parameters == null)
    {
      parameters = new EObjectContainmentEList<STExpression>(STExpression.class, this, STCorePackage.ST_SYMBOL__PARAMETERS);
    }
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case STCorePackage.ST_SYMBOL__BITACCESSOR:
        return basicSetBitaccessor(null, msgs);
      case STCorePackage.ST_SYMBOL__PARAMETERS:
        return ((InternalEList<?>)getParameters()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case STCorePackage.ST_SYMBOL__TYPE:
        if (resolve) return getType();
        return basicGetType();
      case STCorePackage.ST_SYMBOL__SYMBOL:
        if (resolve) return getSymbol();
        return basicGetSymbol();
      case STCorePackage.ST_SYMBOL__BITACCESSOR:
        return getBitaccessor();
      case STCorePackage.ST_SYMBOL__POE_INVOCATION:
        return isPoeInvocation();
      case STCorePackage.ST_SYMBOL__PARAMETERS:
        return getParameters();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case STCorePackage.ST_SYMBOL__TYPE:
        setType((DataType)newValue);
        return;
      case STCorePackage.ST_SYMBOL__SYMBOL:
        setSymbol((VarDeclaration)newValue);
        return;
      case STCorePackage.ST_SYMBOL__BITACCESSOR:
        setBitaccessor((MultibitPartialAccess)newValue);
        return;
      case STCorePackage.ST_SYMBOL__POE_INVOCATION:
        setPoeInvocation((Boolean)newValue);
        return;
      case STCorePackage.ST_SYMBOL__PARAMETERS:
        getParameters().clear();
        getParameters().addAll((Collection<? extends STExpression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case STCorePackage.ST_SYMBOL__TYPE:
        setType((DataType)null);
        return;
      case STCorePackage.ST_SYMBOL__SYMBOL:
        setSymbol((VarDeclaration)null);
        return;
      case STCorePackage.ST_SYMBOL__BITACCESSOR:
        setBitaccessor((MultibitPartialAccess)null);
        return;
      case STCorePackage.ST_SYMBOL__POE_INVOCATION:
        setPoeInvocation(POE_INVOCATION_EDEFAULT);
        return;
      case STCorePackage.ST_SYMBOL__PARAMETERS:
        getParameters().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case STCorePackage.ST_SYMBOL__TYPE:
        return type != null;
      case STCorePackage.ST_SYMBOL__SYMBOL:
        return symbol != null;
      case STCorePackage.ST_SYMBOL__BITACCESSOR:
        return bitaccessor != null;
      case STCorePackage.ST_SYMBOL__POE_INVOCATION:
        return poeInvocation != POE_INVOCATION_EDEFAULT;
      case STCorePackage.ST_SYMBOL__PARAMETERS:
        return parameters != null && !parameters.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (poeInvocation: ");
    result.append(poeInvocation);
    result.append(')');
    return result.toString();
  }

} //STSymbolImpl
