/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.fordiac.ide.model.libraryElement.INamedElement;
import org.eclipse.fordiac.ide.model.libraryElement.LibraryElement;

import org.eclipse.fordiac.ide.structuredtextcore.sTCore.InitializerExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCorePackage;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.VarDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Var Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.VarDeclarationImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.VarDeclarationImpl#getComment <em>Comment</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.VarDeclarationImpl#getLocatedAt <em>Located At</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.VarDeclarationImpl#isArray <em>Array</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.VarDeclarationImpl#getRanges <em>Ranges</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.VarDeclarationImpl#getCount <em>Count</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.VarDeclarationImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.VarDeclarationImpl#getMaxLength <em>Max Length</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.VarDeclarationImpl#getDefaultValue <em>Default Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VarDeclarationImpl extends MinimalEObjectImpl.Container implements VarDeclaration
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = "";

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected static final String COMMENT_EDEFAULT = "";

  /**
   * The cached value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected String comment = COMMENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getLocatedAt() <em>Located At</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocatedAt()
   * @generated
   * @ordered
   */
  protected INamedElement locatedAt;

  /**
   * The default value of the '{@link #isArray() <em>Array</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isArray()
   * @generated
   * @ordered
   */
  protected static final boolean ARRAY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isArray() <em>Array</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isArray()
   * @generated
   * @ordered
   */
  protected boolean array = ARRAY_EDEFAULT;

  /**
   * The cached value of the '{@link #getRanges() <em>Ranges</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRanges()
   * @generated
   * @ordered
   */
  protected EList<STExpression> ranges;

  /**
   * The cached value of the '{@link #getCount() <em>Count</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCount()
   * @generated
   * @ordered
   */
  protected EList<String> count;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected LibraryElement type;

  /**
   * The cached value of the '{@link #getMaxLength() <em>Max Length</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxLength()
   * @generated
   * @ordered
   */
  protected STExpression maxLength;

  /**
   * The cached value of the '{@link #getDefaultValue() <em>Default Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultValue()
   * @generated
   * @ordered
   */
  protected InitializerExpression defaultValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VarDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return STCorePackage.Literals.VAR_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.VAR_DECLARATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getComment()
  {
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComment(String newComment)
  {
    String oldComment = comment;
    comment = newComment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.VAR_DECLARATION__COMMENT, oldComment, comment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public INamedElement getLocatedAt()
  {
    if (locatedAt != null && locatedAt.eIsProxy())
    {
      InternalEObject oldLocatedAt = (InternalEObject)locatedAt;
      locatedAt = (INamedElement)eResolveProxy(oldLocatedAt);
      if (locatedAt != oldLocatedAt)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, STCorePackage.VAR_DECLARATION__LOCATED_AT, oldLocatedAt, locatedAt));
      }
    }
    return locatedAt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public INamedElement basicGetLocatedAt()
  {
    return locatedAt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLocatedAt(INamedElement newLocatedAt)
  {
    INamedElement oldLocatedAt = locatedAt;
    locatedAt = newLocatedAt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.VAR_DECLARATION__LOCATED_AT, oldLocatedAt, locatedAt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isArray()
  {
    return array;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArray(boolean newArray)
  {
    boolean oldArray = array;
    array = newArray;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.VAR_DECLARATION__ARRAY, oldArray, array));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<STExpression> getRanges()
  {
    if (ranges == null)
    {
      ranges = new EObjectContainmentEList<STExpression>(STExpression.class, this, STCorePackage.VAR_DECLARATION__RANGES);
    }
    return ranges;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getCount()
  {
    if (count == null)
    {
      count = new EDataTypeEList<String>(String.class, this, STCorePackage.VAR_DECLARATION__COUNT);
    }
    return count;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LibraryElement getType()
  {
    if (type != null && type.eIsProxy())
    {
      InternalEObject oldType = (InternalEObject)type;
      type = (LibraryElement)eResolveProxy(oldType);
      if (type != oldType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, STCorePackage.VAR_DECLARATION__TYPE, oldType, type));
      }
    }
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LibraryElement basicGetType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(LibraryElement newType)
  {
    LibraryElement oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.VAR_DECLARATION__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STExpression getMaxLength()
  {
    return maxLength;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMaxLength(STExpression newMaxLength, NotificationChain msgs)
  {
    STExpression oldMaxLength = maxLength;
    maxLength = newMaxLength;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, STCorePackage.VAR_DECLARATION__MAX_LENGTH, oldMaxLength, newMaxLength);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMaxLength(STExpression newMaxLength)
  {
    if (newMaxLength != maxLength)
    {
      NotificationChain msgs = null;
      if (maxLength != null)
        msgs = ((InternalEObject)maxLength).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - STCorePackage.VAR_DECLARATION__MAX_LENGTH, null, msgs);
      if (newMaxLength != null)
        msgs = ((InternalEObject)newMaxLength).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - STCorePackage.VAR_DECLARATION__MAX_LENGTH, null, msgs);
      msgs = basicSetMaxLength(newMaxLength, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.VAR_DECLARATION__MAX_LENGTH, newMaxLength, newMaxLength));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitializerExpression getDefaultValue()
  {
    return defaultValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDefaultValue(InitializerExpression newDefaultValue, NotificationChain msgs)
  {
    InitializerExpression oldDefaultValue = defaultValue;
    defaultValue = newDefaultValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, STCorePackage.VAR_DECLARATION__DEFAULT_VALUE, oldDefaultValue, newDefaultValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultValue(InitializerExpression newDefaultValue)
  {
    if (newDefaultValue != defaultValue)
    {
      NotificationChain msgs = null;
      if (defaultValue != null)
        msgs = ((InternalEObject)defaultValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - STCorePackage.VAR_DECLARATION__DEFAULT_VALUE, null, msgs);
      if (newDefaultValue != null)
        msgs = ((InternalEObject)newDefaultValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - STCorePackage.VAR_DECLARATION__DEFAULT_VALUE, null, msgs);
      msgs = basicSetDefaultValue(newDefaultValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.VAR_DECLARATION__DEFAULT_VALUE, newDefaultValue, newDefaultValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case STCorePackage.VAR_DECLARATION__RANGES:
        return ((InternalEList<?>)getRanges()).basicRemove(otherEnd, msgs);
      case STCorePackage.VAR_DECLARATION__MAX_LENGTH:
        return basicSetMaxLength(null, msgs);
      case STCorePackage.VAR_DECLARATION__DEFAULT_VALUE:
        return basicSetDefaultValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case STCorePackage.VAR_DECLARATION__NAME:
        return getName();
      case STCorePackage.VAR_DECLARATION__COMMENT:
        return getComment();
      case STCorePackage.VAR_DECLARATION__LOCATED_AT:
        if (resolve) return getLocatedAt();
        return basicGetLocatedAt();
      case STCorePackage.VAR_DECLARATION__ARRAY:
        return isArray();
      case STCorePackage.VAR_DECLARATION__RANGES:
        return getRanges();
      case STCorePackage.VAR_DECLARATION__COUNT:
        return getCount();
      case STCorePackage.VAR_DECLARATION__TYPE:
        if (resolve) return getType();
        return basicGetType();
      case STCorePackage.VAR_DECLARATION__MAX_LENGTH:
        return getMaxLength();
      case STCorePackage.VAR_DECLARATION__DEFAULT_VALUE:
        return getDefaultValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case STCorePackage.VAR_DECLARATION__NAME:
        setName((String)newValue);
        return;
      case STCorePackage.VAR_DECLARATION__COMMENT:
        setComment((String)newValue);
        return;
      case STCorePackage.VAR_DECLARATION__LOCATED_AT:
        setLocatedAt((INamedElement)newValue);
        return;
      case STCorePackage.VAR_DECLARATION__ARRAY:
        setArray((Boolean)newValue);
        return;
      case STCorePackage.VAR_DECLARATION__RANGES:
        getRanges().clear();
        getRanges().addAll((Collection<? extends STExpression>)newValue);
        return;
      case STCorePackage.VAR_DECLARATION__COUNT:
        getCount().clear();
        getCount().addAll((Collection<? extends String>)newValue);
        return;
      case STCorePackage.VAR_DECLARATION__TYPE:
        setType((LibraryElement)newValue);
        return;
      case STCorePackage.VAR_DECLARATION__MAX_LENGTH:
        setMaxLength((STExpression)newValue);
        return;
      case STCorePackage.VAR_DECLARATION__DEFAULT_VALUE:
        setDefaultValue((InitializerExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case STCorePackage.VAR_DECLARATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case STCorePackage.VAR_DECLARATION__COMMENT:
        setComment(COMMENT_EDEFAULT);
        return;
      case STCorePackage.VAR_DECLARATION__LOCATED_AT:
        setLocatedAt((INamedElement)null);
        return;
      case STCorePackage.VAR_DECLARATION__ARRAY:
        setArray(ARRAY_EDEFAULT);
        return;
      case STCorePackage.VAR_DECLARATION__RANGES:
        getRanges().clear();
        return;
      case STCorePackage.VAR_DECLARATION__COUNT:
        getCount().clear();
        return;
      case STCorePackage.VAR_DECLARATION__TYPE:
        setType((LibraryElement)null);
        return;
      case STCorePackage.VAR_DECLARATION__MAX_LENGTH:
        setMaxLength((STExpression)null);
        return;
      case STCorePackage.VAR_DECLARATION__DEFAULT_VALUE:
        setDefaultValue((InitializerExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case STCorePackage.VAR_DECLARATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case STCorePackage.VAR_DECLARATION__COMMENT:
        return COMMENT_EDEFAULT == null ? comment != null : !COMMENT_EDEFAULT.equals(comment);
      case STCorePackage.VAR_DECLARATION__LOCATED_AT:
        return locatedAt != null;
      case STCorePackage.VAR_DECLARATION__ARRAY:
        return array != ARRAY_EDEFAULT;
      case STCorePackage.VAR_DECLARATION__RANGES:
        return ranges != null && !ranges.isEmpty();
      case STCorePackage.VAR_DECLARATION__COUNT:
        return count != null && !count.isEmpty();
      case STCorePackage.VAR_DECLARATION__TYPE:
        return type != null;
      case STCorePackage.VAR_DECLARATION__MAX_LENGTH:
        return maxLength != null;
      case STCorePackage.VAR_DECLARATION__DEFAULT_VALUE:
        return defaultValue != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", comment: ");
    result.append(comment);
    result.append(", array: ");
    result.append(array);
    result.append(", count: ");
    result.append(count);
    result.append(')');
    return result.toString();
  }

} //VarDeclarationImpl
