/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl;

import java.math.BigDecimal;
import java.math.BigInteger;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.fordiac.ide.structuredtextcore.sTCore.NUMERIC_LITERAL;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCorePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>NUMERIC LITERAL</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.NUMERIC_LITERALImpl#getNot <em>Not</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.NUMERIC_LITERALImpl#getKeyword <em>Keyword</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.NUMERIC_LITERALImpl#getIntValue <em>Int Value</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.NUMERIC_LITERALImpl#getRealValue <em>Real Value</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.NUMERIC_LITERALImpl#getHexValue <em>Hex Value</em>}</li>
 *   <li>{@link org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl.NUMERIC_LITERALImpl#isKeyWordValue <em>Key Word Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NUMERIC_LITERALImpl extends MinimalEObjectImpl.Container implements NUMERIC_LITERAL
{
  /**
   * The default value of the '{@link #getNot() <em>Not</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNot()
   * @generated
   * @ordered
   */
  protected static final String NOT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNot() <em>Not</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNot()
   * @generated
   * @ordered
   */
  protected String not = NOT_EDEFAULT;

  /**
   * The default value of the '{@link #getKeyword() <em>Keyword</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyword()
   * @generated
   * @ordered
   */
  protected static final String KEYWORD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getKeyword() <em>Keyword</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyword()
   * @generated
   * @ordered
   */
  protected String keyword = KEYWORD_EDEFAULT;

  /**
   * The default value of the '{@link #getIntValue() <em>Int Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIntValue()
   * @generated
   * @ordered
   */
  protected static final BigInteger INT_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIntValue() <em>Int Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIntValue()
   * @generated
   * @ordered
   */
  protected BigInteger intValue = INT_VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getRealValue() <em>Real Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRealValue()
   * @generated
   * @ordered
   */
  protected static final BigDecimal REAL_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRealValue() <em>Real Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRealValue()
   * @generated
   * @ordered
   */
  protected BigDecimal realValue = REAL_VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getHexValue() <em>Hex Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHexValue()
   * @generated
   * @ordered
   */
  protected static final BigInteger HEX_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHexValue() <em>Hex Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHexValue()
   * @generated
   * @ordered
   */
  protected BigInteger hexValue = HEX_VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #isKeyWordValue() <em>Key Word Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isKeyWordValue()
   * @generated
   * @ordered
   */
  protected static final boolean KEY_WORD_VALUE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isKeyWordValue() <em>Key Word Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isKeyWordValue()
   * @generated
   * @ordered
   */
  protected boolean keyWordValue = KEY_WORD_VALUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NUMERIC_LITERALImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return STCorePackage.Literals.NUMERIC_LITERAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNot()
  {
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNot(String newNot)
  {
    String oldNot = not;
    not = newNot;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.NUMERIC_LITERAL__NOT, oldNot, not));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getKeyword()
  {
    return keyword;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setKeyword(String newKeyword)
  {
    String oldKeyword = keyword;
    keyword = newKeyword;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.NUMERIC_LITERAL__KEYWORD, oldKeyword, keyword));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigInteger getIntValue()
  {
    return intValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIntValue(BigInteger newIntValue)
  {
    BigInteger oldIntValue = intValue;
    intValue = newIntValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.NUMERIC_LITERAL__INT_VALUE, oldIntValue, intValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getRealValue()
  {
    return realValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRealValue(BigDecimal newRealValue)
  {
    BigDecimal oldRealValue = realValue;
    realValue = newRealValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.NUMERIC_LITERAL__REAL_VALUE, oldRealValue, realValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigInteger getHexValue()
  {
    return hexValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHexValue(BigInteger newHexValue)
  {
    BigInteger oldHexValue = hexValue;
    hexValue = newHexValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.NUMERIC_LITERAL__HEX_VALUE, oldHexValue, hexValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isKeyWordValue()
  {
    return keyWordValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setKeyWordValue(boolean newKeyWordValue)
  {
    boolean oldKeyWordValue = keyWordValue;
    keyWordValue = newKeyWordValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, STCorePackage.NUMERIC_LITERAL__KEY_WORD_VALUE, oldKeyWordValue, keyWordValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case STCorePackage.NUMERIC_LITERAL__NOT:
        return getNot();
      case STCorePackage.NUMERIC_LITERAL__KEYWORD:
        return getKeyword();
      case STCorePackage.NUMERIC_LITERAL__INT_VALUE:
        return getIntValue();
      case STCorePackage.NUMERIC_LITERAL__REAL_VALUE:
        return getRealValue();
      case STCorePackage.NUMERIC_LITERAL__HEX_VALUE:
        return getHexValue();
      case STCorePackage.NUMERIC_LITERAL__KEY_WORD_VALUE:
        return isKeyWordValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case STCorePackage.NUMERIC_LITERAL__NOT:
        setNot((String)newValue);
        return;
      case STCorePackage.NUMERIC_LITERAL__KEYWORD:
        setKeyword((String)newValue);
        return;
      case STCorePackage.NUMERIC_LITERAL__INT_VALUE:
        setIntValue((BigInteger)newValue);
        return;
      case STCorePackage.NUMERIC_LITERAL__REAL_VALUE:
        setRealValue((BigDecimal)newValue);
        return;
      case STCorePackage.NUMERIC_LITERAL__HEX_VALUE:
        setHexValue((BigInteger)newValue);
        return;
      case STCorePackage.NUMERIC_LITERAL__KEY_WORD_VALUE:
        setKeyWordValue((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case STCorePackage.NUMERIC_LITERAL__NOT:
        setNot(NOT_EDEFAULT);
        return;
      case STCorePackage.NUMERIC_LITERAL__KEYWORD:
        setKeyword(KEYWORD_EDEFAULT);
        return;
      case STCorePackage.NUMERIC_LITERAL__INT_VALUE:
        setIntValue(INT_VALUE_EDEFAULT);
        return;
      case STCorePackage.NUMERIC_LITERAL__REAL_VALUE:
        setRealValue(REAL_VALUE_EDEFAULT);
        return;
      case STCorePackage.NUMERIC_LITERAL__HEX_VALUE:
        setHexValue(HEX_VALUE_EDEFAULT);
        return;
      case STCorePackage.NUMERIC_LITERAL__KEY_WORD_VALUE:
        setKeyWordValue(KEY_WORD_VALUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case STCorePackage.NUMERIC_LITERAL__NOT:
        return NOT_EDEFAULT == null ? not != null : !NOT_EDEFAULT.equals(not);
      case STCorePackage.NUMERIC_LITERAL__KEYWORD:
        return KEYWORD_EDEFAULT == null ? keyword != null : !KEYWORD_EDEFAULT.equals(keyword);
      case STCorePackage.NUMERIC_LITERAL__INT_VALUE:
        return INT_VALUE_EDEFAULT == null ? intValue != null : !INT_VALUE_EDEFAULT.equals(intValue);
      case STCorePackage.NUMERIC_LITERAL__REAL_VALUE:
        return REAL_VALUE_EDEFAULT == null ? realValue != null : !REAL_VALUE_EDEFAULT.equals(realValue);
      case STCorePackage.NUMERIC_LITERAL__HEX_VALUE:
        return HEX_VALUE_EDEFAULT == null ? hexValue != null : !HEX_VALUE_EDEFAULT.equals(hexValue);
      case STCorePackage.NUMERIC_LITERAL__KEY_WORD_VALUE:
        return keyWordValue != KEY_WORD_VALUE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (not: ");
    result.append(not);
    result.append(", keyword: ");
    result.append(keyword);
    result.append(", intValue: ");
    result.append(intValue);
    result.append(", realValue: ");
    result.append(realValue);
    result.append(", hexValue: ");
    result.append(hexValue);
    result.append(", keyWordValue: ");
    result.append(keyWordValue);
    result.append(')');
    return result.toString();
  }

} //NUMERIC_LITERALImpl
