/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.eclipse.fordiac.ide.structuredtextcore.sTCore.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class STCoreFactoryImpl extends EFactoryImpl implements STCoreFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static STCoreFactory init()
  {
    try
    {
      STCoreFactory theSTCoreFactory = (STCoreFactory)EPackage.Registry.INSTANCE.getEFactory(STCorePackage.eNS_URI);
      if (theSTCoreFactory != null)
      {
        return theSTCoreFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new STCoreFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public STCoreFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case STCorePackage.CODE: return createCode();
      case STCorePackage.VAR_DECLARATION_BLOCK: return createVarDeclarationBlock();
      case STCorePackage.INITIALIZER_EXPRESSION: return createInitializerExpression();
      case STCorePackage.ARRAY_INITIALIZER_EXPRESSION: return createArrayInitializerExpression();
      case STCorePackage.ARRAY_INIT_ELEMENT: return createArrayInitElement();
      case STCorePackage.ST_STATEMENT: return createSTStatement();
      case STCorePackage.ST_ASSIGNMENT_STATEMENT: return createSTAssignmentStatement();
      case STCorePackage.ST_IF_STATEMENT: return createSTIfStatement();
      case STCorePackage.ST_ELSE_IF_PART: return createSTElseIfPart();
      case STCorePackage.ST_CASE_STATEMENT: return createSTCaseStatement();
      case STCorePackage.ST_CASE_CASES: return createSTCaseCases();
      case STCorePackage.ST_ELSE_PART: return createSTElsePart();
      case STCorePackage.ST_FOR_STATEMENT: return createSTForStatement();
      case STCorePackage.ST_WHILE_STATEMENT: return createSTWhileStatement();
      case STCorePackage.ST_REPEAT_STATEMENT: return createSTRepeatStatement();
      case STCorePackage.ST_EXPRESSION: return createSTExpression();
      case STCorePackage.ST_NUMERIC_LITERAL: return createSTNumericLiteral();
      case STCorePackage.ST_DATE_LITERAL: return createSTDateLiteral();
      case STCorePackage.ST_TIME_LITERAL: return createSTTimeLiteral();
      case STCorePackage.ST_TIME_OF_DAY_LITERAL: return createSTTimeOfDayLiteral();
      case STCorePackage.ST_DATE_AND_TIME_LITERAL: return createSTDateAndTimeLiteral();
      case STCorePackage.ST_STRING_LITERAL: return createSTStringLiteral();
      case STCorePackage.ST_VAR_DECLARATION: return createSTVarDeclaration();
      case STCorePackage.ST_RETURN: return createSTReturn();
      case STCorePackage.ST_CONTINUE: return createSTContinue();
      case STCorePackage.ST_EXIT: return createSTExit();
      case STCorePackage.ST_NOP: return createSTNop();
      case STCorePackage.ST_BINARY_EXPRESSION: return createSTBinaryExpression();
      case STCorePackage.ST_UNARY_EXPRESSION: return createSTUnaryExpression();
      case STCorePackage.ST_MEMBER_ACCESS_EXPRESSION: return createSTMemberAccessExpression();
      case STCorePackage.ST_ARRAY_ACCESS_EXPRESSION: return createSTArrayAccessExpression();
      case STCorePackage.ST_FEATURE_EXPRESSION: return createSTFeatureExpression();
      case STCorePackage.ST_MULTIBIT_PARTIAL_EXPRESSION: return createSTMultibitPartialExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case STCorePackage.BINARY_OPERATOR:
        return createBinaryOperatorFromString(eDataType, initialValue);
      case STCorePackage.UNARY_OPERATOR:
        return createUnaryOperatorFromString(eDataType, initialValue);
      case STCorePackage.ST_MULTI_BIT_ACCESS_SPECIFIER:
        return createSTMultiBitAccessSpecifierFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case STCorePackage.BINARY_OPERATOR:
        return convertBinaryOperatorToString(eDataType, instanceValue);
      case STCorePackage.UNARY_OPERATOR:
        return convertUnaryOperatorToString(eDataType, instanceValue);
      case STCorePackage.ST_MULTI_BIT_ACCESS_SPECIFIER:
        return convertSTMultiBitAccessSpecifierToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Code createCode()
  {
    CodeImpl code = new CodeImpl();
    return code;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDeclarationBlock createVarDeclarationBlock()
  {
    VarDeclarationBlockImpl varDeclarationBlock = new VarDeclarationBlockImpl();
    return varDeclarationBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitializerExpression createInitializerExpression()
  {
    InitializerExpressionImpl initializerExpression = new InitializerExpressionImpl();
    return initializerExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayInitializerExpression createArrayInitializerExpression()
  {
    ArrayInitializerExpressionImpl arrayInitializerExpression = new ArrayInitializerExpressionImpl();
    return arrayInitializerExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayInitElement createArrayInitElement()
  {
    ArrayInitElementImpl arrayInitElement = new ArrayInitElementImpl();
    return arrayInitElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STStatement createSTStatement()
  {
    STStatementImpl stStatement = new STStatementImpl();
    return stStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STAssignmentStatement createSTAssignmentStatement()
  {
    STAssignmentStatementImpl stAssignmentStatement = new STAssignmentStatementImpl();
    return stAssignmentStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STIfStatement createSTIfStatement()
  {
    STIfStatementImpl stIfStatement = new STIfStatementImpl();
    return stIfStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STElseIfPart createSTElseIfPart()
  {
    STElseIfPartImpl stElseIfPart = new STElseIfPartImpl();
    return stElseIfPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STCaseStatement createSTCaseStatement()
  {
    STCaseStatementImpl stCaseStatement = new STCaseStatementImpl();
    return stCaseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STCaseCases createSTCaseCases()
  {
    STCaseCasesImpl stCaseCases = new STCaseCasesImpl();
    return stCaseCases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STElsePart createSTElsePart()
  {
    STElsePartImpl stElsePart = new STElsePartImpl();
    return stElsePart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STForStatement createSTForStatement()
  {
    STForStatementImpl stForStatement = new STForStatementImpl();
    return stForStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STWhileStatement createSTWhileStatement()
  {
    STWhileStatementImpl stWhileStatement = new STWhileStatementImpl();
    return stWhileStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STRepeatStatement createSTRepeatStatement()
  {
    STRepeatStatementImpl stRepeatStatement = new STRepeatStatementImpl();
    return stRepeatStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STExpression createSTExpression()
  {
    STExpressionImpl stExpression = new STExpressionImpl();
    return stExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STNumericLiteral createSTNumericLiteral()
  {
    STNumericLiteralImpl stNumericLiteral = new STNumericLiteralImpl();
    return stNumericLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STDateLiteral createSTDateLiteral()
  {
    STDateLiteralImpl stDateLiteral = new STDateLiteralImpl();
    return stDateLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STTimeLiteral createSTTimeLiteral()
  {
    STTimeLiteralImpl stTimeLiteral = new STTimeLiteralImpl();
    return stTimeLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STTimeOfDayLiteral createSTTimeOfDayLiteral()
  {
    STTimeOfDayLiteralImpl stTimeOfDayLiteral = new STTimeOfDayLiteralImpl();
    return stTimeOfDayLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STDateAndTimeLiteral createSTDateAndTimeLiteral()
  {
    STDateAndTimeLiteralImpl stDateAndTimeLiteral = new STDateAndTimeLiteralImpl();
    return stDateAndTimeLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STStringLiteral createSTStringLiteral()
  {
    STStringLiteralImpl stStringLiteral = new STStringLiteralImpl();
    return stStringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STVarDeclaration createSTVarDeclaration()
  {
    STVarDeclarationImpl stVarDeclaration = new STVarDeclarationImpl();
    return stVarDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STReturn createSTReturn()
  {
    STReturnImpl stReturn = new STReturnImpl();
    return stReturn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STContinue createSTContinue()
  {
    STContinueImpl stContinue = new STContinueImpl();
    return stContinue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STExit createSTExit()
  {
    STExitImpl stExit = new STExitImpl();
    return stExit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STNop createSTNop()
  {
    STNopImpl stNop = new STNopImpl();
    return stNop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STBinaryExpression createSTBinaryExpression()
  {
    STBinaryExpressionImpl stBinaryExpression = new STBinaryExpressionImpl();
    return stBinaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STUnaryExpression createSTUnaryExpression()
  {
    STUnaryExpressionImpl stUnaryExpression = new STUnaryExpressionImpl();
    return stUnaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STMemberAccessExpression createSTMemberAccessExpression()
  {
    STMemberAccessExpressionImpl stMemberAccessExpression = new STMemberAccessExpressionImpl();
    return stMemberAccessExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STArrayAccessExpression createSTArrayAccessExpression()
  {
    STArrayAccessExpressionImpl stArrayAccessExpression = new STArrayAccessExpressionImpl();
    return stArrayAccessExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STFeatureExpression createSTFeatureExpression()
  {
    STFeatureExpressionImpl stFeatureExpression = new STFeatureExpressionImpl();
    return stFeatureExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STMultibitPartialExpression createSTMultibitPartialExpression()
  {
    STMultibitPartialExpressionImpl stMultibitPartialExpression = new STMultibitPartialExpressionImpl();
    return stMultibitPartialExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryOperator createBinaryOperatorFromString(EDataType eDataType, String initialValue)
  {
    BinaryOperator result = BinaryOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBinaryOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryOperator createUnaryOperatorFromString(EDataType eDataType, String initialValue)
  {
    UnaryOperator result = UnaryOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertUnaryOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public STMultiBitAccessSpecifier createSTMultiBitAccessSpecifierFromString(EDataType eDataType, String initialValue)
  {
    STMultiBitAccessSpecifier result = STMultiBitAccessSpecifier.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSTMultiBitAccessSpecifierToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STCorePackage getSTCorePackage()
  {
    return (STCorePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static STCorePackage getPackage()
  {
    return STCorePackage.eINSTANCE;
  }

} //STCoreFactoryImpl
