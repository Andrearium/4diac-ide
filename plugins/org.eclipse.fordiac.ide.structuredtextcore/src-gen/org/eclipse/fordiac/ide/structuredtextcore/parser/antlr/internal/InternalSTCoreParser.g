/*
 * generated by Xtext 2.25.0
 */
parser grammar InternalSTCoreParser;

options {
	tokenVocab=InternalSTCoreLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.eclipse.fordiac.ide.structuredtextcore.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.fordiac.ide.structuredtextcore.services.STCoreGrammarAccess;

}

@members {

 	private STCoreGrammarAccess grammarAccess;

    public InternalSTCoreParser(TokenStream input, STCoreGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Code";
   	}

   	@Override
   	protected STCoreGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCode
entryRuleCode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCodeRule()); }
	iv_ruleCode=ruleCode
	{ $current=$iv_ruleCode.current; }
	EOF;

// Rule Code
ruleCode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getCodeAccess().getStatementsSTStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleSTStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getCodeRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current; }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVarDeclarationAccess().getVarDeclarationAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.ID");
				}
			)
		)
		(
			otherlv_2=AT
			{
				newLeafNode(otherlv_2, grammarAccess.getVarDeclarationAccess().getATKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarDeclarationRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getVarDeclarationAccess().getLocatedAtINamedElementCrossReference_2_1_0());
					}
				)
			)
		)?
		otherlv_4=Colon
		{
			newLeafNode(otherlv_4, grammarAccess.getVarDeclarationAccess().getColonKeyword_3());
		}
		(
			(
				(
					lv_array_5_0=ARRAY
					{
						newLeafNode(lv_array_5_0, grammarAccess.getVarDeclarationAccess().getArrayARRAYKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarDeclarationRule());
						}
						setWithLastConsumed($current, "array", lv_array_5_0 != null, "ARRAY");
					}
				)
			)
			(
				(
					otherlv_6=LeftSquareBracket
					{
						newLeafNode(otherlv_6, grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_4_1_0_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVarDeclarationAccess().getRangesSTExpressionParserRuleCall_4_1_0_1_0());
							}
							lv_ranges_7_0=ruleSTExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
								}
								add(
									$current,
									"ranges",
									lv_ranges_7_0,
									"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_8=Comma
						{
							newLeafNode(otherlv_8, grammarAccess.getVarDeclarationAccess().getCommaKeyword_4_1_0_2_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getVarDeclarationAccess().getRangesSTExpressionParserRuleCall_4_1_0_2_1_0());
								}
								lv_ranges_9_0=ruleSTExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
									}
									add(
										$current,
										"ranges",
										lv_ranges_9_0,
										"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
					otherlv_10=RightSquareBracket
					{
						newLeafNode(otherlv_10, grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_4_1_0_3());
					}
				)
				    |
				(
					otherlv_11=LeftSquareBracket
					{
						newLeafNode(otherlv_11, grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_4_1_1_0());
					}
					(
						(
							lv_count_12_0=Asterisk
							{
								newLeafNode(lv_count_12_0, grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVarDeclarationRule());
								}
								addWithLastConsumed($current, "count", lv_count_12_0, "*");
							}
						)
					)
					(
						otherlv_13=Comma
						{
							newLeafNode(otherlv_13, grammarAccess.getVarDeclarationAccess().getCommaKeyword_4_1_1_2_0());
						}
						(
							(
								lv_count_14_0=Asterisk
								{
									newLeafNode(lv_count_14_0, grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_2_1_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getVarDeclarationRule());
									}
									addWithLastConsumed($current, "count", lv_count_14_0, "*");
								}
							)
						)
					)*
					otherlv_15=RightSquareBracket
					{
						newLeafNode(otherlv_15, grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_4_1_1_3());
					}
				)
			)
			otherlv_16=OF
			{
				newLeafNode(otherlv_16, grammarAccess.getVarDeclarationAccess().getOFKeyword_4_2());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarDeclarationRule());
					}
				}
				otherlv_17=RULE_ID
				{
					newLeafNode(otherlv_17, grammarAccess.getVarDeclarationAccess().getTypeLibraryElementCrossReference_5_0());
				}
			)
		)
		(
			otherlv_18=LeftSquareBracket
			{
				newLeafNode(otherlv_18, grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclarationAccess().getMaxLengthSTExpressionParserRuleCall_6_1_0());
					}
					lv_maxLength_19_0=ruleSTExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
						}
						set(
							$current,
							"maxLength",
							lv_maxLength_19_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_20=RightSquareBracket
			{
				newLeafNode(otherlv_20, grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_6_2());
			}
		)?
		(
			otherlv_21=ColonEqualsSign
			{
				newLeafNode(otherlv_21, grammarAccess.getVarDeclarationAccess().getColonEqualsSignKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclarationAccess().getDefaultValueInitializerExpressionParserRuleCall_7_1_0());
					}
					lv_defaultValue_22_0=ruleInitializerExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
						}
						set(
							$current,
							"defaultValue",
							lv_defaultValue_22_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.InitializerExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_23=Semicolon
		{
			newLeafNode(otherlv_23, grammarAccess.getVarDeclarationAccess().getSemicolonKeyword_8());
		}
	)
;

// Entry rule entryRuleInitializerExpression
entryRuleInitializerExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitializerExpressionRule()); }
	iv_ruleInitializerExpression=ruleInitializerExpression
	{ $current=$iv_ruleInitializerExpression.current; }
	EOF;

// Rule InitializerExpression
ruleInitializerExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInitializerExpressionAccess().getSTExpressionParserRuleCall_0());
		}
		this_STExpression_0=ruleSTExpression
		{
			$current = $this_STExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInitializerExpressionAccess().getArrayInitializerExpressionParserRuleCall_1());
		}
		this_ArrayInitializerExpression_1=ruleArrayInitializerExpression
		{
			$current = $this_ArrayInitializerExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArrayInitializerExpression
entryRuleArrayInitializerExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayInitializerExpressionRule()); }
	iv_ruleArrayInitializerExpression=ruleArrayInitializerExpression
	{ $current=$iv_ruleArrayInitializerExpression.current; }
	EOF;

// Rule ArrayInitializerExpression
ruleArrayInitializerExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LeftSquareBracket
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayInitializerExpressionAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayInitializerExpressionAccess().getValuesArrayInitElementParserRuleCall_1_0());
				}
				lv_values_1_0=ruleArrayInitElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayInitializerExpressionRule());
					}
					add(
						$current,
						"values",
						lv_values_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.ArrayInitElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=Comma
			{
				newLeafNode(otherlv_2, grammarAccess.getArrayInitializerExpressionAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayInitializerExpressionAccess().getValuesArrayInitElementParserRuleCall_2_1_0());
					}
					lv_values_3_0=ruleArrayInitElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayInitializerExpressionRule());
						}
						add(
							$current,
							"values",
							lv_values_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.ArrayInitElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=RightSquareBracket
		{
			newLeafNode(otherlv_4, grammarAccess.getArrayInitializerExpressionAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleArrayInitElement
entryRuleArrayInitElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayInitElementRule()); }
	iv_ruleArrayInitElement=ruleArrayInitElement
	{ $current=$iv_ruleArrayInitElement.current; }
	EOF;

// Rule ArrayInitElement
ruleArrayInitElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayInitElementAccess().getIndexOrInitExpressionSTExpressionParserRuleCall_0_0());
				}
				lv_indexOrInitExpression_0_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayInitElementRule());
					}
					set(
						$current,
						"indexOrInitExpression",
						lv_indexOrInitExpression_0_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=LeftParenthesis
			{
				newLeafNode(otherlv_1, grammarAccess.getArrayInitElementAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayInitElementAccess().getInitExpressionSTExpressionParserRuleCall_1_1_0());
					}
					lv_initExpression_2_0=ruleSTExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayInitElementRule());
						}
						set(
							$current,
							"initExpression",
							lv_initExpression_2_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=RightParenthesis
			{
				newLeafNode(otherlv_3, grammarAccess.getArrayInitElementAccess().getRightParenthesisKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleSTStatement
entryRuleSTStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTStatementRule()); }
	iv_ruleSTStatement=ruleSTStatement
	{ $current=$iv_ruleSTStatement.current; }
	EOF;

// Rule STStatement
ruleSTStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSTStatementAccess().getSTIfStatmentParserRuleCall_0_0_0());
				}
				this_STIfStatment_0=ruleSTIfStatment
				{
					$current = $this_STIfStatment_0.current;
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSTStatementAccess().getSTCaseStatementParserRuleCall_0_0_1());
				}
				this_STCaseStatement_1=ruleSTCaseStatement
				{
					$current = $this_STCaseStatement_1.current;
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSTStatementAccess().getSTForStatementParserRuleCall_0_0_2());
				}
				this_STForStatement_2=ruleSTForStatement
				{
					$current = $this_STForStatement_2.current;
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSTStatementAccess().getSTWhileStatementParserRuleCall_0_0_3());
				}
				this_STWhileStatement_3=ruleSTWhileStatement
				{
					$current = $this_STWhileStatement_3.current;
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSTStatementAccess().getSTRepeatStatementParserRuleCall_0_0_4());
				}
				this_STRepeatStatement_4=ruleSTRepeatStatement
				{
					$current = $this_STRepeatStatement_4.current;
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getSTStatementAccess().getSTAssignmentStatementParserRuleCall_0_0_5());
				}
				this_STAssignmentStatement_5=ruleSTAssignmentStatement
				{
					$current = $this_STAssignmentStatement_5.current;
					afterParserOrEnumRuleCall();
				}
				    |
				(
					(
						{
							$current = forceCreateModelElement(
								grammarAccess.getSTStatementAccess().getSTReturnAction_0_0_6_0(),
								$current);
						}
					)
					otherlv_7=RETURN
					{
						newLeafNode(otherlv_7, grammarAccess.getSTStatementAccess().getRETURNKeyword_0_0_6_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElement(
								grammarAccess.getSTStatementAccess().getSTContinueAction_0_0_7_0(),
								$current);
						}
					)
					otherlv_9=CONTINUE
					{
						newLeafNode(otherlv_9, grammarAccess.getSTStatementAccess().getCONTINUEKeyword_0_0_7_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElement(
								grammarAccess.getSTStatementAccess().getSTExitAction_0_0_8_0(),
								$current);
						}
					)
					otherlv_11=EXIT
					{
						newLeafNode(otherlv_11, grammarAccess.getSTStatementAccess().getEXITKeyword_0_0_8_1());
					}
				)
			)
			otherlv_12=Semicolon
			{
				newLeafNode(otherlv_12, grammarAccess.getSTStatementAccess().getSemicolonKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTStatementAccess().getSTNopAction_1_0(),
						$current);
				}
			)
			otherlv_14=Semicolon
			{
				newLeafNode(otherlv_14, grammarAccess.getSTStatementAccess().getSemicolonKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleSTAssignmentStatement
entryRuleSTAssignmentStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTAssignmentStatementRule()); }
	iv_ruleSTAssignmentStatement=ruleSTAssignmentStatement
	{ $current=$iv_ruleSTAssignmentStatement.current; }
	EOF;

// Rule STAssignmentStatement
ruleSTAssignmentStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSTAssignmentStatementAccess().getLeftSTAccessExpressionParserRuleCall_0_0());
				}
				lv_left_0_0=ruleSTAccessExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTAssignmentStatementRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STAccessExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=ColonEqualsSign
		{
			newLeafNode(otherlv_1, grammarAccess.getSTAssignmentStatementAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTAssignmentStatementAccess().getRightSTExpressionParserRuleCall_2_0());
				}
				lv_right_2_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTAssignmentStatementRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSTIfStatment
entryRuleSTIfStatment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTIfStatmentRule()); }
	iv_ruleSTIfStatment=ruleSTIfStatment
	{ $current=$iv_ruleSTIfStatment.current; }
	EOF;

// Rule STIfStatment
ruleSTIfStatment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=IF
		{
			newLeafNode(otherlv_0, grammarAccess.getSTIfStatmentAccess().getIFKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTIfStatmentAccess().getConditionSTExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTIfStatmentRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=THEN
		{
			newLeafNode(otherlv_2, grammarAccess.getSTIfStatmentAccess().getTHENKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTIfStatmentAccess().getStatementsSTStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTIfStatmentRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSTIfStatmentAccess().getElseifsSTElseIfPartParserRuleCall_4_0());
				}
				lv_elseifs_4_0=ruleSTElseIfPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTIfStatmentRule());
					}
					add(
						$current,
						"elseifs",
						lv_elseifs_4_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STElseIfPart");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSTIfStatmentAccess().getElseSTElsePartParserRuleCall_5_0());
				}
				lv_else_5_0=ruleSTElsePart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTIfStatmentRule());
					}
					set(
						$current,
						"else",
						lv_else_5_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STElsePart");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_6=END_IF
		{
			newLeafNode(otherlv_6, grammarAccess.getSTIfStatmentAccess().getEND_IFKeyword_6());
		}
	)
;

// Entry rule entryRuleSTElseIfPart
entryRuleSTElseIfPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTElseIfPartRule()); }
	iv_ruleSTElseIfPart=ruleSTElseIfPart
	{ $current=$iv_ruleSTElseIfPart.current; }
	EOF;

// Rule STElseIfPart
ruleSTElseIfPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=ELSIF
		{
			newLeafNode(otherlv_0, grammarAccess.getSTElseIfPartAccess().getELSIFKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTElseIfPartAccess().getConditionSTExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTElseIfPartRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=THEN
		{
			newLeafNode(otherlv_2, grammarAccess.getSTElseIfPartAccess().getTHENKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTElseIfPartAccess().getStatementsSTStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTElseIfPartRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSTCaseStatement
entryRuleSTCaseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTCaseStatementRule()); }
	iv_ruleSTCaseStatement=ruleSTCaseStatement
	{ $current=$iv_ruleSTCaseStatement.current; }
	EOF;

// Rule STCaseStatement
ruleSTCaseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=CASE
		{
			newLeafNode(otherlv_0, grammarAccess.getSTCaseStatementAccess().getCASEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTCaseStatementAccess().getSelectorSTExpressionParserRuleCall_1_0());
				}
				lv_selector_1_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTCaseStatementRule());
					}
					set(
						$current,
						"selector",
						lv_selector_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=OF
		{
			newLeafNode(otherlv_2, grammarAccess.getSTCaseStatementAccess().getOFKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTCaseStatementAccess().getCasesSTCaseCasesParserRuleCall_3_0());
				}
				lv_cases_3_0=ruleSTCaseCases
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTCaseStatementRule());
					}
					add(
						$current,
						"cases",
						lv_cases_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STCaseCases");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getSTCaseStatementAccess().getElseSTElsePartParserRuleCall_4_0());
				}
				lv_else_4_0=ruleSTElsePart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTCaseStatementRule());
					}
					set(
						$current,
						"else",
						lv_else_4_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STElsePart");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=END_CASE
		{
			newLeafNode(otherlv_5, grammarAccess.getSTCaseStatementAccess().getEND_CASEKeyword_5());
		}
	)
;

// Entry rule entryRuleSTCaseCases
entryRuleSTCaseCases returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTCaseCasesRule()); }
	iv_ruleSTCaseCases=ruleSTCaseCases
	{ $current=$iv_ruleSTCaseCases.current; }
	EOF;

// Rule STCaseCases
ruleSTCaseCases returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_0_0());
				}
				lv_conditions_0_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTCaseCasesRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_0_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=Comma
			{
				newLeafNode(otherlv_1, grammarAccess.getSTCaseCasesAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_1_1_0());
					}
					lv_conditions_2_0=ruleSTExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTCaseCasesRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_2_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_3=Colon
		{
			newLeafNode(otherlv_3, grammarAccess.getSTCaseCasesAccess().getColonKeyword_2());
		}
		(
			((
				ruleSTStatement
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getSTCaseCasesAccess().getStatementsSTStatementParserRuleCall_3_0());
				}
				lv_statements_4_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTCaseCasesRule());
					}
					add(
						$current,
						"statements",
						lv_statements_4_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSTElsePart
entryRuleSTElsePart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTElsePartRule()); }
	iv_ruleSTElsePart=ruleSTElsePart
	{ $current=$iv_ruleSTElsePart.current; }
	EOF;

// Rule STElsePart
ruleSTElsePart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSTElsePartAccess().getSTElsePartAction_0(),
					$current);
			}
		)
		otherlv_1=ELSE
		{
			newLeafNode(otherlv_1, grammarAccess.getSTElsePartAccess().getELSEKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTElsePartAccess().getStatementsSTStatementParserRuleCall_2_0());
				}
				lv_statements_2_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTElsePartRule());
					}
					add(
						$current,
						"statements",
						lv_statements_2_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSTForStatement
entryRuleSTForStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTForStatementRule()); }
	iv_ruleSTForStatement=ruleSTForStatement
	{ $current=$iv_ruleSTForStatement.current; }
	EOF;

// Rule STForStatement
ruleSTForStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=FOR
		{
			newLeafNode(otherlv_0, grammarAccess.getSTForStatementAccess().getFORKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTForStatementAccess().getForSTExpressionParserRuleCall_1_0());
				}
				lv_for_1_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTForStatementRule());
					}
					set(
						$current,
						"for",
						lv_for_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=TO
		{
			newLeafNode(otherlv_2, grammarAccess.getSTForStatementAccess().getTOKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTForStatementAccess().getToSTExpressionParserRuleCall_3_0());
				}
				lv_to_3_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTForStatementRule());
					}
					set(
						$current,
						"to",
						lv_to_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=BY
			{
				newLeafNode(otherlv_4, grammarAccess.getSTForStatementAccess().getBYKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSTForStatementAccess().getBySTExpressionParserRuleCall_4_1_0());
					}
					lv_by_5_0=ruleSTExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTForStatementRule());
						}
						set(
							$current,
							"by",
							lv_by_5_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6=DO
		{
			newLeafNode(otherlv_6, grammarAccess.getSTForStatementAccess().getDOKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTForStatementAccess().getStatementsSTStatementParserRuleCall_6_0());
				}
				lv_statements_7_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTForStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_7_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8=END_FOR
		{
			newLeafNode(otherlv_8, grammarAccess.getSTForStatementAccess().getEND_FORKeyword_7());
		}
	)
;

// Entry rule entryRuleSTWhileStatement
entryRuleSTWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTWhileStatementRule()); }
	iv_ruleSTWhileStatement=ruleSTWhileStatement
	{ $current=$iv_ruleSTWhileStatement.current; }
	EOF;

// Rule STWhileStatement
ruleSTWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=WHILE
		{
			newLeafNode(otherlv_0, grammarAccess.getSTWhileStatementAccess().getWHILEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTWhileStatementAccess().getConditionSTExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTWhileStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=DO
		{
			newLeafNode(otherlv_2, grammarAccess.getSTWhileStatementAccess().getDOKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTWhileStatementAccess().getStatementsSTStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTWhileStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=END_WHILE
		{
			newLeafNode(otherlv_4, grammarAccess.getSTWhileStatementAccess().getEND_WHILEKeyword_4());
		}
	)
;

// Entry rule entryRuleSTRepeatStatement
entryRuleSTRepeatStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTRepeatStatementRule()); }
	iv_ruleSTRepeatStatement=ruleSTRepeatStatement
	{ $current=$iv_ruleSTRepeatStatement.current; }
	EOF;

// Rule STRepeatStatement
ruleSTRepeatStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=REPEAT
		{
			newLeafNode(otherlv_0, grammarAccess.getSTRepeatStatementAccess().getREPEATKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTRepeatStatementAccess().getStatementsSTStatementParserRuleCall_1_0());
				}
				lv_statements_1_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTRepeatStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2=UNTIL
		{
			newLeafNode(otherlv_2, grammarAccess.getSTRepeatStatementAccess().getUNTILKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTRepeatStatementAccess().getConditionSTExpressionParserRuleCall_3_0());
				}
				lv_condition_3_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTRepeatStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=END_REPEAT
		{
			newLeafNode(otherlv_4, grammarAccess.getSTRepeatStatementAccess().getEND_REPEATKeyword_4());
		}
	)
;

// Entry rule entryRuleSTExpression
entryRuleSTExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTExpressionRule()); }
	iv_ruleSTExpression=ruleSTExpression
	{ $current=$iv_ruleSTExpression.current; }
	EOF;

// Rule STExpression
ruleSTExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getSTExpressionAccess().getSTSubrangeExpressionParserRuleCall());
	}
	this_STSubrangeExpression_0=ruleSTSubrangeExpression
	{
		$current = $this_STSubrangeExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSTSubrangeExpression
entryRuleSTSubrangeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTSubrangeExpressionRule()); }
	iv_ruleSTSubrangeExpression=ruleSTSubrangeExpression
	{ $current=$iv_ruleSTSubrangeExpression.current; }
	EOF;

// Rule STSubrangeExpression
ruleSTSubrangeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTSubrangeExpressionAccess().getSTOrExpressionParserRuleCall_0());
		}
		this_STOrExpression_0=ruleSTOrExpression
		{
			$current = $this_STOrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTSubrangeExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTSubrangeExpressionAccess().getOpSubrangeOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleSubrangeOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTSubrangeExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.SubrangeOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTSubrangeExpressionAccess().getRightSTOrExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTSubrangeExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTOrExpression
entryRuleSTOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTOrExpressionRule()); }
	iv_ruleSTOrExpression=ruleSTOrExpression
	{ $current=$iv_ruleSTOrExpression.current; }
	EOF;

// Rule STOrExpression
ruleSTOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTOrExpressionAccess().getSTXorExpressionParserRuleCall_0());
		}
		this_STXorExpression_0=ruleSTXorExpression
		{
			$current = $this_STXorExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTOrExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTOrExpressionAccess().getOpOrOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleOrOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTOrExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.OrOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTOrExpressionAccess().getRightSTXorExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTXorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STXorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTXorExpression
entryRuleSTXorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTXorExpressionRule()); }
	iv_ruleSTXorExpression=ruleSTXorExpression
	{ $current=$iv_ruleSTXorExpression.current; }
	EOF;

// Rule STXorExpression
ruleSTXorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTXorExpressionAccess().getSTAndExpressionParserRuleCall_0());
		}
		this_STAndExpression_0=ruleSTAndExpression
		{
			$current = $this_STAndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTXorExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTXorExpressionAccess().getOpXorOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleXorOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTXorExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.XorOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTXorExpressionAccess().getRightSTAndExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTXorExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STAndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTAndExpression
entryRuleSTAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTAndExpressionRule()); }
	iv_ruleSTAndExpression=ruleSTAndExpression
	{ $current=$iv_ruleSTAndExpression.current; }
	EOF;

// Rule STAndExpression
ruleSTAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTAndExpressionAccess().getSTEqualityExpressionParserRuleCall_0());
		}
		this_STEqualityExpression_0=ruleSTEqualityExpression
		{
			$current = $this_STEqualityExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTAndExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTAndExpressionAccess().getOpAndOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleAndOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTAndExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.AndOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTAndExpressionAccess().getRightSTEqualityExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTEqualityExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STEqualityExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTEqualityExpression
entryRuleSTEqualityExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTEqualityExpressionRule()); }
	iv_ruleSTEqualityExpression=ruleSTEqualityExpression
	{ $current=$iv_ruleSTEqualityExpression.current; }
	EOF;

// Rule STEqualityExpression
ruleSTEqualityExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTEqualityExpressionAccess().getSTComparisonExpressionParserRuleCall_0());
		}
		this_STComparisonExpression_0=ruleSTComparisonExpression
		{
			$current = $this_STComparisonExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTEqualityExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleEqualityOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTEqualityExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.EqualityOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTEqualityExpressionAccess().getRightSTComparisonExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTComparisonExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTEqualityExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STComparisonExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTComparisonExpression
entryRuleSTComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTComparisonExpressionRule()); }
	iv_ruleSTComparisonExpression=ruleSTComparisonExpression
	{ $current=$iv_ruleSTComparisonExpression.current; }
	EOF;

// Rule STComparisonExpression
ruleSTComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTComparisonExpressionAccess().getSTAddSubExpressionParserRuleCall_0());
		}
		this_STAddSubExpression_0=ruleSTAddSubExpression
		{
			$current = $this_STAddSubExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTComparisonExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTComparisonExpressionAccess().getOpCompareOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleCompareOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTComparisonExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.CompareOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTComparisonExpressionAccess().getRightSTAddSubExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTAddSubExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTComparisonExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STAddSubExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTAddSubExpression
entryRuleSTAddSubExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTAddSubExpressionRule()); }
	iv_ruleSTAddSubExpression=ruleSTAddSubExpression
	{ $current=$iv_ruleSTAddSubExpression.current; }
	EOF;

// Rule STAddSubExpression
ruleSTAddSubExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTAddSubExpressionAccess().getSTMulDivModExpressionParserRuleCall_0());
		}
		this_STMulDivModExpression_0=ruleSTMulDivModExpression
		{
			$current = $this_STMulDivModExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTAddSubExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTAddSubExpressionAccess().getOpAddSubOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleAddSubOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTAddSubExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.AddSubOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTAddSubExpressionAccess().getRightSTMulDivModExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTMulDivModExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTAddSubExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STMulDivModExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTMulDivModExpression
entryRuleSTMulDivModExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTMulDivModExpressionRule()); }
	iv_ruleSTMulDivModExpression=ruleSTMulDivModExpression
	{ $current=$iv_ruleSTMulDivModExpression.current; }
	EOF;

// Rule STMulDivModExpression
ruleSTMulDivModExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTMulDivModExpressionAccess().getSTPowerExpressionParserRuleCall_0());
		}
		this_STPowerExpression_0=ruleSTPowerExpression
		{
			$current = $this_STPowerExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTMulDivModExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTMulDivModExpressionAccess().getOpMulDivModOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleMulDivModOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTMulDivModExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.MulDivModOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTMulDivModExpressionAccess().getRightSTPowerExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTPowerExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTMulDivModExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STPowerExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTPowerExpression
entryRuleSTPowerExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTPowerExpressionRule()); }
	iv_ruleSTPowerExpression=ruleSTPowerExpression
	{ $current=$iv_ruleSTPowerExpression.current; }
	EOF;

// Rule STPowerExpression
ruleSTPowerExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTPowerExpressionAccess().getSTUnaryExpressionParserRuleCall_0());
		}
		this_STUnaryExpression_0=ruleSTUnaryExpression
		{
			$current = $this_STUnaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTPowerExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTPowerExpressionAccess().getOpPowerOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=rulePowerOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTPowerExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.PowerOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTPowerExpressionAccess().getRightSTUnaryExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTUnaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTPowerExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STUnaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTUnaryExpression
entryRuleSTUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTUnaryExpressionRule()); }
	iv_ruleSTUnaryExpression=ruleSTUnaryExpression
	{ $current=$iv_ruleSTUnaryExpression.current; }
	EOF;

// Rule STUnaryExpression
ruleSTUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleSTAccessExpression)=>
			{
				newCompositeNode(grammarAccess.getSTUnaryExpressionAccess().getSTAccessExpressionParserRuleCall_0());
			}
			this_STAccessExpression_0=ruleSTAccessExpression
			{
				$current = $this_STAccessExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTUnaryExpressionAccess().getSTUnaryExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleUnaryOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTUnaryExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.UnaryOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTUnaryExpressionAccess().getExpressionSTUnaryExpressionParserRuleCall_1_2_0());
					}
					lv_expression_3_0=ruleSTUnaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTUnaryExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STUnaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSTAccessExpression
entryRuleSTAccessExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTAccessExpressionRule()); }
	iv_ruleSTAccessExpression=ruleSTAccessExpression
	{ $current=$iv_ruleSTAccessExpression.current; }
	EOF;

// Rule STAccessExpression
ruleSTAccessExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTAccessExpressionAccess().getSTPrimaryExpressionParserRuleCall_0());
		}
		this_STPrimaryExpression_0=ruleSTPrimaryExpression
		{
			$current = $this_STPrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTAccessExpressionAccess().getSTMemberAccessExpressionReceiverAction_1_0_0(),
							$current);
					}
				)
				otherlv_2=FullStop
				{
					newLeafNode(otherlv_2, grammarAccess.getSTAccessExpressionAccess().getFullStopKeyword_1_0_1());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getSTAccessExpressionAccess().getMemberSTFeatureExpressionParserRuleCall_1_0_2_0_0());
							}
							lv_member_3_1=ruleSTFeatureExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSTAccessExpressionRule());
								}
								set(
									$current,
									"member",
									lv_member_3_1,
									"org.eclipse.fordiac.ide.structuredtextcore.STCore.STFeatureExpression");
								afterParserOrEnumRuleCall();
							}
							    |
							{
								newCompositeNode(grammarAccess.getSTAccessExpressionAccess().getMemberSTMultibitPartialExpressionParserRuleCall_1_0_2_0_1());
							}
							lv_member_3_2=ruleSTMultibitPartialExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSTAccessExpressionRule());
								}
								set(
									$current,
									"member",
									lv_member_3_2,
									"org.eclipse.fordiac.ide.structuredtextcore.STCore.STMultibitPartialExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTAccessExpressionAccess().getSTArrayAccessExpressionReceiverAction_1_1_0(),
							$current);
					}
				)
				otherlv_5=LeftSquareBracket
				{
					newLeafNode(otherlv_5, grammarAccess.getSTAccessExpressionAccess().getLeftSquareBracketKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSTAccessExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_2_0());
						}
						lv_index_6_0=ruleSTExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTAccessExpressionRule());
							}
							add(
								$current,
								"index",
								lv_index_6_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_7=Comma
					{
						newLeafNode(otherlv_7, grammarAccess.getSTAccessExpressionAccess().getCommaKeyword_1_1_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getSTAccessExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_3_1_0());
							}
							lv_index_8_0=ruleSTExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSTAccessExpressionRule());
								}
								add(
									$current,
									"index",
									lv_index_8_0,
									"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_9=RightSquareBracket
				{
					newLeafNode(otherlv_9, grammarAccess.getSTAccessExpressionAccess().getRightSquareBracketKeyword_1_1_4());
				}
			)
		)*
	)
;

// Entry rule entryRuleSTPrimaryExpression
entryRuleSTPrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTPrimaryExpressionRule()); }
	iv_ruleSTPrimaryExpression=ruleSTPrimaryExpression
	{ $current=$iv_ruleSTPrimaryExpression.current; }
	EOF;

// Rule STPrimaryExpression
ruleSTPrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=LeftParenthesis
			{
				newLeafNode(otherlv_0, grammarAccess.getSTPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getSTPrimaryExpressionAccess().getSTExpressionParserRuleCall_0_1());
			}
			this_STExpression_1=ruleSTExpression
			{
				$current = $this_STExpression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=RightParenthesis
			{
				newLeafNode(otherlv_2, grammarAccess.getSTPrimaryExpressionAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getSTPrimaryExpressionAccess().getSTFeatureExpressionParserRuleCall_1());
		}
		this_STFeatureExpression_3=ruleSTFeatureExpression
		{
			$current = $this_STFeatureExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTPrimaryExpressionAccess().getSTLiteralExpressionsParserRuleCall_2());
		}
		this_STLiteralExpressions_4=ruleSTLiteralExpressions
		{
			$current = $this_STLiteralExpressions_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSTFeatureExpression
entryRuleSTFeatureExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTFeatureExpressionRule()); }
	iv_ruleSTFeatureExpression=ruleSTFeatureExpression
	{ $current=$iv_ruleSTFeatureExpression.current; }
	EOF;

// Rule STFeatureExpression
ruleSTFeatureExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSTFeatureExpressionAccess().getSTFeatureExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSTFeatureExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSTFeatureExpressionAccess().getFeatureINamedElementCrossReference_1_0());
				}
			)
		)
		(
			(
				(LeftParenthesis)=>
				otherlv_2=LeftParenthesis
				{
					newLeafNode(otherlv_2, grammarAccess.getSTFeatureExpressionAccess().getLeftParenthesisKeyword_2_0());
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSTFeatureExpressionAccess().getParametersSTExpressionParserRuleCall_2_1_0_0());
						}
						lv_parameters_3_0=ruleSTExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTFeatureExpressionRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_3_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=Comma
					{
						newLeafNode(otherlv_4, grammarAccess.getSTFeatureExpressionAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getSTFeatureExpressionAccess().getParametersSTExpressionParserRuleCall_2_1_1_1_0());
							}
							lv_parameters_5_0=ruleSTExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSTFeatureExpressionRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_5_0,
									"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_6=RightParenthesis
			{
				newLeafNode(otherlv_6, grammarAccess.getSTFeatureExpressionAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleSTMultibitPartialExpression
entryRuleSTMultibitPartialExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTMultibitPartialExpressionRule()); }
	iv_ruleSTMultibitPartialExpression=ruleSTMultibitPartialExpression
	{ $current=$iv_ruleSTMultibitPartialExpression.current; }
	EOF;

// Rule STMultibitPartialExpression
ruleSTMultibitPartialExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSTMultibitPartialExpressionAccess().getSTMultibitPartialExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSTMultibitPartialExpressionAccess().getSpecifierSTMultiBitAccessSpecifierEnumRuleCall_1_0());
				}
				lv_specifier_1_0=ruleSTMultiBitAccessSpecifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTMultibitPartialExpressionRule());
					}
					set(
						$current,
						"specifier",
						lv_specifier_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STMultiBitAccessSpecifier");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_index_2_0=RULE_INT
				{
					newLeafNode(lv_index_2_0, grammarAccess.getSTMultibitPartialExpressionAccess().getIndexINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSTMultibitPartialExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"index",
						lv_index_2_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleSTLiteralExpressions
entryRuleSTLiteralExpressions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTLiteralExpressionsRule()); }
	iv_ruleSTLiteralExpressions=ruleSTLiteralExpressions
	{ $current=$iv_ruleSTLiteralExpressions.current; }
	EOF;

// Rule STLiteralExpressions
ruleSTLiteralExpressions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTLiteralExpressionsAccess().getSTNumericLiteralParserRuleCall_0());
		}
		this_STNumericLiteral_0=ruleSTNumericLiteral
		{
			$current = $this_STNumericLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTLiteralExpressionsAccess().getSTDateLiteralParserRuleCall_1());
		}
		this_STDateLiteral_1=ruleSTDateLiteral
		{
			$current = $this_STDateLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeLiteralParserRuleCall_2());
		}
		this_STTimeLiteral_2=ruleSTTimeLiteral
		{
			$current = $this_STTimeLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeOfDayLiteralParserRuleCall_3());
		}
		this_STTimeOfDayLiteral_3=ruleSTTimeOfDayLiteral
		{
			$current = $this_STTimeOfDayLiteral_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTLiteralExpressionsAccess().getSTDateAndTimeLiteralParserRuleCall_4());
		}
		this_STDateAndTimeLiteral_4=ruleSTDateAndTimeLiteral
		{
			$current = $this_STDateAndTimeLiteral_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTLiteralExpressionsAccess().getSTStringLiteralParserRuleCall_5());
		}
		this_STStringLiteral_5=ruleSTStringLiteral
		{
			$current = $this_STStringLiteral_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSTNumericLiteralType
entryRuleSTNumericLiteralType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTNumericLiteralTypeRule()); }
	iv_ruleSTNumericLiteralType=ruleSTNumericLiteralType
	{ $current=$iv_ruleSTNumericLiteralType.current; }
	EOF;

// Rule STNumericLiteralType
ruleSTNumericLiteralType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=BOOL
		{
			newLeafNode(otherlv_0, grammarAccess.getSTNumericLiteralTypeAccess().getBOOLKeyword_0());
		}
		    |
		otherlv_1=BYTE
		{
			newLeafNode(otherlv_1, grammarAccess.getSTNumericLiteralTypeAccess().getBYTEKeyword_1());
		}
		    |
		otherlv_2=WORD
		{
			newLeafNode(otherlv_2, grammarAccess.getSTNumericLiteralTypeAccess().getWORDKeyword_2());
		}
		    |
		otherlv_3=DWORD
		{
			newLeafNode(otherlv_3, grammarAccess.getSTNumericLiteralTypeAccess().getDWORDKeyword_3());
		}
		    |
		otherlv_4=LWORD
		{
			newLeafNode(otherlv_4, grammarAccess.getSTNumericLiteralTypeAccess().getLWORDKeyword_4());
		}
		    |
		otherlv_5=SINT
		{
			newLeafNode(otherlv_5, grammarAccess.getSTNumericLiteralTypeAccess().getSINTKeyword_5());
		}
		    |
		otherlv_6=INT
		{
			newLeafNode(otherlv_6, grammarAccess.getSTNumericLiteralTypeAccess().getINTKeyword_6());
		}
		    |
		otherlv_7=DINT
		{
			newLeafNode(otherlv_7, grammarAccess.getSTNumericLiteralTypeAccess().getDINTKeyword_7());
		}
		    |
		otherlv_8=LINT
		{
			newLeafNode(otherlv_8, grammarAccess.getSTNumericLiteralTypeAccess().getLINTKeyword_8());
		}
		    |
		otherlv_9=USINT
		{
			newLeafNode(otherlv_9, grammarAccess.getSTNumericLiteralTypeAccess().getUSINTKeyword_9());
		}
		    |
		otherlv_10=UINT
		{
			newLeafNode(otherlv_10, grammarAccess.getSTNumericLiteralTypeAccess().getUINTKeyword_10());
		}
		    |
		otherlv_11=UDINT
		{
			newLeafNode(otherlv_11, grammarAccess.getSTNumericLiteralTypeAccess().getUDINTKeyword_11());
		}
		    |
		otherlv_12=ULINT
		{
			newLeafNode(otherlv_12, grammarAccess.getSTNumericLiteralTypeAccess().getULINTKeyword_12());
		}
		    |
		otherlv_13=REAL
		{
			newLeafNode(otherlv_13, grammarAccess.getSTNumericLiteralTypeAccess().getREALKeyword_13());
		}
		    |
		otherlv_14=LREAL
		{
			newLeafNode(otherlv_14, grammarAccess.getSTNumericLiteralTypeAccess().getLREALKeyword_14());
		}
	)
;

// Entry rule entryRuleSTNumericLiteral
entryRuleSTNumericLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTNumericLiteralRule()); }
	iv_ruleSTNumericLiteral=ruleSTNumericLiteral
	{ $current=$iv_ruleSTNumericLiteral.current; }
	EOF;

// Rule STNumericLiteral
ruleSTNumericLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSTNumericLiteralAccess().getTypeSTNumericLiteralTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleSTNumericLiteralType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTNumericLiteralRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STNumericLiteralType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSTNumericLiteralAccess().getValueBoolLiteralParserRuleCall_1_0_0());
					}
					lv_value_1_1=ruleBoolLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTNumericLiteralRule());
						}
						set(
							$current,
							"value",
							lv_value_1_1,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.BoolLiteral");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSTNumericLiteralAccess().getValueNumberParserRuleCall_1_0_1());
					}
					lv_value_1_2=ruleNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTNumericLiteralRule());
						}
						set(
							$current,
							"value",
							lv_value_1_2,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.Number");
						afterParserOrEnumRuleCall();
					}
					    |
					lv_value_1_3=RULE_NON_DECIMAL
					{
						newLeafNode(lv_value_1_3, grammarAccess.getSTNumericLiteralAccess().getValueNON_DECIMALTerminalRuleCall_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSTNumericLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_3,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.NON_DECIMAL");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSTDateLiteralType
entryRuleSTDateLiteralType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTDateLiteralTypeRule()); }
	iv_ruleSTDateLiteralType=ruleSTDateLiteralType
	{ $current=$iv_ruleSTDateLiteralType.current; }
	EOF;

// Rule STDateLiteralType
ruleSTDateLiteralType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=DATE
		{
			newLeafNode(otherlv_0, grammarAccess.getSTDateLiteralTypeAccess().getDATEKeyword_0());
		}
		    |
		otherlv_1=LDATE
		{
			newLeafNode(otherlv_1, grammarAccess.getSTDateLiteralTypeAccess().getLDATEKeyword_1());
		}
		    |
		otherlv_2=D_2
		{
			newLeafNode(otherlv_2, grammarAccess.getSTDateLiteralTypeAccess().getDKeyword_2());
		}
		    |
		otherlv_3=LD
		{
			newLeafNode(otherlv_3, grammarAccess.getSTDateLiteralTypeAccess().getLDKeyword_3());
		}
	)
;

// Entry rule entryRuleSTDateLiteral
entryRuleSTDateLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTDateLiteralRule()); }
	iv_ruleSTDateLiteral=ruleSTDateLiteral
	{ $current=$iv_ruleSTDateLiteral.current; }
	EOF;

// Rule STDateLiteral
ruleSTDateLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSTDateLiteralAccess().getTypeSTDateLiteralTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleSTDateLiteralType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTDateLiteralRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STDateLiteralType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSTDateLiteralAccess().getValueDateParserRuleCall_1_0());
				}
				lv_value_1_0=ruleDate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTDateLiteralRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.Date");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSTTimeLiteralType
entryRuleSTTimeLiteralType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTTimeLiteralTypeRule()); }
	iv_ruleSTTimeLiteralType=ruleSTTimeLiteralType
	{ $current=$iv_ruleSTTimeLiteralType.current; }
	EOF;

// Rule STTimeLiteralType
ruleSTTimeLiteralType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=TIME
		{
			newLeafNode(otherlv_0, grammarAccess.getSTTimeLiteralTypeAccess().getTIMEKeyword_0());
		}
		    |
		otherlv_1=LTIME
		{
			newLeafNode(otherlv_1, grammarAccess.getSTTimeLiteralTypeAccess().getLTIMEKeyword_1());
		}
		    |
		otherlv_2=T
		{
			newLeafNode(otherlv_2, grammarAccess.getSTTimeLiteralTypeAccess().getTKeyword_2());
		}
		    |
		otherlv_3=LT
		{
			newLeafNode(otherlv_3, grammarAccess.getSTTimeLiteralTypeAccess().getLTKeyword_3());
		}
	)
;

// Entry rule entryRuleSTTimeLiteral
entryRuleSTTimeLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTTimeLiteralRule()); }
	iv_ruleSTTimeLiteral=ruleSTTimeLiteral
	{ $current=$iv_ruleSTTimeLiteral.current; }
	EOF;

// Rule STTimeLiteral
ruleSTTimeLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSTTimeLiteralAccess().getTypeSTTimeLiteralTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleSTTimeLiteralType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTTimeLiteralRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STTimeLiteralType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSTTimeLiteralAccess().getValueTimeParserRuleCall_1_0());
				}
				lv_value_1_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTTimeLiteralRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSTTimeOfDayLiteralType
entryRuleSTTimeOfDayLiteralType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTTimeOfDayLiteralTypeRule()); }
	iv_ruleSTTimeOfDayLiteralType=ruleSTTimeOfDayLiteralType
	{ $current=$iv_ruleSTTimeOfDayLiteralType.current; }
	EOF;

// Rule STTimeOfDayLiteralType
ruleSTTimeOfDayLiteralType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=TIME_OF_DAY
		{
			newLeafNode(otherlv_0, grammarAccess.getSTTimeOfDayLiteralTypeAccess().getTIME_OF_DAYKeyword_0());
		}
		    |
		otherlv_1=TOD
		{
			newLeafNode(otherlv_1, grammarAccess.getSTTimeOfDayLiteralTypeAccess().getTODKeyword_1());
		}
		    |
		otherlv_2=LTOD
		{
			newLeafNode(otherlv_2, grammarAccess.getSTTimeOfDayLiteralTypeAccess().getLTODKeyword_2());
		}
	)
;

// Entry rule entryRuleSTTimeOfDayLiteral
entryRuleSTTimeOfDayLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTTimeOfDayLiteralRule()); }
	iv_ruleSTTimeOfDayLiteral=ruleSTTimeOfDayLiteral
	{ $current=$iv_ruleSTTimeOfDayLiteral.current; }
	EOF;

// Rule STTimeOfDayLiteral
ruleSTTimeOfDayLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSTTimeOfDayLiteralAccess().getTypeSTTimeOfDayLiteralTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleSTTimeOfDayLiteralType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTTimeOfDayLiteralRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STTimeOfDayLiteralType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSTTimeOfDayLiteralAccess().getValueTimeOfDayParserRuleCall_1_0());
				}
				lv_value_1_0=ruleTimeOfDay
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTTimeOfDayLiteralRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.TimeOfDay");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSTDateAndTimeLiteralType
entryRuleSTDateAndTimeLiteralType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTDateAndTimeLiteralTypeRule()); }
	iv_ruleSTDateAndTimeLiteralType=ruleSTDateAndTimeLiteralType
	{ $current=$iv_ruleSTDateAndTimeLiteralType.current; }
	EOF;

// Rule STDateAndTimeLiteralType
ruleSTDateAndTimeLiteralType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=DATE_AND_TIME
		{
			newLeafNode(otherlv_0, grammarAccess.getSTDateAndTimeLiteralTypeAccess().getDATE_AND_TIMEKeyword_0());
		}
		    |
		otherlv_1=LDATE_AND_TIME
		{
			newLeafNode(otherlv_1, grammarAccess.getSTDateAndTimeLiteralTypeAccess().getLDATE_AND_TIMEKeyword_1());
		}
		    |
		otherlv_2=DT
		{
			newLeafNode(otherlv_2, grammarAccess.getSTDateAndTimeLiteralTypeAccess().getDTKeyword_2());
		}
		    |
		otherlv_3=LDT
		{
			newLeafNode(otherlv_3, grammarAccess.getSTDateAndTimeLiteralTypeAccess().getLDTKeyword_3());
		}
	)
;

// Entry rule entryRuleSTDateAndTimeLiteral
entryRuleSTDateAndTimeLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTDateAndTimeLiteralRule()); }
	iv_ruleSTDateAndTimeLiteral=ruleSTDateAndTimeLiteral
	{ $current=$iv_ruleSTDateAndTimeLiteral.current; }
	EOF;

// Rule STDateAndTimeLiteral
ruleSTDateAndTimeLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSTDateAndTimeLiteralAccess().getTypeSTDateAndTimeLiteralTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleSTDateAndTimeLiteralType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTDateAndTimeLiteralRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STDateAndTimeLiteralType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSTDateAndTimeLiteralAccess().getDateValueDateParserRuleCall_1_0());
				}
				lv_dateValue_1_0=ruleDate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTDateAndTimeLiteralRule());
					}
					set(
						$current,
						"dateValue",
						lv_dateValue_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.Date");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=HyphenMinus
		{
			newLeafNode(otherlv_2, grammarAccess.getSTDateAndTimeLiteralAccess().getHyphenMinusKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTDateAndTimeLiteralAccess().getTimeOfDayValueTimeOfDayParserRuleCall_3_0());
				}
				lv_timeOfDayValue_3_0=ruleTimeOfDay
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTDateAndTimeLiteralRule());
					}
					set(
						$current,
						"timeOfDayValue",
						lv_timeOfDayValue_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.TimeOfDay");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSTStringLiteralType
entryRuleSTStringLiteralType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTStringLiteralTypeRule()); }
	iv_ruleSTStringLiteralType=ruleSTStringLiteralType
	{ $current=$iv_ruleSTStringLiteralType.current; }
	EOF;

// Rule STStringLiteralType
ruleSTStringLiteralType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=STRING
		{
			newLeafNode(otherlv_0, grammarAccess.getSTStringLiteralTypeAccess().getSTRINGKeyword_0());
		}
		    |
		otherlv_1=WSTRING
		{
			newLeafNode(otherlv_1, grammarAccess.getSTStringLiteralTypeAccess().getWSTRINGKeyword_1());
		}
		    |
		otherlv_2=CHAR
		{
			newLeafNode(otherlv_2, grammarAccess.getSTStringLiteralTypeAccess().getCHARKeyword_2());
		}
		    |
		otherlv_3=WCHAR
		{
			newLeafNode(otherlv_3, grammarAccess.getSTStringLiteralTypeAccess().getWCHARKeyword_3());
		}
	)
;

// Entry rule entryRuleSTStringLiteral
entryRuleSTStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTStringLiteralRule()); }
	iv_ruleSTStringLiteral=ruleSTStringLiteral
	{ $current=$iv_ruleSTStringLiteral.current; }
	EOF;

// Rule STStringLiteral
ruleSTStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSTStringLiteralAccess().getTypeSTStringLiteralTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleSTStringLiteralType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTStringLiteralRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStringLiteralType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					lv_value_1_1=RULE_STRING
					{
						newLeafNode(lv_value_1_1, grammarAccess.getSTStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSTStringLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_1,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STRING");
					}
					    |
					lv_value_1_2=RULE_WSTRING
					{
						newLeafNode(lv_value_1_2, grammarAccess.getSTStringLiteralAccess().getValueWSTRINGTerminalRuleCall_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSTStringLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_2,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.WSTRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBoolLiteralRule()); }
	iv_ruleBoolLiteral=ruleBoolLiteral
	{ $current=$iv_ruleBoolLiteral.current.getText(); }
	EOF;

// Rule BoolLiteral
ruleBoolLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=TRUE
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolLiteralAccess().getTRUEKeyword_0());
		}
		    |
		kw=FALSE
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolLiteralAccess().getFALSEKeyword_1());
		}
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current.getText(); }
	EOF;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=PlusSign
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNumberAccess().getPlusSignKeyword_0_0());
			}
			    |
			kw=HyphenMinus
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNumberAccess().getHyphenMinusKeyword_0_1());
			}
		)?
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1());
		}
		(
			(
				(FullStop)=>
				kw=FullStop
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_2_0());
				}
			)
			(
				this_EXT_INT_4=RULE_EXT_INT
				{
					$current.merge(this_EXT_INT_4);
				}
				{
					newLeafNode(this_EXT_INT_4, grammarAccess.getNumberAccess().getEXT_INTTerminalRuleCall_2_1_0());
				}
				    |
				this_INT_5=RULE_INT
				{
					$current.merge(this_INT_5);
				}
				{
					newLeafNode(this_INT_5, grammarAccess.getNumberAccess().getINTTerminalRuleCall_2_1_1());
				}
			)
		)?
	)
;

// Entry rule entryRuleDate
entryRuleDate returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDateRule()); }
	iv_ruleDate=ruleDate
	{ $current=$iv_ruleDate.current.getText(); }
	EOF;

// Rule Date
ruleDate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getDateAccess().getINTTerminalRuleCall_0());
		}
		kw=HyphenMinus
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDateAccess().getHyphenMinusKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getDateAccess().getINTTerminalRuleCall_2());
		}
		kw=HyphenMinus
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDateAccess().getHyphenMinusKeyword_3());
		}
		this_INT_4=RULE_INT
		{
			$current.merge(this_INT_4);
		}
		{
			newLeafNode(this_INT_4, grammarAccess.getDateAccess().getINTTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleTimeOfDay
entryRuleTimeOfDay returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTimeOfDayRule()); }
	iv_ruleTimeOfDay=ruleTimeOfDay
	{ $current=$iv_ruleTimeOfDay.current.getText(); }
	EOF;

// Rule TimeOfDay
ruleTimeOfDay returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_0());
		}
		kw=Colon
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeOfDayAccess().getColonKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_2());
		}
		kw=Colon
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeOfDayAccess().getColonKeyword_3());
		}
		this_INT_4=RULE_INT
		{
			$current.merge(this_INT_4);
		}
		{
			newLeafNode(this_INT_4, grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_4());
		}
		(
			(
				(FullStop)=>
				kw=FullStop
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getTimeOfDayAccess().getFullStopKeyword_5_0());
				}
			)
			this_INT_6=RULE_INT
			{
				$current.merge(this_INT_6);
			}
			{
				newLeafNode(this_INT_6, grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_5_1());
			}
		)?
	)
;

// Entry rule entryRuleTime
entryRuleTime returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current.getText(); }
	EOF;

// Rule Time
ruleTime returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTimeAccess().getNumberParserRuleCall_0());
		}
		this_Number_0=ruleNumber
		{
			$current.merge(this_Number_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=D
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTimeAccess().getDKeyword_1_0());
			}
			    |
			kw=H
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTimeAccess().getHKeyword_1_1());
			}
			    |
			kw=M
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTimeAccess().getMKeyword_1_2());
			}
			    |
			kw=S
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTimeAccess().getSKeyword_1_3());
			}
			    |
			kw=MS
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTimeAccess().getMSKeyword_1_4());
			}
			    |
			kw=US
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTimeAccess().getUSKeyword_1_5());
			}
			    |
			kw=NS
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTimeAccess().getNSKeyword_1_6());
			}
		)
		(
			kw=KW__
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTimeAccess().get_Keyword_2());
			}
		)?
	)+
;

// Rule SubrangeOperator
ruleSubrangeOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=FullStopFullStop
		{
			$current = grammarAccess.getSubrangeOperatorAccess().getRangeEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getSubrangeOperatorAccess().getRangeEnumLiteralDeclaration());
		}
	)
;

// Rule OrOperator
ruleOrOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=OR
		{
			$current = grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration());
		}
	)
;

// Rule XorOperator
ruleXorOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=XOR
		{
			$current = grammarAccess.getXorOperatorAccess().getXOREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getXorOperatorAccess().getXOREnumLiteralDeclaration());
		}
	)
;

// Rule AndOperator
ruleAndOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=AND
			{
				$current = grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Ampersand
			{
				$current = grammarAccess.getAndOperatorAccess().getAMPERSANDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAndOperatorAccess().getAMPERSANDEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule EqualityOperator
ruleEqualityOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=EqualsSign
			{
				$current = grammarAccess.getEqualityOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEqualityOperatorAccess().getEQEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=LessThanSignGreaterThanSign
			{
				$current = grammarAccess.getEqualityOperatorAccess().getNEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEqualityOperatorAccess().getNEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=LessThanSign
			{
				$current = grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=LessThanSignEqualsSign
			{
				$current = grammarAccess.getCompareOperatorAccess().getLEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompareOperatorAccess().getLEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=GreaterThanSign
			{
				$current = grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=GreaterThanSignEqualsSign
			{
				$current = grammarAccess.getCompareOperatorAccess().getGEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCompareOperatorAccess().getGEEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule AddSubOperator
ruleAddSubOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=PlusSign
			{
				$current = grammarAccess.getAddSubOperatorAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAddSubOperatorAccess().getADDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=HyphenMinus
			{
				$current = grammarAccess.getAddSubOperatorAccess().getSUBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAddSubOperatorAccess().getSUBEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MulDivModOperator
ruleMulDivModOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Asterisk
			{
				$current = grammarAccess.getMulDivModOperatorAccess().getMULEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMulDivModOperatorAccess().getMULEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Solidus
			{
				$current = grammarAccess.getMulDivModOperatorAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMulDivModOperatorAccess().getDIVEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=MOD
			{
				$current = grammarAccess.getMulDivModOperatorAccess().getMODEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMulDivModOperatorAccess().getMODEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule PowerOperator
rulePowerOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=AsteriskAsterisk
		{
			$current = grammarAccess.getPowerOperatorAccess().getPOWEREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getPowerOperatorAccess().getPOWEREnumLiteralDeclaration());
		}
	)
;

// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=HyphenMinus
			{
				$current = grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=PlusSign
			{
				$current = grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=NOT
			{
				$current = grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule STMultiBitAccessSpecifier
ruleSTMultiBitAccessSpecifier returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=L
			{
				$current = grammarAccess.getSTMultiBitAccessSpecifierAccess().getLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSTMultiBitAccessSpecifierAccess().getLEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=D_1
			{
				$current = grammarAccess.getSTMultiBitAccessSpecifierAccess().getDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSTMultiBitAccessSpecifierAccess().getDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=W
			{
				$current = grammarAccess.getSTMultiBitAccessSpecifierAccess().getWEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSTMultiBitAccessSpecifierAccess().getWEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=B
			{
				$current = grammarAccess.getSTMultiBitAccessSpecifierAccess().getBEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getSTMultiBitAccessSpecifierAccess().getBEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4=X
			{
				$current = grammarAccess.getSTMultiBitAccessSpecifierAccess().getXEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getSTMultiBitAccessSpecifierAccess().getXEnumLiteralDeclaration_4());
			}
		)
	)
;
