/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.fordiac.ide.structuredtextcore.sTCore.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.eclipse.fordiac.ide.model.Palette.PalettePackage;

import org.eclipse.fordiac.ide.model.data.DataPackage;

import org.eclipse.fordiac.ide.model.libraryElement.LibraryElementPackage;

import org.eclipse.fordiac.ide.structuredtextcore.sTCore.ArrayInitElement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.ArrayInitializerExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.BinaryOperator;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.Code;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.InitializerExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.MultiBitAccessSpecifier;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.MultibitPartialAccess;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STAssignmentStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STBinaryExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCaseCases;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCaseStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STContinue;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCoreFactory;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCorePackage;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STDateAndTimeLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STDateLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STElseIfPart;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STElsePart;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STExit;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STForStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STIfStatment;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STMemberSelection;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STNop;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STNumericLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STRepeatStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STReturn;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STStringLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STSymbol;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STTimeLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STTimeOfDayLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STUnaryExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STWhileStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.UnaryOperator;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.VarDeclaration;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.VarDeclarationBlock;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class STCorePackageImpl extends EPackageImpl implements STCorePackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass codeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass varDeclarationBlockEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass varDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass initializerExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arrayInitializerExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arrayInitElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stAssignmentStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stIfStatmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stElseIfPartEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stCaseStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stCaseCasesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stElsePartEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stForStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stWhileStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stRepeatStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass multibitPartialAccessEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stNumericLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stDateLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stTimeLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stTimeOfDayLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stDateAndTimeLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stStringLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stReturnEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stContinueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stExitEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stNopEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stBinaryExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stUnaryExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stMemberSelectionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stSymbolEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum binaryOperatorEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum unaryOperatorEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum multiBitAccessSpecifierEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCorePackage#eNS_URI
   * @see #init()
   * @generated
   */
  private STCorePackageImpl()
  {
    super(eNS_URI, STCoreFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link STCorePackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static STCorePackage init()
  {
    if (isInited) return (STCorePackage)EPackage.Registry.INSTANCE.getEPackage(STCorePackage.eNS_URI);

    // Obtain or create and register package
    Object registeredSTCorePackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    STCorePackageImpl theSTCorePackage = registeredSTCorePackage instanceof STCorePackageImpl ? (STCorePackageImpl)registeredSTCorePackage : new STCorePackageImpl();

    isInited = true;

    // Initialize simple dependencies
    DataPackage.eINSTANCE.eClass();
    LibraryElementPackage.eINSTANCE.eClass();
    PalettePackage.eINSTANCE.eClass();

    // Create package meta-data objects
    theSTCorePackage.createPackageContents();

    // Initialize created meta-data
    theSTCorePackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theSTCorePackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(STCorePackage.eNS_URI, theSTCorePackage);
    return theSTCorePackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCode()
  {
    return codeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCode_Statements()
  {
    return (EReference)codeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVarDeclarationBlock()
  {
    return varDeclarationBlockEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVarDeclarationBlock_Constant()
  {
    return (EAttribute)varDeclarationBlockEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarDeclarationBlock_VarDeclarations()
  {
    return (EReference)varDeclarationBlockEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVarDeclaration()
  {
    return varDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVarDeclaration_Name()
  {
    return (EAttribute)varDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarDeclaration_LocatedAt()
  {
    return (EReference)varDeclarationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVarDeclaration_Array()
  {
    return (EAttribute)varDeclarationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarDeclaration_Ranges()
  {
    return (EReference)varDeclarationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVarDeclaration_Count()
  {
    return (EAttribute)varDeclarationEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarDeclaration_Type()
  {
    return (EReference)varDeclarationEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarDeclaration_MaxLength()
  {
    return (EReference)varDeclarationEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarDeclaration_DefaultValue()
  {
    return (EReference)varDeclarationEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInitializerExpression()
  {
    return initializerExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getArrayInitializerExpression()
  {
    return arrayInitializerExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getArrayInitializerExpression_Values()
  {
    return (EReference)arrayInitializerExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getArrayInitElement()
  {
    return arrayInitElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getArrayInitElement_IndexOrInitExpression()
  {
    return (EReference)arrayInitElementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getArrayInitElement_InitExpression()
  {
    return (EReference)arrayInitElementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTStatement()
  {
    return stStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTAssignmentStatement()
  {
    return stAssignmentStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTAssignmentStatement_Lhs()
  {
    return (EReference)stAssignmentStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTAssignmentStatement_Rhs()
  {
    return (EReference)stAssignmentStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTIfStatment()
  {
    return stIfStatmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTIfStatment_Condition()
  {
    return (EReference)stIfStatmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTIfStatment_Statements()
  {
    return (EReference)stIfStatmentEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTIfStatment_Elseifs()
  {
    return (EReference)stIfStatmentEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTIfStatment_Else()
  {
    return (EReference)stIfStatmentEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTElseIfPart()
  {
    return stElseIfPartEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTElseIfPart_Condition()
  {
    return (EReference)stElseIfPartEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTElseIfPart_Statements()
  {
    return (EReference)stElseIfPartEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTCaseStatement()
  {
    return stCaseStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTCaseStatement_Selector()
  {
    return (EReference)stCaseStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTCaseStatement_Cases()
  {
    return (EReference)stCaseStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTCaseStatement_Else()
  {
    return (EReference)stCaseStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTCaseCases()
  {
    return stCaseCasesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTCaseCases_Conditions()
  {
    return (EReference)stCaseCasesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTCaseCases_Statements()
  {
    return (EReference)stCaseCasesEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTElsePart()
  {
    return stElsePartEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTElsePart_Statements()
  {
    return (EReference)stElsePartEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTForStatement()
  {
    return stForStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTForStatement_For()
  {
    return (EReference)stForStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTForStatement_To()
  {
    return (EReference)stForStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTForStatement_By()
  {
    return (EReference)stForStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTForStatement_Statements()
  {
    return (EReference)stForStatementEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTWhileStatement()
  {
    return stWhileStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTWhileStatement_Condition()
  {
    return (EReference)stWhileStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTWhileStatement_Statements()
  {
    return (EReference)stWhileStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTRepeatStatement()
  {
    return stRepeatStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTRepeatStatement_Statements()
  {
    return (EReference)stRepeatStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTRepeatStatement_Condition()
  {
    return (EReference)stRepeatStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTExpression()
  {
    return stExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMultibitPartialAccess()
  {
    return multibitPartialAccessEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMultibitPartialAccess_AccessSpecifier()
  {
    return (EAttribute)multibitPartialAccessEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMultibitPartialAccess_Index()
  {
    return (EAttribute)multibitPartialAccessEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTNumericLiteral()
  {
    return stNumericLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTNumericLiteral_Type()
  {
    return (EReference)stNumericLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTNumericLiteral_Value()
  {
    return (EAttribute)stNumericLiteralEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTDateLiteral()
  {
    return stDateLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTDateLiteral_Type()
  {
    return (EReference)stDateLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTDateLiteral_Value()
  {
    return (EAttribute)stDateLiteralEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTTimeLiteral()
  {
    return stTimeLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTTimeLiteral_Type()
  {
    return (EReference)stTimeLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTTimeLiteral_Value()
  {
    return (EAttribute)stTimeLiteralEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTTimeOfDayLiteral()
  {
    return stTimeOfDayLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTTimeOfDayLiteral_Type()
  {
    return (EReference)stTimeOfDayLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTTimeOfDayLiteral_Value()
  {
    return (EAttribute)stTimeOfDayLiteralEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTDateAndTimeLiteral()
  {
    return stDateAndTimeLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTDateAndTimeLiteral_Type()
  {
    return (EReference)stDateAndTimeLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTDateAndTimeLiteral_DateValue()
  {
    return (EAttribute)stDateAndTimeLiteralEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTDateAndTimeLiteral_TimeOfDayValue()
  {
    return (EAttribute)stDateAndTimeLiteralEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTStringLiteral()
  {
    return stStringLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTStringLiteral_Type()
  {
    return (EReference)stStringLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTStringLiteral_Value()
  {
    return (EAttribute)stStringLiteralEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTReturn()
  {
    return stReturnEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTContinue()
  {
    return stContinueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTExit()
  {
    return stExitEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTNop()
  {
    return stNopEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTBinaryExpression()
  {
    return stBinaryExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTBinaryExpression_Left()
  {
    return (EReference)stBinaryExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTBinaryExpression_Op()
  {
    return (EAttribute)stBinaryExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTBinaryExpression_Right()
  {
    return (EReference)stBinaryExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTUnaryExpression()
  {
    return stUnaryExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTUnaryExpression_Op()
  {
    return (EAttribute)stUnaryExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTUnaryExpression_Expression()
  {
    return (EReference)stUnaryExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTMemberSelection()
  {
    return stMemberSelectionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTMemberSelection_Receiver()
  {
    return (EReference)stMemberSelectionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTMemberSelection_StructAccess()
  {
    return (EAttribute)stMemberSelectionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTMemberSelection_Member()
  {
    return (EReference)stMemberSelectionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTMemberSelection_ArrayAccess()
  {
    return (EAttribute)stMemberSelectionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTMemberSelection_Index()
  {
    return (EReference)stMemberSelectionEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTMemberSelection_PoeInvocation()
  {
    return (EAttribute)stMemberSelectionEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTMemberSelection_Parameters()
  {
    return (EReference)stMemberSelectionEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTMemberSelection_Bitaccessor()
  {
    return (EReference)stMemberSelectionEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSTSymbol()
  {
    return stSymbolEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTSymbol_Type()
  {
    return (EReference)stSymbolEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTSymbol_Symbol()
  {
    return (EReference)stSymbolEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTSymbol_Bitaccessor()
  {
    return (EReference)stSymbolEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSTSymbol_PoeInvocation()
  {
    return (EAttribute)stSymbolEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSTSymbol_Parameters()
  {
    return (EReference)stSymbolEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getBinaryOperator()
  {
    return binaryOperatorEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getUnaryOperator()
  {
    return unaryOperatorEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getMultiBitAccessSpecifier()
  {
    return multiBitAccessSpecifierEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STCoreFactory getSTCoreFactory()
  {
    return (STCoreFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    codeEClass = createEClass(CODE);
    createEReference(codeEClass, CODE__STATEMENTS);

    varDeclarationBlockEClass = createEClass(VAR_DECLARATION_BLOCK);
    createEAttribute(varDeclarationBlockEClass, VAR_DECLARATION_BLOCK__CONSTANT);
    createEReference(varDeclarationBlockEClass, VAR_DECLARATION_BLOCK__VAR_DECLARATIONS);

    varDeclarationEClass = createEClass(VAR_DECLARATION);
    createEAttribute(varDeclarationEClass, VAR_DECLARATION__NAME);
    createEReference(varDeclarationEClass, VAR_DECLARATION__LOCATED_AT);
    createEAttribute(varDeclarationEClass, VAR_DECLARATION__ARRAY);
    createEReference(varDeclarationEClass, VAR_DECLARATION__RANGES);
    createEAttribute(varDeclarationEClass, VAR_DECLARATION__COUNT);
    createEReference(varDeclarationEClass, VAR_DECLARATION__TYPE);
    createEReference(varDeclarationEClass, VAR_DECLARATION__MAX_LENGTH);
    createEReference(varDeclarationEClass, VAR_DECLARATION__DEFAULT_VALUE);

    initializerExpressionEClass = createEClass(INITIALIZER_EXPRESSION);

    arrayInitializerExpressionEClass = createEClass(ARRAY_INITIALIZER_EXPRESSION);
    createEReference(arrayInitializerExpressionEClass, ARRAY_INITIALIZER_EXPRESSION__VALUES);

    arrayInitElementEClass = createEClass(ARRAY_INIT_ELEMENT);
    createEReference(arrayInitElementEClass, ARRAY_INIT_ELEMENT__INDEX_OR_INIT_EXPRESSION);
    createEReference(arrayInitElementEClass, ARRAY_INIT_ELEMENT__INIT_EXPRESSION);

    stStatementEClass = createEClass(ST_STATEMENT);

    stAssignmentStatementEClass = createEClass(ST_ASSIGNMENT_STATEMENT);
    createEReference(stAssignmentStatementEClass, ST_ASSIGNMENT_STATEMENT__LHS);
    createEReference(stAssignmentStatementEClass, ST_ASSIGNMENT_STATEMENT__RHS);

    stIfStatmentEClass = createEClass(ST_IF_STATMENT);
    createEReference(stIfStatmentEClass, ST_IF_STATMENT__CONDITION);
    createEReference(stIfStatmentEClass, ST_IF_STATMENT__STATEMENTS);
    createEReference(stIfStatmentEClass, ST_IF_STATMENT__ELSEIFS);
    createEReference(stIfStatmentEClass, ST_IF_STATMENT__ELSE);

    stElseIfPartEClass = createEClass(ST_ELSE_IF_PART);
    createEReference(stElseIfPartEClass, ST_ELSE_IF_PART__CONDITION);
    createEReference(stElseIfPartEClass, ST_ELSE_IF_PART__STATEMENTS);

    stCaseStatementEClass = createEClass(ST_CASE_STATEMENT);
    createEReference(stCaseStatementEClass, ST_CASE_STATEMENT__SELECTOR);
    createEReference(stCaseStatementEClass, ST_CASE_STATEMENT__CASES);
    createEReference(stCaseStatementEClass, ST_CASE_STATEMENT__ELSE);

    stCaseCasesEClass = createEClass(ST_CASE_CASES);
    createEReference(stCaseCasesEClass, ST_CASE_CASES__CONDITIONS);
    createEReference(stCaseCasesEClass, ST_CASE_CASES__STATEMENTS);

    stElsePartEClass = createEClass(ST_ELSE_PART);
    createEReference(stElsePartEClass, ST_ELSE_PART__STATEMENTS);

    stForStatementEClass = createEClass(ST_FOR_STATEMENT);
    createEReference(stForStatementEClass, ST_FOR_STATEMENT__FOR);
    createEReference(stForStatementEClass, ST_FOR_STATEMENT__TO);
    createEReference(stForStatementEClass, ST_FOR_STATEMENT__BY);
    createEReference(stForStatementEClass, ST_FOR_STATEMENT__STATEMENTS);

    stWhileStatementEClass = createEClass(ST_WHILE_STATEMENT);
    createEReference(stWhileStatementEClass, ST_WHILE_STATEMENT__CONDITION);
    createEReference(stWhileStatementEClass, ST_WHILE_STATEMENT__STATEMENTS);

    stRepeatStatementEClass = createEClass(ST_REPEAT_STATEMENT);
    createEReference(stRepeatStatementEClass, ST_REPEAT_STATEMENT__STATEMENTS);
    createEReference(stRepeatStatementEClass, ST_REPEAT_STATEMENT__CONDITION);

    stExpressionEClass = createEClass(ST_EXPRESSION);

    multibitPartialAccessEClass = createEClass(MULTIBIT_PARTIAL_ACCESS);
    createEAttribute(multibitPartialAccessEClass, MULTIBIT_PARTIAL_ACCESS__ACCESS_SPECIFIER);
    createEAttribute(multibitPartialAccessEClass, MULTIBIT_PARTIAL_ACCESS__INDEX);

    stNumericLiteralEClass = createEClass(ST_NUMERIC_LITERAL);
    createEReference(stNumericLiteralEClass, ST_NUMERIC_LITERAL__TYPE);
    createEAttribute(stNumericLiteralEClass, ST_NUMERIC_LITERAL__VALUE);

    stDateLiteralEClass = createEClass(ST_DATE_LITERAL);
    createEReference(stDateLiteralEClass, ST_DATE_LITERAL__TYPE);
    createEAttribute(stDateLiteralEClass, ST_DATE_LITERAL__VALUE);

    stTimeLiteralEClass = createEClass(ST_TIME_LITERAL);
    createEReference(stTimeLiteralEClass, ST_TIME_LITERAL__TYPE);
    createEAttribute(stTimeLiteralEClass, ST_TIME_LITERAL__VALUE);

    stTimeOfDayLiteralEClass = createEClass(ST_TIME_OF_DAY_LITERAL);
    createEReference(stTimeOfDayLiteralEClass, ST_TIME_OF_DAY_LITERAL__TYPE);
    createEAttribute(stTimeOfDayLiteralEClass, ST_TIME_OF_DAY_LITERAL__VALUE);

    stDateAndTimeLiteralEClass = createEClass(ST_DATE_AND_TIME_LITERAL);
    createEReference(stDateAndTimeLiteralEClass, ST_DATE_AND_TIME_LITERAL__TYPE);
    createEAttribute(stDateAndTimeLiteralEClass, ST_DATE_AND_TIME_LITERAL__DATE_VALUE);
    createEAttribute(stDateAndTimeLiteralEClass, ST_DATE_AND_TIME_LITERAL__TIME_OF_DAY_VALUE);

    stStringLiteralEClass = createEClass(ST_STRING_LITERAL);
    createEReference(stStringLiteralEClass, ST_STRING_LITERAL__TYPE);
    createEAttribute(stStringLiteralEClass, ST_STRING_LITERAL__VALUE);

    stReturnEClass = createEClass(ST_RETURN);

    stContinueEClass = createEClass(ST_CONTINUE);

    stExitEClass = createEClass(ST_EXIT);

    stNopEClass = createEClass(ST_NOP);

    stBinaryExpressionEClass = createEClass(ST_BINARY_EXPRESSION);
    createEReference(stBinaryExpressionEClass, ST_BINARY_EXPRESSION__LEFT);
    createEAttribute(stBinaryExpressionEClass, ST_BINARY_EXPRESSION__OP);
    createEReference(stBinaryExpressionEClass, ST_BINARY_EXPRESSION__RIGHT);

    stUnaryExpressionEClass = createEClass(ST_UNARY_EXPRESSION);
    createEAttribute(stUnaryExpressionEClass, ST_UNARY_EXPRESSION__OP);
    createEReference(stUnaryExpressionEClass, ST_UNARY_EXPRESSION__EXPRESSION);

    stMemberSelectionEClass = createEClass(ST_MEMBER_SELECTION);
    createEReference(stMemberSelectionEClass, ST_MEMBER_SELECTION__RECEIVER);
    createEAttribute(stMemberSelectionEClass, ST_MEMBER_SELECTION__STRUCT_ACCESS);
    createEReference(stMemberSelectionEClass, ST_MEMBER_SELECTION__MEMBER);
    createEAttribute(stMemberSelectionEClass, ST_MEMBER_SELECTION__ARRAY_ACCESS);
    createEReference(stMemberSelectionEClass, ST_MEMBER_SELECTION__INDEX);
    createEAttribute(stMemberSelectionEClass, ST_MEMBER_SELECTION__POE_INVOCATION);
    createEReference(stMemberSelectionEClass, ST_MEMBER_SELECTION__PARAMETERS);
    createEReference(stMemberSelectionEClass, ST_MEMBER_SELECTION__BITACCESSOR);

    stSymbolEClass = createEClass(ST_SYMBOL);
    createEReference(stSymbolEClass, ST_SYMBOL__TYPE);
    createEReference(stSymbolEClass, ST_SYMBOL__SYMBOL);
    createEReference(stSymbolEClass, ST_SYMBOL__BITACCESSOR);
    createEAttribute(stSymbolEClass, ST_SYMBOL__POE_INVOCATION);
    createEReference(stSymbolEClass, ST_SYMBOL__PARAMETERS);

    // Create enums
    binaryOperatorEEnum = createEEnum(BINARY_OPERATOR);
    unaryOperatorEEnum = createEEnum(UNARY_OPERATOR);
    multiBitAccessSpecifierEEnum = createEEnum(MULTI_BIT_ACCESS_SPECIFIER);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Obtain other dependent packages
    LibraryElementPackage theLibraryElementPackage = (LibraryElementPackage)EPackage.Registry.INSTANCE.getEPackage(LibraryElementPackage.eNS_URI);
    DataPackage theDataPackage = (DataPackage)EPackage.Registry.INSTANCE.getEPackage(DataPackage.eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    arrayInitializerExpressionEClass.getESuperTypes().add(this.getInitializerExpression());
    stAssignmentStatementEClass.getESuperTypes().add(this.getSTStatement());
    stIfStatmentEClass.getESuperTypes().add(this.getSTStatement());
    stCaseStatementEClass.getESuperTypes().add(this.getSTStatement());
    stForStatementEClass.getESuperTypes().add(this.getSTStatement());
    stWhileStatementEClass.getESuperTypes().add(this.getSTStatement());
    stRepeatStatementEClass.getESuperTypes().add(this.getSTStatement());
    stExpressionEClass.getESuperTypes().add(this.getInitializerExpression());
    stNumericLiteralEClass.getESuperTypes().add(this.getSTExpression());
    stDateLiteralEClass.getESuperTypes().add(this.getSTExpression());
    stTimeLiteralEClass.getESuperTypes().add(this.getSTExpression());
    stTimeOfDayLiteralEClass.getESuperTypes().add(this.getSTExpression());
    stDateAndTimeLiteralEClass.getESuperTypes().add(this.getSTExpression());
    stStringLiteralEClass.getESuperTypes().add(this.getSTExpression());
    stReturnEClass.getESuperTypes().add(this.getSTStatement());
    stContinueEClass.getESuperTypes().add(this.getSTStatement());
    stExitEClass.getESuperTypes().add(this.getSTStatement());
    stNopEClass.getESuperTypes().add(this.getSTStatement());
    stBinaryExpressionEClass.getESuperTypes().add(this.getSTExpression());
    stUnaryExpressionEClass.getESuperTypes().add(this.getSTExpression());
    stMemberSelectionEClass.getESuperTypes().add(this.getSTExpression());
    stSymbolEClass.getESuperTypes().add(this.getSTExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(codeEClass, Code.class, "Code", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCode_Statements(), this.getSTStatement(), null, "statements", null, 0, -1, Code.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(varDeclarationBlockEClass, VarDeclarationBlock.class, "VarDeclarationBlock", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVarDeclarationBlock_Constant(), ecorePackage.getEBoolean(), "constant", null, 0, 1, VarDeclarationBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVarDeclarationBlock_VarDeclarations(), this.getVarDeclaration(), null, "varDeclarations", null, 0, -1, VarDeclarationBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(varDeclarationEClass, VarDeclaration.class, "VarDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVarDeclaration_Name(), ecorePackage.getEString(), "name", null, 0, 1, VarDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVarDeclaration_LocatedAt(), this.getVarDeclaration(), null, "locatedAt", null, 0, 1, VarDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVarDeclaration_Array(), ecorePackage.getEBoolean(), "array", null, 0, 1, VarDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVarDeclaration_Ranges(), this.getSTExpression(), null, "ranges", null, 0, -1, VarDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVarDeclaration_Count(), ecorePackage.getEString(), "count", null, 0, -1, VarDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVarDeclaration_Type(), theLibraryElementPackage.getLibraryElement(), null, "type", null, 0, 1, VarDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVarDeclaration_MaxLength(), this.getSTExpression(), null, "maxLength", null, 0, 1, VarDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVarDeclaration_DefaultValue(), this.getInitializerExpression(), null, "defaultValue", null, 0, 1, VarDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(initializerExpressionEClass, InitializerExpression.class, "InitializerExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(arrayInitializerExpressionEClass, ArrayInitializerExpression.class, "ArrayInitializerExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getArrayInitializerExpression_Values(), this.getArrayInitElement(), null, "values", null, 0, -1, ArrayInitializerExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arrayInitElementEClass, ArrayInitElement.class, "ArrayInitElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getArrayInitElement_IndexOrInitExpression(), this.getSTExpression(), null, "indexOrInitExpression", null, 0, 1, ArrayInitElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getArrayInitElement_InitExpression(), this.getSTExpression(), null, "initExpression", null, 0, 1, ArrayInitElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stStatementEClass, STStatement.class, "STStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(stAssignmentStatementEClass, STAssignmentStatement.class, "STAssignmentStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTAssignmentStatement_Lhs(), this.getVarDeclaration(), null, "lhs", null, 0, 1, STAssignmentStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTAssignmentStatement_Rhs(), this.getSTExpression(), null, "rhs", null, 0, 1, STAssignmentStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stIfStatmentEClass, STIfStatment.class, "STIfStatment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTIfStatment_Condition(), this.getSTExpression(), null, "condition", null, 0, 1, STIfStatment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTIfStatment_Statements(), this.getSTStatement(), null, "statements", null, 0, -1, STIfStatment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTIfStatment_Elseifs(), this.getSTElseIfPart(), null, "elseifs", null, 0, -1, STIfStatment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTIfStatment_Else(), this.getSTElsePart(), null, "else", null, 0, 1, STIfStatment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stElseIfPartEClass, STElseIfPart.class, "STElseIfPart", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTElseIfPart_Condition(), this.getSTExpression(), null, "condition", null, 0, 1, STElseIfPart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTElseIfPart_Statements(), this.getSTStatement(), null, "statements", null, 0, -1, STElseIfPart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stCaseStatementEClass, STCaseStatement.class, "STCaseStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTCaseStatement_Selector(), this.getSTExpression(), null, "selector", null, 0, 1, STCaseStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTCaseStatement_Cases(), this.getSTCaseCases(), null, "cases", null, 0, -1, STCaseStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTCaseStatement_Else(), this.getSTElsePart(), null, "else", null, 0, 1, STCaseStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stCaseCasesEClass, STCaseCases.class, "STCaseCases", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTCaseCases_Conditions(), this.getSTExpression(), null, "conditions", null, 0, -1, STCaseCases.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTCaseCases_Statements(), this.getSTStatement(), null, "statements", null, 0, -1, STCaseCases.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stElsePartEClass, STElsePart.class, "STElsePart", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTElsePart_Statements(), this.getSTStatement(), null, "statements", null, 0, -1, STElsePart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stForStatementEClass, STForStatement.class, "STForStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTForStatement_For(), this.getSTExpression(), null, "for", null, 0, 1, STForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTForStatement_To(), this.getSTExpression(), null, "to", null, 0, 1, STForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTForStatement_By(), this.getSTExpression(), null, "by", null, 0, 1, STForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTForStatement_Statements(), this.getSTStatement(), null, "statements", null, 0, -1, STForStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stWhileStatementEClass, STWhileStatement.class, "STWhileStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTWhileStatement_Condition(), this.getSTExpression(), null, "condition", null, 0, 1, STWhileStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTWhileStatement_Statements(), this.getSTStatement(), null, "statements", null, 0, -1, STWhileStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stRepeatStatementEClass, STRepeatStatement.class, "STRepeatStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTRepeatStatement_Statements(), this.getSTStatement(), null, "statements", null, 0, -1, STRepeatStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTRepeatStatement_Condition(), this.getSTExpression(), null, "condition", null, 0, 1, STRepeatStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stExpressionEClass, STExpression.class, "STExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(multibitPartialAccessEClass, MultibitPartialAccess.class, "MultibitPartialAccess", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMultibitPartialAccess_AccessSpecifier(), this.getMultiBitAccessSpecifier(), "accessSpecifier", null, 0, 1, MultibitPartialAccess.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMultibitPartialAccess_Index(), ecorePackage.getEBigInteger(), "index", null, 0, 1, MultibitPartialAccess.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stNumericLiteralEClass, STNumericLiteral.class, "STNumericLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTNumericLiteral_Type(), theDataPackage.getDataType(), null, "type", null, 0, 1, STNumericLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSTNumericLiteral_Value(), ecorePackage.getEBigDecimal(), "value", null, 0, 1, STNumericLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stDateLiteralEClass, STDateLiteral.class, "STDateLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTDateLiteral_Type(), theDataPackage.getDataType(), null, "type", null, 0, 1, STDateLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSTDateLiteral_Value(), ecorePackage.getEDate(), "value", null, 0, 1, STDateLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stTimeLiteralEClass, STTimeLiteral.class, "STTimeLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTTimeLiteral_Type(), theDataPackage.getDataType(), null, "type", null, 0, 1, STTimeLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSTTimeLiteral_Value(), ecorePackage.getEString(), "value", null, 0, 1, STTimeLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stTimeOfDayLiteralEClass, STTimeOfDayLiteral.class, "STTimeOfDayLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTTimeOfDayLiteral_Type(), theDataPackage.getDataType(), null, "type", null, 0, 1, STTimeOfDayLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSTTimeOfDayLiteral_Value(), ecorePackage.getEString(), "value", null, 0, 1, STTimeOfDayLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stDateAndTimeLiteralEClass, STDateAndTimeLiteral.class, "STDateAndTimeLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTDateAndTimeLiteral_Type(), theDataPackage.getDataType(), null, "type", null, 0, 1, STDateAndTimeLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSTDateAndTimeLiteral_DateValue(), ecorePackage.getEDate(), "dateValue", null, 0, 1, STDateAndTimeLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSTDateAndTimeLiteral_TimeOfDayValue(), ecorePackage.getEString(), "timeOfDayValue", null, 0, 1, STDateAndTimeLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stStringLiteralEClass, STStringLiteral.class, "STStringLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTStringLiteral_Type(), theDataPackage.getDataType(), null, "type", null, 0, 1, STStringLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSTStringLiteral_Value(), ecorePackage.getEString(), "value", null, 0, 1, STStringLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stReturnEClass, STReturn.class, "STReturn", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(stContinueEClass, STContinue.class, "STContinue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(stExitEClass, STExit.class, "STExit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(stNopEClass, STNop.class, "STNop", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(stBinaryExpressionEClass, STBinaryExpression.class, "STBinaryExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTBinaryExpression_Left(), this.getSTExpression(), null, "left", null, 0, 1, STBinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSTBinaryExpression_Op(), this.getBinaryOperator(), "op", null, 0, 1, STBinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTBinaryExpression_Right(), this.getSTExpression(), null, "right", null, 0, 1, STBinaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stUnaryExpressionEClass, STUnaryExpression.class, "STUnaryExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSTUnaryExpression_Op(), this.getUnaryOperator(), "op", null, 0, 1, STUnaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTUnaryExpression_Expression(), this.getSTExpression(), null, "expression", null, 0, 1, STUnaryExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stMemberSelectionEClass, STMemberSelection.class, "STMemberSelection", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTMemberSelection_Receiver(), this.getSTExpression(), null, "receiver", null, 0, 1, STMemberSelection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSTMemberSelection_StructAccess(), ecorePackage.getEBoolean(), "structAccess", null, 0, 1, STMemberSelection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTMemberSelection_Member(), this.getVarDeclaration(), null, "member", null, 0, 1, STMemberSelection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSTMemberSelection_ArrayAccess(), ecorePackage.getEBoolean(), "arrayAccess", null, 0, 1, STMemberSelection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTMemberSelection_Index(), this.getSTExpression(), null, "index", null, 0, -1, STMemberSelection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSTMemberSelection_PoeInvocation(), ecorePackage.getEBoolean(), "poeInvocation", null, 0, 1, STMemberSelection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTMemberSelection_Parameters(), this.getSTExpression(), null, "parameters", null, 0, -1, STMemberSelection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTMemberSelection_Bitaccessor(), this.getMultibitPartialAccess(), null, "bitaccessor", null, 0, 1, STMemberSelection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stSymbolEClass, STSymbol.class, "STSymbol", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSTSymbol_Type(), theDataPackage.getDataType(), null, "type", null, 0, 1, STSymbol.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTSymbol_Symbol(), this.getVarDeclaration(), null, "symbol", null, 0, 1, STSymbol.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTSymbol_Bitaccessor(), this.getMultibitPartialAccess(), null, "bitaccessor", null, 0, 1, STSymbol.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSTSymbol_PoeInvocation(), ecorePackage.getEBoolean(), "poeInvocation", null, 0, 1, STSymbol.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSTSymbol_Parameters(), this.getSTExpression(), null, "parameters", null, 0, -1, STSymbol.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(binaryOperatorEEnum, BinaryOperator.class, "BinaryOperator");
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.RANGE);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.OR);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.XOR);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.AND);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.AMPERSAND);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.EQ);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.NE);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.LT);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.LE);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.GT);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.GE);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.ADD);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.SUB);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.MUL);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.DIV);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.MOD);
    addEEnumLiteral(binaryOperatorEEnum, BinaryOperator.POWER);

    initEEnum(unaryOperatorEEnum, UnaryOperator.class, "UnaryOperator");
    addEEnumLiteral(unaryOperatorEEnum, UnaryOperator.MINUS);
    addEEnumLiteral(unaryOperatorEEnum, UnaryOperator.PLUS);
    addEEnumLiteral(unaryOperatorEEnum, UnaryOperator.NOT);

    initEEnum(multiBitAccessSpecifierEEnum, MultiBitAccessSpecifier.class, "MultiBitAccessSpecifier");
    addEEnumLiteral(multiBitAccessSpecifierEEnum, MultiBitAccessSpecifier.LWORD_ACCESS);
    addEEnumLiteral(multiBitAccessSpecifierEEnum, MultiBitAccessSpecifier.DWORD_ACCESS);
    addEEnumLiteral(multiBitAccessSpecifierEEnum, MultiBitAccessSpecifier.WORD_ACCESS);
    addEEnumLiteral(multiBitAccessSpecifierEEnum, MultiBitAccessSpecifier.BYTE_ACCESS);
    addEEnumLiteral(multiBitAccessSpecifierEEnum, MultiBitAccessSpecifier.BIT_ACCESS);
    addEEnumLiteral(multiBitAccessSpecifierEEnum, MultiBitAccessSpecifier.BIT_ACCESS_SHORTCUT);

    // Create resource
    createResource(eNS_URI);
  }

} //STCorePackageImpl
