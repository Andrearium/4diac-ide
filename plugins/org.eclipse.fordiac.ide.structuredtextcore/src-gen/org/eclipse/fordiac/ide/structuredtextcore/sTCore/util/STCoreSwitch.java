/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.fordiac.ide.structuredtextcore.sTCore.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.eclipse.fordiac.ide.structuredtextcore.sTCore.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCorePackage
 * @generated
 */
public class STCoreSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static STCorePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public STCoreSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = STCorePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case STCorePackage.CODE:
      {
        Code code = (Code)theEObject;
        T result = caseCode(code);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.VAR_DECLARATION_BLOCK:
      {
        VarDeclarationBlock varDeclarationBlock = (VarDeclarationBlock)theEObject;
        T result = caseVarDeclarationBlock(varDeclarationBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.VAR_DECLARATION:
      {
        VarDeclaration varDeclaration = (VarDeclaration)theEObject;
        T result = caseVarDeclaration(varDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.INITIALIZER_EXPRESSION:
      {
        InitializerExpression initializerExpression = (InitializerExpression)theEObject;
        T result = caseInitializerExpression(initializerExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ARRAY_INITIALIZER_EXPRESSION:
      {
        ArrayInitializerExpression arrayInitializerExpression = (ArrayInitializerExpression)theEObject;
        T result = caseArrayInitializerExpression(arrayInitializerExpression);
        if (result == null) result = caseInitializerExpression(arrayInitializerExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ARRAY_INIT_ELEMENT:
      {
        ArrayInitElement arrayInitElement = (ArrayInitElement)theEObject;
        T result = caseArrayInitElement(arrayInitElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_STATEMENT:
      {
        STStatement stStatement = (STStatement)theEObject;
        T result = caseSTStatement(stStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_ASSIGNMENT_STATEMENT:
      {
        STAssignmentStatement stAssignmentStatement = (STAssignmentStatement)theEObject;
        T result = caseSTAssignmentStatement(stAssignmentStatement);
        if (result == null) result = caseSTStatement(stAssignmentStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_BRANCH_STATEMENTS:
      {
        STBranchStatements stBranchStatements = (STBranchStatements)theEObject;
        T result = caseSTBranchStatements(stBranchStatements);
        if (result == null) result = caseSTStatement(stBranchStatements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_IF_STATMENT:
      {
        STIfStatment stIfStatment = (STIfStatment)theEObject;
        T result = caseSTIfStatment(stIfStatment);
        if (result == null) result = caseSTBranchStatements(stIfStatment);
        if (result == null) result = caseSTStatement(stIfStatment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_ELSE_IF_PART:
      {
        STElseIfPart stElseIfPart = (STElseIfPart)theEObject;
        T result = caseSTElseIfPart(stElseIfPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_CASE_STATEMENT:
      {
        STCaseStatement stCaseStatement = (STCaseStatement)theEObject;
        T result = caseSTCaseStatement(stCaseStatement);
        if (result == null) result = caseSTBranchStatements(stCaseStatement);
        if (result == null) result = caseSTStatement(stCaseStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_CASE_CASES:
      {
        STCaseCases stCaseCases = (STCaseCases)theEObject;
        T result = caseSTCaseCases(stCaseCases);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_ELSE_PART:
      {
        STElsePart stElsePart = (STElsePart)theEObject;
        T result = caseSTElsePart(stElsePart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_LOOP_STATEMENTS:
      {
        STLoopStatements stLoopStatements = (STLoopStatements)theEObject;
        T result = caseSTLoopStatements(stLoopStatements);
        if (result == null) result = caseSTStatement(stLoopStatements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_FOR_STATEMENT:
      {
        STForStatement stForStatement = (STForStatement)theEObject;
        T result = caseSTForStatement(stForStatement);
        if (result == null) result = caseSTLoopStatements(stForStatement);
        if (result == null) result = caseSTStatement(stForStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_WHILE_STATEMENT:
      {
        STWhileStatement stWhileStatement = (STWhileStatement)theEObject;
        T result = caseSTWhileStatement(stWhileStatement);
        if (result == null) result = caseSTLoopStatements(stWhileStatement);
        if (result == null) result = caseSTStatement(stWhileStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_REPEAT_STATEMENT:
      {
        STRepeatStatement stRepeatStatement = (STRepeatStatement)theEObject;
        T result = caseSTRepeatStatement(stRepeatStatement);
        if (result == null) result = caseSTLoopStatements(stRepeatStatement);
        if (result == null) result = caseSTStatement(stRepeatStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_EXPRESSION:
      {
        STExpression stExpression = (STExpression)theEObject;
        T result = caseSTExpression(stExpression);
        if (result == null) result = caseInitializerExpression(stExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.MULTIBIT_PARTIAL_ACCESS:
      {
        MultibitPartialAccess multibitPartialAccess = (MultibitPartialAccess)theEObject;
        T result = caseMultibitPartialAccess(multibitPartialAccess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.BOOL_LITERAL:
      {
        BOOL_LITERAL booL_LITERAL = (BOOL_LITERAL)theEObject;
        T result = caseBOOL_LITERAL(booL_LITERAL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.NUMERIC_LITERAL:
      {
        NUMERIC_LITERAL numeriC_LITERAL = (NUMERIC_LITERAL)theEObject;
        T result = caseNUMERIC_LITERAL(numeriC_LITERAL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.DATE_LITERAL:
      {
        DATE_LITERAL datE_LITERAL = (DATE_LITERAL)theEObject;
        T result = caseDATE_LITERAL(datE_LITERAL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.TIME_LITERAL:
      {
        TIME_LITERAL timE_LITERAL = (TIME_LITERAL)theEObject;
        T result = caseTIME_LITERAL(timE_LITERAL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.TIME_OF_DAY_LITERAL:
      {
        TIME_OF_DAY_LITERAL timE_OF_DAY_LITERAL = (TIME_OF_DAY_LITERAL)theEObject;
        T result = caseTIME_OF_DAY_LITERAL(timE_OF_DAY_LITERAL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.DATE_AND_TIME_LITERAL:
      {
        DATE_AND_TIME_LITERAL datE_AND_TIME_LITERAL = (DATE_AND_TIME_LITERAL)theEObject;
        T result = caseDATE_AND_TIME_LITERAL(datE_AND_TIME_LITERAL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.STRING_LITERAL:
      {
        STRING_LITERAL strinG_LITERAL = (STRING_LITERAL)theEObject;
        T result = caseSTRING_LITERAL(strinG_LITERAL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_STATEMENTS:
      {
        STStatements stStatements = (STStatements)theEObject;
        T result = caseSTStatements(stStatements);
        if (result == null) result = caseSTStatement(stStatements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_SUBRANGE_EXPRESSION:
      {
        STSubrangeExpression stSubrangeExpression = (STSubrangeExpression)theEObject;
        T result = caseSTSubrangeExpression(stSubrangeExpression);
        if (result == null) result = caseSTExpression(stSubrangeExpression);
        if (result == null) result = caseInitializerExpression(stSubrangeExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_OR_EXPRESSION:
      {
        STOrExpression stOrExpression = (STOrExpression)theEObject;
        T result = caseSTOrExpression(stOrExpression);
        if (result == null) result = caseSTExpression(stOrExpression);
        if (result == null) result = caseInitializerExpression(stOrExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_XOR_EXPRESSION:
      {
        STXorExpression stXorExpression = (STXorExpression)theEObject;
        T result = caseSTXorExpression(stXorExpression);
        if (result == null) result = caseSTExpression(stXorExpression);
        if (result == null) result = caseInitializerExpression(stXorExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_AND_EXPRESSION:
      {
        STAndExpression stAndExpression = (STAndExpression)theEObject;
        T result = caseSTAndExpression(stAndExpression);
        if (result == null) result = caseSTExpression(stAndExpression);
        if (result == null) result = caseInitializerExpression(stAndExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_EQUALITY_EXPRESSION:
      {
        STEqualityExpression stEqualityExpression = (STEqualityExpression)theEObject;
        T result = caseSTEqualityExpression(stEqualityExpression);
        if (result == null) result = caseSTExpression(stEqualityExpression);
        if (result == null) result = caseInitializerExpression(stEqualityExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_COMPARISON_EXPRESSION:
      {
        STComparisonExpression stComparisonExpression = (STComparisonExpression)theEObject;
        T result = caseSTComparisonExpression(stComparisonExpression);
        if (result == null) result = caseSTExpression(stComparisonExpression);
        if (result == null) result = caseInitializerExpression(stComparisonExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_ADD_SUB_EXPRESSION:
      {
        STAddSubExpression stAddSubExpression = (STAddSubExpression)theEObject;
        T result = caseSTAddSubExpression(stAddSubExpression);
        if (result == null) result = caseSTExpression(stAddSubExpression);
        if (result == null) result = caseInitializerExpression(stAddSubExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_MUL_DIV_MOD_EXPRESSION:
      {
        STMulDivModExpression stMulDivModExpression = (STMulDivModExpression)theEObject;
        T result = caseSTMulDivModExpression(stMulDivModExpression);
        if (result == null) result = caseSTExpression(stMulDivModExpression);
        if (result == null) result = caseInitializerExpression(stMulDivModExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_POWER_EXPRESSION:
      {
        STPowerExpression stPowerExpression = (STPowerExpression)theEObject;
        T result = caseSTPowerExpression(stPowerExpression);
        if (result == null) result = caseSTExpression(stPowerExpression);
        if (result == null) result = caseInitializerExpression(stPowerExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_SIGNUM_EXPRESSION:
      {
        STSignumExpression stSignumExpression = (STSignumExpression)theEObject;
        T result = caseSTSignumExpression(stSignumExpression);
        if (result == null) result = caseSTExpression(stSignumExpression);
        if (result == null) result = caseInitializerExpression(stSignumExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_MEMBER_SELECTION:
      {
        STMemberSelection stMemberSelection = (STMemberSelection)theEObject;
        T result = caseSTMemberSelection(stMemberSelection);
        if (result == null) result = caseSTExpression(stMemberSelection);
        if (result == null) result = caseInitializerExpression(stMemberSelection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_SYMBOL:
      {
        STSymbol stSymbol = (STSymbol)theEObject;
        T result = caseSTSymbol(stSymbol);
        if (result == null) result = caseSTExpression(stSymbol);
        if (result == null) result = caseInitializerExpression(stSymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_RETURN:
      {
        STReturn stReturn = (STReturn)theEObject;
        T result = caseSTReturn(stReturn);
        if (result == null) result = caseSTExpression(stReturn);
        if (result == null) result = caseInitializerExpression(stReturn);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_CONTINUE:
      {
        STContinue stContinue = (STContinue)theEObject;
        T result = caseSTContinue(stContinue);
        if (result == null) result = caseSTExpression(stContinue);
        if (result == null) result = caseInitializerExpression(stContinue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_EXIT:
      {
        STExit stExit = (STExit)theEObject;
        T result = caseSTExit(stExit);
        if (result == null) result = caseSTExpression(stExit);
        if (result == null) result = caseInitializerExpression(stExit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_BOOL_LITERAL:
      {
        STBoolLiteral stBoolLiteral = (STBoolLiteral)theEObject;
        T result = caseSTBoolLiteral(stBoolLiteral);
        if (result == null) result = caseSTExpression(stBoolLiteral);
        if (result == null) result = caseInitializerExpression(stBoolLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_NUMERIC_LITERAL:
      {
        STNumericLiteral stNumericLiteral = (STNumericLiteral)theEObject;
        T result = caseSTNumericLiteral(stNumericLiteral);
        if (result == null) result = caseSTExpression(stNumericLiteral);
        if (result == null) result = caseInitializerExpression(stNumericLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_DATE_LITERAL:
      {
        STDateLiteral stDateLiteral = (STDateLiteral)theEObject;
        T result = caseSTDateLiteral(stDateLiteral);
        if (result == null) result = caseSTExpression(stDateLiteral);
        if (result == null) result = caseInitializerExpression(stDateLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_TIME_LITERAL:
      {
        STTimeLiteral stTimeLiteral = (STTimeLiteral)theEObject;
        T result = caseSTTimeLiteral(stTimeLiteral);
        if (result == null) result = caseSTExpression(stTimeLiteral);
        if (result == null) result = caseInitializerExpression(stTimeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_TIME_OF_DAY_LITERAL:
      {
        STTimeOfDayLiteral stTimeOfDayLiteral = (STTimeOfDayLiteral)theEObject;
        T result = caseSTTimeOfDayLiteral(stTimeOfDayLiteral);
        if (result == null) result = caseSTExpression(stTimeOfDayLiteral);
        if (result == null) result = caseInitializerExpression(stTimeOfDayLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_DATE_AND_TIME_LITERAL:
      {
        STDateAndTimeLiteral stDateAndTimeLiteral = (STDateAndTimeLiteral)theEObject;
        T result = caseSTDateAndTimeLiteral(stDateAndTimeLiteral);
        if (result == null) result = caseSTExpression(stDateAndTimeLiteral);
        if (result == null) result = caseInitializerExpression(stDateAndTimeLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case STCorePackage.ST_STRING_LITERAL:
      {
        STStringLiteral stStringLiteral = (STStringLiteral)theEObject;
        T result = caseSTStringLiteral(stStringLiteral);
        if (result == null) result = caseSTExpression(stStringLiteral);
        if (result == null) result = caseInitializerExpression(stStringLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCode(Code object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Declaration Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Declaration Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDeclarationBlock(VarDeclarationBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDeclaration(VarDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initializer Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initializer Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitializerExpression(InitializerExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Initializer Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Initializer Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayInitializerExpression(ArrayInitializerExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Init Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Init Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayInitElement(ArrayInitElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTStatement(STStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Assignment Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Assignment Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTAssignmentStatement(STAssignmentStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Branch Statements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Branch Statements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTBranchStatements(STBranchStatements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST If Statment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST If Statment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTIfStatment(STIfStatment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Else If Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Else If Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTElseIfPart(STElseIfPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Case Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Case Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTCaseStatement(STCaseStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Case Cases</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Case Cases</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTCaseCases(STCaseCases object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Else Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Else Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTElsePart(STElsePart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Loop Statements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Loop Statements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTLoopStatements(STLoopStatements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST For Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST For Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTForStatement(STForStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST While Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST While Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTWhileStatement(STWhileStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Repeat Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Repeat Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTRepeatStatement(STRepeatStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTExpression(STExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multibit Partial Access</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multibit Partial Access</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultibitPartialAccess(MultibitPartialAccess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BOOL LITERAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BOOL LITERAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBOOL_LITERAL(BOOL_LITERAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NUMERIC LITERAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NUMERIC LITERAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNUMERIC_LITERAL(NUMERIC_LITERAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DATE LITERAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DATE LITERAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDATE_LITERAL(DATE_LITERAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>TIME LITERAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>TIME LITERAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTIME_LITERAL(TIME_LITERAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>TIME OF DAY LITERAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>TIME OF DAY LITERAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTIME_OF_DAY_LITERAL(TIME_OF_DAY_LITERAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DATE AND TIME LITERAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DATE AND TIME LITERAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDATE_AND_TIME_LITERAL(DATE_AND_TIME_LITERAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>STRING LITERAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>STRING LITERAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTRING_LITERAL(STRING_LITERAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Statements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Statements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTStatements(STStatements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Subrange Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Subrange Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTSubrangeExpression(STSubrangeExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Or Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Or Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTOrExpression(STOrExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Xor Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Xor Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTXorExpression(STXorExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST And Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST And Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTAndExpression(STAndExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Equality Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Equality Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTEqualityExpression(STEqualityExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Comparison Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Comparison Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTComparisonExpression(STComparisonExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Add Sub Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Add Sub Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTAddSubExpression(STAddSubExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Mul Div Mod Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Mul Div Mod Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTMulDivModExpression(STMulDivModExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Power Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Power Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTPowerExpression(STPowerExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Signum Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Signum Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTSignumExpression(STSignumExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Member Selection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Member Selection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTMemberSelection(STMemberSelection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTSymbol(STSymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Return</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Return</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTReturn(STReturn object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Continue</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Continue</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTContinue(STContinue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Exit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Exit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTExit(STExit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Bool Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Bool Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTBoolLiteral(STBoolLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Numeric Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Numeric Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTNumericLiteral(STNumericLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Date Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Date Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTDateLiteral(STDateLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Time Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Time Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTTimeLiteral(STTimeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Time Of Day Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Time Of Day Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTTimeOfDayLiteral(STTimeOfDayLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST Date And Time Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST Date And Time Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTDateAndTimeLiteral(STDateAndTimeLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ST String Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ST String Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTStringLiteral(STStringLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //STCoreSwitch
