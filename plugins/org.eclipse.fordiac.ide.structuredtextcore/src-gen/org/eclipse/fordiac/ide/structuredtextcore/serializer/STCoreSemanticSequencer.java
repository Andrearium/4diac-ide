/*
 * generated by Xtext 2.25.0
 */
package org.eclipse.fordiac.ide.structuredtextcore.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.ArrayInitElement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.ArrayInitializerExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.Code;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.MultibitPartialAccess;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STAssignmentStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STBinaryExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCaseCases;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCaseStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STContinue;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCorePackage;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STDateAndTimeLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STDateLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STElseIfPart;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STElsePart;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STExit;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STForStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STIfStatment;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STMemberSelection;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STNop;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STNumericLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STRepeatStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STReturn;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STStringLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STSymbol;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STTimeLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STTimeOfDayLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STUnaryExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STWhileStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.VarDeclaration;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.VarDeclarationBlock;
import org.eclipse.fordiac.ide.structuredtextcore.services.STCoreGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class STCoreSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private STCoreGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == STCorePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case STCorePackage.ARRAY_INIT_ELEMENT:
				sequence_ArrayInitElement(context, (ArrayInitElement) semanticObject); 
				return; 
			case STCorePackage.ARRAY_INITIALIZER_EXPRESSION:
				sequence_ArrayInitializerExpression(context, (ArrayInitializerExpression) semanticObject); 
				return; 
			case STCorePackage.CODE:
				sequence_Code(context, (Code) semanticObject); 
				return; 
			case STCorePackage.MULTIBIT_PARTIAL_ACCESS:
				sequence_MultibitPartialAccess(context, (MultibitPartialAccess) semanticObject); 
				return; 
			case STCorePackage.ST_ASSIGNMENT_STATEMENT:
				sequence_STAssignmentStatement(context, (STAssignmentStatement) semanticObject); 
				return; 
			case STCorePackage.ST_BINARY_EXPRESSION:
				sequence_STAddSubExpression_STAndExpression_STComparisonExpression_STEqualityExpression_STMulDivModExpression_STOrExpression_STPowerExpression_STSubrangeExpression_STXorExpression(context, (STBinaryExpression) semanticObject); 
				return; 
			case STCorePackage.ST_CASE_CASES:
				sequence_STCaseCases(context, (STCaseCases) semanticObject); 
				return; 
			case STCorePackage.ST_CASE_STATEMENT:
				sequence_STCaseStatement(context, (STCaseStatement) semanticObject); 
				return; 
			case STCorePackage.ST_CONTINUE:
				sequence_STStatement(context, (STContinue) semanticObject); 
				return; 
			case STCorePackage.ST_DATE_AND_TIME_LITERAL:
				sequence_STDateAndTimeLiteral(context, (STDateAndTimeLiteral) semanticObject); 
				return; 
			case STCorePackage.ST_DATE_LITERAL:
				sequence_STDateLiteral(context, (STDateLiteral) semanticObject); 
				return; 
			case STCorePackage.ST_ELSE_IF_PART:
				sequence_STElseIfPart(context, (STElseIfPart) semanticObject); 
				return; 
			case STCorePackage.ST_ELSE_PART:
				sequence_STElsePart(context, (STElsePart) semanticObject); 
				return; 
			case STCorePackage.ST_EXIT:
				sequence_STStatement(context, (STExit) semanticObject); 
				return; 
			case STCorePackage.ST_FOR_STATEMENT:
				sequence_STForStatement(context, (STForStatement) semanticObject); 
				return; 
			case STCorePackage.ST_IF_STATMENT:
				sequence_STIfStatment(context, (STIfStatment) semanticObject); 
				return; 
			case STCorePackage.ST_MEMBER_SELECTION:
				sequence_STSelectionExpression(context, (STMemberSelection) semanticObject); 
				return; 
			case STCorePackage.ST_NOP:
				sequence_STStatement(context, (STNop) semanticObject); 
				return; 
			case STCorePackage.ST_NUMERIC_LITERAL:
				sequence_STNumericLiteral(context, (STNumericLiteral) semanticObject); 
				return; 
			case STCorePackage.ST_REPEAT_STATEMENT:
				sequence_STRepeatStatement(context, (STRepeatStatement) semanticObject); 
				return; 
			case STCorePackage.ST_RETURN:
				sequence_STStatement(context, (STReturn) semanticObject); 
				return; 
			case STCorePackage.ST_STRING_LITERAL:
				sequence_STStringLiteral(context, (STStringLiteral) semanticObject); 
				return; 
			case STCorePackage.ST_SYMBOL:
				sequence_STAtomicExpression(context, (STSymbol) semanticObject); 
				return; 
			case STCorePackage.ST_TIME_LITERAL:
				sequence_STTimeLiteral(context, (STTimeLiteral) semanticObject); 
				return; 
			case STCorePackage.ST_TIME_OF_DAY_LITERAL:
				sequence_STTimeOfDayLiteral(context, (STTimeOfDayLiteral) semanticObject); 
				return; 
			case STCorePackage.ST_UNARY_EXPRESSION:
				sequence_STSignumExpression(context, (STUnaryExpression) semanticObject); 
				return; 
			case STCorePackage.ST_WHILE_STATEMENT:
				sequence_STWhileStatement(context, (STWhileStatement) semanticObject); 
				return; 
			case STCorePackage.VAR_DECLARATION:
				sequence_VarDeclaration(context, (VarDeclaration) semanticObject); 
				return; 
			case STCorePackage.VAR_DECLARATION_BLOCK:
				if (rule == grammarAccess.getVarDeclarationBlockRule()) {
					sequence_VarDeclarationBlock(context, (VarDeclarationBlock) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVarInputDeclarationBlockRule()) {
					sequence_VarInputDeclarationBlock(context, (VarDeclarationBlock) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVarOutputDeclarationBlockRule()) {
					sequence_VarOutputDeclarationBlock(context, (VarDeclarationBlock) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVarTempDeclarationBlockRule()) {
					sequence_VarTempDeclarationBlock(context, (VarDeclarationBlock) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ArrayInitElement returns ArrayInitElement
	 *
	 * Constraint:
	 *     (indexOrInitExpression=STExpression initExpression=STExpression?)
	 */
	protected void sequence_ArrayInitElement(ISerializationContext context, ArrayInitElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns ArrayInitializerExpression
	 *     ArrayInitializerExpression returns ArrayInitializerExpression
	 *
	 * Constraint:
	 *     (values+=ArrayInitElement values+=ArrayInitElement*)
	 */
	protected void sequence_ArrayInitializerExpression(ISerializationContext context, ArrayInitializerExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Code returns Code
	 *
	 * Constraint:
	 *     statements+=STStatement+
	 */
	protected void sequence_Code(ISerializationContext context, Code semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultibitPartialAccess returns MultibitPartialAccess
	 *
	 * Constraint:
	 *     (accessSpecifier=MultiBitAccessSpecifier index=INT)
	 */
	protected void sequence_MultibitPartialAccess(ISerializationContext context, MultibitPartialAccess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.MULTIBIT_PARTIAL_ACCESS__ACCESS_SPECIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.MULTIBIT_PARTIAL_ACCESS__ACCESS_SPECIFIER));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.MULTIBIT_PARTIAL_ACCESS__INDEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.MULTIBIT_PARTIAL_ACCESS__INDEX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultibitPartialAccessAccess().getAccessSpecifierMultiBitAccessSpecifierEnumRuleCall_0_0(), semanticObject.getAccessSpecifier());
		feeder.accept(grammarAccess.getMultibitPartialAccessAccess().getIndexINTTerminalRuleCall_1_0(), semanticObject.getIndex());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STBinaryExpression
	 *     STExpression returns STBinaryExpression
	 *     STSubrangeExpression returns STBinaryExpression
	 *     STSubrangeExpression.STBinaryExpression_1_0_0 returns STBinaryExpression
	 *     STOrExpression returns STBinaryExpression
	 *     STOrExpression.STBinaryExpression_1_0_0 returns STBinaryExpression
	 *     STXorExpression returns STBinaryExpression
	 *     STXorExpression.STBinaryExpression_1_0_0 returns STBinaryExpression
	 *     STAndExpression returns STBinaryExpression
	 *     STAndExpression.STBinaryExpression_1_0_0 returns STBinaryExpression
	 *     STEqualityExpression returns STBinaryExpression
	 *     STEqualityExpression.STBinaryExpression_1_0_0 returns STBinaryExpression
	 *     STComparisonExpression returns STBinaryExpression
	 *     STComparisonExpression.STBinaryExpression_1_0_0 returns STBinaryExpression
	 *     STAddSubExpression returns STBinaryExpression
	 *     STAddSubExpression.STBinaryExpression_1_0_0 returns STBinaryExpression
	 *     STMulDivModExpression returns STBinaryExpression
	 *     STMulDivModExpression.STBinaryExpression_1_0_0 returns STBinaryExpression
	 *     STPowerExpression returns STBinaryExpression
	 *     STPowerExpression.STBinaryExpression_1_0_0 returns STBinaryExpression
	 *     STSignumExpression returns STBinaryExpression
	 *     STSelectionExpression returns STBinaryExpression
	 *     STSelectionExpression.STMemberSelection_1_0 returns STBinaryExpression
	 *     STAtomicExpression returns STBinaryExpression
	 *
	 * Constraint:
	 *     (
	 *         (left=STSubrangeExpression_STBinaryExpression_1_0_0 op=SubrangeOperator right=STOrExpression) | 
	 *         (left=STOrExpression_STBinaryExpression_1_0_0 op=OrOperator right=STXorExpression) | 
	 *         (left=STXorExpression_STBinaryExpression_1_0_0 op=XorOperator right=STAndExpression) | 
	 *         (left=STAndExpression_STBinaryExpression_1_0_0 op=AndOperator right=STEqualityExpression) | 
	 *         (left=STEqualityExpression_STBinaryExpression_1_0_0 op=EqualityOperator right=STComparisonExpression) | 
	 *         (left=STComparisonExpression_STBinaryExpression_1_0_0 op=CompareOperator right=STAddSubExpression) | 
	 *         (left=STAddSubExpression_STBinaryExpression_1_0_0 op=AddSubOperator right=STMulDivModExpression) | 
	 *         (left=STMulDivModExpression_STBinaryExpression_1_0_0 op=MulDivModOperator right=STPowerExpression) | 
	 *         (left=STPowerExpression_STBinaryExpression_1_0_0 op=PowerOperator right=STSignumExpression)
	 *     )
	 */
	protected void sequence_STAddSubExpression_STAndExpression_STComparisonExpression_STEqualityExpression_STMulDivModExpression_STOrExpression_STPowerExpression_STSubrangeExpression_STXorExpression(ISerializationContext context, STBinaryExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STAssignmentStatement
	 *     STAssignmentStatement returns STAssignmentStatement
	 *
	 * Constraint:
	 *     (lhs=[VarDeclaration|ID] rhs=STExpression)
	 */
	protected void sequence_STAssignmentStatement(ISerializationContext context, STAssignmentStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_ASSIGNMENT_STATEMENT__LHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_ASSIGNMENT_STATEMENT__LHS));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_ASSIGNMENT_STATEMENT__RHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_ASSIGNMENT_STATEMENT__RHS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTAssignmentStatementAccess().getLhsVarDeclarationIDTerminalRuleCall_0_0_1(), semanticObject.eGet(STCorePackage.Literals.ST_ASSIGNMENT_STATEMENT__LHS, false));
		feeder.accept(grammarAccess.getSTAssignmentStatementAccess().getRhsSTExpressionParserRuleCall_2_0(), semanticObject.getRhs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STSymbol
	 *     STExpression returns STSymbol
	 *     STSubrangeExpression returns STSymbol
	 *     STSubrangeExpression.STBinaryExpression_1_0_0 returns STSymbol
	 *     STOrExpression returns STSymbol
	 *     STOrExpression.STBinaryExpression_1_0_0 returns STSymbol
	 *     STXorExpression returns STSymbol
	 *     STXorExpression.STBinaryExpression_1_0_0 returns STSymbol
	 *     STAndExpression returns STSymbol
	 *     STAndExpression.STBinaryExpression_1_0_0 returns STSymbol
	 *     STEqualityExpression returns STSymbol
	 *     STEqualityExpression.STBinaryExpression_1_0_0 returns STSymbol
	 *     STComparisonExpression returns STSymbol
	 *     STComparisonExpression.STBinaryExpression_1_0_0 returns STSymbol
	 *     STAddSubExpression returns STSymbol
	 *     STAddSubExpression.STBinaryExpression_1_0_0 returns STSymbol
	 *     STMulDivModExpression returns STSymbol
	 *     STMulDivModExpression.STBinaryExpression_1_0_0 returns STSymbol
	 *     STPowerExpression returns STSymbol
	 *     STPowerExpression.STBinaryExpression_1_0_0 returns STSymbol
	 *     STSignumExpression returns STSymbol
	 *     STSelectionExpression returns STSymbol
	 *     STSelectionExpression.STMemberSelection_1_0 returns STSymbol
	 *     STAtomicExpression returns STSymbol
	 *
	 * Constraint:
	 *     (
	 *         type=[DataType|ID]? 
	 *         symbol=[VarDeclaration|ID] 
	 *         bitaccessor=MultibitPartialAccess? 
	 *         (poeInvocation?='(' (parameters+=STExpression parameters+=STExpression*)?)?
	 *     )
	 */
	protected void sequence_STAtomicExpression(ISerializationContext context, STSymbol semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STCaseCases returns STCaseCases
	 *
	 * Constraint:
	 *     (conditions+=STExpression conditions+=STExpression* statements+=STStatement*)
	 */
	protected void sequence_STCaseCases(ISerializationContext context, STCaseCases semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STCaseStatement
	 *     STCaseStatement returns STCaseStatement
	 *
	 * Constraint:
	 *     (selector=STExpression cases+=STCaseCases+ else=STElsePart?)
	 */
	protected void sequence_STCaseStatement(ISerializationContext context, STCaseStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STDateAndTimeLiteral
	 *     STExpression returns STDateAndTimeLiteral
	 *     STSubrangeExpression returns STDateAndTimeLiteral
	 *     STSubrangeExpression.STBinaryExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STOrExpression returns STDateAndTimeLiteral
	 *     STOrExpression.STBinaryExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STXorExpression returns STDateAndTimeLiteral
	 *     STXorExpression.STBinaryExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STAndExpression returns STDateAndTimeLiteral
	 *     STAndExpression.STBinaryExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STEqualityExpression returns STDateAndTimeLiteral
	 *     STEqualityExpression.STBinaryExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STComparisonExpression returns STDateAndTimeLiteral
	 *     STComparisonExpression.STBinaryExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STAddSubExpression returns STDateAndTimeLiteral
	 *     STAddSubExpression.STBinaryExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STMulDivModExpression returns STDateAndTimeLiteral
	 *     STMulDivModExpression.STBinaryExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STPowerExpression returns STDateAndTimeLiteral
	 *     STPowerExpression.STBinaryExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STSignumExpression returns STDateAndTimeLiteral
	 *     STSelectionExpression returns STDateAndTimeLiteral
	 *     STSelectionExpression.STMemberSelection_1_0 returns STDateAndTimeLiteral
	 *     STAtomicExpression returns STDateAndTimeLiteral
	 *     STLiteralExpressions returns STDateAndTimeLiteral
	 *     STDateAndTimeLiteral returns STDateAndTimeLiteral
	 *
	 * Constraint:
	 *     (type=STDateAndTimeLiteralType dateValue=Date timeOfDayValue=TimeOfDay)
	 */
	protected void sequence_STDateAndTimeLiteral(ISerializationContext context, STDateAndTimeLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_DATE_AND_TIME_LITERAL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_DATE_AND_TIME_LITERAL__TYPE));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_DATE_AND_TIME_LITERAL__DATE_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_DATE_AND_TIME_LITERAL__DATE_VALUE));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_DATE_AND_TIME_LITERAL__TIME_OF_DAY_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_DATE_AND_TIME_LITERAL__TIME_OF_DAY_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTDateAndTimeLiteralAccess().getTypeSTDateAndTimeLiteralTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getSTDateAndTimeLiteralAccess().getDateValueDateParserRuleCall_1_0(), semanticObject.getDateValue());
		feeder.accept(grammarAccess.getSTDateAndTimeLiteralAccess().getTimeOfDayValueTimeOfDayParserRuleCall_3_0(), semanticObject.getTimeOfDayValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STDateLiteral
	 *     STExpression returns STDateLiteral
	 *     STSubrangeExpression returns STDateLiteral
	 *     STSubrangeExpression.STBinaryExpression_1_0_0 returns STDateLiteral
	 *     STOrExpression returns STDateLiteral
	 *     STOrExpression.STBinaryExpression_1_0_0 returns STDateLiteral
	 *     STXorExpression returns STDateLiteral
	 *     STXorExpression.STBinaryExpression_1_0_0 returns STDateLiteral
	 *     STAndExpression returns STDateLiteral
	 *     STAndExpression.STBinaryExpression_1_0_0 returns STDateLiteral
	 *     STEqualityExpression returns STDateLiteral
	 *     STEqualityExpression.STBinaryExpression_1_0_0 returns STDateLiteral
	 *     STComparisonExpression returns STDateLiteral
	 *     STComparisonExpression.STBinaryExpression_1_0_0 returns STDateLiteral
	 *     STAddSubExpression returns STDateLiteral
	 *     STAddSubExpression.STBinaryExpression_1_0_0 returns STDateLiteral
	 *     STMulDivModExpression returns STDateLiteral
	 *     STMulDivModExpression.STBinaryExpression_1_0_0 returns STDateLiteral
	 *     STPowerExpression returns STDateLiteral
	 *     STPowerExpression.STBinaryExpression_1_0_0 returns STDateLiteral
	 *     STSignumExpression returns STDateLiteral
	 *     STSelectionExpression returns STDateLiteral
	 *     STSelectionExpression.STMemberSelection_1_0 returns STDateLiteral
	 *     STAtomicExpression returns STDateLiteral
	 *     STLiteralExpressions returns STDateLiteral
	 *     STDateLiteral returns STDateLiteral
	 *
	 * Constraint:
	 *     (type=STDateLiteralType value=Date)
	 */
	protected void sequence_STDateLiteral(ISerializationContext context, STDateLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_DATE_LITERAL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_DATE_LITERAL__TYPE));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_DATE_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_DATE_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTDateLiteralAccess().getTypeSTDateLiteralTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getSTDateLiteralAccess().getValueDateParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     STElseIfPart returns STElseIfPart
	 *
	 * Constraint:
	 *     (condition=STExpression statements+=STStatement*)
	 */
	protected void sequence_STElseIfPart(ISerializationContext context, STElseIfPart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STElsePart returns STElsePart
	 *
	 * Constraint:
	 *     statements+=STStatement*
	 */
	protected void sequence_STElsePart(ISerializationContext context, STElsePart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STForStatement
	 *     STForStatement returns STForStatement
	 *
	 * Constraint:
	 *     (for=STExpression to=STExpression by=STExpression? statements+=STStatement*)
	 */
	protected void sequence_STForStatement(ISerializationContext context, STForStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STIfStatment
	 *     STIfStatment returns STIfStatment
	 *
	 * Constraint:
	 *     (condition=STExpression statements+=STStatement* elseifs+=STElseIfPart* else=STElsePart?)
	 */
	protected void sequence_STIfStatment(ISerializationContext context, STIfStatment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STNumericLiteral
	 *     STExpression returns STNumericLiteral
	 *     STSubrangeExpression returns STNumericLiteral
	 *     STSubrangeExpression.STBinaryExpression_1_0_0 returns STNumericLiteral
	 *     STOrExpression returns STNumericLiteral
	 *     STOrExpression.STBinaryExpression_1_0_0 returns STNumericLiteral
	 *     STXorExpression returns STNumericLiteral
	 *     STXorExpression.STBinaryExpression_1_0_0 returns STNumericLiteral
	 *     STAndExpression returns STNumericLiteral
	 *     STAndExpression.STBinaryExpression_1_0_0 returns STNumericLiteral
	 *     STEqualityExpression returns STNumericLiteral
	 *     STEqualityExpression.STBinaryExpression_1_0_0 returns STNumericLiteral
	 *     STComparisonExpression returns STNumericLiteral
	 *     STComparisonExpression.STBinaryExpression_1_0_0 returns STNumericLiteral
	 *     STAddSubExpression returns STNumericLiteral
	 *     STAddSubExpression.STBinaryExpression_1_0_0 returns STNumericLiteral
	 *     STMulDivModExpression returns STNumericLiteral
	 *     STMulDivModExpression.STBinaryExpression_1_0_0 returns STNumericLiteral
	 *     STPowerExpression returns STNumericLiteral
	 *     STPowerExpression.STBinaryExpression_1_0_0 returns STNumericLiteral
	 *     STSignumExpression returns STNumericLiteral
	 *     STSelectionExpression returns STNumericLiteral
	 *     STSelectionExpression.STMemberSelection_1_0 returns STNumericLiteral
	 *     STAtomicExpression returns STNumericLiteral
	 *     STLiteralExpressions returns STNumericLiteral
	 *     STNumericLiteral returns STNumericLiteral
	 *
	 * Constraint:
	 *     (type=STNumericLiteralType? (value=BoolLiteral | value=Number | value=NON_DECIMAL))
	 */
	protected void sequence_STNumericLiteral(ISerializationContext context, STNumericLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STRepeatStatement
	 *     STRepeatStatement returns STRepeatStatement
	 *
	 * Constraint:
	 *     (statements+=STStatement* condition=STExpression)
	 */
	protected void sequence_STRepeatStatement(ISerializationContext context, STRepeatStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STMemberSelection
	 *     STExpression returns STMemberSelection
	 *     STSubrangeExpression returns STMemberSelection
	 *     STSubrangeExpression.STBinaryExpression_1_0_0 returns STMemberSelection
	 *     STOrExpression returns STMemberSelection
	 *     STOrExpression.STBinaryExpression_1_0_0 returns STMemberSelection
	 *     STXorExpression returns STMemberSelection
	 *     STXorExpression.STBinaryExpression_1_0_0 returns STMemberSelection
	 *     STAndExpression returns STMemberSelection
	 *     STAndExpression.STBinaryExpression_1_0_0 returns STMemberSelection
	 *     STEqualityExpression returns STMemberSelection
	 *     STEqualityExpression.STBinaryExpression_1_0_0 returns STMemberSelection
	 *     STComparisonExpression returns STMemberSelection
	 *     STComparisonExpression.STBinaryExpression_1_0_0 returns STMemberSelection
	 *     STAddSubExpression returns STMemberSelection
	 *     STAddSubExpression.STBinaryExpression_1_0_0 returns STMemberSelection
	 *     STMulDivModExpression returns STMemberSelection
	 *     STMulDivModExpression.STBinaryExpression_1_0_0 returns STMemberSelection
	 *     STPowerExpression returns STMemberSelection
	 *     STPowerExpression.STBinaryExpression_1_0_0 returns STMemberSelection
	 *     STSignumExpression returns STMemberSelection
	 *     STSelectionExpression returns STMemberSelection
	 *     STSelectionExpression.STMemberSelection_1_0 returns STMemberSelection
	 *     STAtomicExpression returns STMemberSelection
	 *
	 * Constraint:
	 *     (
	 *         receiver=STSelectionExpression_STMemberSelection_1_0 
	 *         ((structAccess?='.' member=[VarDeclaration|ID]) | (arrayAccess?='[' index+=STExpression index+=STExpression*)) 
	 *         (poeInvocation?='(' (parameters+=STExpression parameters+=STExpression*)?)? 
	 *         bitaccessor=MultibitPartialAccess?
	 *     )
	 */
	protected void sequence_STSelectionExpression(ISerializationContext context, STMemberSelection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STUnaryExpression
	 *     STExpression returns STUnaryExpression
	 *     STSubrangeExpression returns STUnaryExpression
	 *     STSubrangeExpression.STBinaryExpression_1_0_0 returns STUnaryExpression
	 *     STOrExpression returns STUnaryExpression
	 *     STOrExpression.STBinaryExpression_1_0_0 returns STUnaryExpression
	 *     STXorExpression returns STUnaryExpression
	 *     STXorExpression.STBinaryExpression_1_0_0 returns STUnaryExpression
	 *     STAndExpression returns STUnaryExpression
	 *     STAndExpression.STBinaryExpression_1_0_0 returns STUnaryExpression
	 *     STEqualityExpression returns STUnaryExpression
	 *     STEqualityExpression.STBinaryExpression_1_0_0 returns STUnaryExpression
	 *     STComparisonExpression returns STUnaryExpression
	 *     STComparisonExpression.STBinaryExpression_1_0_0 returns STUnaryExpression
	 *     STAddSubExpression returns STUnaryExpression
	 *     STAddSubExpression.STBinaryExpression_1_0_0 returns STUnaryExpression
	 *     STMulDivModExpression returns STUnaryExpression
	 *     STMulDivModExpression.STBinaryExpression_1_0_0 returns STUnaryExpression
	 *     STPowerExpression returns STUnaryExpression
	 *     STPowerExpression.STBinaryExpression_1_0_0 returns STUnaryExpression
	 *     STSignumExpression returns STUnaryExpression
	 *     STSelectionExpression returns STUnaryExpression
	 *     STSelectionExpression.STMemberSelection_1_0 returns STUnaryExpression
	 *     STAtomicExpression returns STUnaryExpression
	 *
	 * Constraint:
	 *     (op=UnaryOperator expression=STSelectionExpression)
	 */
	protected void sequence_STSignumExpression(ISerializationContext context, STUnaryExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_UNARY_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_UNARY_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_UNARY_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_UNARY_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTSignumExpressionAccess().getOpUnaryOperatorEnumRuleCall_2_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getSTSignumExpressionAccess().getExpressionSTSelectionExpressionParserRuleCall_2_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STContinue
	 *
	 * Constraint:
	 *     {STContinue}
	 */
	protected void sequence_STStatement(ISerializationContext context, STContinue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STExit
	 *
	 * Constraint:
	 *     {STExit}
	 */
	protected void sequence_STStatement(ISerializationContext context, STExit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STNop
	 *
	 * Constraint:
	 *     {STNop}
	 */
	protected void sequence_STStatement(ISerializationContext context, STNop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STReturn
	 *
	 * Constraint:
	 *     {STReturn}
	 */
	protected void sequence_STStatement(ISerializationContext context, STReturn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STStringLiteral
	 *     STExpression returns STStringLiteral
	 *     STSubrangeExpression returns STStringLiteral
	 *     STSubrangeExpression.STBinaryExpression_1_0_0 returns STStringLiteral
	 *     STOrExpression returns STStringLiteral
	 *     STOrExpression.STBinaryExpression_1_0_0 returns STStringLiteral
	 *     STXorExpression returns STStringLiteral
	 *     STXorExpression.STBinaryExpression_1_0_0 returns STStringLiteral
	 *     STAndExpression returns STStringLiteral
	 *     STAndExpression.STBinaryExpression_1_0_0 returns STStringLiteral
	 *     STEqualityExpression returns STStringLiteral
	 *     STEqualityExpression.STBinaryExpression_1_0_0 returns STStringLiteral
	 *     STComparisonExpression returns STStringLiteral
	 *     STComparisonExpression.STBinaryExpression_1_0_0 returns STStringLiteral
	 *     STAddSubExpression returns STStringLiteral
	 *     STAddSubExpression.STBinaryExpression_1_0_0 returns STStringLiteral
	 *     STMulDivModExpression returns STStringLiteral
	 *     STMulDivModExpression.STBinaryExpression_1_0_0 returns STStringLiteral
	 *     STPowerExpression returns STStringLiteral
	 *     STPowerExpression.STBinaryExpression_1_0_0 returns STStringLiteral
	 *     STSignumExpression returns STStringLiteral
	 *     STSelectionExpression returns STStringLiteral
	 *     STSelectionExpression.STMemberSelection_1_0 returns STStringLiteral
	 *     STAtomicExpression returns STStringLiteral
	 *     STLiteralExpressions returns STStringLiteral
	 *     STStringLiteral returns STStringLiteral
	 *
	 * Constraint:
	 *     (type=STStringLiteralType? (value=STRING | value=WSTRING))
	 */
	protected void sequence_STStringLiteral(ISerializationContext context, STStringLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STTimeLiteral
	 *     STExpression returns STTimeLiteral
	 *     STSubrangeExpression returns STTimeLiteral
	 *     STSubrangeExpression.STBinaryExpression_1_0_0 returns STTimeLiteral
	 *     STOrExpression returns STTimeLiteral
	 *     STOrExpression.STBinaryExpression_1_0_0 returns STTimeLiteral
	 *     STXorExpression returns STTimeLiteral
	 *     STXorExpression.STBinaryExpression_1_0_0 returns STTimeLiteral
	 *     STAndExpression returns STTimeLiteral
	 *     STAndExpression.STBinaryExpression_1_0_0 returns STTimeLiteral
	 *     STEqualityExpression returns STTimeLiteral
	 *     STEqualityExpression.STBinaryExpression_1_0_0 returns STTimeLiteral
	 *     STComparisonExpression returns STTimeLiteral
	 *     STComparisonExpression.STBinaryExpression_1_0_0 returns STTimeLiteral
	 *     STAddSubExpression returns STTimeLiteral
	 *     STAddSubExpression.STBinaryExpression_1_0_0 returns STTimeLiteral
	 *     STMulDivModExpression returns STTimeLiteral
	 *     STMulDivModExpression.STBinaryExpression_1_0_0 returns STTimeLiteral
	 *     STPowerExpression returns STTimeLiteral
	 *     STPowerExpression.STBinaryExpression_1_0_0 returns STTimeLiteral
	 *     STSignumExpression returns STTimeLiteral
	 *     STSelectionExpression returns STTimeLiteral
	 *     STSelectionExpression.STMemberSelection_1_0 returns STTimeLiteral
	 *     STAtomicExpression returns STTimeLiteral
	 *     STLiteralExpressions returns STTimeLiteral
	 *     STTimeLiteral returns STTimeLiteral
	 *
	 * Constraint:
	 *     (type=STTimeLiteralType value=Time)
	 */
	protected void sequence_STTimeLiteral(ISerializationContext context, STTimeLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_TIME_LITERAL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_TIME_LITERAL__TYPE));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_TIME_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_TIME_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTTimeLiteralAccess().getTypeSTTimeLiteralTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getSTTimeLiteralAccess().getValueTimeParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STTimeOfDayLiteral
	 *     STExpression returns STTimeOfDayLiteral
	 *     STSubrangeExpression returns STTimeOfDayLiteral
	 *     STSubrangeExpression.STBinaryExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STOrExpression returns STTimeOfDayLiteral
	 *     STOrExpression.STBinaryExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STXorExpression returns STTimeOfDayLiteral
	 *     STXorExpression.STBinaryExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STAndExpression returns STTimeOfDayLiteral
	 *     STAndExpression.STBinaryExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STEqualityExpression returns STTimeOfDayLiteral
	 *     STEqualityExpression.STBinaryExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STComparisonExpression returns STTimeOfDayLiteral
	 *     STComparisonExpression.STBinaryExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STAddSubExpression returns STTimeOfDayLiteral
	 *     STAddSubExpression.STBinaryExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STMulDivModExpression returns STTimeOfDayLiteral
	 *     STMulDivModExpression.STBinaryExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STPowerExpression returns STTimeOfDayLiteral
	 *     STPowerExpression.STBinaryExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STSignumExpression returns STTimeOfDayLiteral
	 *     STSelectionExpression returns STTimeOfDayLiteral
	 *     STSelectionExpression.STMemberSelection_1_0 returns STTimeOfDayLiteral
	 *     STAtomicExpression returns STTimeOfDayLiteral
	 *     STLiteralExpressions returns STTimeOfDayLiteral
	 *     STTimeOfDayLiteral returns STTimeOfDayLiteral
	 *
	 * Constraint:
	 *     (type=STTimeOfDayLiteralType value=TimeOfDay)
	 */
	protected void sequence_STTimeOfDayLiteral(ISerializationContext context, STTimeOfDayLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_TIME_OF_DAY_LITERAL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_TIME_OF_DAY_LITERAL__TYPE));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_TIME_OF_DAY_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_TIME_OF_DAY_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTTimeOfDayLiteralAccess().getTypeSTTimeOfDayLiteralTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getSTTimeOfDayLiteralAccess().getValueTimeOfDayParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STWhileStatement
	 *     STWhileStatement returns STWhileStatement
	 *
	 * Constraint:
	 *     (condition=STExpression statements+=STStatement*)
	 */
	protected void sequence_STWhileStatement(ISerializationContext context, STWhileStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarDeclarationBlock returns VarDeclarationBlock
	 *
	 * Constraint:
	 *     (constant?='CONSTANT'? varDeclarations+=VarDeclaration*)
	 */
	protected void sequence_VarDeclarationBlock(ISerializationContext context, VarDeclarationBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarDeclaration returns VarDeclaration
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         locatedAt=[VarDeclaration|ID]? 
	 *         (array?='ARRAY' ((ranges+=STExpression ranges+=STExpression*) | (count+='*' count+='*'*)))? 
	 *         type=[LibraryElement|ID] 
	 *         maxLength=STExpression? 
	 *         defaultValue=InitializerExpression?
	 *     )
	 */
	protected void sequence_VarDeclaration(ISerializationContext context, VarDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarInputDeclarationBlock returns VarDeclarationBlock
	 *
	 * Constraint:
	 *     (constant?='CONSTANT'? varDeclarations+=VarDeclaration*)
	 */
	protected void sequence_VarInputDeclarationBlock(ISerializationContext context, VarDeclarationBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarOutputDeclarationBlock returns VarDeclarationBlock
	 *
	 * Constraint:
	 *     (constant?='CONSTANT'? varDeclarations+=VarDeclaration*)
	 */
	protected void sequence_VarOutputDeclarationBlock(ISerializationContext context, VarDeclarationBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarTempDeclarationBlock returns VarDeclarationBlock
	 *
	 * Constraint:
	 *     (constant?='CONSTANT'? varDeclarations+=VarDeclaration*)
	 */
	protected void sequence_VarTempDeclarationBlock(ISerializationContext context, VarDeclarationBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
