/*
 * generated by Xtext 2.25.0
 */
package org.eclipse.fordiac.ide.structuredtextcore.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.ArrayInitElement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.ArrayInitializerExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.BOOL_LITERAL;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.Code;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.DATE_AND_TIME_LITERAL;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.DATE_LITERAL;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.MultibitPartialAccess;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.NUMERIC_LITERAL;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STAddSubExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STAndExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STAssignmentStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STBoolLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCaseCases;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCaseStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STComparisonExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STContinue;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STCorePackage;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STDateAndTimeLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STDateLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STElseIfPart;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STElsePart;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STEqualityExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STExit;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STForStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STIfStatment;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STMemberSelection;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STMulDivModExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STNumericLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STOrExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STPowerExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STRING_LITERAL;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STRepeatStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STReturn;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STSignumExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STStatements;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STStringLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STSubrangeExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STSymbol;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STTimeLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STTimeOfDayLiteral;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STWhileStatement;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.STXorExpression;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.TIME_LITERAL;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.TIME_OF_DAY_LITERAL;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.VarDeclaration;
import org.eclipse.fordiac.ide.structuredtextcore.sTCore.VarDeclarationBlock;
import org.eclipse.fordiac.ide.structuredtextcore.services.STCoreGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class STCoreSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private STCoreGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == STCorePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case STCorePackage.ARRAY_INIT_ELEMENT:
				sequence_ArrayInitElement(context, (ArrayInitElement) semanticObject); 
				return; 
			case STCorePackage.ARRAY_INITIALIZER_EXPRESSION:
				sequence_ArrayInitializerExpression(context, (ArrayInitializerExpression) semanticObject); 
				return; 
			case STCorePackage.BOOL_LITERAL:
				sequence_BOOL_LITERAL(context, (BOOL_LITERAL) semanticObject); 
				return; 
			case STCorePackage.CODE:
				sequence_Code(context, (Code) semanticObject); 
				return; 
			case STCorePackage.DATE_AND_TIME_LITERAL:
				sequence_DATE_AND_TIME_LITERAL(context, (DATE_AND_TIME_LITERAL) semanticObject); 
				return; 
			case STCorePackage.DATE_LITERAL:
				sequence_DATE_LITERAL(context, (DATE_LITERAL) semanticObject); 
				return; 
			case STCorePackage.MULTIBIT_PARTIAL_ACCESS:
				sequence_MultibitPartialAccess(context, (MultibitPartialAccess) semanticObject); 
				return; 
			case STCorePackage.NUMERIC_LITERAL:
				sequence_NUMERIC_LITERAL(context, (NUMERIC_LITERAL) semanticObject); 
				return; 
			case STCorePackage.ST_ADD_SUB_EXPRESSION:
				sequence_STAddSubExpression(context, (STAddSubExpression) semanticObject); 
				return; 
			case STCorePackage.ST_AND_EXPRESSION:
				sequence_STAndExpression(context, (STAndExpression) semanticObject); 
				return; 
			case STCorePackage.ST_ASSIGNMENT_STATEMENT:
				sequence_STAssignmentStatement(context, (STAssignmentStatement) semanticObject); 
				return; 
			case STCorePackage.ST_BOOL_LITERAL:
				sequence_STLiteralExpressions(context, (STBoolLiteral) semanticObject); 
				return; 
			case STCorePackage.ST_CASE_CASES:
				sequence_STCaseCases(context, (STCaseCases) semanticObject); 
				return; 
			case STCorePackage.ST_CASE_STATEMENT:
				sequence_STCaseStatement(context, (STCaseStatement) semanticObject); 
				return; 
			case STCorePackage.ST_COMPARISON_EXPRESSION:
				sequence_STComparisonExpression(context, (STComparisonExpression) semanticObject); 
				return; 
			case STCorePackage.ST_CONTINUE:
				sequence_STStatement(context, (STContinue) semanticObject); 
				return; 
			case STCorePackage.ST_DATE_AND_TIME_LITERAL:
				sequence_STLiteralExpressions(context, (STDateAndTimeLiteral) semanticObject); 
				return; 
			case STCorePackage.ST_DATE_LITERAL:
				sequence_STLiteralExpressions(context, (STDateLiteral) semanticObject); 
				return; 
			case STCorePackage.ST_ELSE_IF_PART:
				sequence_STElseIfPart(context, (STElseIfPart) semanticObject); 
				return; 
			case STCorePackage.ST_ELSE_PART:
				sequence_STElsePart(context, (STElsePart) semanticObject); 
				return; 
			case STCorePackage.ST_EQUALITY_EXPRESSION:
				sequence_STEqualityExpression(context, (STEqualityExpression) semanticObject); 
				return; 
			case STCorePackage.ST_EXIT:
				sequence_STStatement(context, (STExit) semanticObject); 
				return; 
			case STCorePackage.ST_FOR_STATEMENT:
				sequence_STForStatement(context, (STForStatement) semanticObject); 
				return; 
			case STCorePackage.ST_IF_STATMENT:
				sequence_STIfStatment(context, (STIfStatment) semanticObject); 
				return; 
			case STCorePackage.ST_MEMBER_SELECTION:
				sequence_STSelectionExpression(context, (STMemberSelection) semanticObject); 
				return; 
			case STCorePackage.ST_MUL_DIV_MOD_EXPRESSION:
				sequence_STMulDivModExpression(context, (STMulDivModExpression) semanticObject); 
				return; 
			case STCorePackage.ST_NUMERIC_LITERAL:
				sequence_STLiteralExpressions(context, (STNumericLiteral) semanticObject); 
				return; 
			case STCorePackage.ST_OR_EXPRESSION:
				sequence_STOrExpression(context, (STOrExpression) semanticObject); 
				return; 
			case STCorePackage.ST_POWER_EXPRESSION:
				sequence_STPowerExpression(context, (STPowerExpression) semanticObject); 
				return; 
			case STCorePackage.STRING_LITERAL:
				sequence_STRING_LITERAL(context, (STRING_LITERAL) semanticObject); 
				return; 
			case STCorePackage.ST_REPEAT_STATEMENT:
				sequence_STRepeatStatement(context, (STRepeatStatement) semanticObject); 
				return; 
			case STCorePackage.ST_RETURN:
				sequence_STStatement(context, (STReturn) semanticObject); 
				return; 
			case STCorePackage.ST_SIGNUM_EXPRESSION:
				sequence_STSignumExpression(context, (STSignumExpression) semanticObject); 
				return; 
			case STCorePackage.ST_STATEMENTS:
				sequence_STStatement(context, (STStatements) semanticObject); 
				return; 
			case STCorePackage.ST_STRING_LITERAL:
				sequence_STLiteralExpressions(context, (STStringLiteral) semanticObject); 
				return; 
			case STCorePackage.ST_SUBRANGE_EXPRESSION:
				sequence_STSubrangeExpression(context, (STSubrangeExpression) semanticObject); 
				return; 
			case STCorePackage.ST_SYMBOL:
				sequence_STAtomicExpression(context, (STSymbol) semanticObject); 
				return; 
			case STCorePackage.ST_TIME_LITERAL:
				sequence_STLiteralExpressions(context, (STTimeLiteral) semanticObject); 
				return; 
			case STCorePackage.ST_TIME_OF_DAY_LITERAL:
				sequence_STLiteralExpressions(context, (STTimeOfDayLiteral) semanticObject); 
				return; 
			case STCorePackage.ST_WHILE_STATEMENT:
				sequence_STWhileStatement(context, (STWhileStatement) semanticObject); 
				return; 
			case STCorePackage.ST_XOR_EXPRESSION:
				sequence_STXorExpression(context, (STXorExpression) semanticObject); 
				return; 
			case STCorePackage.TIME_LITERAL:
				sequence_TIME_LITERAL(context, (TIME_LITERAL) semanticObject); 
				return; 
			case STCorePackage.TIME_OF_DAY_LITERAL:
				sequence_TIME_OF_DAY_LITERAL(context, (TIME_OF_DAY_LITERAL) semanticObject); 
				return; 
			case STCorePackage.VAR_DECLARATION:
				sequence_VarDeclaration(context, (VarDeclaration) semanticObject); 
				return; 
			case STCorePackage.VAR_DECLARATION_BLOCK:
				if (rule == grammarAccess.getVarDeclarationBlockRule()) {
					sequence_VarDeclarationBlock(context, (VarDeclarationBlock) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVarInputDeclarationBlockRule()) {
					sequence_VarInputDeclarationBlock(context, (VarDeclarationBlock) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVarOutputDeclarationBlockRule()) {
					sequence_VarOutputDeclarationBlock(context, (VarDeclarationBlock) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVarTempDeclarationBlockRule()) {
					sequence_VarTempDeclarationBlock(context, (VarDeclarationBlock) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ArrayInitElement returns ArrayInitElement
	 *
	 * Constraint:
	 *     (indexOrInitExpression=STExpression initExpression=STExpression?)
	 */
	protected void sequence_ArrayInitElement(ISerializationContext context, ArrayInitElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns ArrayInitializerExpression
	 *     ArrayInitializerExpression returns ArrayInitializerExpression
	 *
	 * Constraint:
	 *     (values+=ArrayInitElement values+=ArrayInitElement*)
	 */
	protected void sequence_ArrayInitializerExpression(ISerializationContext context, ArrayInitializerExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BOOL_LITERAL returns BOOL_LITERAL
	 *
	 * Constraint:
	 *     (not='NOT'? keyWordValue=BOOL_VALUES)
	 */
	protected void sequence_BOOL_LITERAL(ISerializationContext context, BOOL_LITERAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Code returns Code
	 *
	 * Constraint:
	 *     statements+=STStatement+
	 */
	protected void sequence_Code(ISerializationContext context, Code semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DATE_AND_TIME_LITERAL returns DATE_AND_TIME_LITERAL
	 *
	 * Constraint:
	 *     ((keyword='DATE_AND_TIME#' | keyword='LDATE_AND_TIME#' | keyword='DT#' | keyword='LDT#') dateValue=DATE timeOfDayValue=TIME_OF_DAY)
	 */
	protected void sequence_DATE_AND_TIME_LITERAL(ISerializationContext context, DATE_AND_TIME_LITERAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DATE_LITERAL returns DATE_LITERAL
	 *
	 * Constraint:
	 *     ((keyword='DATE#' | keyword='LDATE#' | keyword='D#' | keyword='LD#') value=DATE)
	 */
	protected void sequence_DATE_LITERAL(ISerializationContext context, DATE_LITERAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultibitPartialAccess returns MultibitPartialAccess
	 *
	 * Constraint:
	 *     (accessSpecifier=MultiBitAccessSpecifier index=INT)
	 */
	protected void sequence_MultibitPartialAccess(ISerializationContext context, MultibitPartialAccess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.MULTIBIT_PARTIAL_ACCESS__ACCESS_SPECIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.MULTIBIT_PARTIAL_ACCESS__ACCESS_SPECIFIER));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.MULTIBIT_PARTIAL_ACCESS__INDEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.MULTIBIT_PARTIAL_ACCESS__INDEX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultibitPartialAccessAccess().getAccessSpecifierMultiBitAccessSpecifierEnumRuleCall_0_0(), semanticObject.getAccessSpecifier());
		feeder.accept(grammarAccess.getMultibitPartialAccessAccess().getIndexINTTerminalRuleCall_1_0(), semanticObject.getIndex());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NUMERIC_LITERAL returns NUMERIC_LITERAL
	 *
	 * Constraint:
	 *     (
	 *         not='NOT'? 
	 *         (
	 *             keyword='BYTE#' | 
	 *             keyword='WORD#' | 
	 *             keyword='DWORD#' | 
	 *             keyword='LWORD#' | 
	 *             keyword='SINT#' | 
	 *             keyword='INT#' | 
	 *             keyword='DINT#' | 
	 *             keyword='LINT#' | 
	 *             keyword='USINT#' | 
	 *             keyword='UINT#' | 
	 *             keyword='UDINT#' | 
	 *             keyword='ULINT#' | 
	 *             keyword='REAL#' | 
	 *             keyword='LREAL#'
	 *         )? 
	 *         (intValue=INTEGER | realValue=REAL | hexValue=NON_DECIMAL)
	 *     )
	 */
	protected void sequence_NUMERIC_LITERAL(ISerializationContext context, NUMERIC_LITERAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STAddSubExpression
	 *     STExpression returns STAddSubExpression
	 *     STSubrangeExpression returns STAddSubExpression
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STAddSubExpression
	 *     STOrExpression returns STAddSubExpression
	 *     STOrExpression.STOrExpression_1_0_0 returns STAddSubExpression
	 *     STXorExpression returns STAddSubExpression
	 *     STXorExpression.STXorExpression_1_0_0 returns STAddSubExpression
	 *     STAndExpression returns STAddSubExpression
	 *     STAndExpression.STAndExpression_1_0_0 returns STAddSubExpression
	 *     STEqualityExpression returns STAddSubExpression
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STAddSubExpression
	 *     STComparisonExpression returns STAddSubExpression
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STAddSubExpression
	 *     STAddSubExpression returns STAddSubExpression
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STAddSubExpression
	 *     STMulDivModExpression returns STAddSubExpression
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STAddSubExpression
	 *     STPowerExpression returns STAddSubExpression
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STAddSubExpression
	 *     STSignumExpression returns STAddSubExpression
	 *     STSelectionExpression returns STAddSubExpression
	 *     STSelectionExpression.STMemberSelection_1_0 returns STAddSubExpression
	 *     STAtomicExpression returns STAddSubExpression
	 *
	 * Constraint:
	 *     (left=STAddSubExpression_STAddSubExpression_1_0_0 (op='+' | op='-') right=STMulDivModExpression)
	 */
	protected void sequence_STAddSubExpression(ISerializationContext context, STAddSubExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STAndExpression
	 *     STExpression returns STAndExpression
	 *     STSubrangeExpression returns STAndExpression
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STAndExpression
	 *     STOrExpression returns STAndExpression
	 *     STOrExpression.STOrExpression_1_0_0 returns STAndExpression
	 *     STXorExpression returns STAndExpression
	 *     STXorExpression.STXorExpression_1_0_0 returns STAndExpression
	 *     STAndExpression returns STAndExpression
	 *     STAndExpression.STAndExpression_1_0_0 returns STAndExpression
	 *     STEqualityExpression returns STAndExpression
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STAndExpression
	 *     STComparisonExpression returns STAndExpression
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STAndExpression
	 *     STAddSubExpression returns STAndExpression
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STAndExpression
	 *     STMulDivModExpression returns STAndExpression
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STAndExpression
	 *     STPowerExpression returns STAndExpression
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STAndExpression
	 *     STSignumExpression returns STAndExpression
	 *     STSelectionExpression returns STAndExpression
	 *     STSelectionExpression.STMemberSelection_1_0 returns STAndExpression
	 *     STAtomicExpression returns STAndExpression
	 *
	 * Constraint:
	 *     (left=STAndExpression_STAndExpression_1_0_0 (op='&' | op='AND') right=STEqualityExpression)
	 */
	protected void sequence_STAndExpression(ISerializationContext context, STAndExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STAssignmentStatement
	 *     STAssignmentStatement returns STAssignmentStatement
	 *
	 * Constraint:
	 *     (lhs=[VarDeclaration|ID] (op=':=' | op='=>') rhs=STExpression)
	 */
	protected void sequence_STAssignmentStatement(ISerializationContext context, STAssignmentStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STSymbol
	 *     STExpression returns STSymbol
	 *     STSubrangeExpression returns STSymbol
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STSymbol
	 *     STOrExpression returns STSymbol
	 *     STOrExpression.STOrExpression_1_0_0 returns STSymbol
	 *     STXorExpression returns STSymbol
	 *     STXorExpression.STXorExpression_1_0_0 returns STSymbol
	 *     STAndExpression returns STSymbol
	 *     STAndExpression.STAndExpression_1_0_0 returns STSymbol
	 *     STEqualityExpression returns STSymbol
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STSymbol
	 *     STComparisonExpression returns STSymbol
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STSymbol
	 *     STAddSubExpression returns STSymbol
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STSymbol
	 *     STMulDivModExpression returns STSymbol
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STSymbol
	 *     STPowerExpression returns STSymbol
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STSymbol
	 *     STSignumExpression returns STSymbol
	 *     STSelectionExpression returns STSymbol
	 *     STSelectionExpression.STMemberSelection_1_0 returns STSymbol
	 *     STAtomicExpression returns STSymbol
	 *
	 * Constraint:
	 *     (
	 *         type=[DataType|ID]? 
	 *         symbol=[VarDeclaration|ID] 
	 *         bitaccessor=MultibitPartialAccess? 
	 *         (poeInvocation?='(' (parameters+=STExpression parameters+=STExpression*)?)?
	 *     )
	 */
	protected void sequence_STAtomicExpression(ISerializationContext context, STSymbol semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STCaseCases returns STCaseCases
	 *
	 * Constraint:
	 *     (conditions+=STExpression conditions+=STExpression* statements+=STStatement*)
	 */
	protected void sequence_STCaseCases(ISerializationContext context, STCaseCases semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STCaseStatement
	 *     STBranchStatements returns STCaseStatement
	 *     STCaseStatement returns STCaseStatement
	 *
	 * Constraint:
	 *     (selector=STExpression cases+=STCaseCases+ else=STElsePart?)
	 */
	protected void sequence_STCaseStatement(ISerializationContext context, STCaseStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STComparisonExpression
	 *     STExpression returns STComparisonExpression
	 *     STSubrangeExpression returns STComparisonExpression
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STComparisonExpression
	 *     STOrExpression returns STComparisonExpression
	 *     STOrExpression.STOrExpression_1_0_0 returns STComparisonExpression
	 *     STXorExpression returns STComparisonExpression
	 *     STXorExpression.STXorExpression_1_0_0 returns STComparisonExpression
	 *     STAndExpression returns STComparisonExpression
	 *     STAndExpression.STAndExpression_1_0_0 returns STComparisonExpression
	 *     STEqualityExpression returns STComparisonExpression
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STComparisonExpression
	 *     STComparisonExpression returns STComparisonExpression
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STComparisonExpression
	 *     STAddSubExpression returns STComparisonExpression
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STComparisonExpression
	 *     STMulDivModExpression returns STComparisonExpression
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STComparisonExpression
	 *     STPowerExpression returns STComparisonExpression
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STComparisonExpression
	 *     STSignumExpression returns STComparisonExpression
	 *     STSelectionExpression returns STComparisonExpression
	 *     STSelectionExpression.STMemberSelection_1_0 returns STComparisonExpression
	 *     STAtomicExpression returns STComparisonExpression
	 *
	 * Constraint:
	 *     (left=STComparisonExpression_STComparisonExpression_1_0_0 (op='<' | op='>' | op='<=' | op='>=') right=STAddSubExpression)
	 */
	protected void sequence_STComparisonExpression(ISerializationContext context, STComparisonExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STElseIfPart returns STElseIfPart
	 *
	 * Constraint:
	 *     (condition=STExpression statements+=STStatement*)
	 */
	protected void sequence_STElseIfPart(ISerializationContext context, STElseIfPart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STElsePart returns STElsePart
	 *
	 * Constraint:
	 *     statements+=STStatement*
	 */
	protected void sequence_STElsePart(ISerializationContext context, STElsePart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STEqualityExpression
	 *     STExpression returns STEqualityExpression
	 *     STSubrangeExpression returns STEqualityExpression
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STEqualityExpression
	 *     STOrExpression returns STEqualityExpression
	 *     STOrExpression.STOrExpression_1_0_0 returns STEqualityExpression
	 *     STXorExpression returns STEqualityExpression
	 *     STXorExpression.STXorExpression_1_0_0 returns STEqualityExpression
	 *     STAndExpression returns STEqualityExpression
	 *     STAndExpression.STAndExpression_1_0_0 returns STEqualityExpression
	 *     STEqualityExpression returns STEqualityExpression
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STEqualityExpression
	 *     STComparisonExpression returns STEqualityExpression
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STEqualityExpression
	 *     STAddSubExpression returns STEqualityExpression
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STEqualityExpression
	 *     STMulDivModExpression returns STEqualityExpression
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STEqualityExpression
	 *     STPowerExpression returns STEqualityExpression
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STEqualityExpression
	 *     STSignumExpression returns STEqualityExpression
	 *     STSelectionExpression returns STEqualityExpression
	 *     STSelectionExpression.STMemberSelection_1_0 returns STEqualityExpression
	 *     STAtomicExpression returns STEqualityExpression
	 *
	 * Constraint:
	 *     (left=STEqualityExpression_STEqualityExpression_1_0_0 (op='=' | op='<>') right=STComparisonExpression)
	 */
	protected void sequence_STEqualityExpression(ISerializationContext context, STEqualityExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STForStatement
	 *     STLoopStatements returns STForStatement
	 *     STForStatement returns STForStatement
	 *
	 * Constraint:
	 *     (for=STExpression to=STExpression by=STExpression? statements+=STStatement*)
	 */
	protected void sequence_STForStatement(ISerializationContext context, STForStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STIfStatment
	 *     STBranchStatements returns STIfStatment
	 *     STIfStatment returns STIfStatment
	 *
	 * Constraint:
	 *     (condition=STExpression statements+=STStatement* elseifs+=STElseIfPart* else=STElsePart?)
	 */
	protected void sequence_STIfStatment(ISerializationContext context, STIfStatment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STBoolLiteral
	 *     STExpression returns STBoolLiteral
	 *     STSubrangeExpression returns STBoolLiteral
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STBoolLiteral
	 *     STOrExpression returns STBoolLiteral
	 *     STOrExpression.STOrExpression_1_0_0 returns STBoolLiteral
	 *     STXorExpression returns STBoolLiteral
	 *     STXorExpression.STXorExpression_1_0_0 returns STBoolLiteral
	 *     STAndExpression returns STBoolLiteral
	 *     STAndExpression.STAndExpression_1_0_0 returns STBoolLiteral
	 *     STEqualityExpression returns STBoolLiteral
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STBoolLiteral
	 *     STComparisonExpression returns STBoolLiteral
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STBoolLiteral
	 *     STAddSubExpression returns STBoolLiteral
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STBoolLiteral
	 *     STMulDivModExpression returns STBoolLiteral
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STBoolLiteral
	 *     STPowerExpression returns STBoolLiteral
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STBoolLiteral
	 *     STSignumExpression returns STBoolLiteral
	 *     STSelectionExpression returns STBoolLiteral
	 *     STSelectionExpression.STMemberSelection_1_0 returns STBoolLiteral
	 *     STAtomicExpression returns STBoolLiteral
	 *     STLiteralExpressions returns STBoolLiteral
	 *
	 * Constraint:
	 *     boolLiteral=BOOL_LITERAL
	 */
	protected void sequence_STLiteralExpressions(ISerializationContext context, STBoolLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_BOOL_LITERAL__BOOL_LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_BOOL_LITERAL__BOOL_LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTLiteralExpressionsAccess().getBoolLiteralBOOL_LITERALParserRuleCall_0_1_0(), semanticObject.getBoolLiteral());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STDateAndTimeLiteral
	 *     STExpression returns STDateAndTimeLiteral
	 *     STSubrangeExpression returns STDateAndTimeLiteral
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STOrExpression returns STDateAndTimeLiteral
	 *     STOrExpression.STOrExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STXorExpression returns STDateAndTimeLiteral
	 *     STXorExpression.STXorExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STAndExpression returns STDateAndTimeLiteral
	 *     STAndExpression.STAndExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STEqualityExpression returns STDateAndTimeLiteral
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STComparisonExpression returns STDateAndTimeLiteral
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STAddSubExpression returns STDateAndTimeLiteral
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STMulDivModExpression returns STDateAndTimeLiteral
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STPowerExpression returns STDateAndTimeLiteral
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STDateAndTimeLiteral
	 *     STSignumExpression returns STDateAndTimeLiteral
	 *     STSelectionExpression returns STDateAndTimeLiteral
	 *     STSelectionExpression.STMemberSelection_1_0 returns STDateAndTimeLiteral
	 *     STAtomicExpression returns STDateAndTimeLiteral
	 *     STLiteralExpressions returns STDateAndTimeLiteral
	 *
	 * Constraint:
	 *     timeLiteral=DATE_AND_TIME_LITERAL
	 */
	protected void sequence_STLiteralExpressions(ISerializationContext context, STDateAndTimeLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_DATE_AND_TIME_LITERAL__TIME_LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_DATE_AND_TIME_LITERAL__TIME_LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTLiteralExpressionsAccess().getTimeLiteralDATE_AND_TIME_LITERALParserRuleCall_5_1_0(), semanticObject.getTimeLiteral());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STDateLiteral
	 *     STExpression returns STDateLiteral
	 *     STSubrangeExpression returns STDateLiteral
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STDateLiteral
	 *     STOrExpression returns STDateLiteral
	 *     STOrExpression.STOrExpression_1_0_0 returns STDateLiteral
	 *     STXorExpression returns STDateLiteral
	 *     STXorExpression.STXorExpression_1_0_0 returns STDateLiteral
	 *     STAndExpression returns STDateLiteral
	 *     STAndExpression.STAndExpression_1_0_0 returns STDateLiteral
	 *     STEqualityExpression returns STDateLiteral
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STDateLiteral
	 *     STComparisonExpression returns STDateLiteral
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STDateLiteral
	 *     STAddSubExpression returns STDateLiteral
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STDateLiteral
	 *     STMulDivModExpression returns STDateLiteral
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STDateLiteral
	 *     STPowerExpression returns STDateLiteral
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STDateLiteral
	 *     STSignumExpression returns STDateLiteral
	 *     STSelectionExpression returns STDateLiteral
	 *     STSelectionExpression.STMemberSelection_1_0 returns STDateLiteral
	 *     STAtomicExpression returns STDateLiteral
	 *     STLiteralExpressions returns STDateLiteral
	 *
	 * Constraint:
	 *     dateLiteral=DATE_LITERAL
	 */
	protected void sequence_STLiteralExpressions(ISerializationContext context, STDateLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_DATE_LITERAL__DATE_LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_DATE_LITERAL__DATE_LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTLiteralExpressionsAccess().getDateLiteralDATE_LITERALParserRuleCall_2_1_0(), semanticObject.getDateLiteral());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STNumericLiteral
	 *     STExpression returns STNumericLiteral
	 *     STSubrangeExpression returns STNumericLiteral
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STNumericLiteral
	 *     STOrExpression returns STNumericLiteral
	 *     STOrExpression.STOrExpression_1_0_0 returns STNumericLiteral
	 *     STXorExpression returns STNumericLiteral
	 *     STXorExpression.STXorExpression_1_0_0 returns STNumericLiteral
	 *     STAndExpression returns STNumericLiteral
	 *     STAndExpression.STAndExpression_1_0_0 returns STNumericLiteral
	 *     STEqualityExpression returns STNumericLiteral
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STNumericLiteral
	 *     STComparisonExpression returns STNumericLiteral
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STNumericLiteral
	 *     STAddSubExpression returns STNumericLiteral
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STNumericLiteral
	 *     STMulDivModExpression returns STNumericLiteral
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STNumericLiteral
	 *     STPowerExpression returns STNumericLiteral
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STNumericLiteral
	 *     STSignumExpression returns STNumericLiteral
	 *     STSelectionExpression returns STNumericLiteral
	 *     STSelectionExpression.STMemberSelection_1_0 returns STNumericLiteral
	 *     STAtomicExpression returns STNumericLiteral
	 *     STLiteralExpressions returns STNumericLiteral
	 *
	 * Constraint:
	 *     numericLiteral=NUMERIC_LITERAL
	 */
	protected void sequence_STLiteralExpressions(ISerializationContext context, STNumericLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_NUMERIC_LITERAL__NUMERIC_LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_NUMERIC_LITERAL__NUMERIC_LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTLiteralExpressionsAccess().getNumericLiteralNUMERIC_LITERALParserRuleCall_1_1_0(), semanticObject.getNumericLiteral());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STStringLiteral
	 *     STExpression returns STStringLiteral
	 *     STSubrangeExpression returns STStringLiteral
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STStringLiteral
	 *     STOrExpression returns STStringLiteral
	 *     STOrExpression.STOrExpression_1_0_0 returns STStringLiteral
	 *     STXorExpression returns STStringLiteral
	 *     STXorExpression.STXorExpression_1_0_0 returns STStringLiteral
	 *     STAndExpression returns STStringLiteral
	 *     STAndExpression.STAndExpression_1_0_0 returns STStringLiteral
	 *     STEqualityExpression returns STStringLiteral
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STStringLiteral
	 *     STComparisonExpression returns STStringLiteral
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STStringLiteral
	 *     STAddSubExpression returns STStringLiteral
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STStringLiteral
	 *     STMulDivModExpression returns STStringLiteral
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STStringLiteral
	 *     STPowerExpression returns STStringLiteral
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STStringLiteral
	 *     STSignumExpression returns STStringLiteral
	 *     STSelectionExpression returns STStringLiteral
	 *     STSelectionExpression.STMemberSelection_1_0 returns STStringLiteral
	 *     STAtomicExpression returns STStringLiteral
	 *     STLiteralExpressions returns STStringLiteral
	 *
	 * Constraint:
	 *     stringLiteral=STRING_LITERAL
	 */
	protected void sequence_STLiteralExpressions(ISerializationContext context, STStringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_STRING_LITERAL__STRING_LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_STRING_LITERAL__STRING_LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTLiteralExpressionsAccess().getStringLiteralSTRING_LITERALParserRuleCall_6_1_0(), semanticObject.getStringLiteral());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STTimeLiteral
	 *     STExpression returns STTimeLiteral
	 *     STSubrangeExpression returns STTimeLiteral
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STTimeLiteral
	 *     STOrExpression returns STTimeLiteral
	 *     STOrExpression.STOrExpression_1_0_0 returns STTimeLiteral
	 *     STXorExpression returns STTimeLiteral
	 *     STXorExpression.STXorExpression_1_0_0 returns STTimeLiteral
	 *     STAndExpression returns STTimeLiteral
	 *     STAndExpression.STAndExpression_1_0_0 returns STTimeLiteral
	 *     STEqualityExpression returns STTimeLiteral
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STTimeLiteral
	 *     STComparisonExpression returns STTimeLiteral
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STTimeLiteral
	 *     STAddSubExpression returns STTimeLiteral
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STTimeLiteral
	 *     STMulDivModExpression returns STTimeLiteral
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STTimeLiteral
	 *     STPowerExpression returns STTimeLiteral
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STTimeLiteral
	 *     STSignumExpression returns STTimeLiteral
	 *     STSelectionExpression returns STTimeLiteral
	 *     STSelectionExpression.STMemberSelection_1_0 returns STTimeLiteral
	 *     STAtomicExpression returns STTimeLiteral
	 *     STLiteralExpressions returns STTimeLiteral
	 *
	 * Constraint:
	 *     timeLiteral=TIME_LITERAL
	 */
	protected void sequence_STLiteralExpressions(ISerializationContext context, STTimeLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_TIME_LITERAL__TIME_LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_TIME_LITERAL__TIME_LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTLiteralExpressionsAccess().getTimeLiteralTIME_LITERALParserRuleCall_3_1_0(), semanticObject.getTimeLiteral());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STTimeOfDayLiteral
	 *     STExpression returns STTimeOfDayLiteral
	 *     STSubrangeExpression returns STTimeOfDayLiteral
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STOrExpression returns STTimeOfDayLiteral
	 *     STOrExpression.STOrExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STXorExpression returns STTimeOfDayLiteral
	 *     STXorExpression.STXorExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STAndExpression returns STTimeOfDayLiteral
	 *     STAndExpression.STAndExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STEqualityExpression returns STTimeOfDayLiteral
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STComparisonExpression returns STTimeOfDayLiteral
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STAddSubExpression returns STTimeOfDayLiteral
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STMulDivModExpression returns STTimeOfDayLiteral
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STPowerExpression returns STTimeOfDayLiteral
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STTimeOfDayLiteral
	 *     STSignumExpression returns STTimeOfDayLiteral
	 *     STSelectionExpression returns STTimeOfDayLiteral
	 *     STSelectionExpression.STMemberSelection_1_0 returns STTimeOfDayLiteral
	 *     STAtomicExpression returns STTimeOfDayLiteral
	 *     STLiteralExpressions returns STTimeOfDayLiteral
	 *
	 * Constraint:
	 *     timeOfDayLiteral=TIME_OF_DAY_LITERAL
	 */
	protected void sequence_STLiteralExpressions(ISerializationContext context, STTimeOfDayLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_TIME_OF_DAY_LITERAL__TIME_OF_DAY_LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_TIME_OF_DAY_LITERAL__TIME_OF_DAY_LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTLiteralExpressionsAccess().getTimeOfDayLiteralTIME_OF_DAY_LITERALParserRuleCall_4_1_0(), semanticObject.getTimeOfDayLiteral());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STMulDivModExpression
	 *     STExpression returns STMulDivModExpression
	 *     STSubrangeExpression returns STMulDivModExpression
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STMulDivModExpression
	 *     STOrExpression returns STMulDivModExpression
	 *     STOrExpression.STOrExpression_1_0_0 returns STMulDivModExpression
	 *     STXorExpression returns STMulDivModExpression
	 *     STXorExpression.STXorExpression_1_0_0 returns STMulDivModExpression
	 *     STAndExpression returns STMulDivModExpression
	 *     STAndExpression.STAndExpression_1_0_0 returns STMulDivModExpression
	 *     STEqualityExpression returns STMulDivModExpression
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STMulDivModExpression
	 *     STComparisonExpression returns STMulDivModExpression
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STMulDivModExpression
	 *     STAddSubExpression returns STMulDivModExpression
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STMulDivModExpression
	 *     STMulDivModExpression returns STMulDivModExpression
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STMulDivModExpression
	 *     STPowerExpression returns STMulDivModExpression
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STMulDivModExpression
	 *     STSignumExpression returns STMulDivModExpression
	 *     STSelectionExpression returns STMulDivModExpression
	 *     STSelectionExpression.STMemberSelection_1_0 returns STMulDivModExpression
	 *     STAtomicExpression returns STMulDivModExpression
	 *
	 * Constraint:
	 *     (left=STMulDivModExpression_STMulDivModExpression_1_0_0 (op='*' | op='/' | op='MOD') right=STPowerExpression)
	 */
	protected void sequence_STMulDivModExpression(ISerializationContext context, STMulDivModExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STOrExpression
	 *     STExpression returns STOrExpression
	 *     STSubrangeExpression returns STOrExpression
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STOrExpression
	 *     STOrExpression returns STOrExpression
	 *     STOrExpression.STOrExpression_1_0_0 returns STOrExpression
	 *     STXorExpression returns STOrExpression
	 *     STXorExpression.STXorExpression_1_0_0 returns STOrExpression
	 *     STAndExpression returns STOrExpression
	 *     STAndExpression.STAndExpression_1_0_0 returns STOrExpression
	 *     STEqualityExpression returns STOrExpression
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STOrExpression
	 *     STComparisonExpression returns STOrExpression
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STOrExpression
	 *     STAddSubExpression returns STOrExpression
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STOrExpression
	 *     STMulDivModExpression returns STOrExpression
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STOrExpression
	 *     STPowerExpression returns STOrExpression
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STOrExpression
	 *     STSignumExpression returns STOrExpression
	 *     STSelectionExpression returns STOrExpression
	 *     STSelectionExpression.STMemberSelection_1_0 returns STOrExpression
	 *     STAtomicExpression returns STOrExpression
	 *
	 * Constraint:
	 *     (left=STOrExpression_STOrExpression_1_0_0 op='OR' right=STXorExpression)
	 */
	protected void sequence_STOrExpression(ISerializationContext context, STOrExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_OR_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_OR_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_OR_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_OR_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_OR_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_OR_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTOrExpressionAccess().getSTOrExpressionLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSTOrExpressionAccess().getOpORKeyword_1_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getSTOrExpressionAccess().getRightSTXorExpressionParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STPowerExpression
	 *     STExpression returns STPowerExpression
	 *     STSubrangeExpression returns STPowerExpression
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STPowerExpression
	 *     STOrExpression returns STPowerExpression
	 *     STOrExpression.STOrExpression_1_0_0 returns STPowerExpression
	 *     STXorExpression returns STPowerExpression
	 *     STXorExpression.STXorExpression_1_0_0 returns STPowerExpression
	 *     STAndExpression returns STPowerExpression
	 *     STAndExpression.STAndExpression_1_0_0 returns STPowerExpression
	 *     STEqualityExpression returns STPowerExpression
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STPowerExpression
	 *     STComparisonExpression returns STPowerExpression
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STPowerExpression
	 *     STAddSubExpression returns STPowerExpression
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STPowerExpression
	 *     STMulDivModExpression returns STPowerExpression
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STPowerExpression
	 *     STPowerExpression returns STPowerExpression
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STPowerExpression
	 *     STSignumExpression returns STPowerExpression
	 *     STSelectionExpression returns STPowerExpression
	 *     STSelectionExpression.STMemberSelection_1_0 returns STPowerExpression
	 *     STAtomicExpression returns STPowerExpression
	 *
	 * Constraint:
	 *     (left=STPowerExpression_STPowerExpression_1_0_0 op='**' right=STSignumExpression)
	 */
	protected void sequence_STPowerExpression(ISerializationContext context, STPowerExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_POWER_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_POWER_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_POWER_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_POWER_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_POWER_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_POWER_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTPowerExpressionAccess().getSTPowerExpressionLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSTPowerExpressionAccess().getOpAsteriskAsteriskKeyword_1_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getSTPowerExpressionAccess().getRightSTSignumExpressionParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     STRING_LITERAL returns STRING_LITERAL
	 *
	 * Constraint:
	 *     (keyword='STRING#'? value=STRING)
	 */
	protected void sequence_STRING_LITERAL(ISerializationContext context, STRING_LITERAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STRepeatStatement
	 *     STLoopStatements returns STRepeatStatement
	 *     STRepeatStatement returns STRepeatStatement
	 *
	 * Constraint:
	 *     (statements+=STStatement* condition=STExpression)
	 */
	protected void sequence_STRepeatStatement(ISerializationContext context, STRepeatStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STMemberSelection
	 *     STExpression returns STMemberSelection
	 *     STSubrangeExpression returns STMemberSelection
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STMemberSelection
	 *     STOrExpression returns STMemberSelection
	 *     STOrExpression.STOrExpression_1_0_0 returns STMemberSelection
	 *     STXorExpression returns STMemberSelection
	 *     STXorExpression.STXorExpression_1_0_0 returns STMemberSelection
	 *     STAndExpression returns STMemberSelection
	 *     STAndExpression.STAndExpression_1_0_0 returns STMemberSelection
	 *     STEqualityExpression returns STMemberSelection
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STMemberSelection
	 *     STComparisonExpression returns STMemberSelection
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STMemberSelection
	 *     STAddSubExpression returns STMemberSelection
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STMemberSelection
	 *     STMulDivModExpression returns STMemberSelection
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STMemberSelection
	 *     STPowerExpression returns STMemberSelection
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STMemberSelection
	 *     STSignumExpression returns STMemberSelection
	 *     STSelectionExpression returns STMemberSelection
	 *     STSelectionExpression.STMemberSelection_1_0 returns STMemberSelection
	 *     STAtomicExpression returns STMemberSelection
	 *
	 * Constraint:
	 *     (
	 *         receiver=STSelectionExpression_STMemberSelection_1_0 
	 *         ((structAccess?='.' member=[VarDeclaration|ID]) | (arrayAccess?='[' index+=STExpression index+=STExpression*)) 
	 *         (poeInvocation?='(' (parameters+=STExpression parameters+=STExpression*)?)? 
	 *         bitaccessor=MultibitPartialAccess?
	 *     )
	 */
	protected void sequence_STSelectionExpression(ISerializationContext context, STMemberSelection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STSignumExpression
	 *     STExpression returns STSignumExpression
	 *     STSubrangeExpression returns STSignumExpression
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STSignumExpression
	 *     STOrExpression returns STSignumExpression
	 *     STOrExpression.STOrExpression_1_0_0 returns STSignumExpression
	 *     STXorExpression returns STSignumExpression
	 *     STXorExpression.STXorExpression_1_0_0 returns STSignumExpression
	 *     STAndExpression returns STSignumExpression
	 *     STAndExpression.STAndExpression_1_0_0 returns STSignumExpression
	 *     STEqualityExpression returns STSignumExpression
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STSignumExpression
	 *     STComparisonExpression returns STSignumExpression
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STSignumExpression
	 *     STAddSubExpression returns STSignumExpression
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STSignumExpression
	 *     STMulDivModExpression returns STSignumExpression
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STSignumExpression
	 *     STPowerExpression returns STSignumExpression
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STSignumExpression
	 *     STSignumExpression returns STSignumExpression
	 *     STSelectionExpression returns STSignumExpression
	 *     STSelectionExpression.STMemberSelection_1_0 returns STSignumExpression
	 *     STAtomicExpression returns STSignumExpression
	 *
	 * Constraint:
	 *     ((signum='-' | signum='+' | signum='NOT') expression=STSelectionExpression)
	 */
	protected void sequence_STSignumExpression(ISerializationContext context, STSignumExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STContinue
	 *
	 * Constraint:
	 *     {STContinue}
	 */
	protected void sequence_STStatement(ISerializationContext context, STContinue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STExit
	 *
	 * Constraint:
	 *     {STExit}
	 */
	protected void sequence_STStatement(ISerializationContext context, STExit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STReturn
	 *
	 * Constraint:
	 *     {STReturn}
	 */
	protected void sequence_STStatement(ISerializationContext context, STReturn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STStatements
	 *
	 * Constraint:
	 *     {STStatements}
	 */
	protected void sequence_STStatement(ISerializationContext context, STStatements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STSubrangeExpression
	 *     STExpression returns STSubrangeExpression
	 *     STSubrangeExpression returns STSubrangeExpression
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STSubrangeExpression
	 *     STOrExpression returns STSubrangeExpression
	 *     STOrExpression.STOrExpression_1_0_0 returns STSubrangeExpression
	 *     STXorExpression returns STSubrangeExpression
	 *     STXorExpression.STXorExpression_1_0_0 returns STSubrangeExpression
	 *     STAndExpression returns STSubrangeExpression
	 *     STAndExpression.STAndExpression_1_0_0 returns STSubrangeExpression
	 *     STEqualityExpression returns STSubrangeExpression
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STSubrangeExpression
	 *     STComparisonExpression returns STSubrangeExpression
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STSubrangeExpression
	 *     STAddSubExpression returns STSubrangeExpression
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STSubrangeExpression
	 *     STMulDivModExpression returns STSubrangeExpression
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STSubrangeExpression
	 *     STPowerExpression returns STSubrangeExpression
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STSubrangeExpression
	 *     STSignumExpression returns STSubrangeExpression
	 *     STSelectionExpression returns STSubrangeExpression
	 *     STSelectionExpression.STMemberSelection_1_0 returns STSubrangeExpression
	 *     STAtomicExpression returns STSubrangeExpression
	 *
	 * Constraint:
	 *     (lowerBound=STSubrangeExpression_STSubrangeExpression_1_0_0 upperBound=STOrExpression)
	 */
	protected void sequence_STSubrangeExpression(ISerializationContext context, STSubrangeExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_SUBRANGE_EXPRESSION__LOWER_BOUND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_SUBRANGE_EXPRESSION__LOWER_BOUND));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_SUBRANGE_EXPRESSION__UPPER_BOUND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_SUBRANGE_EXPRESSION__UPPER_BOUND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTSubrangeExpressionAccess().getSTSubrangeExpressionLowerBoundAction_1_0_0(), semanticObject.getLowerBound());
		feeder.accept(grammarAccess.getSTSubrangeExpressionAccess().getUpperBoundSTOrExpressionParserRuleCall_1_1_0(), semanticObject.getUpperBound());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     STStatement returns STWhileStatement
	 *     STLoopStatements returns STWhileStatement
	 *     STWhileStatement returns STWhileStatement
	 *
	 * Constraint:
	 *     (condition=STExpression statements+=STStatement*)
	 */
	protected void sequence_STWhileStatement(ISerializationContext context, STWhileStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializerExpression returns STXorExpression
	 *     STExpression returns STXorExpression
	 *     STSubrangeExpression returns STXorExpression
	 *     STSubrangeExpression.STSubrangeExpression_1_0_0 returns STXorExpression
	 *     STOrExpression returns STXorExpression
	 *     STOrExpression.STOrExpression_1_0_0 returns STXorExpression
	 *     STXorExpression returns STXorExpression
	 *     STXorExpression.STXorExpression_1_0_0 returns STXorExpression
	 *     STAndExpression returns STXorExpression
	 *     STAndExpression.STAndExpression_1_0_0 returns STXorExpression
	 *     STEqualityExpression returns STXorExpression
	 *     STEqualityExpression.STEqualityExpression_1_0_0 returns STXorExpression
	 *     STComparisonExpression returns STXorExpression
	 *     STComparisonExpression.STComparisonExpression_1_0_0 returns STXorExpression
	 *     STAddSubExpression returns STXorExpression
	 *     STAddSubExpression.STAddSubExpression_1_0_0 returns STXorExpression
	 *     STMulDivModExpression returns STXorExpression
	 *     STMulDivModExpression.STMulDivModExpression_1_0_0 returns STXorExpression
	 *     STPowerExpression returns STXorExpression
	 *     STPowerExpression.STPowerExpression_1_0_0 returns STXorExpression
	 *     STSignumExpression returns STXorExpression
	 *     STSelectionExpression returns STXorExpression
	 *     STSelectionExpression.STMemberSelection_1_0 returns STXorExpression
	 *     STAtomicExpression returns STXorExpression
	 *
	 * Constraint:
	 *     (left=STXorExpression_STXorExpression_1_0_0 op='XOR' right=STAndExpression)
	 */
	protected void sequence_STXorExpression(ISerializationContext context, STXorExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_XOR_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_XOR_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_XOR_EXPRESSION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_XOR_EXPRESSION__OP));
			if (transientValues.isValueTransient(semanticObject, STCorePackage.Literals.ST_XOR_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, STCorePackage.Literals.ST_XOR_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTXorExpressionAccess().getSTXorExpressionLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSTXorExpressionAccess().getOpXORKeyword_1_0_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getSTXorExpressionAccess().getRightSTAndExpressionParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TIME_LITERAL returns TIME_LITERAL
	 *
	 * Constraint:
	 *     ((keyword='TIME#' | keyword='LTIME#' | keyword='T#' | keyword='LT#') value=TIME)
	 */
	protected void sequence_TIME_LITERAL(ISerializationContext context, TIME_LITERAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TIME_OF_DAY_LITERAL returns TIME_OF_DAY_LITERAL
	 *
	 * Constraint:
	 *     ((keyword='TIME_OF_DAY#' | keyword='TOD#' | keyword='LTOD#') value=TIME_OF_DAY)
	 */
	protected void sequence_TIME_OF_DAY_LITERAL(ISerializationContext context, TIME_OF_DAY_LITERAL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarDeclarationBlock returns VarDeclarationBlock
	 *
	 * Constraint:
	 *     (constant?='CONSTANT'? varDeclarations+=VarDeclaration*)
	 */
	protected void sequence_VarDeclarationBlock(ISerializationContext context, VarDeclarationBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarDeclaration returns VarDeclaration
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         locatedAt=[VarDeclaration|ID]? 
	 *         (array?='ARRAY' ((ranges+=STExpression ranges+=STExpression*) | (count+='*' count+='*'*)))? 
	 *         type=[LibraryElement|ID] 
	 *         maxLength=STExpression? 
	 *         defaultValue=InitializerExpression?
	 *     )
	 */
	protected void sequence_VarDeclaration(ISerializationContext context, VarDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarInputDeclarationBlock returns VarDeclarationBlock
	 *
	 * Constraint:
	 *     (constant?='CONSTANT'? varDeclarations+=VarDeclaration*)
	 */
	protected void sequence_VarInputDeclarationBlock(ISerializationContext context, VarDeclarationBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarOutputDeclarationBlock returns VarDeclarationBlock
	 *
	 * Constraint:
	 *     (constant?='CONSTANT'? varDeclarations+=VarDeclaration*)
	 */
	protected void sequence_VarOutputDeclarationBlock(ISerializationContext context, VarDeclarationBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarTempDeclarationBlock returns VarDeclarationBlock
	 *
	 * Constraint:
	 *     (constant?='CONSTANT'? varDeclarations+=VarDeclaration*)
	 */
	protected void sequence_VarTempDeclarationBlock(ISerializationContext context, VarDeclarationBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
