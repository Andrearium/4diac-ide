package org.eclipse.fordiac.ide.structuredtextcore.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.fordiac.ide.structuredtextcore.services.STCoreGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalSTCoreParser extends AbstractInternalContentAssistParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "END_FUNCTION_BLOCK", "END_CONFIGURATION", "END_TRANSITION", "FUNCTION_BLOCK", "LDATE_AND_TIME", "CONFIGURATION", "DATE_AND_TIME", "END_INTERFACE", "END_NAMESPACE", "END_RESOURCE", "INITIAL_STEP", "LTIME_OF_DAY", "VAR_EXTERNAL", "END_PROGRAM", "TIME_OF_DAY", "END_ACTION", "END_REPEAT", "END_STRUCT", "IMPLEMENTS", "NON_RETAIN", "READ_WRITE", "TRANSITION", "VAR_ACCESS", "VAR_CONFIG", "VAR_GLOBAL", "VAR_IN_OUT", "VAR_OUTPUT", "END_CLASS", "END_WHILE", "INTERFACE", "NAMESPACE", "PROTECTED", "READ_ONLY", "VAR_INPUT", "ABSTRACT", "CONSTANT", "CONTINUE", "END_CASE", "END_STEP", "END_TYPE", "INTERNAL", "INTERVAL", "OVERRIDE", "PRIORITY", "RESOURCE", "VAR_TEMP", "END_FOR", "END_VAR", "EXTENDS", "OVERLAP", "PRIVATE", "PROGRAM", "WSTRING", "ACTION", "END_IF", "PUBLIC", "REF_TO", "REPEAT", "RETAIN", "RETURN", "SINGLE", "STRING", "STRUCT", "ARRAY", "CLASS", "DWORD", "ELSIF", "FALSE", "FINAL", "LDATE", "LREAL", "LTIME", "LWORD", "UDINT", "ULINT", "UNTIL", "USINT", "WCHAR", "WHILE", "BOOL", "BYTE", "CASE", "CHAR", "DATE", "DINT", "ELSE", "EXIT", "LINT", "LTOD", "NULL", "REAL", "SINT", "STEP", "THEN", "THIS", "TIME", "TRUE", "TYPE", "UINT", "WITH", "WORD", "AND", "FOR", "INT", "LDT", "MOD", "NOT", "REF", "TOD", "VAR", "XOR", "B", "D_1", "L", "W", "X", "AsteriskAsterisk", "FullStopFullStop", "ColonEqualsSign", "LessThanSignEqualsSign", "LessThanSignGreaterThanSign", "EqualsSignGreaterThanSign", "GreaterThanSignEqualsSign", "AT", "BY", "DO", "DT", "IF", "LD", "LT", "OF", "ON", "OR", "TO", "NumberSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "D", "T", "LeftSquareBracket", "RightSquareBracket", "RULE_HEX_DIGIT", "RULE_NON_DECIMAL", "RULE_INT", "RULE_DECIMAL", "RULE_TIME_PART", "RULE_TIME_VALUE", "RULE_TIME_DAYS", "RULE_TIME_HOURS", "RULE_TIME_MINUTES", "RULE_TIME_SECONDS", "RULE_TIME_MILLIS", "RULE_TIME_MICROS", "RULE_TIME_NANOS", "RULE_ID", "RULE_STRING", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_ANY_OTHER"
    };
    public static final int LWORD=76;
    public static final int LessThanSignGreaterThanSign=124;
    public static final int FUNCTION_BLOCK=7;
    public static final int EqualsSignGreaterThanSign=125;
    public static final int VAR=113;
    public static final int END_IF=58;
    public static final int ULINT=78;
    public static final int END_CASE=41;
    public static final int LessThanSign=150;
    public static final int RULE_TIME_HOURS=164;
    public static final int LeftParenthesis=140;
    public static final int INTERFACE=33;
    public static final int VAR_CONFIG=27;
    public static final int BYTE=84;
    public static final int INTERNAL=44;
    public static final int ELSE=89;
    public static final int REF_TO=60;
    public static final int TYPE=101;
    public static final int IF=131;
    public static final int LINT=91;
    public static final int GreaterThanSign=152;
    public static final int WORD=104;
    public static final int DATE_AND_TIME=10;
    public static final int RULE_ID=170;
    public static final int CONFIGURATION=9;
    public static final int TOD=112;
    public static final int DINT=88;
    public static final int UDINT=77;
    public static final int RULE_TIME_NANOS=169;
    public static final int CASE=85;
    public static final int GreaterThanSignEqualsSign=126;
    public static final int AT=127;
    public static final int PlusSign=143;
    public static final int RULE_INT=159;
    public static final int END_FOR=50;
    public static final int RULE_TIME_DAYS=163;
    public static final int RULE_ML_COMMENT=172;
    public static final int PUBLIC=59;
    public static final int THEN=97;
    public static final int XOR=114;
    public static final int LeftSquareBracket=155;
    public static final int PROGRAM=55;
    public static final int EXIT=90;
    public static final int TIME_OF_DAY=18;
    public static final int B=115;
    public static final int LDATE_AND_TIME=8;
    public static final int REPEAT=61;
    public static final int D=153;
    public static final int CHAR=86;
    public static final int L=117;
    public static final int LTIME=75;
    public static final int Comma=144;
    public static final int HyphenMinus=145;
    public static final int T=154;
    public static final int W=118;
    public static final int BY=128;
    public static final int X=119;
    public static final int ELSIF=70;
    public static final int END_REPEAT=20;
    public static final int LessThanSignEqualsSign=123;
    public static final int Solidus=147;
    public static final int PROTECTED=35;
    public static final int VAR_INPUT=37;
    public static final int RESOURCE=48;
    public static final int INTERVAL=45;
    public static final int FullStop=146;
    public static final int RULE_TIME_SECONDS=166;
    public static final int VAR_TEMP=49;
    public static final int CONSTANT=39;
    public static final int RULE_TIME_VALUE=162;
    public static final int PRIVATE=54;
    public static final int TRANSITION=25;
    public static final int CONTINUE=40;
    public static final int Semicolon=149;
    public static final int REF=111;
    public static final int LD=132;
    public static final int VAR_OUTPUT=30;
    public static final int STRING=65;
    public static final int RULE_HEX_DIGIT=157;
    public static final int TO=137;
    public static final int END_TYPE=43;
    public static final int UINT=102;
    public static final int INITIAL_STEP=14;
    public static final int LTOD=92;
    public static final int NAMESPACE=34;
    public static final int EXTENDS=52;
    public static final int SINGLE=64;
    public static final int ARRAY=67;
    public static final int LT=133;
    public static final int PRIORITY=47;
    public static final int CLASS=68;
    public static final int DO=129;
    public static final int WSTRING=56;
    public static final int READ_WRITE=24;
    public static final int END_CONFIGURATION=5;
    public static final int DT=130;
    public static final int END_VAR=51;
    public static final int END_STEP=42;
    public static final int END_STRUCT=21;
    public static final int RULE_TIME_PART=161;
    public static final int FullStopFullStop=121;
    public static final int OVERLAP=53;
    public static final int Ampersand=139;
    public static final int END_NAMESPACE=12;
    public static final int END_ACTION=19;
    public static final int RightSquareBracket=156;
    public static final int NULL=93;
    public static final int USINT=80;
    public static final int DWORD=69;
    public static final int FOR=106;
    public static final int RightParenthesis=141;
    public static final int TRUE=100;
    public static final int FINAL=72;
    public static final int ColonEqualsSign=122;
    public static final int END_WHILE=32;
    public static final int RULE_DECIMAL=160;
    public static final int DATE=87;
    public static final int NOT=110;
    public static final int LDATE=73;
    public static final int AND=105;
    public static final int NumberSign=138;
    public static final int REAL=94;
    public static final int AsteriskAsterisk=120;
    public static final int THIS=98;
    public static final int SINT=95;
    public static final int NON_RETAIN=23;
    public static final int STRUCT=66;
    public static final int LTIME_OF_DAY=15;
    public static final int END_TRANSITION=6;
    public static final int LREAL=74;
    public static final int VAR_GLOBAL=28;
    public static final int WCHAR=81;
    public static final int END_FUNCTION_BLOCK=4;
    public static final int VAR_EXTERNAL=16;
    public static final int RULE_STRING=171;
    public static final int VAR_ACCESS=26;
    public static final int ABSTRACT=38;
    public static final int READ_ONLY=36;
    public static final int INT=107;
    public static final int RULE_SL_COMMENT=173;
    public static final int RETURN=63;
    public static final int EqualsSign=151;
    public static final int OF=134;
    public static final int END_RESOURCE=13;
    public static final int Colon=148;
    public static final int EOF=-1;
    public static final int LDT=108;
    public static final int Asterisk=142;
    public static final int RULE_TIME_MILLIS=167;
    public static final int ON=135;
    public static final int MOD=109;
    public static final int OR=136;
    public static final int RETAIN=62;
    public static final int RULE_WS=174;
    public static final int VAR_IN_OUT=29;
    public static final int END_INTERFACE=11;
    public static final int IMPLEMENTS=22;
    public static final int STEP=96;
    public static final int TIME=99;
    public static final int RULE_ANY_OTHER=175;
    public static final int UNTIL=79;
    public static final int WITH=103;
    public static final int RULE_TIME_MINUTES=165;
    public static final int END_CLASS=31;
    public static final int OVERRIDE=46;
    public static final int ACTION=57;
    public static final int BOOL=83;
    public static final int D_1=116;
    public static final int FALSE=71;
    public static final int WHILE=82;
    public static final int RULE_TIME_MICROS=168;
    public static final int END_PROGRAM=17;
    public static final int RULE_NON_DECIMAL=158;

    // delegates
    // delegators


        public InternalSTCoreParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalSTCoreParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalSTCoreParser.tokenNames; }
    public String getGrammarFileName() { return "InternalSTCoreParser.g"; }


    	private STCoreGrammarAccess grammarAccess;
    	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
    	
    	{
    		tokenNameToValue.put("NumberSign", "'#'");
    		tokenNameToValue.put("Ampersand", "'&'");
    		tokenNameToValue.put("LeftParenthesis", "'('");
    		tokenNameToValue.put("RightParenthesis", "')'");
    		tokenNameToValue.put("Asterisk", "'*'");
    		tokenNameToValue.put("PlusSign", "'+'");
    		tokenNameToValue.put("Comma", "','");
    		tokenNameToValue.put("HyphenMinus", "'-'");
    		tokenNameToValue.put("FullStop", "'.'");
    		tokenNameToValue.put("Solidus", "'/'");
    		tokenNameToValue.put("Colon", "':'");
    		tokenNameToValue.put("Semicolon", "';'");
    		tokenNameToValue.put("LessThanSign", "'<'");
    		tokenNameToValue.put("EqualsSign", "'='");
    		tokenNameToValue.put("GreaterThanSign", "'>'");
    		tokenNameToValue.put("D", "'D'");
    		tokenNameToValue.put("T", "'T'");
    		tokenNameToValue.put("LeftSquareBracket", "'['");
    		tokenNameToValue.put("RightSquareBracket", "']'");
    		tokenNameToValue.put("B", "'%B'");
    		tokenNameToValue.put("D_1", "'%D'");
    		tokenNameToValue.put("L", "'%L'");
    		tokenNameToValue.put("W", "'%W'");
    		tokenNameToValue.put("X", "'%X'");
    		tokenNameToValue.put("AsteriskAsterisk", "'**'");
    		tokenNameToValue.put("FullStopFullStop", "'..'");
    		tokenNameToValue.put("ColonEqualsSign", "':='");
    		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
    		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
    		tokenNameToValue.put("EqualsSignGreaterThanSign", "'=>'");
    		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
    		tokenNameToValue.put("AT", "'AT'");
    		tokenNameToValue.put("BY", "'BY'");
    		tokenNameToValue.put("DO", "'DO'");
    		tokenNameToValue.put("DT", "'DT'");
    		tokenNameToValue.put("IF", "'IF'");
    		tokenNameToValue.put("LD", "'LD'");
    		tokenNameToValue.put("LT", "'LT'");
    		tokenNameToValue.put("OF", "'OF'");
    		tokenNameToValue.put("ON", "'ON'");
    		tokenNameToValue.put("OR", "'OR'");
    		tokenNameToValue.put("TO", "'TO'");
    		tokenNameToValue.put("AND", "'AND'");
    		tokenNameToValue.put("FOR", "'FOR'");
    		tokenNameToValue.put("INT", "'INT'");
    		tokenNameToValue.put("LDT", "'LDT'");
    		tokenNameToValue.put("MOD", "'MOD'");
    		tokenNameToValue.put("NOT", "'NOT'");
    		tokenNameToValue.put("REF", "'REF'");
    		tokenNameToValue.put("TOD", "'TOD'");
    		tokenNameToValue.put("VAR", "'VAR'");
    		tokenNameToValue.put("XOR", "'XOR'");
    		tokenNameToValue.put("BOOL", "'BOOL'");
    		tokenNameToValue.put("BYTE", "'BYTE'");
    		tokenNameToValue.put("CASE", "'CASE'");
    		tokenNameToValue.put("CHAR", "'CHAR'");
    		tokenNameToValue.put("DATE", "'DATE'");
    		tokenNameToValue.put("DINT", "'DINT'");
    		tokenNameToValue.put("ELSE", "'ELSE'");
    		tokenNameToValue.put("EXIT", "'EXIT'");
    		tokenNameToValue.put("LINT", "'LINT'");
    		tokenNameToValue.put("LTOD", "'LTOD'");
    		tokenNameToValue.put("NULL", "'NULL'");
    		tokenNameToValue.put("REAL", "'REAL'");
    		tokenNameToValue.put("SINT", "'SINT'");
    		tokenNameToValue.put("STEP", "'STEP'");
    		tokenNameToValue.put("THEN", "'THEN'");
    		tokenNameToValue.put("THIS", "'THIS'");
    		tokenNameToValue.put("TIME", "'TIME'");
    		tokenNameToValue.put("TRUE", "'TRUE'");
    		tokenNameToValue.put("TYPE", "'TYPE'");
    		tokenNameToValue.put("UINT", "'UINT'");
    		tokenNameToValue.put("WITH", "'WITH'");
    		tokenNameToValue.put("WORD", "'WORD'");
    		tokenNameToValue.put("ARRAY", "'ARRAY'");
    		tokenNameToValue.put("CLASS", "'CLASS'");
    		tokenNameToValue.put("DWORD", "'DWORD'");
    		tokenNameToValue.put("ELSIF", "'ELSIF'");
    		tokenNameToValue.put("FALSE", "'FALSE'");
    		tokenNameToValue.put("FINAL", "'FINAL'");
    		tokenNameToValue.put("LDATE", "'LDATE'");
    		tokenNameToValue.put("LREAL", "'LREAL'");
    		tokenNameToValue.put("LTIME", "'LTIME'");
    		tokenNameToValue.put("LWORD", "'LWORD'");
    		tokenNameToValue.put("UDINT", "'UDINT'");
    		tokenNameToValue.put("ULINT", "'ULINT'");
    		tokenNameToValue.put("UNTIL", "'UNTIL'");
    		tokenNameToValue.put("USINT", "'USINT'");
    		tokenNameToValue.put("WCHAR", "'WCHAR'");
    		tokenNameToValue.put("WHILE", "'WHILE'");
    		tokenNameToValue.put("ACTION", "'ACTION'");
    		tokenNameToValue.put("END_IF", "'END_IF'");
    		tokenNameToValue.put("PUBLIC", "'PUBLIC'");
    		tokenNameToValue.put("REF_TO", "'REF_TO'");
    		tokenNameToValue.put("REPEAT", "'REPEAT'");
    		tokenNameToValue.put("RETAIN", "'RETAIN'");
    		tokenNameToValue.put("RETURN", "'RETURN'");
    		tokenNameToValue.put("SINGLE", "'SINGLE'");
    		tokenNameToValue.put("STRING", "'STRING'");
    		tokenNameToValue.put("STRUCT", "'STRUCT'");
    		tokenNameToValue.put("END_FOR", "'END_FOR'");
    		tokenNameToValue.put("END_VAR", "'END_VAR'");
    		tokenNameToValue.put("EXTENDS", "'EXTENDS'");
    		tokenNameToValue.put("OVERLAP", "'OVERLAP'");
    		tokenNameToValue.put("PRIVATE", "'PRIVATE'");
    		tokenNameToValue.put("PROGRAM", "'PROGRAM'");
    		tokenNameToValue.put("WSTRING", "'WSTRING'");
    		tokenNameToValue.put("ABSTRACT", "'ABSTRACT'");
    		tokenNameToValue.put("CONSTANT", "'CONSTANT'");
    		tokenNameToValue.put("CONTINUE", "'CONTINUE'");
    		tokenNameToValue.put("END_CASE", "'END_CASE'");
    		tokenNameToValue.put("END_STEP", "'END_STEP'");
    		tokenNameToValue.put("END_TYPE", "'END_TYPE'");
    		tokenNameToValue.put("INTERNAL", "'INTERNAL'");
    		tokenNameToValue.put("INTERVAL", "'INTERVAL'");
    		tokenNameToValue.put("OVERRIDE", "'OVERRIDE'");
    		tokenNameToValue.put("PRIORITY", "'PRIORITY'");
    		tokenNameToValue.put("RESOURCE", "'RESOURCE'");
    		tokenNameToValue.put("VAR_TEMP", "'VAR_TEMP'");
    		tokenNameToValue.put("END_CLASS", "'END_CLASS'");
    		tokenNameToValue.put("END_WHILE", "'END_WHILE'");
    		tokenNameToValue.put("INTERFACE", "'INTERFACE'");
    		tokenNameToValue.put("NAMESPACE", "'NAMESPACE'");
    		tokenNameToValue.put("PROTECTED", "'PROTECTED'");
    		tokenNameToValue.put("READ_ONLY", "'READ_ONLY'");
    		tokenNameToValue.put("VAR_INPUT", "'VAR_INPUT'");
    		tokenNameToValue.put("END_ACTION", "'END_ACTION'");
    		tokenNameToValue.put("END_REPEAT", "'END_REPEAT'");
    		tokenNameToValue.put("END_STRUCT", "'END_STRUCT'");
    		tokenNameToValue.put("IMPLEMENTS", "'IMPLEMENTS'");
    		tokenNameToValue.put("NON_RETAIN", "'NON_RETAIN'");
    		tokenNameToValue.put("READ_WRITE", "'READ_WRITE'");
    		tokenNameToValue.put("TRANSITION", "'TRANSITION'");
    		tokenNameToValue.put("VAR_ACCESS", "'VAR_ACCESS'");
    		tokenNameToValue.put("VAR_CONFIG", "'VAR_CONFIG'");
    		tokenNameToValue.put("VAR_GLOBAL", "'VAR_GLOBAL'");
    		tokenNameToValue.put("VAR_IN_OUT", "'VAR_IN_OUT'");
    		tokenNameToValue.put("VAR_OUTPUT", "'VAR_OUTPUT'");
    		tokenNameToValue.put("END_PROGRAM", "'END_PROGRAM'");
    		tokenNameToValue.put("TIME_OF_DAY", "'TIME_OF_DAY'");
    		tokenNameToValue.put("END_RESOURCE", "'END_RESOURCE'");
    		tokenNameToValue.put("INITIAL_STEP", "'INITIAL_STEP'");
    		tokenNameToValue.put("LTIME_OF_DAY", "'LTIME_OF_DAY'");
    		tokenNameToValue.put("VAR_EXTERNAL", "'VAR_EXTERNAL'");
    		tokenNameToValue.put("CONFIGURATION", "'CONFIGURATION'");
    		tokenNameToValue.put("DATE_AND_TIME", "'DATE_AND_TIME'");
    		tokenNameToValue.put("END_INTERFACE", "'END_INTERFACE'");
    		tokenNameToValue.put("END_NAMESPACE", "'END_NAMESPACE'");
    		tokenNameToValue.put("END_TRANSITION", "'END_TRANSITION'");
    		tokenNameToValue.put("FUNCTION_BLOCK", "'FUNCTION_BLOCK'");
    		tokenNameToValue.put("LDATE_AND_TIME", "'LDATE_AND_TIME'");
    		tokenNameToValue.put("END_CONFIGURATION", "'END_CONFIGURATION'");
    		tokenNameToValue.put("END_FUNCTION_BLOCK", "'END_FUNCTION_BLOCK'");
    	}

    	public void setGrammarAccess(STCoreGrammarAccess grammarAccess) {
    		this.grammarAccess = grammarAccess;
    	}

    	@Override
    	protected Grammar getGrammar() {
    		return grammarAccess.getGrammar();
    	}

    	@Override
    	protected String getValueForTokenName(String tokenName) {
    		String result = tokenNameToValue.get(tokenName);
    		if (result == null)
    			result = tokenName;
    		return result;
    	}



    // $ANTLR start "entryRuleSTCoreSource"
    // InternalSTCoreParser.g:209:1: entryRuleSTCoreSource : ruleSTCoreSource EOF ;
    public final void entryRuleSTCoreSource() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:210:1: ( ruleSTCoreSource EOF )
            // InternalSTCoreParser.g:211:1: ruleSTCoreSource EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCoreSourceRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTCoreSource();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCoreSourceRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTCoreSource"


    // $ANTLR start "ruleSTCoreSource"
    // InternalSTCoreParser.g:218:1: ruleSTCoreSource : ( ( rule__STCoreSource__Group__0 ) ) ;
    public final void ruleSTCoreSource() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:222:2: ( ( ( rule__STCoreSource__Group__0 ) ) )
            // InternalSTCoreParser.g:223:2: ( ( rule__STCoreSource__Group__0 ) )
            {
            // InternalSTCoreParser.g:223:2: ( ( rule__STCoreSource__Group__0 ) )
            // InternalSTCoreParser.g:224:3: ( rule__STCoreSource__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCoreSourceAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:225:3: ( rule__STCoreSource__Group__0 )
            // InternalSTCoreParser.g:225:4: rule__STCoreSource__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STCoreSource__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCoreSourceAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTCoreSource"


    // $ANTLR start "entryRuleSTVarDeclaration"
    // InternalSTCoreParser.g:234:1: entryRuleSTVarDeclaration : ruleSTVarDeclaration EOF ;
    public final void entryRuleSTVarDeclaration() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:235:1: ( ruleSTVarDeclaration EOF )
            // InternalSTCoreParser.g:236:1: ruleSTVarDeclaration EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTVarDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTVarDeclaration"


    // $ANTLR start "ruleSTVarDeclaration"
    // InternalSTCoreParser.g:243:1: ruleSTVarDeclaration : ( ( rule__STVarDeclaration__Group__0 ) ) ;
    public final void ruleSTVarDeclaration() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:247:2: ( ( ( rule__STVarDeclaration__Group__0 ) ) )
            // InternalSTCoreParser.g:248:2: ( ( rule__STVarDeclaration__Group__0 ) )
            {
            // InternalSTCoreParser.g:248:2: ( ( rule__STVarDeclaration__Group__0 ) )
            // InternalSTCoreParser.g:249:3: ( rule__STVarDeclaration__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:250:3: ( rule__STVarDeclaration__Group__0 )
            // InternalSTCoreParser.g:250:4: rule__STVarDeclaration__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTVarDeclaration"


    // $ANTLR start "entryRuleSTInitializerExpression"
    // InternalSTCoreParser.g:259:1: entryRuleSTInitializerExpression : ruleSTInitializerExpression EOF ;
    public final void entryRuleSTInitializerExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:260:1: ( ruleSTInitializerExpression EOF )
            // InternalSTCoreParser.g:261:1: ruleSTInitializerExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTInitializerExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTInitializerExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTInitializerExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTInitializerExpression"


    // $ANTLR start "ruleSTInitializerExpression"
    // InternalSTCoreParser.g:268:1: ruleSTInitializerExpression : ( ( rule__STInitializerExpression__Alternatives ) ) ;
    public final void ruleSTInitializerExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:272:2: ( ( ( rule__STInitializerExpression__Alternatives ) ) )
            // InternalSTCoreParser.g:273:2: ( ( rule__STInitializerExpression__Alternatives ) )
            {
            // InternalSTCoreParser.g:273:2: ( ( rule__STInitializerExpression__Alternatives ) )
            // InternalSTCoreParser.g:274:3: ( rule__STInitializerExpression__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTInitializerExpressionAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:275:3: ( rule__STInitializerExpression__Alternatives )
            // InternalSTCoreParser.g:275:4: rule__STInitializerExpression__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STInitializerExpression__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTInitializerExpressionAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTInitializerExpression"


    // $ANTLR start "entryRuleSTElementaryInitializerExpression"
    // InternalSTCoreParser.g:284:1: entryRuleSTElementaryInitializerExpression : ruleSTElementaryInitializerExpression EOF ;
    public final void entryRuleSTElementaryInitializerExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:285:1: ( ruleSTElementaryInitializerExpression EOF )
            // InternalSTCoreParser.g:286:1: ruleSTElementaryInitializerExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElementaryInitializerExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTElementaryInitializerExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElementaryInitializerExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTElementaryInitializerExpression"


    // $ANTLR start "ruleSTElementaryInitializerExpression"
    // InternalSTCoreParser.g:293:1: ruleSTElementaryInitializerExpression : ( ( rule__STElementaryInitializerExpression__ValueAssignment ) ) ;
    public final void ruleSTElementaryInitializerExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:297:2: ( ( ( rule__STElementaryInitializerExpression__ValueAssignment ) ) )
            // InternalSTCoreParser.g:298:2: ( ( rule__STElementaryInitializerExpression__ValueAssignment ) )
            {
            // InternalSTCoreParser.g:298:2: ( ( rule__STElementaryInitializerExpression__ValueAssignment ) )
            // InternalSTCoreParser.g:299:3: ( rule__STElementaryInitializerExpression__ValueAssignment )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElementaryInitializerExpressionAccess().getValueAssignment()); 
            }
            // InternalSTCoreParser.g:300:3: ( rule__STElementaryInitializerExpression__ValueAssignment )
            // InternalSTCoreParser.g:300:4: rule__STElementaryInitializerExpression__ValueAssignment
            {
            pushFollow(FOLLOW_2);
            rule__STElementaryInitializerExpression__ValueAssignment();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElementaryInitializerExpressionAccess().getValueAssignment()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTElementaryInitializerExpression"


    // $ANTLR start "entryRuleSTArrayInitializerExpression"
    // InternalSTCoreParser.g:309:1: entryRuleSTArrayInitializerExpression : ruleSTArrayInitializerExpression EOF ;
    public final void entryRuleSTArrayInitializerExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:310:1: ( ruleSTArrayInitializerExpression EOF )
            // InternalSTCoreParser.g:311:1: ruleSTArrayInitializerExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitializerExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTArrayInitializerExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitializerExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTArrayInitializerExpression"


    // $ANTLR start "ruleSTArrayInitializerExpression"
    // InternalSTCoreParser.g:318:1: ruleSTArrayInitializerExpression : ( ( rule__STArrayInitializerExpression__Group__0 ) ) ;
    public final void ruleSTArrayInitializerExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:322:2: ( ( ( rule__STArrayInitializerExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:323:2: ( ( rule__STArrayInitializerExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:323:2: ( ( rule__STArrayInitializerExpression__Group__0 ) )
            // InternalSTCoreParser.g:324:3: ( rule__STArrayInitializerExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitializerExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:325:3: ( rule__STArrayInitializerExpression__Group__0 )
            // InternalSTCoreParser.g:325:4: rule__STArrayInitializerExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STArrayInitializerExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitializerExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTArrayInitializerExpression"


    // $ANTLR start "entryRuleSTArrayInitElement"
    // InternalSTCoreParser.g:334:1: entryRuleSTArrayInitElement : ruleSTArrayInitElement EOF ;
    public final void entryRuleSTArrayInitElement() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:335:1: ( ruleSTArrayInitElement EOF )
            // InternalSTCoreParser.g:336:1: ruleSTArrayInitElement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitElementRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTArrayInitElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitElementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTArrayInitElement"


    // $ANTLR start "ruleSTArrayInitElement"
    // InternalSTCoreParser.g:343:1: ruleSTArrayInitElement : ( ( rule__STArrayInitElement__Group__0 ) ) ;
    public final void ruleSTArrayInitElement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:347:2: ( ( ( rule__STArrayInitElement__Group__0 ) ) )
            // InternalSTCoreParser.g:348:2: ( ( rule__STArrayInitElement__Group__0 ) )
            {
            // InternalSTCoreParser.g:348:2: ( ( rule__STArrayInitElement__Group__0 ) )
            // InternalSTCoreParser.g:349:3: ( rule__STArrayInitElement__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitElementAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:350:3: ( rule__STArrayInitElement__Group__0 )
            // InternalSTCoreParser.g:350:4: rule__STArrayInitElement__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STArrayInitElement__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitElementAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTArrayInitElement"


    // $ANTLR start "entryRuleSTStructInitializerExpression"
    // InternalSTCoreParser.g:359:1: entryRuleSTStructInitializerExpression : ruleSTStructInitializerExpression EOF ;
    public final void entryRuleSTStructInitializerExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:360:1: ( ruleSTStructInitializerExpression EOF )
            // InternalSTCoreParser.g:361:1: ruleSTStructInitializerExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitializerExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTStructInitializerExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitializerExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTStructInitializerExpression"


    // $ANTLR start "ruleSTStructInitializerExpression"
    // InternalSTCoreParser.g:368:1: ruleSTStructInitializerExpression : ( ( rule__STStructInitializerExpression__Group__0 ) ) ;
    public final void ruleSTStructInitializerExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:372:2: ( ( ( rule__STStructInitializerExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:373:2: ( ( rule__STStructInitializerExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:373:2: ( ( rule__STStructInitializerExpression__Group__0 ) )
            // InternalSTCoreParser.g:374:3: ( rule__STStructInitializerExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitializerExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:375:3: ( rule__STStructInitializerExpression__Group__0 )
            // InternalSTCoreParser.g:375:4: rule__STStructInitializerExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STStructInitializerExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitializerExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTStructInitializerExpression"


    // $ANTLR start "entryRuleSTStructInitElement"
    // InternalSTCoreParser.g:384:1: entryRuleSTStructInitElement : ruleSTStructInitElement EOF ;
    public final void entryRuleSTStructInitElement() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:385:1: ( ruleSTStructInitElement EOF )
            // InternalSTCoreParser.g:386:1: ruleSTStructInitElement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitElementRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTStructInitElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitElementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTStructInitElement"


    // $ANTLR start "ruleSTStructInitElement"
    // InternalSTCoreParser.g:393:1: ruleSTStructInitElement : ( ( rule__STStructInitElement__Group__0 ) ) ;
    public final void ruleSTStructInitElement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:397:2: ( ( ( rule__STStructInitElement__Group__0 ) ) )
            // InternalSTCoreParser.g:398:2: ( ( rule__STStructInitElement__Group__0 ) )
            {
            // InternalSTCoreParser.g:398:2: ( ( rule__STStructInitElement__Group__0 ) )
            // InternalSTCoreParser.g:399:3: ( rule__STStructInitElement__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitElementAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:400:3: ( rule__STStructInitElement__Group__0 )
            // InternalSTCoreParser.g:400:4: rule__STStructInitElement__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STStructInitElement__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitElementAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTStructInitElement"


    // $ANTLR start "entryRuleSTStatement"
    // InternalSTCoreParser.g:409:1: entryRuleSTStatement : ruleSTStatement EOF ;
    public final void entryRuleSTStatement() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:410:1: ( ruleSTStatement EOF )
            // InternalSTCoreParser.g:411:1: ruleSTStatement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStatementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTStatement"


    // $ANTLR start "ruleSTStatement"
    // InternalSTCoreParser.g:418:1: ruleSTStatement : ( ( rule__STStatement__Alternatives ) ) ;
    public final void ruleSTStatement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:422:2: ( ( ( rule__STStatement__Alternatives ) ) )
            // InternalSTCoreParser.g:423:2: ( ( rule__STStatement__Alternatives ) )
            {
            // InternalSTCoreParser.g:423:2: ( ( rule__STStatement__Alternatives ) )
            // InternalSTCoreParser.g:424:3: ( rule__STStatement__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStatementAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:425:3: ( rule__STStatement__Alternatives )
            // InternalSTCoreParser.g:425:4: rule__STStatement__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STStatement__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStatementAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTStatement"


    // $ANTLR start "entryRuleSTAssignmentStatement"
    // InternalSTCoreParser.g:434:1: entryRuleSTAssignmentStatement : ruleSTAssignmentStatement EOF ;
    public final void entryRuleSTAssignmentStatement() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:435:1: ( ruleSTAssignmentStatement EOF )
            // InternalSTCoreParser.g:436:1: ruleSTAssignmentStatement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAssignmentStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTAssignmentStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAssignmentStatementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTAssignmentStatement"


    // $ANTLR start "ruleSTAssignmentStatement"
    // InternalSTCoreParser.g:443:1: ruleSTAssignmentStatement : ( ( rule__STAssignmentStatement__Group__0 ) ) ;
    public final void ruleSTAssignmentStatement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:447:2: ( ( ( rule__STAssignmentStatement__Group__0 ) ) )
            // InternalSTCoreParser.g:448:2: ( ( rule__STAssignmentStatement__Group__0 ) )
            {
            // InternalSTCoreParser.g:448:2: ( ( rule__STAssignmentStatement__Group__0 ) )
            // InternalSTCoreParser.g:449:3: ( rule__STAssignmentStatement__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAssignmentStatementAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:450:3: ( rule__STAssignmentStatement__Group__0 )
            // InternalSTCoreParser.g:450:4: rule__STAssignmentStatement__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STAssignmentStatement__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAssignmentStatementAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTAssignmentStatement"


    // $ANTLR start "entryRuleSTCallStatement"
    // InternalSTCoreParser.g:459:1: entryRuleSTCallStatement : ruleSTCallStatement EOF ;
    public final void entryRuleSTCallStatement() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:460:1: ( ruleSTCallStatement EOF )
            // InternalSTCoreParser.g:461:1: ruleSTCallStatement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTCallStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallStatementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTCallStatement"


    // $ANTLR start "ruleSTCallStatement"
    // InternalSTCoreParser.g:468:1: ruleSTCallStatement : ( ( rule__STCallStatement__CallAssignment ) ) ;
    public final void ruleSTCallStatement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:472:2: ( ( ( rule__STCallStatement__CallAssignment ) ) )
            // InternalSTCoreParser.g:473:2: ( ( rule__STCallStatement__CallAssignment ) )
            {
            // InternalSTCoreParser.g:473:2: ( ( rule__STCallStatement__CallAssignment ) )
            // InternalSTCoreParser.g:474:3: ( rule__STCallStatement__CallAssignment )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallStatementAccess().getCallAssignment()); 
            }
            // InternalSTCoreParser.g:475:3: ( rule__STCallStatement__CallAssignment )
            // InternalSTCoreParser.g:475:4: rule__STCallStatement__CallAssignment
            {
            pushFollow(FOLLOW_2);
            rule__STCallStatement__CallAssignment();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallStatementAccess().getCallAssignment()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTCallStatement"


    // $ANTLR start "entryRuleSTCallArgument"
    // InternalSTCoreParser.g:484:1: entryRuleSTCallArgument : ruleSTCallArgument EOF ;
    public final void entryRuleSTCallArgument() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:485:1: ( ruleSTCallArgument EOF )
            // InternalSTCoreParser.g:486:1: ruleSTCallArgument EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTCallArgument();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallArgumentRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTCallArgument"


    // $ANTLR start "ruleSTCallArgument"
    // InternalSTCoreParser.g:493:1: ruleSTCallArgument : ( ( rule__STCallArgument__Alternatives ) ) ;
    public final void ruleSTCallArgument() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:497:2: ( ( ( rule__STCallArgument__Alternatives ) ) )
            // InternalSTCoreParser.g:498:2: ( ( rule__STCallArgument__Alternatives ) )
            {
            // InternalSTCoreParser.g:498:2: ( ( rule__STCallArgument__Alternatives ) )
            // InternalSTCoreParser.g:499:3: ( rule__STCallArgument__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallArgumentAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:500:3: ( rule__STCallArgument__Alternatives )
            // InternalSTCoreParser.g:500:4: rule__STCallArgument__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STCallArgument__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallArgumentAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTCallArgument"


    // $ANTLR start "entryRuleSTCallUnnamedArgument"
    // InternalSTCoreParser.g:509:1: entryRuleSTCallUnnamedArgument : ruleSTCallUnnamedArgument EOF ;
    public final void entryRuleSTCallUnnamedArgument() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:510:1: ( ruleSTCallUnnamedArgument EOF )
            // InternalSTCoreParser.g:511:1: ruleSTCallUnnamedArgument EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallUnnamedArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTCallUnnamedArgument();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallUnnamedArgumentRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTCallUnnamedArgument"


    // $ANTLR start "ruleSTCallUnnamedArgument"
    // InternalSTCoreParser.g:518:1: ruleSTCallUnnamedArgument : ( ( rule__STCallUnnamedArgument__ArgumentAssignment ) ) ;
    public final void ruleSTCallUnnamedArgument() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:522:2: ( ( ( rule__STCallUnnamedArgument__ArgumentAssignment ) ) )
            // InternalSTCoreParser.g:523:2: ( ( rule__STCallUnnamedArgument__ArgumentAssignment ) )
            {
            // InternalSTCoreParser.g:523:2: ( ( rule__STCallUnnamedArgument__ArgumentAssignment ) )
            // InternalSTCoreParser.g:524:3: ( rule__STCallUnnamedArgument__ArgumentAssignment )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallUnnamedArgumentAccess().getArgumentAssignment()); 
            }
            // InternalSTCoreParser.g:525:3: ( rule__STCallUnnamedArgument__ArgumentAssignment )
            // InternalSTCoreParser.g:525:4: rule__STCallUnnamedArgument__ArgumentAssignment
            {
            pushFollow(FOLLOW_2);
            rule__STCallUnnamedArgument__ArgumentAssignment();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallUnnamedArgumentAccess().getArgumentAssignment()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTCallUnnamedArgument"


    // $ANTLR start "entryRuleSTCallNamedInputArgument"
    // InternalSTCoreParser.g:534:1: entryRuleSTCallNamedInputArgument : ruleSTCallNamedInputArgument EOF ;
    public final void entryRuleSTCallNamedInputArgument() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:535:1: ( ruleSTCallNamedInputArgument EOF )
            // InternalSTCoreParser.g:536:1: ruleSTCallNamedInputArgument EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedInputArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTCallNamedInputArgument();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedInputArgumentRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTCallNamedInputArgument"


    // $ANTLR start "ruleSTCallNamedInputArgument"
    // InternalSTCoreParser.g:543:1: ruleSTCallNamedInputArgument : ( ( rule__STCallNamedInputArgument__Group__0 ) ) ;
    public final void ruleSTCallNamedInputArgument() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:547:2: ( ( ( rule__STCallNamedInputArgument__Group__0 ) ) )
            // InternalSTCoreParser.g:548:2: ( ( rule__STCallNamedInputArgument__Group__0 ) )
            {
            // InternalSTCoreParser.g:548:2: ( ( rule__STCallNamedInputArgument__Group__0 ) )
            // InternalSTCoreParser.g:549:3: ( rule__STCallNamedInputArgument__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedInputArgumentAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:550:3: ( rule__STCallNamedInputArgument__Group__0 )
            // InternalSTCoreParser.g:550:4: rule__STCallNamedInputArgument__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STCallNamedInputArgument__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedInputArgumentAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTCallNamedInputArgument"


    // $ANTLR start "entryRuleSTCallNamedOutputArgument"
    // InternalSTCoreParser.g:559:1: entryRuleSTCallNamedOutputArgument : ruleSTCallNamedOutputArgument EOF ;
    public final void entryRuleSTCallNamedOutputArgument() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:560:1: ( ruleSTCallNamedOutputArgument EOF )
            // InternalSTCoreParser.g:561:1: ruleSTCallNamedOutputArgument EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedOutputArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTCallNamedOutputArgument();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedOutputArgumentRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTCallNamedOutputArgument"


    // $ANTLR start "ruleSTCallNamedOutputArgument"
    // InternalSTCoreParser.g:568:1: ruleSTCallNamedOutputArgument : ( ( rule__STCallNamedOutputArgument__Group__0 ) ) ;
    public final void ruleSTCallNamedOutputArgument() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:572:2: ( ( ( rule__STCallNamedOutputArgument__Group__0 ) ) )
            // InternalSTCoreParser.g:573:2: ( ( rule__STCallNamedOutputArgument__Group__0 ) )
            {
            // InternalSTCoreParser.g:573:2: ( ( rule__STCallNamedOutputArgument__Group__0 ) )
            // InternalSTCoreParser.g:574:3: ( rule__STCallNamedOutputArgument__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedOutputArgumentAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:575:3: ( rule__STCallNamedOutputArgument__Group__0 )
            // InternalSTCoreParser.g:575:4: rule__STCallNamedOutputArgument__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STCallNamedOutputArgument__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedOutputArgumentAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTCallNamedOutputArgument"


    // $ANTLR start "entryRuleSTIfStatement"
    // InternalSTCoreParser.g:584:1: entryRuleSTIfStatement : ruleSTIfStatement EOF ;
    public final void entryRuleSTIfStatement() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:585:1: ( ruleSTIfStatement EOF )
            // InternalSTCoreParser.g:586:1: ruleSTIfStatement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTIfStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTIfStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTIfStatementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTIfStatement"


    // $ANTLR start "ruleSTIfStatement"
    // InternalSTCoreParser.g:593:1: ruleSTIfStatement : ( ( rule__STIfStatement__Group__0 ) ) ;
    public final void ruleSTIfStatement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:597:2: ( ( ( rule__STIfStatement__Group__0 ) ) )
            // InternalSTCoreParser.g:598:2: ( ( rule__STIfStatement__Group__0 ) )
            {
            // InternalSTCoreParser.g:598:2: ( ( rule__STIfStatement__Group__0 ) )
            // InternalSTCoreParser.g:599:3: ( rule__STIfStatement__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTIfStatementAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:600:3: ( rule__STIfStatement__Group__0 )
            // InternalSTCoreParser.g:600:4: rule__STIfStatement__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STIfStatement__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTIfStatementAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTIfStatement"


    // $ANTLR start "entryRuleSTElseIfPart"
    // InternalSTCoreParser.g:609:1: entryRuleSTElseIfPart : ruleSTElseIfPart EOF ;
    public final void entryRuleSTElseIfPart() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:610:1: ( ruleSTElseIfPart EOF )
            // InternalSTCoreParser.g:611:1: ruleSTElseIfPart EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElseIfPartRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTElseIfPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElseIfPartRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTElseIfPart"


    // $ANTLR start "ruleSTElseIfPart"
    // InternalSTCoreParser.g:618:1: ruleSTElseIfPart : ( ( rule__STElseIfPart__Group__0 ) ) ;
    public final void ruleSTElseIfPart() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:622:2: ( ( ( rule__STElseIfPart__Group__0 ) ) )
            // InternalSTCoreParser.g:623:2: ( ( rule__STElseIfPart__Group__0 ) )
            {
            // InternalSTCoreParser.g:623:2: ( ( rule__STElseIfPart__Group__0 ) )
            // InternalSTCoreParser.g:624:3: ( rule__STElseIfPart__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElseIfPartAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:625:3: ( rule__STElseIfPart__Group__0 )
            // InternalSTCoreParser.g:625:4: rule__STElseIfPart__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STElseIfPart__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElseIfPartAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTElseIfPart"


    // $ANTLR start "entryRuleSTCaseStatement"
    // InternalSTCoreParser.g:634:1: entryRuleSTCaseStatement : ruleSTCaseStatement EOF ;
    public final void entryRuleSTCaseStatement() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:635:1: ( ruleSTCaseStatement EOF )
            // InternalSTCoreParser.g:636:1: ruleSTCaseStatement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTCaseStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseStatementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTCaseStatement"


    // $ANTLR start "ruleSTCaseStatement"
    // InternalSTCoreParser.g:643:1: ruleSTCaseStatement : ( ( rule__STCaseStatement__Group__0 ) ) ;
    public final void ruleSTCaseStatement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:647:2: ( ( ( rule__STCaseStatement__Group__0 ) ) )
            // InternalSTCoreParser.g:648:2: ( ( rule__STCaseStatement__Group__0 ) )
            {
            // InternalSTCoreParser.g:648:2: ( ( rule__STCaseStatement__Group__0 ) )
            // InternalSTCoreParser.g:649:3: ( rule__STCaseStatement__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseStatementAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:650:3: ( rule__STCaseStatement__Group__0 )
            // InternalSTCoreParser.g:650:4: rule__STCaseStatement__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STCaseStatement__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseStatementAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTCaseStatement"


    // $ANTLR start "entryRuleSTCaseCases"
    // InternalSTCoreParser.g:659:1: entryRuleSTCaseCases : ruleSTCaseCases EOF ;
    public final void entryRuleSTCaseCases() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:660:1: ( ruleSTCaseCases EOF )
            // InternalSTCoreParser.g:661:1: ruleSTCaseCases EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseCasesRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTCaseCases();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseCasesRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTCaseCases"


    // $ANTLR start "ruleSTCaseCases"
    // InternalSTCoreParser.g:668:1: ruleSTCaseCases : ( ( rule__STCaseCases__Group__0 ) ) ;
    public final void ruleSTCaseCases() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:672:2: ( ( ( rule__STCaseCases__Group__0 ) ) )
            // InternalSTCoreParser.g:673:2: ( ( rule__STCaseCases__Group__0 ) )
            {
            // InternalSTCoreParser.g:673:2: ( ( rule__STCaseCases__Group__0 ) )
            // InternalSTCoreParser.g:674:3: ( rule__STCaseCases__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseCasesAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:675:3: ( rule__STCaseCases__Group__0 )
            // InternalSTCoreParser.g:675:4: rule__STCaseCases__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STCaseCases__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseCasesAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTCaseCases"


    // $ANTLR start "entryRuleSTElsePart"
    // InternalSTCoreParser.g:684:1: entryRuleSTElsePart : ruleSTElsePart EOF ;
    public final void entryRuleSTElsePart() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:685:1: ( ruleSTElsePart EOF )
            // InternalSTCoreParser.g:686:1: ruleSTElsePart EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElsePartRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTElsePart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElsePartRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTElsePart"


    // $ANTLR start "ruleSTElsePart"
    // InternalSTCoreParser.g:693:1: ruleSTElsePart : ( ( rule__STElsePart__Group__0 ) ) ;
    public final void ruleSTElsePart() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:697:2: ( ( ( rule__STElsePart__Group__0 ) ) )
            // InternalSTCoreParser.g:698:2: ( ( rule__STElsePart__Group__0 ) )
            {
            // InternalSTCoreParser.g:698:2: ( ( rule__STElsePart__Group__0 ) )
            // InternalSTCoreParser.g:699:3: ( rule__STElsePart__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElsePartAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:700:3: ( rule__STElsePart__Group__0 )
            // InternalSTCoreParser.g:700:4: rule__STElsePart__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STElsePart__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElsePartAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTElsePart"


    // $ANTLR start "entryRuleSTForStatement"
    // InternalSTCoreParser.g:709:1: entryRuleSTForStatement : ruleSTForStatement EOF ;
    public final void entryRuleSTForStatement() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:710:1: ( ruleSTForStatement EOF )
            // InternalSTCoreParser.g:711:1: ruleSTForStatement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTForStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTForStatement"


    // $ANTLR start "ruleSTForStatement"
    // InternalSTCoreParser.g:718:1: ruleSTForStatement : ( ( rule__STForStatement__Group__0 ) ) ;
    public final void ruleSTForStatement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:722:2: ( ( ( rule__STForStatement__Group__0 ) ) )
            // InternalSTCoreParser.g:723:2: ( ( rule__STForStatement__Group__0 ) )
            {
            // InternalSTCoreParser.g:723:2: ( ( rule__STForStatement__Group__0 ) )
            // InternalSTCoreParser.g:724:3: ( rule__STForStatement__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:725:3: ( rule__STForStatement__Group__0 )
            // InternalSTCoreParser.g:725:4: rule__STForStatement__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STForStatement__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTForStatement"


    // $ANTLR start "entryRuleSTWhileStatement"
    // InternalSTCoreParser.g:734:1: entryRuleSTWhileStatement : ruleSTWhileStatement EOF ;
    public final void entryRuleSTWhileStatement() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:735:1: ( ruleSTWhileStatement EOF )
            // InternalSTCoreParser.g:736:1: ruleSTWhileStatement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTWhileStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTWhileStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTWhileStatementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTWhileStatement"


    // $ANTLR start "ruleSTWhileStatement"
    // InternalSTCoreParser.g:743:1: ruleSTWhileStatement : ( ( rule__STWhileStatement__Group__0 ) ) ;
    public final void ruleSTWhileStatement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:747:2: ( ( ( rule__STWhileStatement__Group__0 ) ) )
            // InternalSTCoreParser.g:748:2: ( ( rule__STWhileStatement__Group__0 ) )
            {
            // InternalSTCoreParser.g:748:2: ( ( rule__STWhileStatement__Group__0 ) )
            // InternalSTCoreParser.g:749:3: ( rule__STWhileStatement__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTWhileStatementAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:750:3: ( rule__STWhileStatement__Group__0 )
            // InternalSTCoreParser.g:750:4: rule__STWhileStatement__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STWhileStatement__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTWhileStatementAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTWhileStatement"


    // $ANTLR start "entryRuleSTRepeatStatement"
    // InternalSTCoreParser.g:759:1: entryRuleSTRepeatStatement : ruleSTRepeatStatement EOF ;
    public final void entryRuleSTRepeatStatement() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:760:1: ( ruleSTRepeatStatement EOF )
            // InternalSTCoreParser.g:761:1: ruleSTRepeatStatement EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTRepeatStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTRepeatStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTRepeatStatementRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTRepeatStatement"


    // $ANTLR start "ruleSTRepeatStatement"
    // InternalSTCoreParser.g:768:1: ruleSTRepeatStatement : ( ( rule__STRepeatStatement__Group__0 ) ) ;
    public final void ruleSTRepeatStatement() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:772:2: ( ( ( rule__STRepeatStatement__Group__0 ) ) )
            // InternalSTCoreParser.g:773:2: ( ( rule__STRepeatStatement__Group__0 ) )
            {
            // InternalSTCoreParser.g:773:2: ( ( rule__STRepeatStatement__Group__0 ) )
            // InternalSTCoreParser.g:774:3: ( rule__STRepeatStatement__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTRepeatStatementAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:775:3: ( rule__STRepeatStatement__Group__0 )
            // InternalSTCoreParser.g:775:4: rule__STRepeatStatement__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STRepeatStatement__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTRepeatStatementAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTRepeatStatement"


    // $ANTLR start "entryRuleSTExpression"
    // InternalSTCoreParser.g:784:1: entryRuleSTExpression : ruleSTExpression EOF ;
    public final void entryRuleSTExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:785:1: ( ruleSTExpression EOF )
            // InternalSTCoreParser.g:786:1: ruleSTExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTExpression"


    // $ANTLR start "ruleSTExpression"
    // InternalSTCoreParser.g:793:1: ruleSTExpression : ( ruleSTSubrangeExpression ) ;
    public final void ruleSTExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:797:2: ( ( ruleSTSubrangeExpression ) )
            // InternalSTCoreParser.g:798:2: ( ruleSTSubrangeExpression )
            {
            // InternalSTCoreParser.g:798:2: ( ruleSTSubrangeExpression )
            // InternalSTCoreParser.g:799:3: ruleSTSubrangeExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTExpressionAccess().getSTSubrangeExpressionParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTSubrangeExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTExpressionAccess().getSTSubrangeExpressionParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTExpression"


    // $ANTLR start "entryRuleSTSubrangeExpression"
    // InternalSTCoreParser.g:809:1: entryRuleSTSubrangeExpression : ruleSTSubrangeExpression EOF ;
    public final void entryRuleSTSubrangeExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:810:1: ( ruleSTSubrangeExpression EOF )
            // InternalSTCoreParser.g:811:1: ruleSTSubrangeExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTSubrangeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTSubrangeExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTSubrangeExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTSubrangeExpression"


    // $ANTLR start "ruleSTSubrangeExpression"
    // InternalSTCoreParser.g:818:1: ruleSTSubrangeExpression : ( ( rule__STSubrangeExpression__Group__0 ) ) ;
    public final void ruleSTSubrangeExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:822:2: ( ( ( rule__STSubrangeExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:823:2: ( ( rule__STSubrangeExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:823:2: ( ( rule__STSubrangeExpression__Group__0 ) )
            // InternalSTCoreParser.g:824:3: ( rule__STSubrangeExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTSubrangeExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:825:3: ( rule__STSubrangeExpression__Group__0 )
            // InternalSTCoreParser.g:825:4: rule__STSubrangeExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STSubrangeExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTSubrangeExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTSubrangeExpression"


    // $ANTLR start "entryRuleSTOrExpression"
    // InternalSTCoreParser.g:834:1: entryRuleSTOrExpression : ruleSTOrExpression EOF ;
    public final void entryRuleSTOrExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:835:1: ( ruleSTOrExpression EOF )
            // InternalSTCoreParser.g:836:1: ruleSTOrExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTOrExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTOrExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTOrExpression"


    // $ANTLR start "ruleSTOrExpression"
    // InternalSTCoreParser.g:843:1: ruleSTOrExpression : ( ( rule__STOrExpression__Group__0 ) ) ;
    public final void ruleSTOrExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:847:2: ( ( ( rule__STOrExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:848:2: ( ( rule__STOrExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:848:2: ( ( rule__STOrExpression__Group__0 ) )
            // InternalSTCoreParser.g:849:3: ( rule__STOrExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTOrExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:850:3: ( rule__STOrExpression__Group__0 )
            // InternalSTCoreParser.g:850:4: rule__STOrExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STOrExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTOrExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTOrExpression"


    // $ANTLR start "entryRuleSTXorExpression"
    // InternalSTCoreParser.g:859:1: entryRuleSTXorExpression : ruleSTXorExpression EOF ;
    public final void entryRuleSTXorExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:860:1: ( ruleSTXorExpression EOF )
            // InternalSTCoreParser.g:861:1: ruleSTXorExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTXorExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTXorExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTXorExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTXorExpression"


    // $ANTLR start "ruleSTXorExpression"
    // InternalSTCoreParser.g:868:1: ruleSTXorExpression : ( ( rule__STXorExpression__Group__0 ) ) ;
    public final void ruleSTXorExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:872:2: ( ( ( rule__STXorExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:873:2: ( ( rule__STXorExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:873:2: ( ( rule__STXorExpression__Group__0 ) )
            // InternalSTCoreParser.g:874:3: ( rule__STXorExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTXorExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:875:3: ( rule__STXorExpression__Group__0 )
            // InternalSTCoreParser.g:875:4: rule__STXorExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STXorExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTXorExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTXorExpression"


    // $ANTLR start "entryRuleSTAndExpression"
    // InternalSTCoreParser.g:884:1: entryRuleSTAndExpression : ruleSTAndExpression EOF ;
    public final void entryRuleSTAndExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:885:1: ( ruleSTAndExpression EOF )
            // InternalSTCoreParser.g:886:1: ruleSTAndExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAndExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTAndExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAndExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTAndExpression"


    // $ANTLR start "ruleSTAndExpression"
    // InternalSTCoreParser.g:893:1: ruleSTAndExpression : ( ( rule__STAndExpression__Group__0 ) ) ;
    public final void ruleSTAndExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:897:2: ( ( ( rule__STAndExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:898:2: ( ( rule__STAndExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:898:2: ( ( rule__STAndExpression__Group__0 ) )
            // InternalSTCoreParser.g:899:3: ( rule__STAndExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAndExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:900:3: ( rule__STAndExpression__Group__0 )
            // InternalSTCoreParser.g:900:4: rule__STAndExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STAndExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAndExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTAndExpression"


    // $ANTLR start "entryRuleSTEqualityExpression"
    // InternalSTCoreParser.g:909:1: entryRuleSTEqualityExpression : ruleSTEqualityExpression EOF ;
    public final void entryRuleSTEqualityExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:910:1: ( ruleSTEqualityExpression EOF )
            // InternalSTCoreParser.g:911:1: ruleSTEqualityExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTEqualityExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTEqualityExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTEqualityExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTEqualityExpression"


    // $ANTLR start "ruleSTEqualityExpression"
    // InternalSTCoreParser.g:918:1: ruleSTEqualityExpression : ( ( rule__STEqualityExpression__Group__0 ) ) ;
    public final void ruleSTEqualityExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:922:2: ( ( ( rule__STEqualityExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:923:2: ( ( rule__STEqualityExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:923:2: ( ( rule__STEqualityExpression__Group__0 ) )
            // InternalSTCoreParser.g:924:3: ( rule__STEqualityExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTEqualityExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:925:3: ( rule__STEqualityExpression__Group__0 )
            // InternalSTCoreParser.g:925:4: rule__STEqualityExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STEqualityExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTEqualityExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTEqualityExpression"


    // $ANTLR start "entryRuleSTComparisonExpression"
    // InternalSTCoreParser.g:934:1: entryRuleSTComparisonExpression : ruleSTComparisonExpression EOF ;
    public final void entryRuleSTComparisonExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:935:1: ( ruleSTComparisonExpression EOF )
            // InternalSTCoreParser.g:936:1: ruleSTComparisonExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTComparisonExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTComparisonExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTComparisonExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTComparisonExpression"


    // $ANTLR start "ruleSTComparisonExpression"
    // InternalSTCoreParser.g:943:1: ruleSTComparisonExpression : ( ( rule__STComparisonExpression__Group__0 ) ) ;
    public final void ruleSTComparisonExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:947:2: ( ( ( rule__STComparisonExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:948:2: ( ( rule__STComparisonExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:948:2: ( ( rule__STComparisonExpression__Group__0 ) )
            // InternalSTCoreParser.g:949:3: ( rule__STComparisonExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTComparisonExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:950:3: ( rule__STComparisonExpression__Group__0 )
            // InternalSTCoreParser.g:950:4: rule__STComparisonExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STComparisonExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTComparisonExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTComparisonExpression"


    // $ANTLR start "entryRuleSTAddSubExpression"
    // InternalSTCoreParser.g:959:1: entryRuleSTAddSubExpression : ruleSTAddSubExpression EOF ;
    public final void entryRuleSTAddSubExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:960:1: ( ruleSTAddSubExpression EOF )
            // InternalSTCoreParser.g:961:1: ruleSTAddSubExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAddSubExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTAddSubExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAddSubExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTAddSubExpression"


    // $ANTLR start "ruleSTAddSubExpression"
    // InternalSTCoreParser.g:968:1: ruleSTAddSubExpression : ( ( rule__STAddSubExpression__Group__0 ) ) ;
    public final void ruleSTAddSubExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:972:2: ( ( ( rule__STAddSubExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:973:2: ( ( rule__STAddSubExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:973:2: ( ( rule__STAddSubExpression__Group__0 ) )
            // InternalSTCoreParser.g:974:3: ( rule__STAddSubExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAddSubExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:975:3: ( rule__STAddSubExpression__Group__0 )
            // InternalSTCoreParser.g:975:4: rule__STAddSubExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STAddSubExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAddSubExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTAddSubExpression"


    // $ANTLR start "entryRuleSTMulDivModExpression"
    // InternalSTCoreParser.g:984:1: entryRuleSTMulDivModExpression : ruleSTMulDivModExpression EOF ;
    public final void entryRuleSTMulDivModExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:985:1: ( ruleSTMulDivModExpression EOF )
            // InternalSTCoreParser.g:986:1: ruleSTMulDivModExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMulDivModExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTMulDivModExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMulDivModExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTMulDivModExpression"


    // $ANTLR start "ruleSTMulDivModExpression"
    // InternalSTCoreParser.g:993:1: ruleSTMulDivModExpression : ( ( rule__STMulDivModExpression__Group__0 ) ) ;
    public final void ruleSTMulDivModExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:997:2: ( ( ( rule__STMulDivModExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:998:2: ( ( rule__STMulDivModExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:998:2: ( ( rule__STMulDivModExpression__Group__0 ) )
            // InternalSTCoreParser.g:999:3: ( rule__STMulDivModExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMulDivModExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1000:3: ( rule__STMulDivModExpression__Group__0 )
            // InternalSTCoreParser.g:1000:4: rule__STMulDivModExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STMulDivModExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMulDivModExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTMulDivModExpression"


    // $ANTLR start "entryRuleSTPowerExpression"
    // InternalSTCoreParser.g:1009:1: entryRuleSTPowerExpression : ruleSTPowerExpression EOF ;
    public final void entryRuleSTPowerExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1010:1: ( ruleSTPowerExpression EOF )
            // InternalSTCoreParser.g:1011:1: ruleSTPowerExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPowerExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTPowerExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPowerExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTPowerExpression"


    // $ANTLR start "ruleSTPowerExpression"
    // InternalSTCoreParser.g:1018:1: ruleSTPowerExpression : ( ( rule__STPowerExpression__Group__0 ) ) ;
    public final void ruleSTPowerExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1022:2: ( ( ( rule__STPowerExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:1023:2: ( ( rule__STPowerExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:1023:2: ( ( rule__STPowerExpression__Group__0 ) )
            // InternalSTCoreParser.g:1024:3: ( rule__STPowerExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPowerExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1025:3: ( rule__STPowerExpression__Group__0 )
            // InternalSTCoreParser.g:1025:4: rule__STPowerExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STPowerExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPowerExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTPowerExpression"


    // $ANTLR start "entryRuleSTUnaryExpression"
    // InternalSTCoreParser.g:1034:1: entryRuleSTUnaryExpression : ruleSTUnaryExpression EOF ;
    public final void entryRuleSTUnaryExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1035:1: ( ruleSTUnaryExpression EOF )
            // InternalSTCoreParser.g:1036:1: ruleSTUnaryExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTUnaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTUnaryExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTUnaryExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTUnaryExpression"


    // $ANTLR start "ruleSTUnaryExpression"
    // InternalSTCoreParser.g:1043:1: ruleSTUnaryExpression : ( ( rule__STUnaryExpression__Alternatives ) ) ;
    public final void ruleSTUnaryExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1047:2: ( ( ( rule__STUnaryExpression__Alternatives ) ) )
            // InternalSTCoreParser.g:1048:2: ( ( rule__STUnaryExpression__Alternatives ) )
            {
            // InternalSTCoreParser.g:1048:2: ( ( rule__STUnaryExpression__Alternatives ) )
            // InternalSTCoreParser.g:1049:3: ( rule__STUnaryExpression__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTUnaryExpressionAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1050:3: ( rule__STUnaryExpression__Alternatives )
            // InternalSTCoreParser.g:1050:4: rule__STUnaryExpression__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STUnaryExpression__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTUnaryExpressionAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTUnaryExpression"


    // $ANTLR start "entryRuleSTAccessExpression"
    // InternalSTCoreParser.g:1059:1: entryRuleSTAccessExpression : ruleSTAccessExpression EOF ;
    public final void entryRuleSTAccessExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1060:1: ( ruleSTAccessExpression EOF )
            // InternalSTCoreParser.g:1061:1: ruleSTAccessExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTAccessExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTAccessExpression"


    // $ANTLR start "ruleSTAccessExpression"
    // InternalSTCoreParser.g:1068:1: ruleSTAccessExpression : ( ( rule__STAccessExpression__Group__0 ) ) ;
    public final void ruleSTAccessExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1072:2: ( ( ( rule__STAccessExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:1073:2: ( ( rule__STAccessExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:1073:2: ( ( rule__STAccessExpression__Group__0 ) )
            // InternalSTCoreParser.g:1074:3: ( rule__STAccessExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1075:3: ( rule__STAccessExpression__Group__0 )
            // InternalSTCoreParser.g:1075:4: rule__STAccessExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTAccessExpression"


    // $ANTLR start "entryRuleSTPrimaryExpression"
    // InternalSTCoreParser.g:1084:1: entryRuleSTPrimaryExpression : ruleSTPrimaryExpression EOF ;
    public final void entryRuleSTPrimaryExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1085:1: ( ruleSTPrimaryExpression EOF )
            // InternalSTCoreParser.g:1086:1: ruleSTPrimaryExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPrimaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTPrimaryExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPrimaryExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTPrimaryExpression"


    // $ANTLR start "ruleSTPrimaryExpression"
    // InternalSTCoreParser.g:1093:1: ruleSTPrimaryExpression : ( ( rule__STPrimaryExpression__Alternatives ) ) ;
    public final void ruleSTPrimaryExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1097:2: ( ( ( rule__STPrimaryExpression__Alternatives ) ) )
            // InternalSTCoreParser.g:1098:2: ( ( rule__STPrimaryExpression__Alternatives ) )
            {
            // InternalSTCoreParser.g:1098:2: ( ( rule__STPrimaryExpression__Alternatives ) )
            // InternalSTCoreParser.g:1099:3: ( rule__STPrimaryExpression__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPrimaryExpressionAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1100:3: ( rule__STPrimaryExpression__Alternatives )
            // InternalSTCoreParser.g:1100:4: rule__STPrimaryExpression__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STPrimaryExpression__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPrimaryExpressionAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTPrimaryExpression"


    // $ANTLR start "entryRuleSTFeatureExpression"
    // InternalSTCoreParser.g:1109:1: entryRuleSTFeatureExpression : ruleSTFeatureExpression EOF ;
    public final void entryRuleSTFeatureExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1110:1: ( ruleSTFeatureExpression EOF )
            // InternalSTCoreParser.g:1111:1: ruleSTFeatureExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTFeatureExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTFeatureExpression"


    // $ANTLR start "ruleSTFeatureExpression"
    // InternalSTCoreParser.g:1118:1: ruleSTFeatureExpression : ( ( rule__STFeatureExpression__Group__0 ) ) ;
    public final void ruleSTFeatureExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1122:2: ( ( ( rule__STFeatureExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:1123:2: ( ( rule__STFeatureExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:1123:2: ( ( rule__STFeatureExpression__Group__0 ) )
            // InternalSTCoreParser.g:1124:3: ( rule__STFeatureExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1125:3: ( rule__STFeatureExpression__Group__0 )
            // InternalSTCoreParser.g:1125:4: rule__STFeatureExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTFeatureExpression"


    // $ANTLR start "entryRuleSTFeatureName"
    // InternalSTCoreParser.g:1134:1: entryRuleSTFeatureName : ruleSTFeatureName EOF ;
    public final void entryRuleSTFeatureName() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1135:1: ( ruleSTFeatureName EOF )
            // InternalSTCoreParser.g:1136:1: ruleSTFeatureName EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureNameRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTFeatureName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureNameRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTFeatureName"


    // $ANTLR start "ruleSTFeatureName"
    // InternalSTCoreParser.g:1143:1: ruleSTFeatureName : ( ( rule__STFeatureName__Alternatives ) ) ;
    public final void ruleSTFeatureName() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1147:2: ( ( ( rule__STFeatureName__Alternatives ) ) )
            // InternalSTCoreParser.g:1148:2: ( ( rule__STFeatureName__Alternatives ) )
            {
            // InternalSTCoreParser.g:1148:2: ( ( rule__STFeatureName__Alternatives ) )
            // InternalSTCoreParser.g:1149:3: ( rule__STFeatureName__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureNameAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1150:3: ( rule__STFeatureName__Alternatives )
            // InternalSTCoreParser.g:1150:4: rule__STFeatureName__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STFeatureName__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureNameAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTFeatureName"


    // $ANTLR start "entryRuleSTBuiltinFeatureExpression"
    // InternalSTCoreParser.g:1159:1: entryRuleSTBuiltinFeatureExpression : ruleSTBuiltinFeatureExpression EOF ;
    public final void entryRuleSTBuiltinFeatureExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1160:1: ( ruleSTBuiltinFeatureExpression EOF )
            // InternalSTCoreParser.g:1161:1: ruleSTBuiltinFeatureExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTBuiltinFeatureExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTBuiltinFeatureExpression"


    // $ANTLR start "ruleSTBuiltinFeatureExpression"
    // InternalSTCoreParser.g:1168:1: ruleSTBuiltinFeatureExpression : ( ( rule__STBuiltinFeatureExpression__Group__0 ) ) ;
    public final void ruleSTBuiltinFeatureExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1172:2: ( ( ( rule__STBuiltinFeatureExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:1173:2: ( ( rule__STBuiltinFeatureExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:1173:2: ( ( rule__STBuiltinFeatureExpression__Group__0 ) )
            // InternalSTCoreParser.g:1174:3: ( rule__STBuiltinFeatureExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1175:3: ( rule__STBuiltinFeatureExpression__Group__0 )
            // InternalSTCoreParser.g:1175:4: rule__STBuiltinFeatureExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTBuiltinFeatureExpression"


    // $ANTLR start "entryRuleSTMultibitPartialExpression"
    // InternalSTCoreParser.g:1184:1: entryRuleSTMultibitPartialExpression : ruleSTMultibitPartialExpression EOF ;
    public final void entryRuleSTMultibitPartialExpression() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1185:1: ( ruleSTMultibitPartialExpression EOF )
            // InternalSTCoreParser.g:1186:1: ruleSTMultibitPartialExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMultibitPartialExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTMultibitPartialExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMultibitPartialExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTMultibitPartialExpression"


    // $ANTLR start "ruleSTMultibitPartialExpression"
    // InternalSTCoreParser.g:1193:1: ruleSTMultibitPartialExpression : ( ( rule__STMultibitPartialExpression__Group__0 ) ) ;
    public final void ruleSTMultibitPartialExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1197:2: ( ( ( rule__STMultibitPartialExpression__Group__0 ) ) )
            // InternalSTCoreParser.g:1198:2: ( ( rule__STMultibitPartialExpression__Group__0 ) )
            {
            // InternalSTCoreParser.g:1198:2: ( ( rule__STMultibitPartialExpression__Group__0 ) )
            // InternalSTCoreParser.g:1199:3: ( rule__STMultibitPartialExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMultibitPartialExpressionAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1200:3: ( rule__STMultibitPartialExpression__Group__0 )
            // InternalSTCoreParser.g:1200:4: rule__STMultibitPartialExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STMultibitPartialExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMultibitPartialExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTMultibitPartialExpression"


    // $ANTLR start "entryRuleSTLiteralExpressions"
    // InternalSTCoreParser.g:1209:1: entryRuleSTLiteralExpressions : ruleSTLiteralExpressions EOF ;
    public final void entryRuleSTLiteralExpressions() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1210:1: ( ruleSTLiteralExpressions EOF )
            // InternalSTCoreParser.g:1211:1: ruleSTLiteralExpressions EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTLiteralExpressionsRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTLiteralExpressions();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTLiteralExpressionsRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTLiteralExpressions"


    // $ANTLR start "ruleSTLiteralExpressions"
    // InternalSTCoreParser.g:1218:1: ruleSTLiteralExpressions : ( ( rule__STLiteralExpressions__Alternatives ) ) ;
    public final void ruleSTLiteralExpressions() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1222:2: ( ( ( rule__STLiteralExpressions__Alternatives ) ) )
            // InternalSTCoreParser.g:1223:2: ( ( rule__STLiteralExpressions__Alternatives ) )
            {
            // InternalSTCoreParser.g:1223:2: ( ( rule__STLiteralExpressions__Alternatives ) )
            // InternalSTCoreParser.g:1224:3: ( rule__STLiteralExpressions__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTLiteralExpressionsAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1225:3: ( rule__STLiteralExpressions__Alternatives )
            // InternalSTCoreParser.g:1225:4: rule__STLiteralExpressions__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STLiteralExpressions__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTLiteralExpressionsAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTLiteralExpressions"


    // $ANTLR start "entryRuleSTNumericLiteralType"
    // InternalSTCoreParser.g:1234:1: entryRuleSTNumericLiteralType : ruleSTNumericLiteralType EOF ;
    public final void entryRuleSTNumericLiteralType() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1235:1: ( ruleSTNumericLiteralType EOF )
            // InternalSTCoreParser.g:1236:1: ruleSTNumericLiteralType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTNumericLiteralTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTNumericLiteralType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTNumericLiteralTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTNumericLiteralType"


    // $ANTLR start "ruleSTNumericLiteralType"
    // InternalSTCoreParser.g:1243:1: ruleSTNumericLiteralType : ( ( rule__STNumericLiteralType__Alternatives ) ) ;
    public final void ruleSTNumericLiteralType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1247:2: ( ( ( rule__STNumericLiteralType__Alternatives ) ) )
            // InternalSTCoreParser.g:1248:2: ( ( rule__STNumericLiteralType__Alternatives ) )
            {
            // InternalSTCoreParser.g:1248:2: ( ( rule__STNumericLiteralType__Alternatives ) )
            // InternalSTCoreParser.g:1249:3: ( rule__STNumericLiteralType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTNumericLiteralTypeAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1250:3: ( rule__STNumericLiteralType__Alternatives )
            // InternalSTCoreParser.g:1250:4: rule__STNumericLiteralType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STNumericLiteralType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTNumericLiteralTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTNumericLiteralType"


    // $ANTLR start "entryRuleSTNumericLiteral"
    // InternalSTCoreParser.g:1259:1: entryRuleSTNumericLiteral : ruleSTNumericLiteral EOF ;
    public final void entryRuleSTNumericLiteral() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1260:1: ( ruleSTNumericLiteral EOF )
            // InternalSTCoreParser.g:1261:1: ruleSTNumericLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTNumericLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTNumericLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTNumericLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTNumericLiteral"


    // $ANTLR start "ruleSTNumericLiteral"
    // InternalSTCoreParser.g:1268:1: ruleSTNumericLiteral : ( ( rule__STNumericLiteral__Group__0 ) ) ;
    public final void ruleSTNumericLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1272:2: ( ( ( rule__STNumericLiteral__Group__0 ) ) )
            // InternalSTCoreParser.g:1273:2: ( ( rule__STNumericLiteral__Group__0 ) )
            {
            // InternalSTCoreParser.g:1273:2: ( ( rule__STNumericLiteral__Group__0 ) )
            // InternalSTCoreParser.g:1274:3: ( rule__STNumericLiteral__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTNumericLiteralAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1275:3: ( rule__STNumericLiteral__Group__0 )
            // InternalSTCoreParser.g:1275:4: rule__STNumericLiteral__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STNumericLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTNumericLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTNumericLiteral"


    // $ANTLR start "entryRuleSTDateLiteralType"
    // InternalSTCoreParser.g:1284:1: entryRuleSTDateLiteralType : ruleSTDateLiteralType EOF ;
    public final void entryRuleSTDateLiteralType() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1285:1: ( ruleSTDateLiteralType EOF )
            // InternalSTCoreParser.g:1286:1: ruleSTDateLiteralType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateLiteralTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTDateLiteralType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateLiteralTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTDateLiteralType"


    // $ANTLR start "ruleSTDateLiteralType"
    // InternalSTCoreParser.g:1293:1: ruleSTDateLiteralType : ( ( rule__STDateLiteralType__Alternatives ) ) ;
    public final void ruleSTDateLiteralType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1297:2: ( ( ( rule__STDateLiteralType__Alternatives ) ) )
            // InternalSTCoreParser.g:1298:2: ( ( rule__STDateLiteralType__Alternatives ) )
            {
            // InternalSTCoreParser.g:1298:2: ( ( rule__STDateLiteralType__Alternatives ) )
            // InternalSTCoreParser.g:1299:3: ( rule__STDateLiteralType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateLiteralTypeAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1300:3: ( rule__STDateLiteralType__Alternatives )
            // InternalSTCoreParser.g:1300:4: rule__STDateLiteralType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STDateLiteralType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateLiteralTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTDateLiteralType"


    // $ANTLR start "entryRuleSTDateLiteral"
    // InternalSTCoreParser.g:1309:1: entryRuleSTDateLiteral : ruleSTDateLiteral EOF ;
    public final void entryRuleSTDateLiteral() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1310:1: ( ruleSTDateLiteral EOF )
            // InternalSTCoreParser.g:1311:1: ruleSTDateLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTDateLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTDateLiteral"


    // $ANTLR start "ruleSTDateLiteral"
    // InternalSTCoreParser.g:1318:1: ruleSTDateLiteral : ( ( rule__STDateLiteral__Group__0 ) ) ;
    public final void ruleSTDateLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1322:2: ( ( ( rule__STDateLiteral__Group__0 ) ) )
            // InternalSTCoreParser.g:1323:2: ( ( rule__STDateLiteral__Group__0 ) )
            {
            // InternalSTCoreParser.g:1323:2: ( ( rule__STDateLiteral__Group__0 ) )
            // InternalSTCoreParser.g:1324:3: ( rule__STDateLiteral__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateLiteralAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1325:3: ( rule__STDateLiteral__Group__0 )
            // InternalSTCoreParser.g:1325:4: rule__STDateLiteral__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STDateLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTDateLiteral"


    // $ANTLR start "entryRuleSTTimeLiteralType"
    // InternalSTCoreParser.g:1334:1: entryRuleSTTimeLiteralType : ruleSTTimeLiteralType EOF ;
    public final void entryRuleSTTimeLiteralType() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1335:1: ( ruleSTTimeLiteralType EOF )
            // InternalSTCoreParser.g:1336:1: ruleSTTimeLiteralType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeLiteralTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTTimeLiteralType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeLiteralTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTTimeLiteralType"


    // $ANTLR start "ruleSTTimeLiteralType"
    // InternalSTCoreParser.g:1343:1: ruleSTTimeLiteralType : ( ( rule__STTimeLiteralType__Alternatives ) ) ;
    public final void ruleSTTimeLiteralType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1347:2: ( ( ( rule__STTimeLiteralType__Alternatives ) ) )
            // InternalSTCoreParser.g:1348:2: ( ( rule__STTimeLiteralType__Alternatives ) )
            {
            // InternalSTCoreParser.g:1348:2: ( ( rule__STTimeLiteralType__Alternatives ) )
            // InternalSTCoreParser.g:1349:3: ( rule__STTimeLiteralType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeLiteralTypeAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1350:3: ( rule__STTimeLiteralType__Alternatives )
            // InternalSTCoreParser.g:1350:4: rule__STTimeLiteralType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STTimeLiteralType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeLiteralTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTTimeLiteralType"


    // $ANTLR start "entryRuleSTTimeLiteral"
    // InternalSTCoreParser.g:1359:1: entryRuleSTTimeLiteral : ruleSTTimeLiteral EOF ;
    public final void entryRuleSTTimeLiteral() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1360:1: ( ruleSTTimeLiteral EOF )
            // InternalSTCoreParser.g:1361:1: ruleSTTimeLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTTimeLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTTimeLiteral"


    // $ANTLR start "ruleSTTimeLiteral"
    // InternalSTCoreParser.g:1368:1: ruleSTTimeLiteral : ( ( rule__STTimeLiteral__Group__0 ) ) ;
    public final void ruleSTTimeLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1372:2: ( ( ( rule__STTimeLiteral__Group__0 ) ) )
            // InternalSTCoreParser.g:1373:2: ( ( rule__STTimeLiteral__Group__0 ) )
            {
            // InternalSTCoreParser.g:1373:2: ( ( rule__STTimeLiteral__Group__0 ) )
            // InternalSTCoreParser.g:1374:3: ( rule__STTimeLiteral__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeLiteralAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1375:3: ( rule__STTimeLiteral__Group__0 )
            // InternalSTCoreParser.g:1375:4: rule__STTimeLiteral__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STTimeLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTTimeLiteral"


    // $ANTLR start "entryRuleSTTimeOfDayLiteral"
    // InternalSTCoreParser.g:1384:1: entryRuleSTTimeOfDayLiteral : ruleSTTimeOfDayLiteral EOF ;
    public final void entryRuleSTTimeOfDayLiteral() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1385:1: ( ruleSTTimeOfDayLiteral EOF )
            // InternalSTCoreParser.g:1386:1: ruleSTTimeOfDayLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeOfDayLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTTimeOfDayLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeOfDayLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTTimeOfDayLiteral"


    // $ANTLR start "ruleSTTimeOfDayLiteral"
    // InternalSTCoreParser.g:1393:1: ruleSTTimeOfDayLiteral : ( ( rule__STTimeOfDayLiteral__Group__0 ) ) ;
    public final void ruleSTTimeOfDayLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1397:2: ( ( ( rule__STTimeOfDayLiteral__Group__0 ) ) )
            // InternalSTCoreParser.g:1398:2: ( ( rule__STTimeOfDayLiteral__Group__0 ) )
            {
            // InternalSTCoreParser.g:1398:2: ( ( rule__STTimeOfDayLiteral__Group__0 ) )
            // InternalSTCoreParser.g:1399:3: ( rule__STTimeOfDayLiteral__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeOfDayLiteralAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1400:3: ( rule__STTimeOfDayLiteral__Group__0 )
            // InternalSTCoreParser.g:1400:4: rule__STTimeOfDayLiteral__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STTimeOfDayLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeOfDayLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTTimeOfDayLiteral"


    // $ANTLR start "entryRuleSTDateAndTimeLiteral"
    // InternalSTCoreParser.g:1409:1: entryRuleSTDateAndTimeLiteral : ruleSTDateAndTimeLiteral EOF ;
    public final void entryRuleSTDateAndTimeLiteral() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1410:1: ( ruleSTDateAndTimeLiteral EOF )
            // InternalSTCoreParser.g:1411:1: ruleSTDateAndTimeLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateAndTimeLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTDateAndTimeLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateAndTimeLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTDateAndTimeLiteral"


    // $ANTLR start "ruleSTDateAndTimeLiteral"
    // InternalSTCoreParser.g:1418:1: ruleSTDateAndTimeLiteral : ( ( rule__STDateAndTimeLiteral__Group__0 ) ) ;
    public final void ruleSTDateAndTimeLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1422:2: ( ( ( rule__STDateAndTimeLiteral__Group__0 ) ) )
            // InternalSTCoreParser.g:1423:2: ( ( rule__STDateAndTimeLiteral__Group__0 ) )
            {
            // InternalSTCoreParser.g:1423:2: ( ( rule__STDateAndTimeLiteral__Group__0 ) )
            // InternalSTCoreParser.g:1424:3: ( rule__STDateAndTimeLiteral__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateAndTimeLiteralAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1425:3: ( rule__STDateAndTimeLiteral__Group__0 )
            // InternalSTCoreParser.g:1425:4: rule__STDateAndTimeLiteral__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STDateAndTimeLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateAndTimeLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTDateAndTimeLiteral"


    // $ANTLR start "entryRuleSTStringLiteral"
    // InternalSTCoreParser.g:1434:1: entryRuleSTStringLiteral : ruleSTStringLiteral EOF ;
    public final void entryRuleSTStringLiteral() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1435:1: ( ruleSTStringLiteral EOF )
            // InternalSTCoreParser.g:1436:1: ruleSTStringLiteral EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStringLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTStringLiteral();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStringLiteralRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTStringLiteral"


    // $ANTLR start "ruleSTStringLiteral"
    // InternalSTCoreParser.g:1443:1: ruleSTStringLiteral : ( ( rule__STStringLiteral__Group__0 ) ) ;
    public final void ruleSTStringLiteral() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1447:2: ( ( ( rule__STStringLiteral__Group__0 ) ) )
            // InternalSTCoreParser.g:1448:2: ( ( rule__STStringLiteral__Group__0 ) )
            {
            // InternalSTCoreParser.g:1448:2: ( ( rule__STStringLiteral__Group__0 ) )
            // InternalSTCoreParser.g:1449:3: ( rule__STStringLiteral__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStringLiteralAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1450:3: ( rule__STStringLiteral__Group__0 )
            // InternalSTCoreParser.g:1450:4: rule__STStringLiteral__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__STStringLiteral__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStringLiteralAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTStringLiteral"


    // $ANTLR start "entryRuleSTAnyType"
    // InternalSTCoreParser.g:1459:1: entryRuleSTAnyType : ruleSTAnyType EOF ;
    public final void entryRuleSTAnyType() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1460:1: ( ruleSTAnyType EOF )
            // InternalSTCoreParser.g:1461:1: ruleSTAnyType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTAnyType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTAnyType"


    // $ANTLR start "ruleSTAnyType"
    // InternalSTCoreParser.g:1468:1: ruleSTAnyType : ( ( rule__STAnyType__Alternatives ) ) ;
    public final void ruleSTAnyType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1472:2: ( ( ( rule__STAnyType__Alternatives ) ) )
            // InternalSTCoreParser.g:1473:2: ( ( rule__STAnyType__Alternatives ) )
            {
            // InternalSTCoreParser.g:1473:2: ( ( rule__STAnyType__Alternatives ) )
            // InternalSTCoreParser.g:1474:3: ( rule__STAnyType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyTypeAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1475:3: ( rule__STAnyType__Alternatives )
            // InternalSTCoreParser.g:1475:4: rule__STAnyType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STAnyType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTAnyType"


    // $ANTLR start "entryRuleSTAnyBuiltinType"
    // InternalSTCoreParser.g:1484:1: entryRuleSTAnyBuiltinType : ruleSTAnyBuiltinType EOF ;
    public final void entryRuleSTAnyBuiltinType() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1485:1: ( ruleSTAnyBuiltinType EOF )
            // InternalSTCoreParser.g:1486:1: ruleSTAnyBuiltinType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyBuiltinTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTAnyBuiltinType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyBuiltinTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTAnyBuiltinType"


    // $ANTLR start "ruleSTAnyBuiltinType"
    // InternalSTCoreParser.g:1493:1: ruleSTAnyBuiltinType : ( ( rule__STAnyBuiltinType__Alternatives ) ) ;
    public final void ruleSTAnyBuiltinType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1497:2: ( ( ( rule__STAnyBuiltinType__Alternatives ) ) )
            // InternalSTCoreParser.g:1498:2: ( ( rule__STAnyBuiltinType__Alternatives ) )
            {
            // InternalSTCoreParser.g:1498:2: ( ( rule__STAnyBuiltinType__Alternatives ) )
            // InternalSTCoreParser.g:1499:3: ( rule__STAnyBuiltinType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyBuiltinTypeAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1500:3: ( rule__STAnyBuiltinType__Alternatives )
            // InternalSTCoreParser.g:1500:4: rule__STAnyBuiltinType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STAnyBuiltinType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyBuiltinTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTAnyBuiltinType"


    // $ANTLR start "entryRuleSTAnyBitType"
    // InternalSTCoreParser.g:1509:1: entryRuleSTAnyBitType : ruleSTAnyBitType EOF ;
    public final void entryRuleSTAnyBitType() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1510:1: ( ruleSTAnyBitType EOF )
            // InternalSTCoreParser.g:1511:1: ruleSTAnyBitType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyBitTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTAnyBitType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyBitTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTAnyBitType"


    // $ANTLR start "ruleSTAnyBitType"
    // InternalSTCoreParser.g:1518:1: ruleSTAnyBitType : ( ( rule__STAnyBitType__Alternatives ) ) ;
    public final void ruleSTAnyBitType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1522:2: ( ( ( rule__STAnyBitType__Alternatives ) ) )
            // InternalSTCoreParser.g:1523:2: ( ( rule__STAnyBitType__Alternatives ) )
            {
            // InternalSTCoreParser.g:1523:2: ( ( rule__STAnyBitType__Alternatives ) )
            // InternalSTCoreParser.g:1524:3: ( rule__STAnyBitType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyBitTypeAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1525:3: ( rule__STAnyBitType__Alternatives )
            // InternalSTCoreParser.g:1525:4: rule__STAnyBitType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STAnyBitType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyBitTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTAnyBitType"


    // $ANTLR start "entryRuleSTAnyNumType"
    // InternalSTCoreParser.g:1534:1: entryRuleSTAnyNumType : ruleSTAnyNumType EOF ;
    public final void entryRuleSTAnyNumType() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1535:1: ( ruleSTAnyNumType EOF )
            // InternalSTCoreParser.g:1536:1: ruleSTAnyNumType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyNumTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTAnyNumType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyNumTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTAnyNumType"


    // $ANTLR start "ruleSTAnyNumType"
    // InternalSTCoreParser.g:1543:1: ruleSTAnyNumType : ( ( rule__STAnyNumType__Alternatives ) ) ;
    public final void ruleSTAnyNumType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1547:2: ( ( ( rule__STAnyNumType__Alternatives ) ) )
            // InternalSTCoreParser.g:1548:2: ( ( rule__STAnyNumType__Alternatives ) )
            {
            // InternalSTCoreParser.g:1548:2: ( ( rule__STAnyNumType__Alternatives ) )
            // InternalSTCoreParser.g:1549:3: ( rule__STAnyNumType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyNumTypeAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1550:3: ( rule__STAnyNumType__Alternatives )
            // InternalSTCoreParser.g:1550:4: rule__STAnyNumType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STAnyNumType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyNumTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTAnyNumType"


    // $ANTLR start "entryRuleSTAnyDurationType"
    // InternalSTCoreParser.g:1559:1: entryRuleSTAnyDurationType : ruleSTAnyDurationType EOF ;
    public final void entryRuleSTAnyDurationType() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1560:1: ( ruleSTAnyDurationType EOF )
            // InternalSTCoreParser.g:1561:1: ruleSTAnyDurationType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyDurationTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTAnyDurationType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyDurationTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTAnyDurationType"


    // $ANTLR start "ruleSTAnyDurationType"
    // InternalSTCoreParser.g:1568:1: ruleSTAnyDurationType : ( ( rule__STAnyDurationType__Alternatives ) ) ;
    public final void ruleSTAnyDurationType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1572:2: ( ( ( rule__STAnyDurationType__Alternatives ) ) )
            // InternalSTCoreParser.g:1573:2: ( ( rule__STAnyDurationType__Alternatives ) )
            {
            // InternalSTCoreParser.g:1573:2: ( ( rule__STAnyDurationType__Alternatives ) )
            // InternalSTCoreParser.g:1574:3: ( rule__STAnyDurationType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyDurationTypeAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1575:3: ( rule__STAnyDurationType__Alternatives )
            // InternalSTCoreParser.g:1575:4: rule__STAnyDurationType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STAnyDurationType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyDurationTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTAnyDurationType"


    // $ANTLR start "entryRuleSTAnyDateType"
    // InternalSTCoreParser.g:1584:1: entryRuleSTAnyDateType : ruleSTAnyDateType EOF ;
    public final void entryRuleSTAnyDateType() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1585:1: ( ruleSTAnyDateType EOF )
            // InternalSTCoreParser.g:1586:1: ruleSTAnyDateType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyDateTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTAnyDateType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyDateTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTAnyDateType"


    // $ANTLR start "ruleSTAnyDateType"
    // InternalSTCoreParser.g:1593:1: ruleSTAnyDateType : ( ( rule__STAnyDateType__Alternatives ) ) ;
    public final void ruleSTAnyDateType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1597:2: ( ( ( rule__STAnyDateType__Alternatives ) ) )
            // InternalSTCoreParser.g:1598:2: ( ( rule__STAnyDateType__Alternatives ) )
            {
            // InternalSTCoreParser.g:1598:2: ( ( rule__STAnyDateType__Alternatives ) )
            // InternalSTCoreParser.g:1599:3: ( rule__STAnyDateType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyDateTypeAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1600:3: ( rule__STAnyDateType__Alternatives )
            // InternalSTCoreParser.g:1600:4: rule__STAnyDateType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STAnyDateType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyDateTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTAnyDateType"


    // $ANTLR start "entryRuleSTDateType"
    // InternalSTCoreParser.g:1609:1: entryRuleSTDateType : ruleSTDateType EOF ;
    public final void entryRuleSTDateType() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1610:1: ( ruleSTDateType EOF )
            // InternalSTCoreParser.g:1611:1: ruleSTDateType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTDateType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTDateType"


    // $ANTLR start "ruleSTDateType"
    // InternalSTCoreParser.g:1618:1: ruleSTDateType : ( ( rule__STDateType__Alternatives ) ) ;
    public final void ruleSTDateType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1622:2: ( ( ( rule__STDateType__Alternatives ) ) )
            // InternalSTCoreParser.g:1623:2: ( ( rule__STDateType__Alternatives ) )
            {
            // InternalSTCoreParser.g:1623:2: ( ( rule__STDateType__Alternatives ) )
            // InternalSTCoreParser.g:1624:3: ( rule__STDateType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateTypeAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1625:3: ( rule__STDateType__Alternatives )
            // InternalSTCoreParser.g:1625:4: rule__STDateType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STDateType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTDateType"


    // $ANTLR start "entryRuleSTTimeOfDayType"
    // InternalSTCoreParser.g:1634:1: entryRuleSTTimeOfDayType : ruleSTTimeOfDayType EOF ;
    public final void entryRuleSTTimeOfDayType() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1635:1: ( ruleSTTimeOfDayType EOF )
            // InternalSTCoreParser.g:1636:1: ruleSTTimeOfDayType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeOfDayTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTTimeOfDayType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeOfDayTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTTimeOfDayType"


    // $ANTLR start "ruleSTTimeOfDayType"
    // InternalSTCoreParser.g:1643:1: ruleSTTimeOfDayType : ( ( rule__STTimeOfDayType__Alternatives ) ) ;
    public final void ruleSTTimeOfDayType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1647:2: ( ( ( rule__STTimeOfDayType__Alternatives ) ) )
            // InternalSTCoreParser.g:1648:2: ( ( rule__STTimeOfDayType__Alternatives ) )
            {
            // InternalSTCoreParser.g:1648:2: ( ( rule__STTimeOfDayType__Alternatives ) )
            // InternalSTCoreParser.g:1649:3: ( rule__STTimeOfDayType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeOfDayTypeAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1650:3: ( rule__STTimeOfDayType__Alternatives )
            // InternalSTCoreParser.g:1650:4: rule__STTimeOfDayType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STTimeOfDayType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeOfDayTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTTimeOfDayType"


    // $ANTLR start "entryRuleSTDateAndTimeType"
    // InternalSTCoreParser.g:1659:1: entryRuleSTDateAndTimeType : ruleSTDateAndTimeType EOF ;
    public final void entryRuleSTDateAndTimeType() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1660:1: ( ruleSTDateAndTimeType EOF )
            // InternalSTCoreParser.g:1661:1: ruleSTDateAndTimeType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateAndTimeTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTDateAndTimeType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateAndTimeTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTDateAndTimeType"


    // $ANTLR start "ruleSTDateAndTimeType"
    // InternalSTCoreParser.g:1668:1: ruleSTDateAndTimeType : ( ( rule__STDateAndTimeType__Alternatives ) ) ;
    public final void ruleSTDateAndTimeType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1672:2: ( ( ( rule__STDateAndTimeType__Alternatives ) ) )
            // InternalSTCoreParser.g:1673:2: ( ( rule__STDateAndTimeType__Alternatives ) )
            {
            // InternalSTCoreParser.g:1673:2: ( ( rule__STDateAndTimeType__Alternatives ) )
            // InternalSTCoreParser.g:1674:3: ( rule__STDateAndTimeType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateAndTimeTypeAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1675:3: ( rule__STDateAndTimeType__Alternatives )
            // InternalSTCoreParser.g:1675:4: rule__STDateAndTimeType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STDateAndTimeType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateAndTimeTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTDateAndTimeType"


    // $ANTLR start "entryRuleSTAnyCharsType"
    // InternalSTCoreParser.g:1684:1: entryRuleSTAnyCharsType : ruleSTAnyCharsType EOF ;
    public final void entryRuleSTAnyCharsType() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1685:1: ( ruleSTAnyCharsType EOF )
            // InternalSTCoreParser.g:1686:1: ruleSTAnyCharsType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyCharsTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleSTAnyCharsType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyCharsTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleSTAnyCharsType"


    // $ANTLR start "ruleSTAnyCharsType"
    // InternalSTCoreParser.g:1693:1: ruleSTAnyCharsType : ( ( rule__STAnyCharsType__Alternatives ) ) ;
    public final void ruleSTAnyCharsType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1697:2: ( ( ( rule__STAnyCharsType__Alternatives ) ) )
            // InternalSTCoreParser.g:1698:2: ( ( rule__STAnyCharsType__Alternatives ) )
            {
            // InternalSTCoreParser.g:1698:2: ( ( rule__STAnyCharsType__Alternatives ) )
            // InternalSTCoreParser.g:1699:3: ( rule__STAnyCharsType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAnyCharsTypeAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1700:3: ( rule__STAnyCharsType__Alternatives )
            // InternalSTCoreParser.g:1700:4: rule__STAnyCharsType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STAnyCharsType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAnyCharsTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTAnyCharsType"


    // $ANTLR start "entryRuleNumeric"
    // InternalSTCoreParser.g:1709:1: entryRuleNumeric : ruleNumeric EOF ;
    public final void entryRuleNumeric() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1710:1: ( ruleNumeric EOF )
            // InternalSTCoreParser.g:1711:1: ruleNumeric EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumericRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNumeric();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumericRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleNumeric"


    // $ANTLR start "ruleNumeric"
    // InternalSTCoreParser.g:1718:1: ruleNumeric : ( ( rule__Numeric__Alternatives ) ) ;
    public final void ruleNumeric() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1722:2: ( ( ( rule__Numeric__Alternatives ) ) )
            // InternalSTCoreParser.g:1723:2: ( ( rule__Numeric__Alternatives ) )
            {
            // InternalSTCoreParser.g:1723:2: ( ( rule__Numeric__Alternatives ) )
            // InternalSTCoreParser.g:1724:3: ( rule__Numeric__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumericAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1725:3: ( rule__Numeric__Alternatives )
            // InternalSTCoreParser.g:1725:4: rule__Numeric__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Numeric__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumericAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleNumeric"


    // $ANTLR start "entryRuleNumber"
    // InternalSTCoreParser.g:1734:1: entryRuleNumber : ruleNumber EOF ;
    public final void entryRuleNumber() throws RecognitionException {
         
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalSTCoreParser.g:1738:1: ( ruleNumber EOF )
            // InternalSTCoreParser.g:1739:1: ruleNumber EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleNumber();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	myHiddenTokenState.restore();

        }
        return ;
    }
    // $ANTLR end "entryRuleNumber"


    // $ANTLR start "ruleNumber"
    // InternalSTCoreParser.g:1749:1: ruleNumber : ( ( rule__Number__Group__0 ) ) ;
    public final void ruleNumber() throws RecognitionException {

        		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1754:2: ( ( ( rule__Number__Group__0 ) ) )
            // InternalSTCoreParser.g:1755:2: ( ( rule__Number__Group__0 ) )
            {
            // InternalSTCoreParser.g:1755:2: ( ( rule__Number__Group__0 ) )
            // InternalSTCoreParser.g:1756:3: ( rule__Number__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1757:3: ( rule__Number__Group__0 )
            // InternalSTCoreParser.g:1757:4: rule__Number__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Number__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);
            	myHiddenTokenState.restore();

        }
        return ;
    }
    // $ANTLR end "ruleNumber"


    // $ANTLR start "entryRuleTime"
    // InternalSTCoreParser.g:1767:1: entryRuleTime : ruleTime EOF ;
    public final void entryRuleTime() throws RecognitionException {
         
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();

        try {
            // InternalSTCoreParser.g:1771:1: ( ruleTime EOF )
            // InternalSTCoreParser.g:1772:1: ruleTime EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleTime();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	myHiddenTokenState.restore();

        }
        return ;
    }
    // $ANTLR end "entryRuleTime"


    // $ANTLR start "ruleTime"
    // InternalSTCoreParser.g:1782:1: ruleTime : ( ( rule__Time__Group__0 ) ) ;
    public final void ruleTime() throws RecognitionException {

        		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1787:2: ( ( ( rule__Time__Group__0 ) ) )
            // InternalSTCoreParser.g:1788:2: ( ( rule__Time__Group__0 ) )
            {
            // InternalSTCoreParser.g:1788:2: ( ( rule__Time__Group__0 ) )
            // InternalSTCoreParser.g:1789:3: ( rule__Time__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1790:3: ( rule__Time__Group__0 )
            // InternalSTCoreParser.g:1790:4: rule__Time__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Time__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);
            	myHiddenTokenState.restore();

        }
        return ;
    }
    // $ANTLR end "ruleTime"


    // $ANTLR start "entryRuleDate"
    // InternalSTCoreParser.g:1800:1: entryRuleDate : ruleDate EOF ;
    public final void entryRuleDate() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1801:1: ( ruleDate EOF )
            // InternalSTCoreParser.g:1802:1: ruleDate EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDate();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDate"


    // $ANTLR start "ruleDate"
    // InternalSTCoreParser.g:1809:1: ruleDate : ( ( rule__Date__Group__0 ) ) ;
    public final void ruleDate() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1813:2: ( ( ( rule__Date__Group__0 ) ) )
            // InternalSTCoreParser.g:1814:2: ( ( rule__Date__Group__0 ) )
            {
            // InternalSTCoreParser.g:1814:2: ( ( rule__Date__Group__0 ) )
            // InternalSTCoreParser.g:1815:3: ( rule__Date__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1816:3: ( rule__Date__Group__0 )
            // InternalSTCoreParser.g:1816:4: rule__Date__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Date__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDate"


    // $ANTLR start "entryRuleDateAndTime"
    // InternalSTCoreParser.g:1825:1: entryRuleDateAndTime : ruleDateAndTime EOF ;
    public final void entryRuleDateAndTime() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1826:1: ( ruleDateAndTime EOF )
            // InternalSTCoreParser.g:1827:1: ruleDateAndTime EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleDateAndTime();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleDateAndTime"


    // $ANTLR start "ruleDateAndTime"
    // InternalSTCoreParser.g:1834:1: ruleDateAndTime : ( ( rule__DateAndTime__Group__0 ) ) ;
    public final void ruleDateAndTime() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1838:2: ( ( ( rule__DateAndTime__Group__0 ) ) )
            // InternalSTCoreParser.g:1839:2: ( ( rule__DateAndTime__Group__0 ) )
            {
            // InternalSTCoreParser.g:1839:2: ( ( rule__DateAndTime__Group__0 ) )
            // InternalSTCoreParser.g:1840:3: ( rule__DateAndTime__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1841:3: ( rule__DateAndTime__Group__0 )
            // InternalSTCoreParser.g:1841:4: rule__DateAndTime__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleDateAndTime"


    // $ANTLR start "entryRuleTimeOfDay"
    // InternalSTCoreParser.g:1850:1: entryRuleTimeOfDay : ruleTimeOfDay EOF ;
    public final void entryRuleTimeOfDay() throws RecognitionException {
        try {
            // InternalSTCoreParser.g:1851:1: ( ruleTimeOfDay EOF )
            // InternalSTCoreParser.g:1852:1: ruleTimeOfDay EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeOfDayRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleTimeOfDay();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeOfDayRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleTimeOfDay"


    // $ANTLR start "ruleTimeOfDay"
    // InternalSTCoreParser.g:1859:1: ruleTimeOfDay : ( ( rule__TimeOfDay__Group__0 ) ) ;
    public final void ruleTimeOfDay() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1863:2: ( ( ( rule__TimeOfDay__Group__0 ) ) )
            // InternalSTCoreParser.g:1864:2: ( ( rule__TimeOfDay__Group__0 ) )
            {
            // InternalSTCoreParser.g:1864:2: ( ( rule__TimeOfDay__Group__0 ) )
            // InternalSTCoreParser.g:1865:3: ( rule__TimeOfDay__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeOfDayAccess().getGroup()); 
            }
            // InternalSTCoreParser.g:1866:3: ( rule__TimeOfDay__Group__0 )
            // InternalSTCoreParser.g:1866:4: rule__TimeOfDay__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__TimeOfDay__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeOfDayAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleTimeOfDay"


    // $ANTLR start "ruleSubrangeOperator"
    // InternalSTCoreParser.g:1875:1: ruleSubrangeOperator : ( ( FullStopFullStop ) ) ;
    public final void ruleSubrangeOperator() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1879:1: ( ( ( FullStopFullStop ) ) )
            // InternalSTCoreParser.g:1880:2: ( ( FullStopFullStop ) )
            {
            // InternalSTCoreParser.g:1880:2: ( ( FullStopFullStop ) )
            // InternalSTCoreParser.g:1881:3: ( FullStopFullStop )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSubrangeOperatorAccess().getRangeEnumLiteralDeclaration()); 
            }
            // InternalSTCoreParser.g:1882:3: ( FullStopFullStop )
            // InternalSTCoreParser.g:1882:4: FullStopFullStop
            {
            match(input,FullStopFullStop,FOLLOW_2); if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSubrangeOperatorAccess().getRangeEnumLiteralDeclaration()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSubrangeOperator"


    // $ANTLR start "ruleOrOperator"
    // InternalSTCoreParser.g:1891:1: ruleOrOperator : ( ( OR ) ) ;
    public final void ruleOrOperator() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1895:1: ( ( ( OR ) ) )
            // InternalSTCoreParser.g:1896:2: ( ( OR ) )
            {
            // InternalSTCoreParser.g:1896:2: ( ( OR ) )
            // InternalSTCoreParser.g:1897:3: ( OR )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); 
            }
            // InternalSTCoreParser.g:1898:3: ( OR )
            // InternalSTCoreParser.g:1898:4: OR
            {
            match(input,OR,FOLLOW_2); if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleOrOperator"


    // $ANTLR start "ruleXorOperator"
    // InternalSTCoreParser.g:1907:1: ruleXorOperator : ( ( XOR ) ) ;
    public final void ruleXorOperator() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1911:1: ( ( ( XOR ) ) )
            // InternalSTCoreParser.g:1912:2: ( ( XOR ) )
            {
            // InternalSTCoreParser.g:1912:2: ( ( XOR ) )
            // InternalSTCoreParser.g:1913:3: ( XOR )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXorOperatorAccess().getXOREnumLiteralDeclaration()); 
            }
            // InternalSTCoreParser.g:1914:3: ( XOR )
            // InternalSTCoreParser.g:1914:4: XOR
            {
            match(input,XOR,FOLLOW_2); if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getXorOperatorAccess().getXOREnumLiteralDeclaration()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleXorOperator"


    // $ANTLR start "ruleAndOperator"
    // InternalSTCoreParser.g:1923:1: ruleAndOperator : ( ( rule__AndOperator__Alternatives ) ) ;
    public final void ruleAndOperator() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1927:1: ( ( ( rule__AndOperator__Alternatives ) ) )
            // InternalSTCoreParser.g:1928:2: ( ( rule__AndOperator__Alternatives ) )
            {
            // InternalSTCoreParser.g:1928:2: ( ( rule__AndOperator__Alternatives ) )
            // InternalSTCoreParser.g:1929:3: ( rule__AndOperator__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAndOperatorAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1930:3: ( rule__AndOperator__Alternatives )
            // InternalSTCoreParser.g:1930:4: rule__AndOperator__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__AndOperator__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAndOperatorAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleAndOperator"


    // $ANTLR start "ruleEqualityOperator"
    // InternalSTCoreParser.g:1939:1: ruleEqualityOperator : ( ( rule__EqualityOperator__Alternatives ) ) ;
    public final void ruleEqualityOperator() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1943:1: ( ( ( rule__EqualityOperator__Alternatives ) ) )
            // InternalSTCoreParser.g:1944:2: ( ( rule__EqualityOperator__Alternatives ) )
            {
            // InternalSTCoreParser.g:1944:2: ( ( rule__EqualityOperator__Alternatives ) )
            // InternalSTCoreParser.g:1945:3: ( rule__EqualityOperator__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getEqualityOperatorAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1946:3: ( rule__EqualityOperator__Alternatives )
            // InternalSTCoreParser.g:1946:4: rule__EqualityOperator__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__EqualityOperator__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getEqualityOperatorAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleEqualityOperator"


    // $ANTLR start "ruleCompareOperator"
    // InternalSTCoreParser.g:1955:1: ruleCompareOperator : ( ( rule__CompareOperator__Alternatives ) ) ;
    public final void ruleCompareOperator() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1959:1: ( ( ( rule__CompareOperator__Alternatives ) ) )
            // InternalSTCoreParser.g:1960:2: ( ( rule__CompareOperator__Alternatives ) )
            {
            // InternalSTCoreParser.g:1960:2: ( ( rule__CompareOperator__Alternatives ) )
            // InternalSTCoreParser.g:1961:3: ( rule__CompareOperator__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCompareOperatorAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1962:3: ( rule__CompareOperator__Alternatives )
            // InternalSTCoreParser.g:1962:4: rule__CompareOperator__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__CompareOperator__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getCompareOperatorAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleCompareOperator"


    // $ANTLR start "ruleAddSubOperator"
    // InternalSTCoreParser.g:1971:1: ruleAddSubOperator : ( ( rule__AddSubOperator__Alternatives ) ) ;
    public final void ruleAddSubOperator() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1975:1: ( ( ( rule__AddSubOperator__Alternatives ) ) )
            // InternalSTCoreParser.g:1976:2: ( ( rule__AddSubOperator__Alternatives ) )
            {
            // InternalSTCoreParser.g:1976:2: ( ( rule__AddSubOperator__Alternatives ) )
            // InternalSTCoreParser.g:1977:3: ( rule__AddSubOperator__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAddSubOperatorAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1978:3: ( rule__AddSubOperator__Alternatives )
            // InternalSTCoreParser.g:1978:4: rule__AddSubOperator__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__AddSubOperator__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAddSubOperatorAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleAddSubOperator"


    // $ANTLR start "ruleMulDivModOperator"
    // InternalSTCoreParser.g:1987:1: ruleMulDivModOperator : ( ( rule__MulDivModOperator__Alternatives ) ) ;
    public final void ruleMulDivModOperator() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:1991:1: ( ( ( rule__MulDivModOperator__Alternatives ) ) )
            // InternalSTCoreParser.g:1992:2: ( ( rule__MulDivModOperator__Alternatives ) )
            {
            // InternalSTCoreParser.g:1992:2: ( ( rule__MulDivModOperator__Alternatives ) )
            // InternalSTCoreParser.g:1993:3: ( rule__MulDivModOperator__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMulDivModOperatorAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:1994:3: ( rule__MulDivModOperator__Alternatives )
            // InternalSTCoreParser.g:1994:4: rule__MulDivModOperator__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__MulDivModOperator__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMulDivModOperatorAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleMulDivModOperator"


    // $ANTLR start "rulePowerOperator"
    // InternalSTCoreParser.g:2003:1: rulePowerOperator : ( ( AsteriskAsterisk ) ) ;
    public final void rulePowerOperator() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2007:1: ( ( ( AsteriskAsterisk ) ) )
            // InternalSTCoreParser.g:2008:2: ( ( AsteriskAsterisk ) )
            {
            // InternalSTCoreParser.g:2008:2: ( ( AsteriskAsterisk ) )
            // InternalSTCoreParser.g:2009:3: ( AsteriskAsterisk )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPowerOperatorAccess().getPOWEREnumLiteralDeclaration()); 
            }
            // InternalSTCoreParser.g:2010:3: ( AsteriskAsterisk )
            // InternalSTCoreParser.g:2010:4: AsteriskAsterisk
            {
            match(input,AsteriskAsterisk,FOLLOW_2); if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPowerOperatorAccess().getPOWEREnumLiteralDeclaration()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePowerOperator"


    // $ANTLR start "ruleUnaryOperator"
    // InternalSTCoreParser.g:2019:1: ruleUnaryOperator : ( ( rule__UnaryOperator__Alternatives ) ) ;
    public final void ruleUnaryOperator() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2023:1: ( ( ( rule__UnaryOperator__Alternatives ) ) )
            // InternalSTCoreParser.g:2024:2: ( ( rule__UnaryOperator__Alternatives ) )
            {
            // InternalSTCoreParser.g:2024:2: ( ( rule__UnaryOperator__Alternatives ) )
            // InternalSTCoreParser.g:2025:3: ( rule__UnaryOperator__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:2026:3: ( rule__UnaryOperator__Alternatives )
            // InternalSTCoreParser.g:2026:4: rule__UnaryOperator__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__UnaryOperator__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleUnaryOperator"


    // $ANTLR start "ruleSTBuiltinFeature"
    // InternalSTCoreParser.g:2035:1: ruleSTBuiltinFeature : ( ( THIS ) ) ;
    public final void ruleSTBuiltinFeature() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2039:1: ( ( ( THIS ) ) )
            // InternalSTCoreParser.g:2040:2: ( ( THIS ) )
            {
            // InternalSTCoreParser.g:2040:2: ( ( THIS ) )
            // InternalSTCoreParser.g:2041:3: ( THIS )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureAccess().getTHISEnumLiteralDeclaration()); 
            }
            // InternalSTCoreParser.g:2042:3: ( THIS )
            // InternalSTCoreParser.g:2042:4: THIS
            {
            match(input,THIS,FOLLOW_2); if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureAccess().getTHISEnumLiteralDeclaration()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTBuiltinFeature"


    // $ANTLR start "ruleSTMultiBitAccessSpecifier"
    // InternalSTCoreParser.g:2051:1: ruleSTMultiBitAccessSpecifier : ( ( rule__STMultiBitAccessSpecifier__Alternatives ) ) ;
    public final void ruleSTMultiBitAccessSpecifier() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2055:1: ( ( ( rule__STMultiBitAccessSpecifier__Alternatives ) ) )
            // InternalSTCoreParser.g:2056:2: ( ( rule__STMultiBitAccessSpecifier__Alternatives ) )
            {
            // InternalSTCoreParser.g:2056:2: ( ( rule__STMultiBitAccessSpecifier__Alternatives ) )
            // InternalSTCoreParser.g:2057:3: ( rule__STMultiBitAccessSpecifier__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMultiBitAccessSpecifierAccess().getAlternatives()); 
            }
            // InternalSTCoreParser.g:2058:3: ( rule__STMultiBitAccessSpecifier__Alternatives )
            // InternalSTCoreParser.g:2058:4: rule__STMultiBitAccessSpecifier__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__STMultiBitAccessSpecifier__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMultiBitAccessSpecifierAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleSTMultiBitAccessSpecifier"


    // $ANTLR start "rule__STVarDeclaration__Alternatives_4_1"
    // InternalSTCoreParser.g:2066:1: rule__STVarDeclaration__Alternatives_4_1 : ( ( ( rule__STVarDeclaration__Group_4_1_0__0 ) ) | ( ( rule__STVarDeclaration__Group_4_1_1__0 ) ) );
    public final void rule__STVarDeclaration__Alternatives_4_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2070:1: ( ( ( rule__STVarDeclaration__Group_4_1_0__0 ) ) | ( ( rule__STVarDeclaration__Group_4_1_1__0 ) ) )
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==LeftSquareBracket) ) {
                int LA1_1 = input.LA(2);

                if ( (LA1_1==Asterisk) ) {
                    alt1=2;
                }
                else if ( (LA1_1==LDATE_AND_TIME||LA1_1==DATE_AND_TIME||LA1_1==LTIME_OF_DAY||LA1_1==TIME_OF_DAY||LA1_1==WSTRING||LA1_1==STRING||LA1_1==DWORD||LA1_1==FALSE||(LA1_1>=LDATE && LA1_1<=ULINT)||(LA1_1>=USINT && LA1_1<=WCHAR)||(LA1_1>=BOOL && LA1_1<=BYTE)||(LA1_1>=CHAR && LA1_1<=DINT)||(LA1_1>=LINT && LA1_1<=LTOD)||(LA1_1>=REAL && LA1_1<=SINT)||(LA1_1>=THIS && LA1_1<=TRUE)||LA1_1==UINT||(LA1_1>=WORD && LA1_1<=AND)||(LA1_1>=INT && LA1_1<=NOT)||LA1_1==TOD||LA1_1==XOR||LA1_1==DT||(LA1_1>=LD && LA1_1<=LT)||LA1_1==OR||LA1_1==LeftParenthesis||LA1_1==PlusSign||LA1_1==HyphenMinus||(LA1_1>=D && LA1_1<=T)||(LA1_1>=RULE_NON_DECIMAL && LA1_1<=RULE_DECIMAL)||(LA1_1>=RULE_ID && LA1_1<=RULE_STRING)) ) {
                    alt1=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 1, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }
            switch (alt1) {
                case 1 :
                    // InternalSTCoreParser.g:2071:2: ( ( rule__STVarDeclaration__Group_4_1_0__0 ) )
                    {
                    // InternalSTCoreParser.g:2071:2: ( ( rule__STVarDeclaration__Group_4_1_0__0 ) )
                    // InternalSTCoreParser.g:2072:3: ( rule__STVarDeclaration__Group_4_1_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTVarDeclarationAccess().getGroup_4_1_0()); 
                    }
                    // InternalSTCoreParser.g:2073:3: ( rule__STVarDeclaration__Group_4_1_0__0 )
                    // InternalSTCoreParser.g:2073:4: rule__STVarDeclaration__Group_4_1_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STVarDeclaration__Group_4_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTVarDeclarationAccess().getGroup_4_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2077:2: ( ( rule__STVarDeclaration__Group_4_1_1__0 ) )
                    {
                    // InternalSTCoreParser.g:2077:2: ( ( rule__STVarDeclaration__Group_4_1_1__0 ) )
                    // InternalSTCoreParser.g:2078:3: ( rule__STVarDeclaration__Group_4_1_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTVarDeclarationAccess().getGroup_4_1_1()); 
                    }
                    // InternalSTCoreParser.g:2079:3: ( rule__STVarDeclaration__Group_4_1_1__0 )
                    // InternalSTCoreParser.g:2079:4: rule__STVarDeclaration__Group_4_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STVarDeclaration__Group_4_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTVarDeclarationAccess().getGroup_4_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Alternatives_4_1"


    // $ANTLR start "rule__STInitializerExpression__Alternatives"
    // InternalSTCoreParser.g:2087:1: rule__STInitializerExpression__Alternatives : ( ( ruleSTElementaryInitializerExpression ) | ( ruleSTArrayInitializerExpression ) | ( ruleSTStructInitializerExpression ) );
    public final void rule__STInitializerExpression__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2091:1: ( ( ruleSTElementaryInitializerExpression ) | ( ruleSTArrayInitializerExpression ) | ( ruleSTStructInitializerExpression ) )
            int alt2=3;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // InternalSTCoreParser.g:2092:2: ( ruleSTElementaryInitializerExpression )
                    {
                    // InternalSTCoreParser.g:2092:2: ( ruleSTElementaryInitializerExpression )
                    // InternalSTCoreParser.g:2093:3: ruleSTElementaryInitializerExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTInitializerExpressionAccess().getSTElementaryInitializerExpressionParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTElementaryInitializerExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTInitializerExpressionAccess().getSTElementaryInitializerExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2098:2: ( ruleSTArrayInitializerExpression )
                    {
                    // InternalSTCoreParser.g:2098:2: ( ruleSTArrayInitializerExpression )
                    // InternalSTCoreParser.g:2099:3: ruleSTArrayInitializerExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTInitializerExpressionAccess().getSTArrayInitializerExpressionParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTArrayInitializerExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTInitializerExpressionAccess().getSTArrayInitializerExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2104:2: ( ruleSTStructInitializerExpression )
                    {
                    // InternalSTCoreParser.g:2104:2: ( ruleSTStructInitializerExpression )
                    // InternalSTCoreParser.g:2105:3: ruleSTStructInitializerExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTInitializerExpressionAccess().getSTStructInitializerExpressionParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTStructInitializerExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTInitializerExpressionAccess().getSTStructInitializerExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STInitializerExpression__Alternatives"


    // $ANTLR start "rule__STStatement__Alternatives"
    // InternalSTCoreParser.g:2114:1: rule__STStatement__Alternatives : ( ( ( rule__STStatement__Group_0__0 ) ) | ( ( rule__STStatement__Group_1__0 ) ) );
    public final void rule__STStatement__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2118:1: ( ( ( rule__STStatement__Group_0__0 ) ) | ( ( rule__STStatement__Group_1__0 ) ) )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==LDATE_AND_TIME||LA3_0==DATE_AND_TIME||LA3_0==LTIME_OF_DAY||LA3_0==TIME_OF_DAY||LA3_0==CONTINUE||LA3_0==WSTRING||LA3_0==REPEAT||LA3_0==RETURN||LA3_0==STRING||LA3_0==DWORD||LA3_0==FALSE||(LA3_0>=LDATE && LA3_0<=ULINT)||(LA3_0>=USINT && LA3_0<=DINT)||(LA3_0>=EXIT && LA3_0<=LTOD)||(LA3_0>=REAL && LA3_0<=SINT)||(LA3_0>=THIS && LA3_0<=TRUE)||LA3_0==UINT||(LA3_0>=WORD && LA3_0<=MOD)||LA3_0==TOD||LA3_0==XOR||(LA3_0>=DT && LA3_0<=LT)||LA3_0==OR||LA3_0==LeftParenthesis||LA3_0==PlusSign||LA3_0==HyphenMinus||(LA3_0>=D && LA3_0<=T)||(LA3_0>=RULE_NON_DECIMAL && LA3_0<=RULE_DECIMAL)||(LA3_0>=RULE_ID && LA3_0<=RULE_STRING)) ) {
                alt3=1;
            }
            else if ( (LA3_0==Semicolon) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }
            switch (alt3) {
                case 1 :
                    // InternalSTCoreParser.g:2119:2: ( ( rule__STStatement__Group_0__0 ) )
                    {
                    // InternalSTCoreParser.g:2119:2: ( ( rule__STStatement__Group_0__0 ) )
                    // InternalSTCoreParser.g:2120:3: ( rule__STStatement__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTStatementAccess().getGroup_0()); 
                    }
                    // InternalSTCoreParser.g:2121:3: ( rule__STStatement__Group_0__0 )
                    // InternalSTCoreParser.g:2121:4: rule__STStatement__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STStatement__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTStatementAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2125:2: ( ( rule__STStatement__Group_1__0 ) )
                    {
                    // InternalSTCoreParser.g:2125:2: ( ( rule__STStatement__Group_1__0 ) )
                    // InternalSTCoreParser.g:2126:3: ( rule__STStatement__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTStatementAccess().getGroup_1()); 
                    }
                    // InternalSTCoreParser.g:2127:3: ( rule__STStatement__Group_1__0 )
                    // InternalSTCoreParser.g:2127:4: rule__STStatement__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STStatement__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTStatementAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Alternatives"


    // $ANTLR start "rule__STStatement__Alternatives_0_0"
    // InternalSTCoreParser.g:2135:1: rule__STStatement__Alternatives_0_0 : ( ( ruleSTIfStatement ) | ( ruleSTCaseStatement ) | ( ruleSTForStatement ) | ( ruleSTWhileStatement ) | ( ruleSTRepeatStatement ) | ( ( ruleSTAssignmentStatement ) ) | ( ruleSTCallStatement ) | ( ( rule__STStatement__Group_0_0_7__0 ) ) | ( ( rule__STStatement__Group_0_0_8__0 ) ) | ( ( rule__STStatement__Group_0_0_9__0 ) ) );
    public final void rule__STStatement__Alternatives_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2139:1: ( ( ruleSTIfStatement ) | ( ruleSTCaseStatement ) | ( ruleSTForStatement ) | ( ruleSTWhileStatement ) | ( ruleSTRepeatStatement ) | ( ( ruleSTAssignmentStatement ) ) | ( ruleSTCallStatement ) | ( ( rule__STStatement__Group_0_0_7__0 ) ) | ( ( rule__STStatement__Group_0_0_8__0 ) ) | ( ( rule__STStatement__Group_0_0_9__0 ) ) )
            int alt4=10;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    // InternalSTCoreParser.g:2140:2: ( ruleSTIfStatement )
                    {
                    // InternalSTCoreParser.g:2140:2: ( ruleSTIfStatement )
                    // InternalSTCoreParser.g:2141:3: ruleSTIfStatement
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTStatementAccess().getSTIfStatementParserRuleCall_0_0_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTIfStatement();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTStatementAccess().getSTIfStatementParserRuleCall_0_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2146:2: ( ruleSTCaseStatement )
                    {
                    // InternalSTCoreParser.g:2146:2: ( ruleSTCaseStatement )
                    // InternalSTCoreParser.g:2147:3: ruleSTCaseStatement
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTStatementAccess().getSTCaseStatementParserRuleCall_0_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTCaseStatement();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTStatementAccess().getSTCaseStatementParserRuleCall_0_0_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2152:2: ( ruleSTForStatement )
                    {
                    // InternalSTCoreParser.g:2152:2: ( ruleSTForStatement )
                    // InternalSTCoreParser.g:2153:3: ruleSTForStatement
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTStatementAccess().getSTForStatementParserRuleCall_0_0_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTForStatement();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTStatementAccess().getSTForStatementParserRuleCall_0_0_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSTCoreParser.g:2158:2: ( ruleSTWhileStatement )
                    {
                    // InternalSTCoreParser.g:2158:2: ( ruleSTWhileStatement )
                    // InternalSTCoreParser.g:2159:3: ruleSTWhileStatement
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTStatementAccess().getSTWhileStatementParserRuleCall_0_0_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTWhileStatement();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTStatementAccess().getSTWhileStatementParserRuleCall_0_0_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalSTCoreParser.g:2164:2: ( ruleSTRepeatStatement )
                    {
                    // InternalSTCoreParser.g:2164:2: ( ruleSTRepeatStatement )
                    // InternalSTCoreParser.g:2165:3: ruleSTRepeatStatement
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTStatementAccess().getSTRepeatStatementParserRuleCall_0_0_4()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTRepeatStatement();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTStatementAccess().getSTRepeatStatementParserRuleCall_0_0_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalSTCoreParser.g:2170:2: ( ( ruleSTAssignmentStatement ) )
                    {
                    // InternalSTCoreParser.g:2170:2: ( ( ruleSTAssignmentStatement ) )
                    // InternalSTCoreParser.g:2171:3: ( ruleSTAssignmentStatement )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTStatementAccess().getSTAssignmentStatementParserRuleCall_0_0_5()); 
                    }
                    // InternalSTCoreParser.g:2172:3: ( ruleSTAssignmentStatement )
                    // InternalSTCoreParser.g:2172:4: ruleSTAssignmentStatement
                    {
                    pushFollow(FOLLOW_2);
                    ruleSTAssignmentStatement();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTStatementAccess().getSTAssignmentStatementParserRuleCall_0_0_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalSTCoreParser.g:2176:2: ( ruleSTCallStatement )
                    {
                    // InternalSTCoreParser.g:2176:2: ( ruleSTCallStatement )
                    // InternalSTCoreParser.g:2177:3: ruleSTCallStatement
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTStatementAccess().getSTCallStatementParserRuleCall_0_0_6()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTCallStatement();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTStatementAccess().getSTCallStatementParserRuleCall_0_0_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalSTCoreParser.g:2182:2: ( ( rule__STStatement__Group_0_0_7__0 ) )
                    {
                    // InternalSTCoreParser.g:2182:2: ( ( rule__STStatement__Group_0_0_7__0 ) )
                    // InternalSTCoreParser.g:2183:3: ( rule__STStatement__Group_0_0_7__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTStatementAccess().getGroup_0_0_7()); 
                    }
                    // InternalSTCoreParser.g:2184:3: ( rule__STStatement__Group_0_0_7__0 )
                    // InternalSTCoreParser.g:2184:4: rule__STStatement__Group_0_0_7__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STStatement__Group_0_0_7__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTStatementAccess().getGroup_0_0_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalSTCoreParser.g:2188:2: ( ( rule__STStatement__Group_0_0_8__0 ) )
                    {
                    // InternalSTCoreParser.g:2188:2: ( ( rule__STStatement__Group_0_0_8__0 ) )
                    // InternalSTCoreParser.g:2189:3: ( rule__STStatement__Group_0_0_8__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTStatementAccess().getGroup_0_0_8()); 
                    }
                    // InternalSTCoreParser.g:2190:3: ( rule__STStatement__Group_0_0_8__0 )
                    // InternalSTCoreParser.g:2190:4: rule__STStatement__Group_0_0_8__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STStatement__Group_0_0_8__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTStatementAccess().getGroup_0_0_8()); 
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalSTCoreParser.g:2194:2: ( ( rule__STStatement__Group_0_0_9__0 ) )
                    {
                    // InternalSTCoreParser.g:2194:2: ( ( rule__STStatement__Group_0_0_9__0 ) )
                    // InternalSTCoreParser.g:2195:3: ( rule__STStatement__Group_0_0_9__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTStatementAccess().getGroup_0_0_9()); 
                    }
                    // InternalSTCoreParser.g:2196:3: ( rule__STStatement__Group_0_0_9__0 )
                    // InternalSTCoreParser.g:2196:4: rule__STStatement__Group_0_0_9__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STStatement__Group_0_0_9__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTStatementAccess().getGroup_0_0_9()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Alternatives_0_0"


    // $ANTLR start "rule__STCallArgument__Alternatives"
    // InternalSTCoreParser.g:2204:1: rule__STCallArgument__Alternatives : ( ( ruleSTCallUnnamedArgument ) | ( ruleSTCallNamedInputArgument ) | ( ruleSTCallNamedOutputArgument ) );
    public final void rule__STCallArgument__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2208:1: ( ( ruleSTCallUnnamedArgument ) | ( ruleSTCallNamedInputArgument ) | ( ruleSTCallNamedOutputArgument ) )
            int alt5=3;
            switch ( input.LA(1) ) {
            case LDATE_AND_TIME:
            case DATE_AND_TIME:
            case LTIME_OF_DAY:
            case TIME_OF_DAY:
            case WSTRING:
            case STRING:
            case DWORD:
            case FALSE:
            case LDATE:
            case LREAL:
            case LTIME:
            case LWORD:
            case UDINT:
            case ULINT:
            case USINT:
            case WCHAR:
            case BOOL:
            case BYTE:
            case CHAR:
            case DATE:
            case DINT:
            case LINT:
            case LTOD:
            case REAL:
            case SINT:
            case THIS:
            case TIME:
            case TRUE:
            case UINT:
            case WORD:
            case AND:
            case INT:
            case LDT:
            case MOD:
            case TOD:
            case XOR:
            case DT:
            case LD:
            case LT:
            case OR:
            case LeftParenthesis:
            case PlusSign:
            case HyphenMinus:
            case D:
            case T:
            case RULE_NON_DECIMAL:
            case RULE_INT:
            case RULE_DECIMAL:
            case RULE_STRING:
                {
                alt5=1;
                }
                break;
            case RULE_ID:
                {
                switch ( input.LA(2) ) {
                case ColonEqualsSign:
                    {
                    alt5=2;
                    }
                    break;
                case EOF:
                case AND:
                case MOD:
                case XOR:
                case AsteriskAsterisk:
                case FullStopFullStop:
                case LessThanSignEqualsSign:
                case LessThanSignGreaterThanSign:
                case GreaterThanSignEqualsSign:
                case OR:
                case Ampersand:
                case LeftParenthesis:
                case RightParenthesis:
                case Asterisk:
                case PlusSign:
                case Comma:
                case HyphenMinus:
                case FullStop:
                case Solidus:
                case LessThanSign:
                case EqualsSign:
                case GreaterThanSign:
                case LeftSquareBracket:
                    {
                    alt5=1;
                    }
                    break;
                case EqualsSignGreaterThanSign:
                    {
                    alt5=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 5, 2, input);

                    throw nvae;
                }

                }
                break;
            case NOT:
                {
                int LA5_3 = input.LA(2);

                if ( (LA5_3==RULE_ID) ) {
                    int LA5_6 = input.LA(3);

                    if ( (LA5_6==EOF||LA5_6==AND||LA5_6==MOD||LA5_6==XOR||(LA5_6>=AsteriskAsterisk && LA5_6<=FullStopFullStop)||(LA5_6>=LessThanSignEqualsSign && LA5_6<=LessThanSignGreaterThanSign)||LA5_6==GreaterThanSignEqualsSign||LA5_6==OR||(LA5_6>=Ampersand && LA5_6<=Solidus)||(LA5_6>=LessThanSign && LA5_6<=GreaterThanSign)||LA5_6==LeftSquareBracket) ) {
                        alt5=1;
                    }
                    else if ( (LA5_6==EqualsSignGreaterThanSign) ) {
                        alt5=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 5, 6, input);

                        throw nvae;
                    }
                }
                else if ( (LA5_3==LDATE_AND_TIME||LA5_3==DATE_AND_TIME||LA5_3==LTIME_OF_DAY||LA5_3==TIME_OF_DAY||LA5_3==WSTRING||LA5_3==STRING||LA5_3==DWORD||LA5_3==FALSE||(LA5_3>=LDATE && LA5_3<=ULINT)||(LA5_3>=USINT && LA5_3<=WCHAR)||(LA5_3>=BOOL && LA5_3<=BYTE)||(LA5_3>=CHAR && LA5_3<=DINT)||(LA5_3>=LINT && LA5_3<=LTOD)||(LA5_3>=REAL && LA5_3<=SINT)||(LA5_3>=THIS && LA5_3<=TRUE)||LA5_3==UINT||(LA5_3>=WORD && LA5_3<=AND)||(LA5_3>=INT && LA5_3<=NOT)||LA5_3==TOD||LA5_3==XOR||LA5_3==DT||(LA5_3>=LD && LA5_3<=LT)||LA5_3==OR||LA5_3==LeftParenthesis||LA5_3==PlusSign||LA5_3==HyphenMinus||(LA5_3>=D && LA5_3<=T)||(LA5_3>=RULE_NON_DECIMAL && LA5_3<=RULE_DECIMAL)||LA5_3==RULE_STRING) ) {
                    alt5=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 5, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }

            switch (alt5) {
                case 1 :
                    // InternalSTCoreParser.g:2209:2: ( ruleSTCallUnnamedArgument )
                    {
                    // InternalSTCoreParser.g:2209:2: ( ruleSTCallUnnamedArgument )
                    // InternalSTCoreParser.g:2210:3: ruleSTCallUnnamedArgument
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTCallArgumentAccess().getSTCallUnnamedArgumentParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTCallUnnamedArgument();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTCallArgumentAccess().getSTCallUnnamedArgumentParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2215:2: ( ruleSTCallNamedInputArgument )
                    {
                    // InternalSTCoreParser.g:2215:2: ( ruleSTCallNamedInputArgument )
                    // InternalSTCoreParser.g:2216:3: ruleSTCallNamedInputArgument
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTCallArgumentAccess().getSTCallNamedInputArgumentParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTCallNamedInputArgument();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTCallArgumentAccess().getSTCallNamedInputArgumentParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2221:2: ( ruleSTCallNamedOutputArgument )
                    {
                    // InternalSTCoreParser.g:2221:2: ( ruleSTCallNamedOutputArgument )
                    // InternalSTCoreParser.g:2222:3: ruleSTCallNamedOutputArgument
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTCallArgumentAccess().getSTCallNamedOutputArgumentParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTCallNamedOutputArgument();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTCallArgumentAccess().getSTCallNamedOutputArgumentParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallArgument__Alternatives"


    // $ANTLR start "rule__STUnaryExpression__Alternatives"
    // InternalSTCoreParser.g:2231:1: rule__STUnaryExpression__Alternatives : ( ( ( ruleSTAccessExpression ) ) | ( ( rule__STUnaryExpression__Group_1__0 ) ) );
    public final void rule__STUnaryExpression__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2235:1: ( ( ( ruleSTAccessExpression ) ) | ( ( rule__STUnaryExpression__Group_1__0 ) ) )
            int alt6=2;
            switch ( input.LA(1) ) {
            case LDATE_AND_TIME:
            case DATE_AND_TIME:
            case LTIME_OF_DAY:
            case TIME_OF_DAY:
            case WSTRING:
            case STRING:
            case DWORD:
            case FALSE:
            case LDATE:
            case LREAL:
            case LTIME:
            case LWORD:
            case UDINT:
            case ULINT:
            case USINT:
            case WCHAR:
            case BOOL:
            case BYTE:
            case CHAR:
            case DATE:
            case DINT:
            case LINT:
            case LTOD:
            case REAL:
            case SINT:
            case THIS:
            case TIME:
            case TRUE:
            case UINT:
            case WORD:
            case AND:
            case INT:
            case LDT:
            case MOD:
            case TOD:
            case XOR:
            case DT:
            case LD:
            case LT:
            case OR:
            case LeftParenthesis:
            case D:
            case T:
            case RULE_NON_DECIMAL:
            case RULE_INT:
            case RULE_DECIMAL:
            case RULE_ID:
            case RULE_STRING:
                {
                alt6=1;
                }
                break;
            case PlusSign:
                {
                int LA6_2 = input.LA(2);

                if ( (synpred16_InternalSTCoreParser()) ) {
                    alt6=1;
                }
                else if ( (true) ) {
                    alt6=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 2, input);

                    throw nvae;
                }
                }
                break;
            case HyphenMinus:
                {
                int LA6_3 = input.LA(2);

                if ( (synpred16_InternalSTCoreParser()) ) {
                    alt6=1;
                }
                else if ( (true) ) {
                    alt6=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 3, input);

                    throw nvae;
                }
                }
                break;
            case NOT:
                {
                alt6=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }

            switch (alt6) {
                case 1 :
                    // InternalSTCoreParser.g:2236:2: ( ( ruleSTAccessExpression ) )
                    {
                    // InternalSTCoreParser.g:2236:2: ( ( ruleSTAccessExpression ) )
                    // InternalSTCoreParser.g:2237:3: ( ruleSTAccessExpression )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTUnaryExpressionAccess().getSTAccessExpressionParserRuleCall_0()); 
                    }
                    // InternalSTCoreParser.g:2238:3: ( ruleSTAccessExpression )
                    // InternalSTCoreParser.g:2238:4: ruleSTAccessExpression
                    {
                    pushFollow(FOLLOW_2);
                    ruleSTAccessExpression();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTUnaryExpressionAccess().getSTAccessExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2242:2: ( ( rule__STUnaryExpression__Group_1__0 ) )
                    {
                    // InternalSTCoreParser.g:2242:2: ( ( rule__STUnaryExpression__Group_1__0 ) )
                    // InternalSTCoreParser.g:2243:3: ( rule__STUnaryExpression__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTUnaryExpressionAccess().getGroup_1()); 
                    }
                    // InternalSTCoreParser.g:2244:3: ( rule__STUnaryExpression__Group_1__0 )
                    // InternalSTCoreParser.g:2244:4: rule__STUnaryExpression__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STUnaryExpression__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTUnaryExpressionAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STUnaryExpression__Alternatives"


    // $ANTLR start "rule__STAccessExpression__Alternatives_1"
    // InternalSTCoreParser.g:2252:1: rule__STAccessExpression__Alternatives_1 : ( ( ( rule__STAccessExpression__Group_1_0__0 ) ) | ( ( rule__STAccessExpression__Group_1_1__0 ) ) );
    public final void rule__STAccessExpression__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2256:1: ( ( ( rule__STAccessExpression__Group_1_0__0 ) ) | ( ( rule__STAccessExpression__Group_1_1__0 ) ) )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==FullStop) ) {
                alt7=1;
            }
            else if ( (LA7_0==LeftSquareBracket) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }
            switch (alt7) {
                case 1 :
                    // InternalSTCoreParser.g:2257:2: ( ( rule__STAccessExpression__Group_1_0__0 ) )
                    {
                    // InternalSTCoreParser.g:2257:2: ( ( rule__STAccessExpression__Group_1_0__0 ) )
                    // InternalSTCoreParser.g:2258:3: ( rule__STAccessExpression__Group_1_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAccessExpressionAccess().getGroup_1_0()); 
                    }
                    // InternalSTCoreParser.g:2259:3: ( rule__STAccessExpression__Group_1_0__0 )
                    // InternalSTCoreParser.g:2259:4: rule__STAccessExpression__Group_1_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STAccessExpression__Group_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAccessExpressionAccess().getGroup_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2263:2: ( ( rule__STAccessExpression__Group_1_1__0 ) )
                    {
                    // InternalSTCoreParser.g:2263:2: ( ( rule__STAccessExpression__Group_1_1__0 ) )
                    // InternalSTCoreParser.g:2264:3: ( rule__STAccessExpression__Group_1_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAccessExpressionAccess().getGroup_1_1()); 
                    }
                    // InternalSTCoreParser.g:2265:3: ( rule__STAccessExpression__Group_1_1__0 )
                    // InternalSTCoreParser.g:2265:4: rule__STAccessExpression__Group_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STAccessExpression__Group_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAccessExpressionAccess().getGroup_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Alternatives_1"


    // $ANTLR start "rule__STAccessExpression__MemberAlternatives_1_0_2_0"
    // InternalSTCoreParser.g:2273:1: rule__STAccessExpression__MemberAlternatives_1_0_2_0 : ( ( ruleSTFeatureExpression ) | ( ruleSTMultibitPartialExpression ) );
    public final void rule__STAccessExpression__MemberAlternatives_1_0_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2277:1: ( ( ruleSTFeatureExpression ) | ( ruleSTMultibitPartialExpression ) )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==AND||LA8_0==MOD||LA8_0==XOR||LA8_0==DT||(LA8_0>=LD && LA8_0<=LT)||LA8_0==OR||LA8_0==D||LA8_0==RULE_ID) ) {
                alt8=1;
            }
            else if ( ((LA8_0>=B && LA8_0<=X)||LA8_0==LeftParenthesis||LA8_0==RULE_INT) ) {
                alt8=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // InternalSTCoreParser.g:2278:2: ( ruleSTFeatureExpression )
                    {
                    // InternalSTCoreParser.g:2278:2: ( ruleSTFeatureExpression )
                    // InternalSTCoreParser.g:2279:3: ruleSTFeatureExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAccessExpressionAccess().getMemberSTFeatureExpressionParserRuleCall_1_0_2_0_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTFeatureExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAccessExpressionAccess().getMemberSTFeatureExpressionParserRuleCall_1_0_2_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2284:2: ( ruleSTMultibitPartialExpression )
                    {
                    // InternalSTCoreParser.g:2284:2: ( ruleSTMultibitPartialExpression )
                    // InternalSTCoreParser.g:2285:3: ruleSTMultibitPartialExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAccessExpressionAccess().getMemberSTMultibitPartialExpressionParserRuleCall_1_0_2_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTMultibitPartialExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAccessExpressionAccess().getMemberSTMultibitPartialExpressionParserRuleCall_1_0_2_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__MemberAlternatives_1_0_2_0"


    // $ANTLR start "rule__STPrimaryExpression__Alternatives"
    // InternalSTCoreParser.g:2294:1: rule__STPrimaryExpression__Alternatives : ( ( ( rule__STPrimaryExpression__Group_0__0 ) ) | ( ruleSTFeatureExpression ) | ( ruleSTBuiltinFeatureExpression ) | ( ruleSTLiteralExpressions ) );
    public final void rule__STPrimaryExpression__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2298:1: ( ( ( rule__STPrimaryExpression__Group_0__0 ) ) | ( ruleSTFeatureExpression ) | ( ruleSTBuiltinFeatureExpression ) | ( ruleSTLiteralExpressions ) )
            int alt9=4;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt9=1;
                }
                break;
            case AND:
            case MOD:
            case XOR:
            case OR:
            case RULE_ID:
                {
                alt9=2;
                }
                break;
            case LT:
                {
                int LA9_3 = input.LA(2);

                if ( (LA9_3==EOF||LA9_3==END_REPEAT||LA9_3==THEN||LA9_3==AND||LA9_3==MOD||LA9_3==XOR||(LA9_3>=AsteriskAsterisk && LA9_3<=LessThanSignGreaterThanSign)||LA9_3==GreaterThanSignEqualsSign||(LA9_3>=BY && LA9_3<=DO)||LA9_3==OF||(LA9_3>=OR && LA9_3<=TO)||(LA9_3>=Ampersand && LA9_3<=GreaterThanSign)||(LA9_3>=LeftSquareBracket && LA9_3<=RightSquareBracket)) ) {
                    alt9=2;
                }
                else if ( (LA9_3==NumberSign) ) {
                    alt9=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 3, input);

                    throw nvae;
                }
                }
                break;
            case D:
                {
                int LA9_4 = input.LA(2);

                if ( (LA9_4==EOF||LA9_4==END_REPEAT||LA9_4==THEN||LA9_4==AND||LA9_4==MOD||LA9_4==XOR||(LA9_4>=AsteriskAsterisk && LA9_4<=LessThanSignGreaterThanSign)||LA9_4==GreaterThanSignEqualsSign||(LA9_4>=BY && LA9_4<=DO)||LA9_4==OF||(LA9_4>=OR && LA9_4<=TO)||(LA9_4>=Ampersand && LA9_4<=GreaterThanSign)||(LA9_4>=LeftSquareBracket && LA9_4<=RightSquareBracket)) ) {
                    alt9=2;
                }
                else if ( (LA9_4==NumberSign) ) {
                    alt9=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 4, input);

                    throw nvae;
                }
                }
                break;
            case DT:
                {
                int LA9_5 = input.LA(2);

                if ( (LA9_5==EOF||LA9_5==END_REPEAT||LA9_5==THEN||LA9_5==AND||LA9_5==MOD||LA9_5==XOR||(LA9_5>=AsteriskAsterisk && LA9_5<=LessThanSignGreaterThanSign)||LA9_5==GreaterThanSignEqualsSign||(LA9_5>=BY && LA9_5<=DO)||LA9_5==OF||(LA9_5>=OR && LA9_5<=TO)||(LA9_5>=Ampersand && LA9_5<=GreaterThanSign)||(LA9_5>=LeftSquareBracket && LA9_5<=RightSquareBracket)) ) {
                    alt9=2;
                }
                else if ( (LA9_5==NumberSign) ) {
                    alt9=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 5, input);

                    throw nvae;
                }
                }
                break;
            case LD:
                {
                int LA9_6 = input.LA(2);

                if ( (LA9_6==NumberSign) ) {
                    alt9=4;
                }
                else if ( (LA9_6==EOF||LA9_6==END_REPEAT||LA9_6==THEN||LA9_6==AND||LA9_6==MOD||LA9_6==XOR||(LA9_6>=AsteriskAsterisk && LA9_6<=LessThanSignGreaterThanSign)||LA9_6==GreaterThanSignEqualsSign||(LA9_6>=BY && LA9_6<=DO)||LA9_6==OF||(LA9_6>=OR && LA9_6<=TO)||(LA9_6>=Ampersand && LA9_6<=GreaterThanSign)||(LA9_6>=LeftSquareBracket && LA9_6<=RightSquareBracket)) ) {
                    alt9=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 6, input);

                    throw nvae;
                }
                }
                break;
            case THIS:
                {
                alt9=3;
                }
                break;
            case LDATE_AND_TIME:
            case DATE_AND_TIME:
            case LTIME_OF_DAY:
            case TIME_OF_DAY:
            case WSTRING:
            case STRING:
            case DWORD:
            case FALSE:
            case LDATE:
            case LREAL:
            case LTIME:
            case LWORD:
            case UDINT:
            case ULINT:
            case USINT:
            case WCHAR:
            case BOOL:
            case BYTE:
            case CHAR:
            case DATE:
            case DINT:
            case LINT:
            case LTOD:
            case REAL:
            case SINT:
            case TIME:
            case TRUE:
            case UINT:
            case WORD:
            case INT:
            case LDT:
            case TOD:
            case PlusSign:
            case HyphenMinus:
            case T:
            case RULE_NON_DECIMAL:
            case RULE_INT:
            case RULE_DECIMAL:
            case RULE_STRING:
                {
                alt9=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // InternalSTCoreParser.g:2299:2: ( ( rule__STPrimaryExpression__Group_0__0 ) )
                    {
                    // InternalSTCoreParser.g:2299:2: ( ( rule__STPrimaryExpression__Group_0__0 ) )
                    // InternalSTCoreParser.g:2300:3: ( rule__STPrimaryExpression__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTPrimaryExpressionAccess().getGroup_0()); 
                    }
                    // InternalSTCoreParser.g:2301:3: ( rule__STPrimaryExpression__Group_0__0 )
                    // InternalSTCoreParser.g:2301:4: rule__STPrimaryExpression__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STPrimaryExpression__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTPrimaryExpressionAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2305:2: ( ruleSTFeatureExpression )
                    {
                    // InternalSTCoreParser.g:2305:2: ( ruleSTFeatureExpression )
                    // InternalSTCoreParser.g:2306:3: ruleSTFeatureExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTPrimaryExpressionAccess().getSTFeatureExpressionParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTFeatureExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTPrimaryExpressionAccess().getSTFeatureExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2311:2: ( ruleSTBuiltinFeatureExpression )
                    {
                    // InternalSTCoreParser.g:2311:2: ( ruleSTBuiltinFeatureExpression )
                    // InternalSTCoreParser.g:2312:3: ruleSTBuiltinFeatureExpression
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTPrimaryExpressionAccess().getSTBuiltinFeatureExpressionParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTBuiltinFeatureExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTPrimaryExpressionAccess().getSTBuiltinFeatureExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSTCoreParser.g:2317:2: ( ruleSTLiteralExpressions )
                    {
                    // InternalSTCoreParser.g:2317:2: ( ruleSTLiteralExpressions )
                    // InternalSTCoreParser.g:2318:3: ruleSTLiteralExpressions
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTPrimaryExpressionAccess().getSTLiteralExpressionsParserRuleCall_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTLiteralExpressions();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTPrimaryExpressionAccess().getSTLiteralExpressionsParserRuleCall_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPrimaryExpression__Alternatives"


    // $ANTLR start "rule__STFeatureName__Alternatives"
    // InternalSTCoreParser.g:2327:1: rule__STFeatureName__Alternatives : ( ( RULE_ID ) | ( LT ) | ( AND ) | ( OR ) | ( XOR ) | ( MOD ) | ( D ) | ( DT ) | ( LD ) );
    public final void rule__STFeatureName__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2331:1: ( ( RULE_ID ) | ( LT ) | ( AND ) | ( OR ) | ( XOR ) | ( MOD ) | ( D ) | ( DT ) | ( LD ) )
            int alt10=9;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt10=1;
                }
                break;
            case LT:
                {
                alt10=2;
                }
                break;
            case AND:
                {
                alt10=3;
                }
                break;
            case OR:
                {
                alt10=4;
                }
                break;
            case XOR:
                {
                alt10=5;
                }
                break;
            case MOD:
                {
                alt10=6;
                }
                break;
            case D:
                {
                alt10=7;
                }
                break;
            case DT:
                {
                alt10=8;
                }
                break;
            case LD:
                {
                alt10=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // InternalSTCoreParser.g:2332:2: ( RULE_ID )
                    {
                    // InternalSTCoreParser.g:2332:2: ( RULE_ID )
                    // InternalSTCoreParser.g:2333:3: RULE_ID
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTFeatureNameAccess().getIDTerminalRuleCall_0()); 
                    }
                    match(input,RULE_ID,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTFeatureNameAccess().getIDTerminalRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2338:2: ( LT )
                    {
                    // InternalSTCoreParser.g:2338:2: ( LT )
                    // InternalSTCoreParser.g:2339:3: LT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTFeatureNameAccess().getLTKeyword_1()); 
                    }
                    match(input,LT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTFeatureNameAccess().getLTKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2344:2: ( AND )
                    {
                    // InternalSTCoreParser.g:2344:2: ( AND )
                    // InternalSTCoreParser.g:2345:3: AND
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTFeatureNameAccess().getANDKeyword_2()); 
                    }
                    match(input,AND,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTFeatureNameAccess().getANDKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSTCoreParser.g:2350:2: ( OR )
                    {
                    // InternalSTCoreParser.g:2350:2: ( OR )
                    // InternalSTCoreParser.g:2351:3: OR
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTFeatureNameAccess().getORKeyword_3()); 
                    }
                    match(input,OR,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTFeatureNameAccess().getORKeyword_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalSTCoreParser.g:2356:2: ( XOR )
                    {
                    // InternalSTCoreParser.g:2356:2: ( XOR )
                    // InternalSTCoreParser.g:2357:3: XOR
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTFeatureNameAccess().getXORKeyword_4()); 
                    }
                    match(input,XOR,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTFeatureNameAccess().getXORKeyword_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalSTCoreParser.g:2362:2: ( MOD )
                    {
                    // InternalSTCoreParser.g:2362:2: ( MOD )
                    // InternalSTCoreParser.g:2363:3: MOD
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTFeatureNameAccess().getMODKeyword_5()); 
                    }
                    match(input,MOD,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTFeatureNameAccess().getMODKeyword_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalSTCoreParser.g:2368:2: ( D )
                    {
                    // InternalSTCoreParser.g:2368:2: ( D )
                    // InternalSTCoreParser.g:2369:3: D
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTFeatureNameAccess().getDKeyword_6()); 
                    }
                    match(input,D,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTFeatureNameAccess().getDKeyword_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalSTCoreParser.g:2374:2: ( DT )
                    {
                    // InternalSTCoreParser.g:2374:2: ( DT )
                    // InternalSTCoreParser.g:2375:3: DT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTFeatureNameAccess().getDTKeyword_7()); 
                    }
                    match(input,DT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTFeatureNameAccess().getDTKeyword_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalSTCoreParser.g:2380:2: ( LD )
                    {
                    // InternalSTCoreParser.g:2380:2: ( LD )
                    // InternalSTCoreParser.g:2381:3: LD
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTFeatureNameAccess().getLDKeyword_8()); 
                    }
                    match(input,LD,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTFeatureNameAccess().getLDKeyword_8()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureName__Alternatives"


    // $ANTLR start "rule__STMultibitPartialExpression__Alternatives_2"
    // InternalSTCoreParser.g:2390:1: rule__STMultibitPartialExpression__Alternatives_2 : ( ( ( rule__STMultibitPartialExpression__IndexAssignment_2_0 ) ) | ( ( rule__STMultibitPartialExpression__Group_2_1__0 ) ) );
    public final void rule__STMultibitPartialExpression__Alternatives_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2394:1: ( ( ( rule__STMultibitPartialExpression__IndexAssignment_2_0 ) ) | ( ( rule__STMultibitPartialExpression__Group_2_1__0 ) ) )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==RULE_INT) ) {
                alt11=1;
            }
            else if ( (LA11_0==LeftParenthesis) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // InternalSTCoreParser.g:2395:2: ( ( rule__STMultibitPartialExpression__IndexAssignment_2_0 ) )
                    {
                    // InternalSTCoreParser.g:2395:2: ( ( rule__STMultibitPartialExpression__IndexAssignment_2_0 ) )
                    // InternalSTCoreParser.g:2396:3: ( rule__STMultibitPartialExpression__IndexAssignment_2_0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTMultibitPartialExpressionAccess().getIndexAssignment_2_0()); 
                    }
                    // InternalSTCoreParser.g:2397:3: ( rule__STMultibitPartialExpression__IndexAssignment_2_0 )
                    // InternalSTCoreParser.g:2397:4: rule__STMultibitPartialExpression__IndexAssignment_2_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STMultibitPartialExpression__IndexAssignment_2_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTMultibitPartialExpressionAccess().getIndexAssignment_2_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2401:2: ( ( rule__STMultibitPartialExpression__Group_2_1__0 ) )
                    {
                    // InternalSTCoreParser.g:2401:2: ( ( rule__STMultibitPartialExpression__Group_2_1__0 ) )
                    // InternalSTCoreParser.g:2402:3: ( rule__STMultibitPartialExpression__Group_2_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTMultibitPartialExpressionAccess().getGroup_2_1()); 
                    }
                    // InternalSTCoreParser.g:2403:3: ( rule__STMultibitPartialExpression__Group_2_1__0 )
                    // InternalSTCoreParser.g:2403:4: rule__STMultibitPartialExpression__Group_2_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STMultibitPartialExpression__Group_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTMultibitPartialExpressionAccess().getGroup_2_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__Alternatives_2"


    // $ANTLR start "rule__STLiteralExpressions__Alternatives"
    // InternalSTCoreParser.g:2411:1: rule__STLiteralExpressions__Alternatives : ( ( ruleSTNumericLiteral ) | ( ruleSTDateLiteral ) | ( ruleSTTimeLiteral ) | ( ruleSTTimeOfDayLiteral ) | ( ruleSTDateAndTimeLiteral ) | ( ruleSTStringLiteral ) );
    public final void rule__STLiteralExpressions__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2415:1: ( ( ruleSTNumericLiteral ) | ( ruleSTDateLiteral ) | ( ruleSTTimeLiteral ) | ( ruleSTTimeOfDayLiteral ) | ( ruleSTDateAndTimeLiteral ) | ( ruleSTStringLiteral ) )
            int alt12=6;
            switch ( input.LA(1) ) {
            case DWORD:
            case FALSE:
            case LREAL:
            case LWORD:
            case UDINT:
            case ULINT:
            case USINT:
            case BOOL:
            case BYTE:
            case DINT:
            case LINT:
            case REAL:
            case SINT:
            case TRUE:
            case UINT:
            case WORD:
            case INT:
            case PlusSign:
            case HyphenMinus:
            case RULE_NON_DECIMAL:
            case RULE_INT:
            case RULE_DECIMAL:
                {
                alt12=1;
                }
                break;
            case LDATE:
            case DATE:
            case LD:
            case D:
                {
                alt12=2;
                }
                break;
            case LTIME:
            case TIME:
            case LT:
            case T:
                {
                alt12=3;
                }
                break;
            case LTIME_OF_DAY:
            case TIME_OF_DAY:
            case LTOD:
            case TOD:
                {
                alt12=4;
                }
                break;
            case LDATE_AND_TIME:
            case DATE_AND_TIME:
            case LDT:
            case DT:
                {
                alt12=5;
                }
                break;
            case WSTRING:
            case STRING:
            case WCHAR:
            case CHAR:
            case RULE_STRING:
                {
                alt12=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // InternalSTCoreParser.g:2416:2: ( ruleSTNumericLiteral )
                    {
                    // InternalSTCoreParser.g:2416:2: ( ruleSTNumericLiteral )
                    // InternalSTCoreParser.g:2417:3: ruleSTNumericLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTLiteralExpressionsAccess().getSTNumericLiteralParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTNumericLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTLiteralExpressionsAccess().getSTNumericLiteralParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2422:2: ( ruleSTDateLiteral )
                    {
                    // InternalSTCoreParser.g:2422:2: ( ruleSTDateLiteral )
                    // InternalSTCoreParser.g:2423:3: ruleSTDateLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTLiteralExpressionsAccess().getSTDateLiteralParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTDateLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTLiteralExpressionsAccess().getSTDateLiteralParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2428:2: ( ruleSTTimeLiteral )
                    {
                    // InternalSTCoreParser.g:2428:2: ( ruleSTTimeLiteral )
                    // InternalSTCoreParser.g:2429:3: ruleSTTimeLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeLiteralParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTTimeLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeLiteralParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSTCoreParser.g:2434:2: ( ruleSTTimeOfDayLiteral )
                    {
                    // InternalSTCoreParser.g:2434:2: ( ruleSTTimeOfDayLiteral )
                    // InternalSTCoreParser.g:2435:3: ruleSTTimeOfDayLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeOfDayLiteralParserRuleCall_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTTimeOfDayLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeOfDayLiteralParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalSTCoreParser.g:2440:2: ( ruleSTDateAndTimeLiteral )
                    {
                    // InternalSTCoreParser.g:2440:2: ( ruleSTDateAndTimeLiteral )
                    // InternalSTCoreParser.g:2441:3: ruleSTDateAndTimeLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTLiteralExpressionsAccess().getSTDateAndTimeLiteralParserRuleCall_4()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTDateAndTimeLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTLiteralExpressionsAccess().getSTDateAndTimeLiteralParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalSTCoreParser.g:2446:2: ( ruleSTStringLiteral )
                    {
                    // InternalSTCoreParser.g:2446:2: ( ruleSTStringLiteral )
                    // InternalSTCoreParser.g:2447:3: ruleSTStringLiteral
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTLiteralExpressionsAccess().getSTStringLiteralParserRuleCall_5()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTStringLiteral();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTLiteralExpressionsAccess().getSTStringLiteralParserRuleCall_5()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STLiteralExpressions__Alternatives"


    // $ANTLR start "rule__STNumericLiteralType__Alternatives"
    // InternalSTCoreParser.g:2456:1: rule__STNumericLiteralType__Alternatives : ( ( ruleSTAnyBitType ) | ( ruleSTAnyNumType ) );
    public final void rule__STNumericLiteralType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2460:1: ( ( ruleSTAnyBitType ) | ( ruleSTAnyNumType ) )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==DWORD||LA13_0==LWORD||(LA13_0>=BOOL && LA13_0<=BYTE)||LA13_0==WORD) ) {
                alt13=1;
            }
            else if ( (LA13_0==LREAL||(LA13_0>=UDINT && LA13_0<=ULINT)||LA13_0==USINT||LA13_0==DINT||LA13_0==LINT||(LA13_0>=REAL && LA13_0<=SINT)||LA13_0==UINT||LA13_0==INT) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // InternalSTCoreParser.g:2461:2: ( ruleSTAnyBitType )
                    {
                    // InternalSTCoreParser.g:2461:2: ( ruleSTAnyBitType )
                    // InternalSTCoreParser.g:2462:3: ruleSTAnyBitType
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTNumericLiteralTypeAccess().getSTAnyBitTypeParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTAnyBitType();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTNumericLiteralTypeAccess().getSTAnyBitTypeParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2467:2: ( ruleSTAnyNumType )
                    {
                    // InternalSTCoreParser.g:2467:2: ( ruleSTAnyNumType )
                    // InternalSTCoreParser.g:2468:3: ruleSTAnyNumType
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTNumericLiteralTypeAccess().getSTAnyNumTypeParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTAnyNumType();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTNumericLiteralTypeAccess().getSTAnyNumTypeParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STNumericLiteralType__Alternatives"


    // $ANTLR start "rule__STDateLiteralType__Alternatives"
    // InternalSTCoreParser.g:2477:1: rule__STDateLiteralType__Alternatives : ( ( ruleSTDateType ) | ( D ) | ( LD ) );
    public final void rule__STDateLiteralType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2481:1: ( ( ruleSTDateType ) | ( D ) | ( LD ) )
            int alt14=3;
            switch ( input.LA(1) ) {
            case LDATE:
            case DATE:
                {
                alt14=1;
                }
                break;
            case D:
                {
                alt14=2;
                }
                break;
            case LD:
                {
                alt14=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }

            switch (alt14) {
                case 1 :
                    // InternalSTCoreParser.g:2482:2: ( ruleSTDateType )
                    {
                    // InternalSTCoreParser.g:2482:2: ( ruleSTDateType )
                    // InternalSTCoreParser.g:2483:3: ruleSTDateType
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTDateLiteralTypeAccess().getSTDateTypeParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTDateType();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTDateLiteralTypeAccess().getSTDateTypeParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2488:2: ( D )
                    {
                    // InternalSTCoreParser.g:2488:2: ( D )
                    // InternalSTCoreParser.g:2489:3: D
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTDateLiteralTypeAccess().getDKeyword_1()); 
                    }
                    match(input,D,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTDateLiteralTypeAccess().getDKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2494:2: ( LD )
                    {
                    // InternalSTCoreParser.g:2494:2: ( LD )
                    // InternalSTCoreParser.g:2495:3: LD
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTDateLiteralTypeAccess().getLDKeyword_2()); 
                    }
                    match(input,LD,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTDateLiteralTypeAccess().getLDKeyword_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateLiteralType__Alternatives"


    // $ANTLR start "rule__STTimeLiteralType__Alternatives"
    // InternalSTCoreParser.g:2504:1: rule__STTimeLiteralType__Alternatives : ( ( ruleSTAnyDurationType ) | ( T ) | ( LT ) );
    public final void rule__STTimeLiteralType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2508:1: ( ( ruleSTAnyDurationType ) | ( T ) | ( LT ) )
            int alt15=3;
            switch ( input.LA(1) ) {
            case LTIME:
            case TIME:
                {
                alt15=1;
                }
                break;
            case T:
                {
                alt15=2;
                }
                break;
            case LT:
                {
                alt15=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }

            switch (alt15) {
                case 1 :
                    // InternalSTCoreParser.g:2509:2: ( ruleSTAnyDurationType )
                    {
                    // InternalSTCoreParser.g:2509:2: ( ruleSTAnyDurationType )
                    // InternalSTCoreParser.g:2510:3: ruleSTAnyDurationType
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTTimeLiteralTypeAccess().getSTAnyDurationTypeParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTAnyDurationType();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTTimeLiteralTypeAccess().getSTAnyDurationTypeParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2515:2: ( T )
                    {
                    // InternalSTCoreParser.g:2515:2: ( T )
                    // InternalSTCoreParser.g:2516:3: T
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTTimeLiteralTypeAccess().getTKeyword_1()); 
                    }
                    match(input,T,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTTimeLiteralTypeAccess().getTKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2521:2: ( LT )
                    {
                    // InternalSTCoreParser.g:2521:2: ( LT )
                    // InternalSTCoreParser.g:2522:3: LT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTTimeLiteralTypeAccess().getLTKeyword_2()); 
                    }
                    match(input,LT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTTimeLiteralTypeAccess().getLTKeyword_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeLiteralType__Alternatives"


    // $ANTLR start "rule__STAnyType__Alternatives"
    // InternalSTCoreParser.g:2531:1: rule__STAnyType__Alternatives : ( ( RULE_ID ) | ( ruleSTAnyBuiltinType ) );
    public final void rule__STAnyType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2535:1: ( ( RULE_ID ) | ( ruleSTAnyBuiltinType ) )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==RULE_ID) ) {
                alt16=1;
            }
            else if ( (LA16_0==LDATE_AND_TIME||LA16_0==DATE_AND_TIME||LA16_0==LTIME_OF_DAY||LA16_0==TIME_OF_DAY||LA16_0==WSTRING||LA16_0==STRING||LA16_0==DWORD||(LA16_0>=LDATE && LA16_0<=ULINT)||(LA16_0>=USINT && LA16_0<=WCHAR)||(LA16_0>=BOOL && LA16_0<=BYTE)||(LA16_0>=CHAR && LA16_0<=DINT)||(LA16_0>=LINT && LA16_0<=LTOD)||(LA16_0>=REAL && LA16_0<=SINT)||LA16_0==TIME||LA16_0==UINT||LA16_0==WORD||(LA16_0>=INT && LA16_0<=LDT)||LA16_0==TOD||LA16_0==DT) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // InternalSTCoreParser.g:2536:2: ( RULE_ID )
                    {
                    // InternalSTCoreParser.g:2536:2: ( RULE_ID )
                    // InternalSTCoreParser.g:2537:3: RULE_ID
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyTypeAccess().getIDTerminalRuleCall_0()); 
                    }
                    match(input,RULE_ID,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyTypeAccess().getIDTerminalRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2542:2: ( ruleSTAnyBuiltinType )
                    {
                    // InternalSTCoreParser.g:2542:2: ( ruleSTAnyBuiltinType )
                    // InternalSTCoreParser.g:2543:3: ruleSTAnyBuiltinType
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyTypeAccess().getSTAnyBuiltinTypeParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTAnyBuiltinType();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyTypeAccess().getSTAnyBuiltinTypeParserRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAnyType__Alternatives"


    // $ANTLR start "rule__STAnyBuiltinType__Alternatives"
    // InternalSTCoreParser.g:2552:1: rule__STAnyBuiltinType__Alternatives : ( ( ruleSTAnyBitType ) | ( ruleSTAnyNumType ) | ( ruleSTAnyDurationType ) | ( ruleSTAnyDateType ) | ( ruleSTAnyCharsType ) );
    public final void rule__STAnyBuiltinType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2556:1: ( ( ruleSTAnyBitType ) | ( ruleSTAnyNumType ) | ( ruleSTAnyDurationType ) | ( ruleSTAnyDateType ) | ( ruleSTAnyCharsType ) )
            int alt17=5;
            switch ( input.LA(1) ) {
            case DWORD:
            case LWORD:
            case BOOL:
            case BYTE:
            case WORD:
                {
                alt17=1;
                }
                break;
            case LREAL:
            case UDINT:
            case ULINT:
            case USINT:
            case DINT:
            case LINT:
            case REAL:
            case SINT:
            case UINT:
            case INT:
                {
                alt17=2;
                }
                break;
            case LTIME:
            case TIME:
                {
                alt17=3;
                }
                break;
            case LDATE_AND_TIME:
            case DATE_AND_TIME:
            case LTIME_OF_DAY:
            case TIME_OF_DAY:
            case LDATE:
            case DATE:
            case LTOD:
            case LDT:
            case TOD:
            case DT:
                {
                alt17=4;
                }
                break;
            case WSTRING:
            case STRING:
            case WCHAR:
            case CHAR:
                {
                alt17=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // InternalSTCoreParser.g:2557:2: ( ruleSTAnyBitType )
                    {
                    // InternalSTCoreParser.g:2557:2: ( ruleSTAnyBitType )
                    // InternalSTCoreParser.g:2558:3: ruleSTAnyBitType
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyBuiltinTypeAccess().getSTAnyBitTypeParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTAnyBitType();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyBuiltinTypeAccess().getSTAnyBitTypeParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2563:2: ( ruleSTAnyNumType )
                    {
                    // InternalSTCoreParser.g:2563:2: ( ruleSTAnyNumType )
                    // InternalSTCoreParser.g:2564:3: ruleSTAnyNumType
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyBuiltinTypeAccess().getSTAnyNumTypeParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTAnyNumType();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyBuiltinTypeAccess().getSTAnyNumTypeParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2569:2: ( ruleSTAnyDurationType )
                    {
                    // InternalSTCoreParser.g:2569:2: ( ruleSTAnyDurationType )
                    // InternalSTCoreParser.g:2570:3: ruleSTAnyDurationType
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyBuiltinTypeAccess().getSTAnyDurationTypeParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTAnyDurationType();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyBuiltinTypeAccess().getSTAnyDurationTypeParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSTCoreParser.g:2575:2: ( ruleSTAnyDateType )
                    {
                    // InternalSTCoreParser.g:2575:2: ( ruleSTAnyDateType )
                    // InternalSTCoreParser.g:2576:3: ruleSTAnyDateType
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyBuiltinTypeAccess().getSTAnyDateTypeParserRuleCall_3()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTAnyDateType();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyBuiltinTypeAccess().getSTAnyDateTypeParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalSTCoreParser.g:2581:2: ( ruleSTAnyCharsType )
                    {
                    // InternalSTCoreParser.g:2581:2: ( ruleSTAnyCharsType )
                    // InternalSTCoreParser.g:2582:3: ruleSTAnyCharsType
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyBuiltinTypeAccess().getSTAnyCharsTypeParserRuleCall_4()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTAnyCharsType();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyBuiltinTypeAccess().getSTAnyCharsTypeParserRuleCall_4()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAnyBuiltinType__Alternatives"


    // $ANTLR start "rule__STAnyBitType__Alternatives"
    // InternalSTCoreParser.g:2591:1: rule__STAnyBitType__Alternatives : ( ( BOOL ) | ( BYTE ) | ( WORD ) | ( DWORD ) | ( LWORD ) );
    public final void rule__STAnyBitType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2595:1: ( ( BOOL ) | ( BYTE ) | ( WORD ) | ( DWORD ) | ( LWORD ) )
            int alt18=5;
            switch ( input.LA(1) ) {
            case BOOL:
                {
                alt18=1;
                }
                break;
            case BYTE:
                {
                alt18=2;
                }
                break;
            case WORD:
                {
                alt18=3;
                }
                break;
            case DWORD:
                {
                alt18=4;
                }
                break;
            case LWORD:
                {
                alt18=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }

            switch (alt18) {
                case 1 :
                    // InternalSTCoreParser.g:2596:2: ( BOOL )
                    {
                    // InternalSTCoreParser.g:2596:2: ( BOOL )
                    // InternalSTCoreParser.g:2597:3: BOOL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyBitTypeAccess().getBOOLKeyword_0()); 
                    }
                    match(input,BOOL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyBitTypeAccess().getBOOLKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2602:2: ( BYTE )
                    {
                    // InternalSTCoreParser.g:2602:2: ( BYTE )
                    // InternalSTCoreParser.g:2603:3: BYTE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyBitTypeAccess().getBYTEKeyword_1()); 
                    }
                    match(input,BYTE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyBitTypeAccess().getBYTEKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2608:2: ( WORD )
                    {
                    // InternalSTCoreParser.g:2608:2: ( WORD )
                    // InternalSTCoreParser.g:2609:3: WORD
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyBitTypeAccess().getWORDKeyword_2()); 
                    }
                    match(input,WORD,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyBitTypeAccess().getWORDKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSTCoreParser.g:2614:2: ( DWORD )
                    {
                    // InternalSTCoreParser.g:2614:2: ( DWORD )
                    // InternalSTCoreParser.g:2615:3: DWORD
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyBitTypeAccess().getDWORDKeyword_3()); 
                    }
                    match(input,DWORD,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyBitTypeAccess().getDWORDKeyword_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalSTCoreParser.g:2620:2: ( LWORD )
                    {
                    // InternalSTCoreParser.g:2620:2: ( LWORD )
                    // InternalSTCoreParser.g:2621:3: LWORD
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyBitTypeAccess().getLWORDKeyword_4()); 
                    }
                    match(input,LWORD,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyBitTypeAccess().getLWORDKeyword_4()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAnyBitType__Alternatives"


    // $ANTLR start "rule__STAnyNumType__Alternatives"
    // InternalSTCoreParser.g:2630:1: rule__STAnyNumType__Alternatives : ( ( SINT ) | ( INT ) | ( DINT ) | ( LINT ) | ( USINT ) | ( UINT ) | ( UDINT ) | ( ULINT ) | ( REAL ) | ( LREAL ) );
    public final void rule__STAnyNumType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2634:1: ( ( SINT ) | ( INT ) | ( DINT ) | ( LINT ) | ( USINT ) | ( UINT ) | ( UDINT ) | ( ULINT ) | ( REAL ) | ( LREAL ) )
            int alt19=10;
            switch ( input.LA(1) ) {
            case SINT:
                {
                alt19=1;
                }
                break;
            case INT:
                {
                alt19=2;
                }
                break;
            case DINT:
                {
                alt19=3;
                }
                break;
            case LINT:
                {
                alt19=4;
                }
                break;
            case USINT:
                {
                alt19=5;
                }
                break;
            case UINT:
                {
                alt19=6;
                }
                break;
            case UDINT:
                {
                alt19=7;
                }
                break;
            case ULINT:
                {
                alt19=8;
                }
                break;
            case REAL:
                {
                alt19=9;
                }
                break;
            case LREAL:
                {
                alt19=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }

            switch (alt19) {
                case 1 :
                    // InternalSTCoreParser.g:2635:2: ( SINT )
                    {
                    // InternalSTCoreParser.g:2635:2: ( SINT )
                    // InternalSTCoreParser.g:2636:3: SINT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyNumTypeAccess().getSINTKeyword_0()); 
                    }
                    match(input,SINT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyNumTypeAccess().getSINTKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2641:2: ( INT )
                    {
                    // InternalSTCoreParser.g:2641:2: ( INT )
                    // InternalSTCoreParser.g:2642:3: INT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyNumTypeAccess().getINTKeyword_1()); 
                    }
                    match(input,INT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyNumTypeAccess().getINTKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2647:2: ( DINT )
                    {
                    // InternalSTCoreParser.g:2647:2: ( DINT )
                    // InternalSTCoreParser.g:2648:3: DINT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyNumTypeAccess().getDINTKeyword_2()); 
                    }
                    match(input,DINT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyNumTypeAccess().getDINTKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSTCoreParser.g:2653:2: ( LINT )
                    {
                    // InternalSTCoreParser.g:2653:2: ( LINT )
                    // InternalSTCoreParser.g:2654:3: LINT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyNumTypeAccess().getLINTKeyword_3()); 
                    }
                    match(input,LINT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyNumTypeAccess().getLINTKeyword_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalSTCoreParser.g:2659:2: ( USINT )
                    {
                    // InternalSTCoreParser.g:2659:2: ( USINT )
                    // InternalSTCoreParser.g:2660:3: USINT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyNumTypeAccess().getUSINTKeyword_4()); 
                    }
                    match(input,USINT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyNumTypeAccess().getUSINTKeyword_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalSTCoreParser.g:2665:2: ( UINT )
                    {
                    // InternalSTCoreParser.g:2665:2: ( UINT )
                    // InternalSTCoreParser.g:2666:3: UINT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyNumTypeAccess().getUINTKeyword_5()); 
                    }
                    match(input,UINT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyNumTypeAccess().getUINTKeyword_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalSTCoreParser.g:2671:2: ( UDINT )
                    {
                    // InternalSTCoreParser.g:2671:2: ( UDINT )
                    // InternalSTCoreParser.g:2672:3: UDINT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyNumTypeAccess().getUDINTKeyword_6()); 
                    }
                    match(input,UDINT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyNumTypeAccess().getUDINTKeyword_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalSTCoreParser.g:2677:2: ( ULINT )
                    {
                    // InternalSTCoreParser.g:2677:2: ( ULINT )
                    // InternalSTCoreParser.g:2678:3: ULINT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyNumTypeAccess().getULINTKeyword_7()); 
                    }
                    match(input,ULINT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyNumTypeAccess().getULINTKeyword_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalSTCoreParser.g:2683:2: ( REAL )
                    {
                    // InternalSTCoreParser.g:2683:2: ( REAL )
                    // InternalSTCoreParser.g:2684:3: REAL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyNumTypeAccess().getREALKeyword_8()); 
                    }
                    match(input,REAL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyNumTypeAccess().getREALKeyword_8()); 
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalSTCoreParser.g:2689:2: ( LREAL )
                    {
                    // InternalSTCoreParser.g:2689:2: ( LREAL )
                    // InternalSTCoreParser.g:2690:3: LREAL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyNumTypeAccess().getLREALKeyword_9()); 
                    }
                    match(input,LREAL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyNumTypeAccess().getLREALKeyword_9()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAnyNumType__Alternatives"


    // $ANTLR start "rule__STAnyDurationType__Alternatives"
    // InternalSTCoreParser.g:2699:1: rule__STAnyDurationType__Alternatives : ( ( TIME ) | ( LTIME ) );
    public final void rule__STAnyDurationType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2703:1: ( ( TIME ) | ( LTIME ) )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==TIME) ) {
                alt20=1;
            }
            else if ( (LA20_0==LTIME) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    // InternalSTCoreParser.g:2704:2: ( TIME )
                    {
                    // InternalSTCoreParser.g:2704:2: ( TIME )
                    // InternalSTCoreParser.g:2705:3: TIME
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyDurationTypeAccess().getTIMEKeyword_0()); 
                    }
                    match(input,TIME,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyDurationTypeAccess().getTIMEKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2710:2: ( LTIME )
                    {
                    // InternalSTCoreParser.g:2710:2: ( LTIME )
                    // InternalSTCoreParser.g:2711:3: LTIME
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyDurationTypeAccess().getLTIMEKeyword_1()); 
                    }
                    match(input,LTIME,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyDurationTypeAccess().getLTIMEKeyword_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAnyDurationType__Alternatives"


    // $ANTLR start "rule__STAnyDateType__Alternatives"
    // InternalSTCoreParser.g:2720:1: rule__STAnyDateType__Alternatives : ( ( ruleSTDateType ) | ( ruleSTTimeOfDayType ) | ( ruleSTDateAndTimeType ) );
    public final void rule__STAnyDateType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2724:1: ( ( ruleSTDateType ) | ( ruleSTTimeOfDayType ) | ( ruleSTDateAndTimeType ) )
            int alt21=3;
            switch ( input.LA(1) ) {
            case LDATE:
            case DATE:
                {
                alt21=1;
                }
                break;
            case LTIME_OF_DAY:
            case TIME_OF_DAY:
            case LTOD:
            case TOD:
                {
                alt21=2;
                }
                break;
            case LDATE_AND_TIME:
            case DATE_AND_TIME:
            case LDT:
            case DT:
                {
                alt21=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }

            switch (alt21) {
                case 1 :
                    // InternalSTCoreParser.g:2725:2: ( ruleSTDateType )
                    {
                    // InternalSTCoreParser.g:2725:2: ( ruleSTDateType )
                    // InternalSTCoreParser.g:2726:3: ruleSTDateType
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyDateTypeAccess().getSTDateTypeParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTDateType();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyDateTypeAccess().getSTDateTypeParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2731:2: ( ruleSTTimeOfDayType )
                    {
                    // InternalSTCoreParser.g:2731:2: ( ruleSTTimeOfDayType )
                    // InternalSTCoreParser.g:2732:3: ruleSTTimeOfDayType
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyDateTypeAccess().getSTTimeOfDayTypeParserRuleCall_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTTimeOfDayType();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyDateTypeAccess().getSTTimeOfDayTypeParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2737:2: ( ruleSTDateAndTimeType )
                    {
                    // InternalSTCoreParser.g:2737:2: ( ruleSTDateAndTimeType )
                    // InternalSTCoreParser.g:2738:3: ruleSTDateAndTimeType
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyDateTypeAccess().getSTDateAndTimeTypeParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleSTDateAndTimeType();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyDateTypeAccess().getSTDateAndTimeTypeParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAnyDateType__Alternatives"


    // $ANTLR start "rule__STDateType__Alternatives"
    // InternalSTCoreParser.g:2747:1: rule__STDateType__Alternatives : ( ( DATE ) | ( LDATE ) );
    public final void rule__STDateType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2751:1: ( ( DATE ) | ( LDATE ) )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==DATE) ) {
                alt22=1;
            }
            else if ( (LA22_0==LDATE) ) {
                alt22=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;
            }
            switch (alt22) {
                case 1 :
                    // InternalSTCoreParser.g:2752:2: ( DATE )
                    {
                    // InternalSTCoreParser.g:2752:2: ( DATE )
                    // InternalSTCoreParser.g:2753:3: DATE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTDateTypeAccess().getDATEKeyword_0()); 
                    }
                    match(input,DATE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTDateTypeAccess().getDATEKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2758:2: ( LDATE )
                    {
                    // InternalSTCoreParser.g:2758:2: ( LDATE )
                    // InternalSTCoreParser.g:2759:3: LDATE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTDateTypeAccess().getLDATEKeyword_1()); 
                    }
                    match(input,LDATE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTDateTypeAccess().getLDATEKeyword_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateType__Alternatives"


    // $ANTLR start "rule__STTimeOfDayType__Alternatives"
    // InternalSTCoreParser.g:2768:1: rule__STTimeOfDayType__Alternatives : ( ( TIME_OF_DAY ) | ( LTIME_OF_DAY ) | ( TOD ) | ( LTOD ) );
    public final void rule__STTimeOfDayType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2772:1: ( ( TIME_OF_DAY ) | ( LTIME_OF_DAY ) | ( TOD ) | ( LTOD ) )
            int alt23=4;
            switch ( input.LA(1) ) {
            case TIME_OF_DAY:
                {
                alt23=1;
                }
                break;
            case LTIME_OF_DAY:
                {
                alt23=2;
                }
                break;
            case TOD:
                {
                alt23=3;
                }
                break;
            case LTOD:
                {
                alt23=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }

            switch (alt23) {
                case 1 :
                    // InternalSTCoreParser.g:2773:2: ( TIME_OF_DAY )
                    {
                    // InternalSTCoreParser.g:2773:2: ( TIME_OF_DAY )
                    // InternalSTCoreParser.g:2774:3: TIME_OF_DAY
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTTimeOfDayTypeAccess().getTIME_OF_DAYKeyword_0()); 
                    }
                    match(input,TIME_OF_DAY,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTTimeOfDayTypeAccess().getTIME_OF_DAYKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2779:2: ( LTIME_OF_DAY )
                    {
                    // InternalSTCoreParser.g:2779:2: ( LTIME_OF_DAY )
                    // InternalSTCoreParser.g:2780:3: LTIME_OF_DAY
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTTimeOfDayTypeAccess().getLTIME_OF_DAYKeyword_1()); 
                    }
                    match(input,LTIME_OF_DAY,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTTimeOfDayTypeAccess().getLTIME_OF_DAYKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2785:2: ( TOD )
                    {
                    // InternalSTCoreParser.g:2785:2: ( TOD )
                    // InternalSTCoreParser.g:2786:3: TOD
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTTimeOfDayTypeAccess().getTODKeyword_2()); 
                    }
                    match(input,TOD,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTTimeOfDayTypeAccess().getTODKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSTCoreParser.g:2791:2: ( LTOD )
                    {
                    // InternalSTCoreParser.g:2791:2: ( LTOD )
                    // InternalSTCoreParser.g:2792:3: LTOD
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTTimeOfDayTypeAccess().getLTODKeyword_3()); 
                    }
                    match(input,LTOD,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTTimeOfDayTypeAccess().getLTODKeyword_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeOfDayType__Alternatives"


    // $ANTLR start "rule__STDateAndTimeType__Alternatives"
    // InternalSTCoreParser.g:2801:1: rule__STDateAndTimeType__Alternatives : ( ( DATE_AND_TIME ) | ( LDATE_AND_TIME ) | ( DT ) | ( LDT ) );
    public final void rule__STDateAndTimeType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2805:1: ( ( DATE_AND_TIME ) | ( LDATE_AND_TIME ) | ( DT ) | ( LDT ) )
            int alt24=4;
            switch ( input.LA(1) ) {
            case DATE_AND_TIME:
                {
                alt24=1;
                }
                break;
            case LDATE_AND_TIME:
                {
                alt24=2;
                }
                break;
            case DT:
                {
                alt24=3;
                }
                break;
            case LDT:
                {
                alt24=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }

            switch (alt24) {
                case 1 :
                    // InternalSTCoreParser.g:2806:2: ( DATE_AND_TIME )
                    {
                    // InternalSTCoreParser.g:2806:2: ( DATE_AND_TIME )
                    // InternalSTCoreParser.g:2807:3: DATE_AND_TIME
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTDateAndTimeTypeAccess().getDATE_AND_TIMEKeyword_0()); 
                    }
                    match(input,DATE_AND_TIME,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTDateAndTimeTypeAccess().getDATE_AND_TIMEKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2812:2: ( LDATE_AND_TIME )
                    {
                    // InternalSTCoreParser.g:2812:2: ( LDATE_AND_TIME )
                    // InternalSTCoreParser.g:2813:3: LDATE_AND_TIME
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTDateAndTimeTypeAccess().getLDATE_AND_TIMEKeyword_1()); 
                    }
                    match(input,LDATE_AND_TIME,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTDateAndTimeTypeAccess().getLDATE_AND_TIMEKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2818:2: ( DT )
                    {
                    // InternalSTCoreParser.g:2818:2: ( DT )
                    // InternalSTCoreParser.g:2819:3: DT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTDateAndTimeTypeAccess().getDTKeyword_2()); 
                    }
                    match(input,DT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTDateAndTimeTypeAccess().getDTKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSTCoreParser.g:2824:2: ( LDT )
                    {
                    // InternalSTCoreParser.g:2824:2: ( LDT )
                    // InternalSTCoreParser.g:2825:3: LDT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTDateAndTimeTypeAccess().getLDTKeyword_3()); 
                    }
                    match(input,LDT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTDateAndTimeTypeAccess().getLDTKeyword_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateAndTimeType__Alternatives"


    // $ANTLR start "rule__STAnyCharsType__Alternatives"
    // InternalSTCoreParser.g:2834:1: rule__STAnyCharsType__Alternatives : ( ( STRING ) | ( WSTRING ) | ( CHAR ) | ( WCHAR ) );
    public final void rule__STAnyCharsType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2838:1: ( ( STRING ) | ( WSTRING ) | ( CHAR ) | ( WCHAR ) )
            int alt25=4;
            switch ( input.LA(1) ) {
            case STRING:
                {
                alt25=1;
                }
                break;
            case WSTRING:
                {
                alt25=2;
                }
                break;
            case CHAR:
                {
                alt25=3;
                }
                break;
            case WCHAR:
                {
                alt25=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;
            }

            switch (alt25) {
                case 1 :
                    // InternalSTCoreParser.g:2839:2: ( STRING )
                    {
                    // InternalSTCoreParser.g:2839:2: ( STRING )
                    // InternalSTCoreParser.g:2840:3: STRING
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyCharsTypeAccess().getSTRINGKeyword_0()); 
                    }
                    match(input,STRING,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyCharsTypeAccess().getSTRINGKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2845:2: ( WSTRING )
                    {
                    // InternalSTCoreParser.g:2845:2: ( WSTRING )
                    // InternalSTCoreParser.g:2846:3: WSTRING
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyCharsTypeAccess().getWSTRINGKeyword_1()); 
                    }
                    match(input,WSTRING,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyCharsTypeAccess().getWSTRINGKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2851:2: ( CHAR )
                    {
                    // InternalSTCoreParser.g:2851:2: ( CHAR )
                    // InternalSTCoreParser.g:2852:3: CHAR
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyCharsTypeAccess().getCHARKeyword_2()); 
                    }
                    match(input,CHAR,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyCharsTypeAccess().getCHARKeyword_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSTCoreParser.g:2857:2: ( WCHAR )
                    {
                    // InternalSTCoreParser.g:2857:2: ( WCHAR )
                    // InternalSTCoreParser.g:2858:3: WCHAR
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTAnyCharsTypeAccess().getWCHARKeyword_3()); 
                    }
                    match(input,WCHAR,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTAnyCharsTypeAccess().getWCHARKeyword_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAnyCharsType__Alternatives"


    // $ANTLR start "rule__Numeric__Alternatives"
    // InternalSTCoreParser.g:2867:1: rule__Numeric__Alternatives : ( ( TRUE ) | ( FALSE ) | ( ruleNumber ) | ( RULE_NON_DECIMAL ) );
    public final void rule__Numeric__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2871:1: ( ( TRUE ) | ( FALSE ) | ( ruleNumber ) | ( RULE_NON_DECIMAL ) )
            int alt26=4;
            switch ( input.LA(1) ) {
            case TRUE:
                {
                alt26=1;
                }
                break;
            case FALSE:
                {
                alt26=2;
                }
                break;
            case PlusSign:
            case HyphenMinus:
            case RULE_INT:
            case RULE_DECIMAL:
                {
                alt26=3;
                }
                break;
            case RULE_NON_DECIMAL:
                {
                alt26=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }

            switch (alt26) {
                case 1 :
                    // InternalSTCoreParser.g:2872:2: ( TRUE )
                    {
                    // InternalSTCoreParser.g:2872:2: ( TRUE )
                    // InternalSTCoreParser.g:2873:3: TRUE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumericAccess().getTRUEKeyword_0()); 
                    }
                    match(input,TRUE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumericAccess().getTRUEKeyword_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2878:2: ( FALSE )
                    {
                    // InternalSTCoreParser.g:2878:2: ( FALSE )
                    // InternalSTCoreParser.g:2879:3: FALSE
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumericAccess().getFALSEKeyword_1()); 
                    }
                    match(input,FALSE,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumericAccess().getFALSEKeyword_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:2884:2: ( ruleNumber )
                    {
                    // InternalSTCoreParser.g:2884:2: ( ruleNumber )
                    // InternalSTCoreParser.g:2885:3: ruleNumber
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumericAccess().getNumberParserRuleCall_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleNumber();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumericAccess().getNumberParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSTCoreParser.g:2890:2: ( RULE_NON_DECIMAL )
                    {
                    // InternalSTCoreParser.g:2890:2: ( RULE_NON_DECIMAL )
                    // InternalSTCoreParser.g:2891:3: RULE_NON_DECIMAL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumericAccess().getNON_DECIMALTerminalRuleCall_3()); 
                    }
                    match(input,RULE_NON_DECIMAL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumericAccess().getNON_DECIMALTerminalRuleCall_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Numeric__Alternatives"


    // $ANTLR start "rule__Number__Alternatives_0"
    // InternalSTCoreParser.g:2900:1: rule__Number__Alternatives_0 : ( ( PlusSign ) | ( HyphenMinus ) );
    public final void rule__Number__Alternatives_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2904:1: ( ( PlusSign ) | ( HyphenMinus ) )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==PlusSign) ) {
                alt27=1;
            }
            else if ( (LA27_0==HyphenMinus) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // InternalSTCoreParser.g:2905:2: ( PlusSign )
                    {
                    // InternalSTCoreParser.g:2905:2: ( PlusSign )
                    // InternalSTCoreParser.g:2906:3: PlusSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getPlusSignKeyword_0_0()); 
                    }
                    match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getPlusSignKeyword_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2911:2: ( HyphenMinus )
                    {
                    // InternalSTCoreParser.g:2911:2: ( HyphenMinus )
                    // InternalSTCoreParser.g:2912:3: HyphenMinus
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getHyphenMinusKeyword_0_1()); 
                    }
                    match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getHyphenMinusKeyword_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Alternatives_0"


    // $ANTLR start "rule__Number__Alternatives_1"
    // InternalSTCoreParser.g:2921:1: rule__Number__Alternatives_1 : ( ( RULE_INT ) | ( RULE_DECIMAL ) );
    public final void rule__Number__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2925:1: ( ( RULE_INT ) | ( RULE_DECIMAL ) )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==RULE_INT) ) {
                alt28=1;
            }
            else if ( (LA28_0==RULE_DECIMAL) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // InternalSTCoreParser.g:2926:2: ( RULE_INT )
                    {
                    // InternalSTCoreParser.g:2926:2: ( RULE_INT )
                    // InternalSTCoreParser.g:2927:3: RULE_INT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0()); 
                    }
                    match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2932:2: ( RULE_DECIMAL )
                    {
                    // InternalSTCoreParser.g:2932:2: ( RULE_DECIMAL )
                    // InternalSTCoreParser.g:2933:3: RULE_DECIMAL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1()); 
                    }
                    match(input,RULE_DECIMAL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Alternatives_1"


    // $ANTLR start "rule__Number__Alternatives_2_1"
    // InternalSTCoreParser.g:2942:1: rule__Number__Alternatives_2_1 : ( ( RULE_INT ) | ( RULE_DECIMAL ) );
    public final void rule__Number__Alternatives_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2946:1: ( ( RULE_INT ) | ( RULE_DECIMAL ) )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==RULE_INT) ) {
                alt29=1;
            }
            else if ( (LA29_0==RULE_DECIMAL) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    // InternalSTCoreParser.g:2947:2: ( RULE_INT )
                    {
                    // InternalSTCoreParser.g:2947:2: ( RULE_INT )
                    // InternalSTCoreParser.g:2948:3: RULE_INT
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_2_1_0()); 
                    }
                    match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_2_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2953:2: ( RULE_DECIMAL )
                    {
                    // InternalSTCoreParser.g:2953:2: ( RULE_DECIMAL )
                    // InternalSTCoreParser.g:2954:3: RULE_DECIMAL
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_2_1_1()); 
                    }
                    match(input,RULE_DECIMAL,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_2_1_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Alternatives_2_1"


    // $ANTLR start "rule__Time__Alternatives_0"
    // InternalSTCoreParser.g:2963:1: rule__Time__Alternatives_0 : ( ( PlusSign ) | ( HyphenMinus ) );
    public final void rule__Time__Alternatives_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2967:1: ( ( PlusSign ) | ( HyphenMinus ) )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==PlusSign) ) {
                alt30=1;
            }
            else if ( (LA30_0==HyphenMinus) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    // InternalSTCoreParser.g:2968:2: ( PlusSign )
                    {
                    // InternalSTCoreParser.g:2968:2: ( PlusSign )
                    // InternalSTCoreParser.g:2969:3: PlusSign
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTimeAccess().getPlusSignKeyword_0_0()); 
                    }
                    match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTimeAccess().getPlusSignKeyword_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2974:2: ( HyphenMinus )
                    {
                    // InternalSTCoreParser.g:2974:2: ( HyphenMinus )
                    // InternalSTCoreParser.g:2975:3: HyphenMinus
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTimeAccess().getHyphenMinusKeyword_0_1()); 
                    }
                    match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTimeAccess().getHyphenMinusKeyword_0_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Time__Alternatives_0"


    // $ANTLR start "rule__AndOperator__Alternatives"
    // InternalSTCoreParser.g:2984:1: rule__AndOperator__Alternatives : ( ( ( AND ) ) | ( ( Ampersand ) ) );
    public final void rule__AndOperator__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:2988:1: ( ( ( AND ) ) | ( ( Ampersand ) ) )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==AND) ) {
                alt31=1;
            }
            else if ( (LA31_0==Ampersand) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // InternalSTCoreParser.g:2989:2: ( ( AND ) )
                    {
                    // InternalSTCoreParser.g:2989:2: ( ( AND ) )
                    // InternalSTCoreParser.g:2990:3: ( AND )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration_0()); 
                    }
                    // InternalSTCoreParser.g:2991:3: ( AND )
                    // InternalSTCoreParser.g:2991:4: AND
                    {
                    match(input,AND,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:2995:2: ( ( Ampersand ) )
                    {
                    // InternalSTCoreParser.g:2995:2: ( ( Ampersand ) )
                    // InternalSTCoreParser.g:2996:3: ( Ampersand )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAndOperatorAccess().getAMPERSANDEnumLiteralDeclaration_1()); 
                    }
                    // InternalSTCoreParser.g:2997:3: ( Ampersand )
                    // InternalSTCoreParser.g:2997:4: Ampersand
                    {
                    match(input,Ampersand,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAndOperatorAccess().getAMPERSANDEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AndOperator__Alternatives"


    // $ANTLR start "rule__EqualityOperator__Alternatives"
    // InternalSTCoreParser.g:3005:1: rule__EqualityOperator__Alternatives : ( ( ( EqualsSign ) ) | ( ( LessThanSignGreaterThanSign ) ) );
    public final void rule__EqualityOperator__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3009:1: ( ( ( EqualsSign ) ) | ( ( LessThanSignGreaterThanSign ) ) )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==EqualsSign) ) {
                alt32=1;
            }
            else if ( (LA32_0==LessThanSignGreaterThanSign) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // InternalSTCoreParser.g:3010:2: ( ( EqualsSign ) )
                    {
                    // InternalSTCoreParser.g:3010:2: ( ( EqualsSign ) )
                    // InternalSTCoreParser.g:3011:3: ( EqualsSign )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getEqualityOperatorAccess().getEQEnumLiteralDeclaration_0()); 
                    }
                    // InternalSTCoreParser.g:3012:3: ( EqualsSign )
                    // InternalSTCoreParser.g:3012:4: EqualsSign
                    {
                    match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getEqualityOperatorAccess().getEQEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:3016:2: ( ( LessThanSignGreaterThanSign ) )
                    {
                    // InternalSTCoreParser.g:3016:2: ( ( LessThanSignGreaterThanSign ) )
                    // InternalSTCoreParser.g:3017:3: ( LessThanSignGreaterThanSign )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getEqualityOperatorAccess().getNEEnumLiteralDeclaration_1()); 
                    }
                    // InternalSTCoreParser.g:3018:3: ( LessThanSignGreaterThanSign )
                    // InternalSTCoreParser.g:3018:4: LessThanSignGreaterThanSign
                    {
                    match(input,LessThanSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getEqualityOperatorAccess().getNEEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__EqualityOperator__Alternatives"


    // $ANTLR start "rule__CompareOperator__Alternatives"
    // InternalSTCoreParser.g:3026:1: rule__CompareOperator__Alternatives : ( ( ( LessThanSign ) ) | ( ( LessThanSignEqualsSign ) ) | ( ( GreaterThanSign ) ) | ( ( GreaterThanSignEqualsSign ) ) );
    public final void rule__CompareOperator__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3030:1: ( ( ( LessThanSign ) ) | ( ( LessThanSignEqualsSign ) ) | ( ( GreaterThanSign ) ) | ( ( GreaterThanSignEqualsSign ) ) )
            int alt33=4;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt33=1;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt33=2;
                }
                break;
            case GreaterThanSign:
                {
                alt33=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt33=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }

            switch (alt33) {
                case 1 :
                    // InternalSTCoreParser.g:3031:2: ( ( LessThanSign ) )
                    {
                    // InternalSTCoreParser.g:3031:2: ( ( LessThanSign ) )
                    // InternalSTCoreParser.g:3032:3: ( LessThanSign )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_0()); 
                    }
                    // InternalSTCoreParser.g:3033:3: ( LessThanSign )
                    // InternalSTCoreParser.g:3033:4: LessThanSign
                    {
                    match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:3037:2: ( ( LessThanSignEqualsSign ) )
                    {
                    // InternalSTCoreParser.g:3037:2: ( ( LessThanSignEqualsSign ) )
                    // InternalSTCoreParser.g:3038:3: ( LessThanSignEqualsSign )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCompareOperatorAccess().getLEEnumLiteralDeclaration_1()); 
                    }
                    // InternalSTCoreParser.g:3039:3: ( LessThanSignEqualsSign )
                    // InternalSTCoreParser.g:3039:4: LessThanSignEqualsSign
                    {
                    match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCompareOperatorAccess().getLEEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:3043:2: ( ( GreaterThanSign ) )
                    {
                    // InternalSTCoreParser.g:3043:2: ( ( GreaterThanSign ) )
                    // InternalSTCoreParser.g:3044:3: ( GreaterThanSign )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_2()); 
                    }
                    // InternalSTCoreParser.g:3045:3: ( GreaterThanSign )
                    // InternalSTCoreParser.g:3045:4: GreaterThanSign
                    {
                    match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSTCoreParser.g:3049:2: ( ( GreaterThanSignEqualsSign ) )
                    {
                    // InternalSTCoreParser.g:3049:2: ( ( GreaterThanSignEqualsSign ) )
                    // InternalSTCoreParser.g:3050:3: ( GreaterThanSignEqualsSign )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getCompareOperatorAccess().getGEEnumLiteralDeclaration_3()); 
                    }
                    // InternalSTCoreParser.g:3051:3: ( GreaterThanSignEqualsSign )
                    // InternalSTCoreParser.g:3051:4: GreaterThanSignEqualsSign
                    {
                    match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getCompareOperatorAccess().getGEEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__CompareOperator__Alternatives"


    // $ANTLR start "rule__AddSubOperator__Alternatives"
    // InternalSTCoreParser.g:3059:1: rule__AddSubOperator__Alternatives : ( ( ( PlusSign ) ) | ( ( HyphenMinus ) ) );
    public final void rule__AddSubOperator__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3063:1: ( ( ( PlusSign ) ) | ( ( HyphenMinus ) ) )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==PlusSign) ) {
                alt34=1;
            }
            else if ( (LA34_0==HyphenMinus) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // InternalSTCoreParser.g:3064:2: ( ( PlusSign ) )
                    {
                    // InternalSTCoreParser.g:3064:2: ( ( PlusSign ) )
                    // InternalSTCoreParser.g:3065:3: ( PlusSign )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAddSubOperatorAccess().getADDEnumLiteralDeclaration_0()); 
                    }
                    // InternalSTCoreParser.g:3066:3: ( PlusSign )
                    // InternalSTCoreParser.g:3066:4: PlusSign
                    {
                    match(input,PlusSign,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAddSubOperatorAccess().getADDEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:3070:2: ( ( HyphenMinus ) )
                    {
                    // InternalSTCoreParser.g:3070:2: ( ( HyphenMinus ) )
                    // InternalSTCoreParser.g:3071:3: ( HyphenMinus )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAddSubOperatorAccess().getSUBEnumLiteralDeclaration_1()); 
                    }
                    // InternalSTCoreParser.g:3072:3: ( HyphenMinus )
                    // InternalSTCoreParser.g:3072:4: HyphenMinus
                    {
                    match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAddSubOperatorAccess().getSUBEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AddSubOperator__Alternatives"


    // $ANTLR start "rule__MulDivModOperator__Alternatives"
    // InternalSTCoreParser.g:3080:1: rule__MulDivModOperator__Alternatives : ( ( ( Asterisk ) ) | ( ( Solidus ) ) | ( ( MOD ) ) );
    public final void rule__MulDivModOperator__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3084:1: ( ( ( Asterisk ) ) | ( ( Solidus ) ) | ( ( MOD ) ) )
            int alt35=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt35=1;
                }
                break;
            case Solidus:
                {
                alt35=2;
                }
                break;
            case MOD:
                {
                alt35=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }

            switch (alt35) {
                case 1 :
                    // InternalSTCoreParser.g:3085:2: ( ( Asterisk ) )
                    {
                    // InternalSTCoreParser.g:3085:2: ( ( Asterisk ) )
                    // InternalSTCoreParser.g:3086:3: ( Asterisk )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getMulDivModOperatorAccess().getMULEnumLiteralDeclaration_0()); 
                    }
                    // InternalSTCoreParser.g:3087:3: ( Asterisk )
                    // InternalSTCoreParser.g:3087:4: Asterisk
                    {
                    match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getMulDivModOperatorAccess().getMULEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:3091:2: ( ( Solidus ) )
                    {
                    // InternalSTCoreParser.g:3091:2: ( ( Solidus ) )
                    // InternalSTCoreParser.g:3092:3: ( Solidus )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getMulDivModOperatorAccess().getDIVEnumLiteralDeclaration_1()); 
                    }
                    // InternalSTCoreParser.g:3093:3: ( Solidus )
                    // InternalSTCoreParser.g:3093:4: Solidus
                    {
                    match(input,Solidus,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getMulDivModOperatorAccess().getDIVEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:3097:2: ( ( MOD ) )
                    {
                    // InternalSTCoreParser.g:3097:2: ( ( MOD ) )
                    // InternalSTCoreParser.g:3098:3: ( MOD )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getMulDivModOperatorAccess().getMODEnumLiteralDeclaration_2()); 
                    }
                    // InternalSTCoreParser.g:3099:3: ( MOD )
                    // InternalSTCoreParser.g:3099:4: MOD
                    {
                    match(input,MOD,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getMulDivModOperatorAccess().getMODEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__MulDivModOperator__Alternatives"


    // $ANTLR start "rule__UnaryOperator__Alternatives"
    // InternalSTCoreParser.g:3107:1: rule__UnaryOperator__Alternatives : ( ( ( HyphenMinus ) ) | ( ( PlusSign ) ) | ( ( NOT ) ) );
    public final void rule__UnaryOperator__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3111:1: ( ( ( HyphenMinus ) ) | ( ( PlusSign ) ) | ( ( NOT ) ) )
            int alt36=3;
            switch ( input.LA(1) ) {
            case HyphenMinus:
                {
                alt36=1;
                }
                break;
            case PlusSign:
                {
                alt36=2;
                }
                break;
            case NOT:
                {
                alt36=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }

            switch (alt36) {
                case 1 :
                    // InternalSTCoreParser.g:3112:2: ( ( HyphenMinus ) )
                    {
                    // InternalSTCoreParser.g:3112:2: ( ( HyphenMinus ) )
                    // InternalSTCoreParser.g:3113:3: ( HyphenMinus )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_0()); 
                    }
                    // InternalSTCoreParser.g:3114:3: ( HyphenMinus )
                    // InternalSTCoreParser.g:3114:4: HyphenMinus
                    {
                    match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:3118:2: ( ( PlusSign ) )
                    {
                    // InternalSTCoreParser.g:3118:2: ( ( PlusSign ) )
                    // InternalSTCoreParser.g:3119:3: ( PlusSign )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_1()); 
                    }
                    // InternalSTCoreParser.g:3120:3: ( PlusSign )
                    // InternalSTCoreParser.g:3120:4: PlusSign
                    {
                    match(input,PlusSign,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:3124:2: ( ( NOT ) )
                    {
                    // InternalSTCoreParser.g:3124:2: ( ( NOT ) )
                    // InternalSTCoreParser.g:3125:3: ( NOT )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_2()); 
                    }
                    // InternalSTCoreParser.g:3126:3: ( NOT )
                    // InternalSTCoreParser.g:3126:4: NOT
                    {
                    match(input,NOT,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__UnaryOperator__Alternatives"


    // $ANTLR start "rule__STMultiBitAccessSpecifier__Alternatives"
    // InternalSTCoreParser.g:3134:1: rule__STMultiBitAccessSpecifier__Alternatives : ( ( ( L ) ) | ( ( D_1 ) ) | ( ( W ) ) | ( ( B ) ) | ( ( X ) ) );
    public final void rule__STMultiBitAccessSpecifier__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3138:1: ( ( ( L ) ) | ( ( D_1 ) ) | ( ( W ) ) | ( ( B ) ) | ( ( X ) ) )
            int alt37=5;
            switch ( input.LA(1) ) {
            case L:
                {
                alt37=1;
                }
                break;
            case D_1:
                {
                alt37=2;
                }
                break;
            case W:
                {
                alt37=3;
                }
                break;
            case B:
                {
                alt37=4;
                }
                break;
            case X:
                {
                alt37=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }

            switch (alt37) {
                case 1 :
                    // InternalSTCoreParser.g:3139:2: ( ( L ) )
                    {
                    // InternalSTCoreParser.g:3139:2: ( ( L ) )
                    // InternalSTCoreParser.g:3140:3: ( L )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTMultiBitAccessSpecifierAccess().getLEnumLiteralDeclaration_0()); 
                    }
                    // InternalSTCoreParser.g:3141:3: ( L )
                    // InternalSTCoreParser.g:3141:4: L
                    {
                    match(input,L,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTMultiBitAccessSpecifierAccess().getLEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSTCoreParser.g:3145:2: ( ( D_1 ) )
                    {
                    // InternalSTCoreParser.g:3145:2: ( ( D_1 ) )
                    // InternalSTCoreParser.g:3146:3: ( D_1 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTMultiBitAccessSpecifierAccess().getDEnumLiteralDeclaration_1()); 
                    }
                    // InternalSTCoreParser.g:3147:3: ( D_1 )
                    // InternalSTCoreParser.g:3147:4: D_1
                    {
                    match(input,D_1,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTMultiBitAccessSpecifierAccess().getDEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSTCoreParser.g:3151:2: ( ( W ) )
                    {
                    // InternalSTCoreParser.g:3151:2: ( ( W ) )
                    // InternalSTCoreParser.g:3152:3: ( W )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTMultiBitAccessSpecifierAccess().getWEnumLiteralDeclaration_2()); 
                    }
                    // InternalSTCoreParser.g:3153:3: ( W )
                    // InternalSTCoreParser.g:3153:4: W
                    {
                    match(input,W,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTMultiBitAccessSpecifierAccess().getWEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSTCoreParser.g:3157:2: ( ( B ) )
                    {
                    // InternalSTCoreParser.g:3157:2: ( ( B ) )
                    // InternalSTCoreParser.g:3158:3: ( B )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTMultiBitAccessSpecifierAccess().getBEnumLiteralDeclaration_3()); 
                    }
                    // InternalSTCoreParser.g:3159:3: ( B )
                    // InternalSTCoreParser.g:3159:4: B
                    {
                    match(input,B,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTMultiBitAccessSpecifierAccess().getBEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalSTCoreParser.g:3163:2: ( ( X ) )
                    {
                    // InternalSTCoreParser.g:3163:2: ( ( X ) )
                    // InternalSTCoreParser.g:3164:3: ( X )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getSTMultiBitAccessSpecifierAccess().getXEnumLiteralDeclaration_4()); 
                    }
                    // InternalSTCoreParser.g:3165:3: ( X )
                    // InternalSTCoreParser.g:3165:4: X
                    {
                    match(input,X,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getSTMultiBitAccessSpecifierAccess().getXEnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultiBitAccessSpecifier__Alternatives"


    // $ANTLR start "rule__STCoreSource__Group__0"
    // InternalSTCoreParser.g:3173:1: rule__STCoreSource__Group__0 : rule__STCoreSource__Group__0__Impl rule__STCoreSource__Group__1 ;
    public final void rule__STCoreSource__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3177:1: ( rule__STCoreSource__Group__0__Impl rule__STCoreSource__Group__1 )
            // InternalSTCoreParser.g:3178:2: rule__STCoreSource__Group__0__Impl rule__STCoreSource__Group__1
            {
            pushFollow(FOLLOW_3);
            rule__STCoreSource__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCoreSource__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCoreSource__Group__0"


    // $ANTLR start "rule__STCoreSource__Group__0__Impl"
    // InternalSTCoreParser.g:3185:1: rule__STCoreSource__Group__0__Impl : ( () ) ;
    public final void rule__STCoreSource__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3189:1: ( ( () ) )
            // InternalSTCoreParser.g:3190:1: ( () )
            {
            // InternalSTCoreParser.g:3190:1: ( () )
            // InternalSTCoreParser.g:3191:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCoreSourceAccess().getSTCoreSourceAction_0()); 
            }
            // InternalSTCoreParser.g:3192:2: ()
            // InternalSTCoreParser.g:3192:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCoreSourceAccess().getSTCoreSourceAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCoreSource__Group__0__Impl"


    // $ANTLR start "rule__STCoreSource__Group__1"
    // InternalSTCoreParser.g:3200:1: rule__STCoreSource__Group__1 : rule__STCoreSource__Group__1__Impl ;
    public final void rule__STCoreSource__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3204:1: ( rule__STCoreSource__Group__1__Impl )
            // InternalSTCoreParser.g:3205:2: rule__STCoreSource__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STCoreSource__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCoreSource__Group__1"


    // $ANTLR start "rule__STCoreSource__Group__1__Impl"
    // InternalSTCoreParser.g:3211:1: rule__STCoreSource__Group__1__Impl : ( ( rule__STCoreSource__StatementsAssignment_1 )* ) ;
    public final void rule__STCoreSource__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3215:1: ( ( ( rule__STCoreSource__StatementsAssignment_1 )* ) )
            // InternalSTCoreParser.g:3216:1: ( ( rule__STCoreSource__StatementsAssignment_1 )* )
            {
            // InternalSTCoreParser.g:3216:1: ( ( rule__STCoreSource__StatementsAssignment_1 )* )
            // InternalSTCoreParser.g:3217:2: ( rule__STCoreSource__StatementsAssignment_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCoreSourceAccess().getStatementsAssignment_1()); 
            }
            // InternalSTCoreParser.g:3218:2: ( rule__STCoreSource__StatementsAssignment_1 )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==LDATE_AND_TIME||LA38_0==DATE_AND_TIME||LA38_0==LTIME_OF_DAY||LA38_0==TIME_OF_DAY||LA38_0==CONTINUE||LA38_0==WSTRING||LA38_0==REPEAT||LA38_0==RETURN||LA38_0==STRING||LA38_0==DWORD||LA38_0==FALSE||(LA38_0>=LDATE && LA38_0<=ULINT)||(LA38_0>=USINT && LA38_0<=DINT)||(LA38_0>=EXIT && LA38_0<=LTOD)||(LA38_0>=REAL && LA38_0<=SINT)||(LA38_0>=THIS && LA38_0<=TRUE)||LA38_0==UINT||(LA38_0>=WORD && LA38_0<=MOD)||LA38_0==TOD||LA38_0==XOR||(LA38_0>=DT && LA38_0<=LT)||LA38_0==OR||LA38_0==LeftParenthesis||LA38_0==PlusSign||LA38_0==HyphenMinus||LA38_0==Semicolon||(LA38_0>=D && LA38_0<=T)||(LA38_0>=RULE_NON_DECIMAL && LA38_0<=RULE_DECIMAL)||(LA38_0>=RULE_ID && LA38_0<=RULE_STRING)) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // InternalSTCoreParser.g:3218:3: rule__STCoreSource__StatementsAssignment_1
            	    {
            	    pushFollow(FOLLOW_4);
            	    rule__STCoreSource__StatementsAssignment_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCoreSourceAccess().getStatementsAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCoreSource__Group__1__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group__0"
    // InternalSTCoreParser.g:3227:1: rule__STVarDeclaration__Group__0 : rule__STVarDeclaration__Group__0__Impl rule__STVarDeclaration__Group__1 ;
    public final void rule__STVarDeclaration__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3231:1: ( rule__STVarDeclaration__Group__0__Impl rule__STVarDeclaration__Group__1 )
            // InternalSTCoreParser.g:3232:2: rule__STVarDeclaration__Group__0__Impl rule__STVarDeclaration__Group__1
            {
            pushFollow(FOLLOW_5);
            rule__STVarDeclaration__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__0"


    // $ANTLR start "rule__STVarDeclaration__Group__0__Impl"
    // InternalSTCoreParser.g:3239:1: rule__STVarDeclaration__Group__0__Impl : ( () ) ;
    public final void rule__STVarDeclaration__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3243:1: ( ( () ) )
            // InternalSTCoreParser.g:3244:1: ( () )
            {
            // InternalSTCoreParser.g:3244:1: ( () )
            // InternalSTCoreParser.g:3245:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getSTVarDeclarationAction_0()); 
            }
            // InternalSTCoreParser.g:3246:2: ()
            // InternalSTCoreParser.g:3246:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getSTVarDeclarationAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__0__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group__1"
    // InternalSTCoreParser.g:3254:1: rule__STVarDeclaration__Group__1 : rule__STVarDeclaration__Group__1__Impl rule__STVarDeclaration__Group__2 ;
    public final void rule__STVarDeclaration__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3258:1: ( rule__STVarDeclaration__Group__1__Impl rule__STVarDeclaration__Group__2 )
            // InternalSTCoreParser.g:3259:2: rule__STVarDeclaration__Group__1__Impl rule__STVarDeclaration__Group__2
            {
            pushFollow(FOLLOW_6);
            rule__STVarDeclaration__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__1"


    // $ANTLR start "rule__STVarDeclaration__Group__1__Impl"
    // InternalSTCoreParser.g:3266:1: rule__STVarDeclaration__Group__1__Impl : ( ( rule__STVarDeclaration__NameAssignment_1 ) ) ;
    public final void rule__STVarDeclaration__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3270:1: ( ( ( rule__STVarDeclaration__NameAssignment_1 ) ) )
            // InternalSTCoreParser.g:3271:1: ( ( rule__STVarDeclaration__NameAssignment_1 ) )
            {
            // InternalSTCoreParser.g:3271:1: ( ( rule__STVarDeclaration__NameAssignment_1 ) )
            // InternalSTCoreParser.g:3272:2: ( rule__STVarDeclaration__NameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getNameAssignment_1()); 
            }
            // InternalSTCoreParser.g:3273:2: ( rule__STVarDeclaration__NameAssignment_1 )
            // InternalSTCoreParser.g:3273:3: rule__STVarDeclaration__NameAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__NameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__1__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group__2"
    // InternalSTCoreParser.g:3281:1: rule__STVarDeclaration__Group__2 : rule__STVarDeclaration__Group__2__Impl rule__STVarDeclaration__Group__3 ;
    public final void rule__STVarDeclaration__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3285:1: ( rule__STVarDeclaration__Group__2__Impl rule__STVarDeclaration__Group__3 )
            // InternalSTCoreParser.g:3286:2: rule__STVarDeclaration__Group__2__Impl rule__STVarDeclaration__Group__3
            {
            pushFollow(FOLLOW_6);
            rule__STVarDeclaration__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__2"


    // $ANTLR start "rule__STVarDeclaration__Group__2__Impl"
    // InternalSTCoreParser.g:3293:1: rule__STVarDeclaration__Group__2__Impl : ( ( rule__STVarDeclaration__Group_2__0 )? ) ;
    public final void rule__STVarDeclaration__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3297:1: ( ( ( rule__STVarDeclaration__Group_2__0 )? ) )
            // InternalSTCoreParser.g:3298:1: ( ( rule__STVarDeclaration__Group_2__0 )? )
            {
            // InternalSTCoreParser.g:3298:1: ( ( rule__STVarDeclaration__Group_2__0 )? )
            // InternalSTCoreParser.g:3299:2: ( rule__STVarDeclaration__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getGroup_2()); 
            }
            // InternalSTCoreParser.g:3300:2: ( rule__STVarDeclaration__Group_2__0 )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==AT) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // InternalSTCoreParser.g:3300:3: rule__STVarDeclaration__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STVarDeclaration__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__2__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group__3"
    // InternalSTCoreParser.g:3308:1: rule__STVarDeclaration__Group__3 : rule__STVarDeclaration__Group__3__Impl rule__STVarDeclaration__Group__4 ;
    public final void rule__STVarDeclaration__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3312:1: ( rule__STVarDeclaration__Group__3__Impl rule__STVarDeclaration__Group__4 )
            // InternalSTCoreParser.g:3313:2: rule__STVarDeclaration__Group__3__Impl rule__STVarDeclaration__Group__4
            {
            pushFollow(FOLLOW_7);
            rule__STVarDeclaration__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__3"


    // $ANTLR start "rule__STVarDeclaration__Group__3__Impl"
    // InternalSTCoreParser.g:3320:1: rule__STVarDeclaration__Group__3__Impl : ( Colon ) ;
    public final void rule__STVarDeclaration__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3324:1: ( ( Colon ) )
            // InternalSTCoreParser.g:3325:1: ( Colon )
            {
            // InternalSTCoreParser.g:3325:1: ( Colon )
            // InternalSTCoreParser.g:3326:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getColonKeyword_3()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getColonKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__3__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group__4"
    // InternalSTCoreParser.g:3335:1: rule__STVarDeclaration__Group__4 : rule__STVarDeclaration__Group__4__Impl rule__STVarDeclaration__Group__5 ;
    public final void rule__STVarDeclaration__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3339:1: ( rule__STVarDeclaration__Group__4__Impl rule__STVarDeclaration__Group__5 )
            // InternalSTCoreParser.g:3340:2: rule__STVarDeclaration__Group__4__Impl rule__STVarDeclaration__Group__5
            {
            pushFollow(FOLLOW_7);
            rule__STVarDeclaration__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__4"


    // $ANTLR start "rule__STVarDeclaration__Group__4__Impl"
    // InternalSTCoreParser.g:3347:1: rule__STVarDeclaration__Group__4__Impl : ( ( rule__STVarDeclaration__Group_4__0 )? ) ;
    public final void rule__STVarDeclaration__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3351:1: ( ( ( rule__STVarDeclaration__Group_4__0 )? ) )
            // InternalSTCoreParser.g:3352:1: ( ( rule__STVarDeclaration__Group_4__0 )? )
            {
            // InternalSTCoreParser.g:3352:1: ( ( rule__STVarDeclaration__Group_4__0 )? )
            // InternalSTCoreParser.g:3353:2: ( rule__STVarDeclaration__Group_4__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getGroup_4()); 
            }
            // InternalSTCoreParser.g:3354:2: ( rule__STVarDeclaration__Group_4__0 )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==ARRAY) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // InternalSTCoreParser.g:3354:3: rule__STVarDeclaration__Group_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STVarDeclaration__Group_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getGroup_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__4__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group__5"
    // InternalSTCoreParser.g:3362:1: rule__STVarDeclaration__Group__5 : rule__STVarDeclaration__Group__5__Impl rule__STVarDeclaration__Group__6 ;
    public final void rule__STVarDeclaration__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3366:1: ( rule__STVarDeclaration__Group__5__Impl rule__STVarDeclaration__Group__6 )
            // InternalSTCoreParser.g:3367:2: rule__STVarDeclaration__Group__5__Impl rule__STVarDeclaration__Group__6
            {
            pushFollow(FOLLOW_8);
            rule__STVarDeclaration__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__5"


    // $ANTLR start "rule__STVarDeclaration__Group__5__Impl"
    // InternalSTCoreParser.g:3374:1: rule__STVarDeclaration__Group__5__Impl : ( ( rule__STVarDeclaration__TypeAssignment_5 ) ) ;
    public final void rule__STVarDeclaration__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3378:1: ( ( ( rule__STVarDeclaration__TypeAssignment_5 ) ) )
            // InternalSTCoreParser.g:3379:1: ( ( rule__STVarDeclaration__TypeAssignment_5 ) )
            {
            // InternalSTCoreParser.g:3379:1: ( ( rule__STVarDeclaration__TypeAssignment_5 ) )
            // InternalSTCoreParser.g:3380:2: ( rule__STVarDeclaration__TypeAssignment_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getTypeAssignment_5()); 
            }
            // InternalSTCoreParser.g:3381:2: ( rule__STVarDeclaration__TypeAssignment_5 )
            // InternalSTCoreParser.g:3381:3: rule__STVarDeclaration__TypeAssignment_5
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__TypeAssignment_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getTypeAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__5__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group__6"
    // InternalSTCoreParser.g:3389:1: rule__STVarDeclaration__Group__6 : rule__STVarDeclaration__Group__6__Impl rule__STVarDeclaration__Group__7 ;
    public final void rule__STVarDeclaration__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3393:1: ( rule__STVarDeclaration__Group__6__Impl rule__STVarDeclaration__Group__7 )
            // InternalSTCoreParser.g:3394:2: rule__STVarDeclaration__Group__6__Impl rule__STVarDeclaration__Group__7
            {
            pushFollow(FOLLOW_8);
            rule__STVarDeclaration__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__6"


    // $ANTLR start "rule__STVarDeclaration__Group__6__Impl"
    // InternalSTCoreParser.g:3401:1: rule__STVarDeclaration__Group__6__Impl : ( ( rule__STVarDeclaration__Group_6__0 )? ) ;
    public final void rule__STVarDeclaration__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3405:1: ( ( ( rule__STVarDeclaration__Group_6__0 )? ) )
            // InternalSTCoreParser.g:3406:1: ( ( rule__STVarDeclaration__Group_6__0 )? )
            {
            // InternalSTCoreParser.g:3406:1: ( ( rule__STVarDeclaration__Group_6__0 )? )
            // InternalSTCoreParser.g:3407:2: ( rule__STVarDeclaration__Group_6__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getGroup_6()); 
            }
            // InternalSTCoreParser.g:3408:2: ( rule__STVarDeclaration__Group_6__0 )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==LeftSquareBracket) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // InternalSTCoreParser.g:3408:3: rule__STVarDeclaration__Group_6__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STVarDeclaration__Group_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getGroup_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__6__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group__7"
    // InternalSTCoreParser.g:3416:1: rule__STVarDeclaration__Group__7 : rule__STVarDeclaration__Group__7__Impl rule__STVarDeclaration__Group__8 ;
    public final void rule__STVarDeclaration__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3420:1: ( rule__STVarDeclaration__Group__7__Impl rule__STVarDeclaration__Group__8 )
            // InternalSTCoreParser.g:3421:2: rule__STVarDeclaration__Group__7__Impl rule__STVarDeclaration__Group__8
            {
            pushFollow(FOLLOW_8);
            rule__STVarDeclaration__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__7"


    // $ANTLR start "rule__STVarDeclaration__Group__7__Impl"
    // InternalSTCoreParser.g:3428:1: rule__STVarDeclaration__Group__7__Impl : ( ( rule__STVarDeclaration__Group_7__0 )? ) ;
    public final void rule__STVarDeclaration__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3432:1: ( ( ( rule__STVarDeclaration__Group_7__0 )? ) )
            // InternalSTCoreParser.g:3433:1: ( ( rule__STVarDeclaration__Group_7__0 )? )
            {
            // InternalSTCoreParser.g:3433:1: ( ( rule__STVarDeclaration__Group_7__0 )? )
            // InternalSTCoreParser.g:3434:2: ( rule__STVarDeclaration__Group_7__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getGroup_7()); 
            }
            // InternalSTCoreParser.g:3435:2: ( rule__STVarDeclaration__Group_7__0 )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==ColonEqualsSign) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // InternalSTCoreParser.g:3435:3: rule__STVarDeclaration__Group_7__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STVarDeclaration__Group_7__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getGroup_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__7__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group__8"
    // InternalSTCoreParser.g:3443:1: rule__STVarDeclaration__Group__8 : rule__STVarDeclaration__Group__8__Impl ;
    public final void rule__STVarDeclaration__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3447:1: ( rule__STVarDeclaration__Group__8__Impl )
            // InternalSTCoreParser.g:3448:2: rule__STVarDeclaration__Group__8__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__8"


    // $ANTLR start "rule__STVarDeclaration__Group__8__Impl"
    // InternalSTCoreParser.g:3454:1: rule__STVarDeclaration__Group__8__Impl : ( Semicolon ) ;
    public final void rule__STVarDeclaration__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3458:1: ( ( Semicolon ) )
            // InternalSTCoreParser.g:3459:1: ( Semicolon )
            {
            // InternalSTCoreParser.g:3459:1: ( Semicolon )
            // InternalSTCoreParser.g:3460:2: Semicolon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getSemicolonKeyword_8()); 
            }
            match(input,Semicolon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getSemicolonKeyword_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group__8__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_2__0"
    // InternalSTCoreParser.g:3470:1: rule__STVarDeclaration__Group_2__0 : rule__STVarDeclaration__Group_2__0__Impl rule__STVarDeclaration__Group_2__1 ;
    public final void rule__STVarDeclaration__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3474:1: ( rule__STVarDeclaration__Group_2__0__Impl rule__STVarDeclaration__Group_2__1 )
            // InternalSTCoreParser.g:3475:2: rule__STVarDeclaration__Group_2__0__Impl rule__STVarDeclaration__Group_2__1
            {
            pushFollow(FOLLOW_5);
            rule__STVarDeclaration__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_2__0"


    // $ANTLR start "rule__STVarDeclaration__Group_2__0__Impl"
    // InternalSTCoreParser.g:3482:1: rule__STVarDeclaration__Group_2__0__Impl : ( AT ) ;
    public final void rule__STVarDeclaration__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3486:1: ( ( AT ) )
            // InternalSTCoreParser.g:3487:1: ( AT )
            {
            // InternalSTCoreParser.g:3487:1: ( AT )
            // InternalSTCoreParser.g:3488:2: AT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getATKeyword_2_0()); 
            }
            match(input,AT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getATKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_2__0__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_2__1"
    // InternalSTCoreParser.g:3497:1: rule__STVarDeclaration__Group_2__1 : rule__STVarDeclaration__Group_2__1__Impl ;
    public final void rule__STVarDeclaration__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3501:1: ( rule__STVarDeclaration__Group_2__1__Impl )
            // InternalSTCoreParser.g:3502:2: rule__STVarDeclaration__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_2__1"


    // $ANTLR start "rule__STVarDeclaration__Group_2__1__Impl"
    // InternalSTCoreParser.g:3508:1: rule__STVarDeclaration__Group_2__1__Impl : ( ( rule__STVarDeclaration__LocatedAtAssignment_2_1 ) ) ;
    public final void rule__STVarDeclaration__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3512:1: ( ( ( rule__STVarDeclaration__LocatedAtAssignment_2_1 ) ) )
            // InternalSTCoreParser.g:3513:1: ( ( rule__STVarDeclaration__LocatedAtAssignment_2_1 ) )
            {
            // InternalSTCoreParser.g:3513:1: ( ( rule__STVarDeclaration__LocatedAtAssignment_2_1 ) )
            // InternalSTCoreParser.g:3514:2: ( rule__STVarDeclaration__LocatedAtAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getLocatedAtAssignment_2_1()); 
            }
            // InternalSTCoreParser.g:3515:2: ( rule__STVarDeclaration__LocatedAtAssignment_2_1 )
            // InternalSTCoreParser.g:3515:3: rule__STVarDeclaration__LocatedAtAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__LocatedAtAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getLocatedAtAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_2__1__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4__0"
    // InternalSTCoreParser.g:3524:1: rule__STVarDeclaration__Group_4__0 : rule__STVarDeclaration__Group_4__0__Impl rule__STVarDeclaration__Group_4__1 ;
    public final void rule__STVarDeclaration__Group_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3528:1: ( rule__STVarDeclaration__Group_4__0__Impl rule__STVarDeclaration__Group_4__1 )
            // InternalSTCoreParser.g:3529:2: rule__STVarDeclaration__Group_4__0__Impl rule__STVarDeclaration__Group_4__1
            {
            pushFollow(FOLLOW_9);
            rule__STVarDeclaration__Group_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4__0"


    // $ANTLR start "rule__STVarDeclaration__Group_4__0__Impl"
    // InternalSTCoreParser.g:3536:1: rule__STVarDeclaration__Group_4__0__Impl : ( ( rule__STVarDeclaration__ArrayAssignment_4_0 ) ) ;
    public final void rule__STVarDeclaration__Group_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3540:1: ( ( ( rule__STVarDeclaration__ArrayAssignment_4_0 ) ) )
            // InternalSTCoreParser.g:3541:1: ( ( rule__STVarDeclaration__ArrayAssignment_4_0 ) )
            {
            // InternalSTCoreParser.g:3541:1: ( ( rule__STVarDeclaration__ArrayAssignment_4_0 ) )
            // InternalSTCoreParser.g:3542:2: ( rule__STVarDeclaration__ArrayAssignment_4_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getArrayAssignment_4_0()); 
            }
            // InternalSTCoreParser.g:3543:2: ( rule__STVarDeclaration__ArrayAssignment_4_0 )
            // InternalSTCoreParser.g:3543:3: rule__STVarDeclaration__ArrayAssignment_4_0
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__ArrayAssignment_4_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getArrayAssignment_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4__0__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4__1"
    // InternalSTCoreParser.g:3551:1: rule__STVarDeclaration__Group_4__1 : rule__STVarDeclaration__Group_4__1__Impl rule__STVarDeclaration__Group_4__2 ;
    public final void rule__STVarDeclaration__Group_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3555:1: ( rule__STVarDeclaration__Group_4__1__Impl rule__STVarDeclaration__Group_4__2 )
            // InternalSTCoreParser.g:3556:2: rule__STVarDeclaration__Group_4__1__Impl rule__STVarDeclaration__Group_4__2
            {
            pushFollow(FOLLOW_10);
            rule__STVarDeclaration__Group_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4__1"


    // $ANTLR start "rule__STVarDeclaration__Group_4__1__Impl"
    // InternalSTCoreParser.g:3563:1: rule__STVarDeclaration__Group_4__1__Impl : ( ( rule__STVarDeclaration__Alternatives_4_1 ) ) ;
    public final void rule__STVarDeclaration__Group_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3567:1: ( ( ( rule__STVarDeclaration__Alternatives_4_1 ) ) )
            // InternalSTCoreParser.g:3568:1: ( ( rule__STVarDeclaration__Alternatives_4_1 ) )
            {
            // InternalSTCoreParser.g:3568:1: ( ( rule__STVarDeclaration__Alternatives_4_1 ) )
            // InternalSTCoreParser.g:3569:2: ( rule__STVarDeclaration__Alternatives_4_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getAlternatives_4_1()); 
            }
            // InternalSTCoreParser.g:3570:2: ( rule__STVarDeclaration__Alternatives_4_1 )
            // InternalSTCoreParser.g:3570:3: rule__STVarDeclaration__Alternatives_4_1
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Alternatives_4_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getAlternatives_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4__1__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4__2"
    // InternalSTCoreParser.g:3578:1: rule__STVarDeclaration__Group_4__2 : rule__STVarDeclaration__Group_4__2__Impl ;
    public final void rule__STVarDeclaration__Group_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3582:1: ( rule__STVarDeclaration__Group_4__2__Impl )
            // InternalSTCoreParser.g:3583:2: rule__STVarDeclaration__Group_4__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4__2"


    // $ANTLR start "rule__STVarDeclaration__Group_4__2__Impl"
    // InternalSTCoreParser.g:3589:1: rule__STVarDeclaration__Group_4__2__Impl : ( OF ) ;
    public final void rule__STVarDeclaration__Group_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3593:1: ( ( OF ) )
            // InternalSTCoreParser.g:3594:1: ( OF )
            {
            // InternalSTCoreParser.g:3594:1: ( OF )
            // InternalSTCoreParser.g:3595:2: OF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getOFKeyword_4_2()); 
            }
            match(input,OF,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getOFKeyword_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4__2__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_0__0"
    // InternalSTCoreParser.g:3605:1: rule__STVarDeclaration__Group_4_1_0__0 : rule__STVarDeclaration__Group_4_1_0__0__Impl rule__STVarDeclaration__Group_4_1_0__1 ;
    public final void rule__STVarDeclaration__Group_4_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3609:1: ( rule__STVarDeclaration__Group_4_1_0__0__Impl rule__STVarDeclaration__Group_4_1_0__1 )
            // InternalSTCoreParser.g:3610:2: rule__STVarDeclaration__Group_4_1_0__0__Impl rule__STVarDeclaration__Group_4_1_0__1
            {
            pushFollow(FOLLOW_11);
            rule__STVarDeclaration__Group_4_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_0__0"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_0__0__Impl"
    // InternalSTCoreParser.g:3617:1: rule__STVarDeclaration__Group_4_1_0__0__Impl : ( LeftSquareBracket ) ;
    public final void rule__STVarDeclaration__Group_4_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3621:1: ( ( LeftSquareBracket ) )
            // InternalSTCoreParser.g:3622:1: ( LeftSquareBracket )
            {
            // InternalSTCoreParser.g:3622:1: ( LeftSquareBracket )
            // InternalSTCoreParser.g:3623:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getLeftSquareBracketKeyword_4_1_0_0()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getLeftSquareBracketKeyword_4_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_0__0__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_0__1"
    // InternalSTCoreParser.g:3632:1: rule__STVarDeclaration__Group_4_1_0__1 : rule__STVarDeclaration__Group_4_1_0__1__Impl rule__STVarDeclaration__Group_4_1_0__2 ;
    public final void rule__STVarDeclaration__Group_4_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3636:1: ( rule__STVarDeclaration__Group_4_1_0__1__Impl rule__STVarDeclaration__Group_4_1_0__2 )
            // InternalSTCoreParser.g:3637:2: rule__STVarDeclaration__Group_4_1_0__1__Impl rule__STVarDeclaration__Group_4_1_0__2
            {
            pushFollow(FOLLOW_12);
            rule__STVarDeclaration__Group_4_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4_1_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_0__1"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_0__1__Impl"
    // InternalSTCoreParser.g:3644:1: rule__STVarDeclaration__Group_4_1_0__1__Impl : ( ( rule__STVarDeclaration__RangesAssignment_4_1_0_1 ) ) ;
    public final void rule__STVarDeclaration__Group_4_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3648:1: ( ( ( rule__STVarDeclaration__RangesAssignment_4_1_0_1 ) ) )
            // InternalSTCoreParser.g:3649:1: ( ( rule__STVarDeclaration__RangesAssignment_4_1_0_1 ) )
            {
            // InternalSTCoreParser.g:3649:1: ( ( rule__STVarDeclaration__RangesAssignment_4_1_0_1 ) )
            // InternalSTCoreParser.g:3650:2: ( rule__STVarDeclaration__RangesAssignment_4_1_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getRangesAssignment_4_1_0_1()); 
            }
            // InternalSTCoreParser.g:3651:2: ( rule__STVarDeclaration__RangesAssignment_4_1_0_1 )
            // InternalSTCoreParser.g:3651:3: rule__STVarDeclaration__RangesAssignment_4_1_0_1
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__RangesAssignment_4_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getRangesAssignment_4_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_0__1__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_0__2"
    // InternalSTCoreParser.g:3659:1: rule__STVarDeclaration__Group_4_1_0__2 : rule__STVarDeclaration__Group_4_1_0__2__Impl rule__STVarDeclaration__Group_4_1_0__3 ;
    public final void rule__STVarDeclaration__Group_4_1_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3663:1: ( rule__STVarDeclaration__Group_4_1_0__2__Impl rule__STVarDeclaration__Group_4_1_0__3 )
            // InternalSTCoreParser.g:3664:2: rule__STVarDeclaration__Group_4_1_0__2__Impl rule__STVarDeclaration__Group_4_1_0__3
            {
            pushFollow(FOLLOW_12);
            rule__STVarDeclaration__Group_4_1_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4_1_0__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_0__2"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_0__2__Impl"
    // InternalSTCoreParser.g:3671:1: rule__STVarDeclaration__Group_4_1_0__2__Impl : ( ( rule__STVarDeclaration__Group_4_1_0_2__0 )* ) ;
    public final void rule__STVarDeclaration__Group_4_1_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3675:1: ( ( ( rule__STVarDeclaration__Group_4_1_0_2__0 )* ) )
            // InternalSTCoreParser.g:3676:1: ( ( rule__STVarDeclaration__Group_4_1_0_2__0 )* )
            {
            // InternalSTCoreParser.g:3676:1: ( ( rule__STVarDeclaration__Group_4_1_0_2__0 )* )
            // InternalSTCoreParser.g:3677:2: ( rule__STVarDeclaration__Group_4_1_0_2__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getGroup_4_1_0_2()); 
            }
            // InternalSTCoreParser.g:3678:2: ( rule__STVarDeclaration__Group_4_1_0_2__0 )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==Comma) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // InternalSTCoreParser.g:3678:3: rule__STVarDeclaration__Group_4_1_0_2__0
            	    {
            	    pushFollow(FOLLOW_13);
            	    rule__STVarDeclaration__Group_4_1_0_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getGroup_4_1_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_0__2__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_0__3"
    // InternalSTCoreParser.g:3686:1: rule__STVarDeclaration__Group_4_1_0__3 : rule__STVarDeclaration__Group_4_1_0__3__Impl ;
    public final void rule__STVarDeclaration__Group_4_1_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3690:1: ( rule__STVarDeclaration__Group_4_1_0__3__Impl )
            // InternalSTCoreParser.g:3691:2: rule__STVarDeclaration__Group_4_1_0__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4_1_0__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_0__3"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_0__3__Impl"
    // InternalSTCoreParser.g:3697:1: rule__STVarDeclaration__Group_4_1_0__3__Impl : ( RightSquareBracket ) ;
    public final void rule__STVarDeclaration__Group_4_1_0__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3701:1: ( ( RightSquareBracket ) )
            // InternalSTCoreParser.g:3702:1: ( RightSquareBracket )
            {
            // InternalSTCoreParser.g:3702:1: ( RightSquareBracket )
            // InternalSTCoreParser.g:3703:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getRightSquareBracketKeyword_4_1_0_3()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getRightSquareBracketKeyword_4_1_0_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_0__3__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_0_2__0"
    // InternalSTCoreParser.g:3713:1: rule__STVarDeclaration__Group_4_1_0_2__0 : rule__STVarDeclaration__Group_4_1_0_2__0__Impl rule__STVarDeclaration__Group_4_1_0_2__1 ;
    public final void rule__STVarDeclaration__Group_4_1_0_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3717:1: ( rule__STVarDeclaration__Group_4_1_0_2__0__Impl rule__STVarDeclaration__Group_4_1_0_2__1 )
            // InternalSTCoreParser.g:3718:2: rule__STVarDeclaration__Group_4_1_0_2__0__Impl rule__STVarDeclaration__Group_4_1_0_2__1
            {
            pushFollow(FOLLOW_11);
            rule__STVarDeclaration__Group_4_1_0_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4_1_0_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_0_2__0"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_0_2__0__Impl"
    // InternalSTCoreParser.g:3725:1: rule__STVarDeclaration__Group_4_1_0_2__0__Impl : ( Comma ) ;
    public final void rule__STVarDeclaration__Group_4_1_0_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3729:1: ( ( Comma ) )
            // InternalSTCoreParser.g:3730:1: ( Comma )
            {
            // InternalSTCoreParser.g:3730:1: ( Comma )
            // InternalSTCoreParser.g:3731:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getCommaKeyword_4_1_0_2_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getCommaKeyword_4_1_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_0_2__0__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_0_2__1"
    // InternalSTCoreParser.g:3740:1: rule__STVarDeclaration__Group_4_1_0_2__1 : rule__STVarDeclaration__Group_4_1_0_2__1__Impl ;
    public final void rule__STVarDeclaration__Group_4_1_0_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3744:1: ( rule__STVarDeclaration__Group_4_1_0_2__1__Impl )
            // InternalSTCoreParser.g:3745:2: rule__STVarDeclaration__Group_4_1_0_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4_1_0_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_0_2__1"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_0_2__1__Impl"
    // InternalSTCoreParser.g:3751:1: rule__STVarDeclaration__Group_4_1_0_2__1__Impl : ( ( rule__STVarDeclaration__RangesAssignment_4_1_0_2_1 ) ) ;
    public final void rule__STVarDeclaration__Group_4_1_0_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3755:1: ( ( ( rule__STVarDeclaration__RangesAssignment_4_1_0_2_1 ) ) )
            // InternalSTCoreParser.g:3756:1: ( ( rule__STVarDeclaration__RangesAssignment_4_1_0_2_1 ) )
            {
            // InternalSTCoreParser.g:3756:1: ( ( rule__STVarDeclaration__RangesAssignment_4_1_0_2_1 ) )
            // InternalSTCoreParser.g:3757:2: ( rule__STVarDeclaration__RangesAssignment_4_1_0_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getRangesAssignment_4_1_0_2_1()); 
            }
            // InternalSTCoreParser.g:3758:2: ( rule__STVarDeclaration__RangesAssignment_4_1_0_2_1 )
            // InternalSTCoreParser.g:3758:3: rule__STVarDeclaration__RangesAssignment_4_1_0_2_1
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__RangesAssignment_4_1_0_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getRangesAssignment_4_1_0_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_0_2__1__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_1__0"
    // InternalSTCoreParser.g:3767:1: rule__STVarDeclaration__Group_4_1_1__0 : rule__STVarDeclaration__Group_4_1_1__0__Impl rule__STVarDeclaration__Group_4_1_1__1 ;
    public final void rule__STVarDeclaration__Group_4_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3771:1: ( rule__STVarDeclaration__Group_4_1_1__0__Impl rule__STVarDeclaration__Group_4_1_1__1 )
            // InternalSTCoreParser.g:3772:2: rule__STVarDeclaration__Group_4_1_1__0__Impl rule__STVarDeclaration__Group_4_1_1__1
            {
            pushFollow(FOLLOW_14);
            rule__STVarDeclaration__Group_4_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_1__0"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_1__0__Impl"
    // InternalSTCoreParser.g:3779:1: rule__STVarDeclaration__Group_4_1_1__0__Impl : ( LeftSquareBracket ) ;
    public final void rule__STVarDeclaration__Group_4_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3783:1: ( ( LeftSquareBracket ) )
            // InternalSTCoreParser.g:3784:1: ( LeftSquareBracket )
            {
            // InternalSTCoreParser.g:3784:1: ( LeftSquareBracket )
            // InternalSTCoreParser.g:3785:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getLeftSquareBracketKeyword_4_1_1_0()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getLeftSquareBracketKeyword_4_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_1__0__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_1__1"
    // InternalSTCoreParser.g:3794:1: rule__STVarDeclaration__Group_4_1_1__1 : rule__STVarDeclaration__Group_4_1_1__1__Impl rule__STVarDeclaration__Group_4_1_1__2 ;
    public final void rule__STVarDeclaration__Group_4_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3798:1: ( rule__STVarDeclaration__Group_4_1_1__1__Impl rule__STVarDeclaration__Group_4_1_1__2 )
            // InternalSTCoreParser.g:3799:2: rule__STVarDeclaration__Group_4_1_1__1__Impl rule__STVarDeclaration__Group_4_1_1__2
            {
            pushFollow(FOLLOW_12);
            rule__STVarDeclaration__Group_4_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_1__1"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_1__1__Impl"
    // InternalSTCoreParser.g:3806:1: rule__STVarDeclaration__Group_4_1_1__1__Impl : ( ( rule__STVarDeclaration__CountAssignment_4_1_1_1 ) ) ;
    public final void rule__STVarDeclaration__Group_4_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3810:1: ( ( ( rule__STVarDeclaration__CountAssignment_4_1_1_1 ) ) )
            // InternalSTCoreParser.g:3811:1: ( ( rule__STVarDeclaration__CountAssignment_4_1_1_1 ) )
            {
            // InternalSTCoreParser.g:3811:1: ( ( rule__STVarDeclaration__CountAssignment_4_1_1_1 ) )
            // InternalSTCoreParser.g:3812:2: ( rule__STVarDeclaration__CountAssignment_4_1_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getCountAssignment_4_1_1_1()); 
            }
            // InternalSTCoreParser.g:3813:2: ( rule__STVarDeclaration__CountAssignment_4_1_1_1 )
            // InternalSTCoreParser.g:3813:3: rule__STVarDeclaration__CountAssignment_4_1_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__CountAssignment_4_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getCountAssignment_4_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_1__1__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_1__2"
    // InternalSTCoreParser.g:3821:1: rule__STVarDeclaration__Group_4_1_1__2 : rule__STVarDeclaration__Group_4_1_1__2__Impl rule__STVarDeclaration__Group_4_1_1__3 ;
    public final void rule__STVarDeclaration__Group_4_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3825:1: ( rule__STVarDeclaration__Group_4_1_1__2__Impl rule__STVarDeclaration__Group_4_1_1__3 )
            // InternalSTCoreParser.g:3826:2: rule__STVarDeclaration__Group_4_1_1__2__Impl rule__STVarDeclaration__Group_4_1_1__3
            {
            pushFollow(FOLLOW_12);
            rule__STVarDeclaration__Group_4_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4_1_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_1__2"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_1__2__Impl"
    // InternalSTCoreParser.g:3833:1: rule__STVarDeclaration__Group_4_1_1__2__Impl : ( ( rule__STVarDeclaration__Group_4_1_1_2__0 )* ) ;
    public final void rule__STVarDeclaration__Group_4_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3837:1: ( ( ( rule__STVarDeclaration__Group_4_1_1_2__0 )* ) )
            // InternalSTCoreParser.g:3838:1: ( ( rule__STVarDeclaration__Group_4_1_1_2__0 )* )
            {
            // InternalSTCoreParser.g:3838:1: ( ( rule__STVarDeclaration__Group_4_1_1_2__0 )* )
            // InternalSTCoreParser.g:3839:2: ( rule__STVarDeclaration__Group_4_1_1_2__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getGroup_4_1_1_2()); 
            }
            // InternalSTCoreParser.g:3840:2: ( rule__STVarDeclaration__Group_4_1_1_2__0 )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==Comma) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // InternalSTCoreParser.g:3840:3: rule__STVarDeclaration__Group_4_1_1_2__0
            	    {
            	    pushFollow(FOLLOW_13);
            	    rule__STVarDeclaration__Group_4_1_1_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getGroup_4_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_1__2__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_1__3"
    // InternalSTCoreParser.g:3848:1: rule__STVarDeclaration__Group_4_1_1__3 : rule__STVarDeclaration__Group_4_1_1__3__Impl ;
    public final void rule__STVarDeclaration__Group_4_1_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3852:1: ( rule__STVarDeclaration__Group_4_1_1__3__Impl )
            // InternalSTCoreParser.g:3853:2: rule__STVarDeclaration__Group_4_1_1__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4_1_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_1__3"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_1__3__Impl"
    // InternalSTCoreParser.g:3859:1: rule__STVarDeclaration__Group_4_1_1__3__Impl : ( RightSquareBracket ) ;
    public final void rule__STVarDeclaration__Group_4_1_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3863:1: ( ( RightSquareBracket ) )
            // InternalSTCoreParser.g:3864:1: ( RightSquareBracket )
            {
            // InternalSTCoreParser.g:3864:1: ( RightSquareBracket )
            // InternalSTCoreParser.g:3865:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getRightSquareBracketKeyword_4_1_1_3()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getRightSquareBracketKeyword_4_1_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_1__3__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_1_2__0"
    // InternalSTCoreParser.g:3875:1: rule__STVarDeclaration__Group_4_1_1_2__0 : rule__STVarDeclaration__Group_4_1_1_2__0__Impl rule__STVarDeclaration__Group_4_1_1_2__1 ;
    public final void rule__STVarDeclaration__Group_4_1_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3879:1: ( rule__STVarDeclaration__Group_4_1_1_2__0__Impl rule__STVarDeclaration__Group_4_1_1_2__1 )
            // InternalSTCoreParser.g:3880:2: rule__STVarDeclaration__Group_4_1_1_2__0__Impl rule__STVarDeclaration__Group_4_1_1_2__1
            {
            pushFollow(FOLLOW_14);
            rule__STVarDeclaration__Group_4_1_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4_1_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_1_2__0"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_1_2__0__Impl"
    // InternalSTCoreParser.g:3887:1: rule__STVarDeclaration__Group_4_1_1_2__0__Impl : ( Comma ) ;
    public final void rule__STVarDeclaration__Group_4_1_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3891:1: ( ( Comma ) )
            // InternalSTCoreParser.g:3892:1: ( Comma )
            {
            // InternalSTCoreParser.g:3892:1: ( Comma )
            // InternalSTCoreParser.g:3893:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getCommaKeyword_4_1_1_2_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getCommaKeyword_4_1_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_1_2__0__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_1_2__1"
    // InternalSTCoreParser.g:3902:1: rule__STVarDeclaration__Group_4_1_1_2__1 : rule__STVarDeclaration__Group_4_1_1_2__1__Impl ;
    public final void rule__STVarDeclaration__Group_4_1_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3906:1: ( rule__STVarDeclaration__Group_4_1_1_2__1__Impl )
            // InternalSTCoreParser.g:3907:2: rule__STVarDeclaration__Group_4_1_1_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_4_1_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_1_2__1"


    // $ANTLR start "rule__STVarDeclaration__Group_4_1_1_2__1__Impl"
    // InternalSTCoreParser.g:3913:1: rule__STVarDeclaration__Group_4_1_1_2__1__Impl : ( ( rule__STVarDeclaration__CountAssignment_4_1_1_2_1 ) ) ;
    public final void rule__STVarDeclaration__Group_4_1_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3917:1: ( ( ( rule__STVarDeclaration__CountAssignment_4_1_1_2_1 ) ) )
            // InternalSTCoreParser.g:3918:1: ( ( rule__STVarDeclaration__CountAssignment_4_1_1_2_1 ) )
            {
            // InternalSTCoreParser.g:3918:1: ( ( rule__STVarDeclaration__CountAssignment_4_1_1_2_1 ) )
            // InternalSTCoreParser.g:3919:2: ( rule__STVarDeclaration__CountAssignment_4_1_1_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getCountAssignment_4_1_1_2_1()); 
            }
            // InternalSTCoreParser.g:3920:2: ( rule__STVarDeclaration__CountAssignment_4_1_1_2_1 )
            // InternalSTCoreParser.g:3920:3: rule__STVarDeclaration__CountAssignment_4_1_1_2_1
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__CountAssignment_4_1_1_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getCountAssignment_4_1_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_4_1_1_2__1__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_6__0"
    // InternalSTCoreParser.g:3929:1: rule__STVarDeclaration__Group_6__0 : rule__STVarDeclaration__Group_6__0__Impl rule__STVarDeclaration__Group_6__1 ;
    public final void rule__STVarDeclaration__Group_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3933:1: ( rule__STVarDeclaration__Group_6__0__Impl rule__STVarDeclaration__Group_6__1 )
            // InternalSTCoreParser.g:3934:2: rule__STVarDeclaration__Group_6__0__Impl rule__STVarDeclaration__Group_6__1
            {
            pushFollow(FOLLOW_11);
            rule__STVarDeclaration__Group_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_6__0"


    // $ANTLR start "rule__STVarDeclaration__Group_6__0__Impl"
    // InternalSTCoreParser.g:3941:1: rule__STVarDeclaration__Group_6__0__Impl : ( LeftSquareBracket ) ;
    public final void rule__STVarDeclaration__Group_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3945:1: ( ( LeftSquareBracket ) )
            // InternalSTCoreParser.g:3946:1: ( LeftSquareBracket )
            {
            // InternalSTCoreParser.g:3946:1: ( LeftSquareBracket )
            // InternalSTCoreParser.g:3947:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getLeftSquareBracketKeyword_6_0()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getLeftSquareBracketKeyword_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_6__0__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_6__1"
    // InternalSTCoreParser.g:3956:1: rule__STVarDeclaration__Group_6__1 : rule__STVarDeclaration__Group_6__1__Impl rule__STVarDeclaration__Group_6__2 ;
    public final void rule__STVarDeclaration__Group_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3960:1: ( rule__STVarDeclaration__Group_6__1__Impl rule__STVarDeclaration__Group_6__2 )
            // InternalSTCoreParser.g:3961:2: rule__STVarDeclaration__Group_6__1__Impl rule__STVarDeclaration__Group_6__2
            {
            pushFollow(FOLLOW_15);
            rule__STVarDeclaration__Group_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_6__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_6__1"


    // $ANTLR start "rule__STVarDeclaration__Group_6__1__Impl"
    // InternalSTCoreParser.g:3968:1: rule__STVarDeclaration__Group_6__1__Impl : ( ( rule__STVarDeclaration__MaxLengthAssignment_6_1 ) ) ;
    public final void rule__STVarDeclaration__Group_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3972:1: ( ( ( rule__STVarDeclaration__MaxLengthAssignment_6_1 ) ) )
            // InternalSTCoreParser.g:3973:1: ( ( rule__STVarDeclaration__MaxLengthAssignment_6_1 ) )
            {
            // InternalSTCoreParser.g:3973:1: ( ( rule__STVarDeclaration__MaxLengthAssignment_6_1 ) )
            // InternalSTCoreParser.g:3974:2: ( rule__STVarDeclaration__MaxLengthAssignment_6_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getMaxLengthAssignment_6_1()); 
            }
            // InternalSTCoreParser.g:3975:2: ( rule__STVarDeclaration__MaxLengthAssignment_6_1 )
            // InternalSTCoreParser.g:3975:3: rule__STVarDeclaration__MaxLengthAssignment_6_1
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__MaxLengthAssignment_6_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getMaxLengthAssignment_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_6__1__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_6__2"
    // InternalSTCoreParser.g:3983:1: rule__STVarDeclaration__Group_6__2 : rule__STVarDeclaration__Group_6__2__Impl ;
    public final void rule__STVarDeclaration__Group_6__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3987:1: ( rule__STVarDeclaration__Group_6__2__Impl )
            // InternalSTCoreParser.g:3988:2: rule__STVarDeclaration__Group_6__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_6__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_6__2"


    // $ANTLR start "rule__STVarDeclaration__Group_6__2__Impl"
    // InternalSTCoreParser.g:3994:1: rule__STVarDeclaration__Group_6__2__Impl : ( RightSquareBracket ) ;
    public final void rule__STVarDeclaration__Group_6__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:3998:1: ( ( RightSquareBracket ) )
            // InternalSTCoreParser.g:3999:1: ( RightSquareBracket )
            {
            // InternalSTCoreParser.g:3999:1: ( RightSquareBracket )
            // InternalSTCoreParser.g:4000:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getRightSquareBracketKeyword_6_2()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getRightSquareBracketKeyword_6_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_6__2__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_7__0"
    // InternalSTCoreParser.g:4010:1: rule__STVarDeclaration__Group_7__0 : rule__STVarDeclaration__Group_7__0__Impl rule__STVarDeclaration__Group_7__1 ;
    public final void rule__STVarDeclaration__Group_7__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4014:1: ( rule__STVarDeclaration__Group_7__0__Impl rule__STVarDeclaration__Group_7__1 )
            // InternalSTCoreParser.g:4015:2: rule__STVarDeclaration__Group_7__0__Impl rule__STVarDeclaration__Group_7__1
            {
            pushFollow(FOLLOW_16);
            rule__STVarDeclaration__Group_7__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_7__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_7__0"


    // $ANTLR start "rule__STVarDeclaration__Group_7__0__Impl"
    // InternalSTCoreParser.g:4022:1: rule__STVarDeclaration__Group_7__0__Impl : ( ColonEqualsSign ) ;
    public final void rule__STVarDeclaration__Group_7__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4026:1: ( ( ColonEqualsSign ) )
            // InternalSTCoreParser.g:4027:1: ( ColonEqualsSign )
            {
            // InternalSTCoreParser.g:4027:1: ( ColonEqualsSign )
            // InternalSTCoreParser.g:4028:2: ColonEqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getColonEqualsSignKeyword_7_0()); 
            }
            match(input,ColonEqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getColonEqualsSignKeyword_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_7__0__Impl"


    // $ANTLR start "rule__STVarDeclaration__Group_7__1"
    // InternalSTCoreParser.g:4037:1: rule__STVarDeclaration__Group_7__1 : rule__STVarDeclaration__Group_7__1__Impl ;
    public final void rule__STVarDeclaration__Group_7__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4041:1: ( rule__STVarDeclaration__Group_7__1__Impl )
            // InternalSTCoreParser.g:4042:2: rule__STVarDeclaration__Group_7__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__Group_7__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_7__1"


    // $ANTLR start "rule__STVarDeclaration__Group_7__1__Impl"
    // InternalSTCoreParser.g:4048:1: rule__STVarDeclaration__Group_7__1__Impl : ( ( rule__STVarDeclaration__DefaultValueAssignment_7_1 ) ) ;
    public final void rule__STVarDeclaration__Group_7__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4052:1: ( ( ( rule__STVarDeclaration__DefaultValueAssignment_7_1 ) ) )
            // InternalSTCoreParser.g:4053:1: ( ( rule__STVarDeclaration__DefaultValueAssignment_7_1 ) )
            {
            // InternalSTCoreParser.g:4053:1: ( ( rule__STVarDeclaration__DefaultValueAssignment_7_1 ) )
            // InternalSTCoreParser.g:4054:2: ( rule__STVarDeclaration__DefaultValueAssignment_7_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getDefaultValueAssignment_7_1()); 
            }
            // InternalSTCoreParser.g:4055:2: ( rule__STVarDeclaration__DefaultValueAssignment_7_1 )
            // InternalSTCoreParser.g:4055:3: rule__STVarDeclaration__DefaultValueAssignment_7_1
            {
            pushFollow(FOLLOW_2);
            rule__STVarDeclaration__DefaultValueAssignment_7_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getDefaultValueAssignment_7_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__Group_7__1__Impl"


    // $ANTLR start "rule__STArrayInitializerExpression__Group__0"
    // InternalSTCoreParser.g:4064:1: rule__STArrayInitializerExpression__Group__0 : rule__STArrayInitializerExpression__Group__0__Impl rule__STArrayInitializerExpression__Group__1 ;
    public final void rule__STArrayInitializerExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4068:1: ( rule__STArrayInitializerExpression__Group__0__Impl rule__STArrayInitializerExpression__Group__1 )
            // InternalSTCoreParser.g:4069:2: rule__STArrayInitializerExpression__Group__0__Impl rule__STArrayInitializerExpression__Group__1
            {
            pushFollow(FOLLOW_16);
            rule__STArrayInitializerExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STArrayInitializerExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__Group__0"


    // $ANTLR start "rule__STArrayInitializerExpression__Group__0__Impl"
    // InternalSTCoreParser.g:4076:1: rule__STArrayInitializerExpression__Group__0__Impl : ( LeftSquareBracket ) ;
    public final void rule__STArrayInitializerExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4080:1: ( ( LeftSquareBracket ) )
            // InternalSTCoreParser.g:4081:1: ( LeftSquareBracket )
            {
            // InternalSTCoreParser.g:4081:1: ( LeftSquareBracket )
            // InternalSTCoreParser.g:4082:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitializerExpressionAccess().getLeftSquareBracketKeyword_0()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitializerExpressionAccess().getLeftSquareBracketKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__Group__0__Impl"


    // $ANTLR start "rule__STArrayInitializerExpression__Group__1"
    // InternalSTCoreParser.g:4091:1: rule__STArrayInitializerExpression__Group__1 : rule__STArrayInitializerExpression__Group__1__Impl rule__STArrayInitializerExpression__Group__2 ;
    public final void rule__STArrayInitializerExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4095:1: ( rule__STArrayInitializerExpression__Group__1__Impl rule__STArrayInitializerExpression__Group__2 )
            // InternalSTCoreParser.g:4096:2: rule__STArrayInitializerExpression__Group__1__Impl rule__STArrayInitializerExpression__Group__2
            {
            pushFollow(FOLLOW_12);
            rule__STArrayInitializerExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STArrayInitializerExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__Group__1"


    // $ANTLR start "rule__STArrayInitializerExpression__Group__1__Impl"
    // InternalSTCoreParser.g:4103:1: rule__STArrayInitializerExpression__Group__1__Impl : ( ( rule__STArrayInitializerExpression__ValuesAssignment_1 ) ) ;
    public final void rule__STArrayInitializerExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4107:1: ( ( ( rule__STArrayInitializerExpression__ValuesAssignment_1 ) ) )
            // InternalSTCoreParser.g:4108:1: ( ( rule__STArrayInitializerExpression__ValuesAssignment_1 ) )
            {
            // InternalSTCoreParser.g:4108:1: ( ( rule__STArrayInitializerExpression__ValuesAssignment_1 ) )
            // InternalSTCoreParser.g:4109:2: ( rule__STArrayInitializerExpression__ValuesAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitializerExpressionAccess().getValuesAssignment_1()); 
            }
            // InternalSTCoreParser.g:4110:2: ( rule__STArrayInitializerExpression__ValuesAssignment_1 )
            // InternalSTCoreParser.g:4110:3: rule__STArrayInitializerExpression__ValuesAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__STArrayInitializerExpression__ValuesAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitializerExpressionAccess().getValuesAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__Group__1__Impl"


    // $ANTLR start "rule__STArrayInitializerExpression__Group__2"
    // InternalSTCoreParser.g:4118:1: rule__STArrayInitializerExpression__Group__2 : rule__STArrayInitializerExpression__Group__2__Impl rule__STArrayInitializerExpression__Group__3 ;
    public final void rule__STArrayInitializerExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4122:1: ( rule__STArrayInitializerExpression__Group__2__Impl rule__STArrayInitializerExpression__Group__3 )
            // InternalSTCoreParser.g:4123:2: rule__STArrayInitializerExpression__Group__2__Impl rule__STArrayInitializerExpression__Group__3
            {
            pushFollow(FOLLOW_12);
            rule__STArrayInitializerExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STArrayInitializerExpression__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__Group__2"


    // $ANTLR start "rule__STArrayInitializerExpression__Group__2__Impl"
    // InternalSTCoreParser.g:4130:1: rule__STArrayInitializerExpression__Group__2__Impl : ( ( rule__STArrayInitializerExpression__Group_2__0 )* ) ;
    public final void rule__STArrayInitializerExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4134:1: ( ( ( rule__STArrayInitializerExpression__Group_2__0 )* ) )
            // InternalSTCoreParser.g:4135:1: ( ( rule__STArrayInitializerExpression__Group_2__0 )* )
            {
            // InternalSTCoreParser.g:4135:1: ( ( rule__STArrayInitializerExpression__Group_2__0 )* )
            // InternalSTCoreParser.g:4136:2: ( rule__STArrayInitializerExpression__Group_2__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitializerExpressionAccess().getGroup_2()); 
            }
            // InternalSTCoreParser.g:4137:2: ( rule__STArrayInitializerExpression__Group_2__0 )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==Comma) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // InternalSTCoreParser.g:4137:3: rule__STArrayInitializerExpression__Group_2__0
            	    {
            	    pushFollow(FOLLOW_13);
            	    rule__STArrayInitializerExpression__Group_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitializerExpressionAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__Group__2__Impl"


    // $ANTLR start "rule__STArrayInitializerExpression__Group__3"
    // InternalSTCoreParser.g:4145:1: rule__STArrayInitializerExpression__Group__3 : rule__STArrayInitializerExpression__Group__3__Impl ;
    public final void rule__STArrayInitializerExpression__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4149:1: ( rule__STArrayInitializerExpression__Group__3__Impl )
            // InternalSTCoreParser.g:4150:2: rule__STArrayInitializerExpression__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STArrayInitializerExpression__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__Group__3"


    // $ANTLR start "rule__STArrayInitializerExpression__Group__3__Impl"
    // InternalSTCoreParser.g:4156:1: rule__STArrayInitializerExpression__Group__3__Impl : ( RightSquareBracket ) ;
    public final void rule__STArrayInitializerExpression__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4160:1: ( ( RightSquareBracket ) )
            // InternalSTCoreParser.g:4161:1: ( RightSquareBracket )
            {
            // InternalSTCoreParser.g:4161:1: ( RightSquareBracket )
            // InternalSTCoreParser.g:4162:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitializerExpressionAccess().getRightSquareBracketKeyword_3()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitializerExpressionAccess().getRightSquareBracketKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__Group__3__Impl"


    // $ANTLR start "rule__STArrayInitializerExpression__Group_2__0"
    // InternalSTCoreParser.g:4172:1: rule__STArrayInitializerExpression__Group_2__0 : rule__STArrayInitializerExpression__Group_2__0__Impl rule__STArrayInitializerExpression__Group_2__1 ;
    public final void rule__STArrayInitializerExpression__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4176:1: ( rule__STArrayInitializerExpression__Group_2__0__Impl rule__STArrayInitializerExpression__Group_2__1 )
            // InternalSTCoreParser.g:4177:2: rule__STArrayInitializerExpression__Group_2__0__Impl rule__STArrayInitializerExpression__Group_2__1
            {
            pushFollow(FOLLOW_16);
            rule__STArrayInitializerExpression__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STArrayInitializerExpression__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__Group_2__0"


    // $ANTLR start "rule__STArrayInitializerExpression__Group_2__0__Impl"
    // InternalSTCoreParser.g:4184:1: rule__STArrayInitializerExpression__Group_2__0__Impl : ( Comma ) ;
    public final void rule__STArrayInitializerExpression__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4188:1: ( ( Comma ) )
            // InternalSTCoreParser.g:4189:1: ( Comma )
            {
            // InternalSTCoreParser.g:4189:1: ( Comma )
            // InternalSTCoreParser.g:4190:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitializerExpressionAccess().getCommaKeyword_2_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitializerExpressionAccess().getCommaKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__Group_2__0__Impl"


    // $ANTLR start "rule__STArrayInitializerExpression__Group_2__1"
    // InternalSTCoreParser.g:4199:1: rule__STArrayInitializerExpression__Group_2__1 : rule__STArrayInitializerExpression__Group_2__1__Impl ;
    public final void rule__STArrayInitializerExpression__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4203:1: ( rule__STArrayInitializerExpression__Group_2__1__Impl )
            // InternalSTCoreParser.g:4204:2: rule__STArrayInitializerExpression__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STArrayInitializerExpression__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__Group_2__1"


    // $ANTLR start "rule__STArrayInitializerExpression__Group_2__1__Impl"
    // InternalSTCoreParser.g:4210:1: rule__STArrayInitializerExpression__Group_2__1__Impl : ( ( rule__STArrayInitializerExpression__ValuesAssignment_2_1 ) ) ;
    public final void rule__STArrayInitializerExpression__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4214:1: ( ( ( rule__STArrayInitializerExpression__ValuesAssignment_2_1 ) ) )
            // InternalSTCoreParser.g:4215:1: ( ( rule__STArrayInitializerExpression__ValuesAssignment_2_1 ) )
            {
            // InternalSTCoreParser.g:4215:1: ( ( rule__STArrayInitializerExpression__ValuesAssignment_2_1 ) )
            // InternalSTCoreParser.g:4216:2: ( rule__STArrayInitializerExpression__ValuesAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitializerExpressionAccess().getValuesAssignment_2_1()); 
            }
            // InternalSTCoreParser.g:4217:2: ( rule__STArrayInitializerExpression__ValuesAssignment_2_1 )
            // InternalSTCoreParser.g:4217:3: rule__STArrayInitializerExpression__ValuesAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__STArrayInitializerExpression__ValuesAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitializerExpressionAccess().getValuesAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__Group_2__1__Impl"


    // $ANTLR start "rule__STArrayInitElement__Group__0"
    // InternalSTCoreParser.g:4226:1: rule__STArrayInitElement__Group__0 : rule__STArrayInitElement__Group__0__Impl rule__STArrayInitElement__Group__1 ;
    public final void rule__STArrayInitElement__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4230:1: ( rule__STArrayInitElement__Group__0__Impl rule__STArrayInitElement__Group__1 )
            // InternalSTCoreParser.g:4231:2: rule__STArrayInitElement__Group__0__Impl rule__STArrayInitElement__Group__1
            {
            pushFollow(FOLLOW_17);
            rule__STArrayInitElement__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STArrayInitElement__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group__0"


    // $ANTLR start "rule__STArrayInitElement__Group__0__Impl"
    // InternalSTCoreParser.g:4238:1: rule__STArrayInitElement__Group__0__Impl : ( ( rule__STArrayInitElement__IndexOrInitExpressionAssignment_0 ) ) ;
    public final void rule__STArrayInitElement__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4242:1: ( ( ( rule__STArrayInitElement__IndexOrInitExpressionAssignment_0 ) ) )
            // InternalSTCoreParser.g:4243:1: ( ( rule__STArrayInitElement__IndexOrInitExpressionAssignment_0 ) )
            {
            // InternalSTCoreParser.g:4243:1: ( ( rule__STArrayInitElement__IndexOrInitExpressionAssignment_0 ) )
            // InternalSTCoreParser.g:4244:2: ( rule__STArrayInitElement__IndexOrInitExpressionAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitElementAccess().getIndexOrInitExpressionAssignment_0()); 
            }
            // InternalSTCoreParser.g:4245:2: ( rule__STArrayInitElement__IndexOrInitExpressionAssignment_0 )
            // InternalSTCoreParser.g:4245:3: rule__STArrayInitElement__IndexOrInitExpressionAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__STArrayInitElement__IndexOrInitExpressionAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitElementAccess().getIndexOrInitExpressionAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group__0__Impl"


    // $ANTLR start "rule__STArrayInitElement__Group__1"
    // InternalSTCoreParser.g:4253:1: rule__STArrayInitElement__Group__1 : rule__STArrayInitElement__Group__1__Impl ;
    public final void rule__STArrayInitElement__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4257:1: ( rule__STArrayInitElement__Group__1__Impl )
            // InternalSTCoreParser.g:4258:2: rule__STArrayInitElement__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STArrayInitElement__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group__1"


    // $ANTLR start "rule__STArrayInitElement__Group__1__Impl"
    // InternalSTCoreParser.g:4264:1: rule__STArrayInitElement__Group__1__Impl : ( ( rule__STArrayInitElement__Group_1__0 )? ) ;
    public final void rule__STArrayInitElement__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4268:1: ( ( ( rule__STArrayInitElement__Group_1__0 )? ) )
            // InternalSTCoreParser.g:4269:1: ( ( rule__STArrayInitElement__Group_1__0 )? )
            {
            // InternalSTCoreParser.g:4269:1: ( ( rule__STArrayInitElement__Group_1__0 )? )
            // InternalSTCoreParser.g:4270:2: ( rule__STArrayInitElement__Group_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitElementAccess().getGroup_1()); 
            }
            // InternalSTCoreParser.g:4271:2: ( rule__STArrayInitElement__Group_1__0 )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==LeftParenthesis) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // InternalSTCoreParser.g:4271:3: rule__STArrayInitElement__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STArrayInitElement__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitElementAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group__1__Impl"


    // $ANTLR start "rule__STArrayInitElement__Group_1__0"
    // InternalSTCoreParser.g:4280:1: rule__STArrayInitElement__Group_1__0 : rule__STArrayInitElement__Group_1__0__Impl rule__STArrayInitElement__Group_1__1 ;
    public final void rule__STArrayInitElement__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4284:1: ( rule__STArrayInitElement__Group_1__0__Impl rule__STArrayInitElement__Group_1__1 )
            // InternalSTCoreParser.g:4285:2: rule__STArrayInitElement__Group_1__0__Impl rule__STArrayInitElement__Group_1__1
            {
            pushFollow(FOLLOW_16);
            rule__STArrayInitElement__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STArrayInitElement__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group_1__0"


    // $ANTLR start "rule__STArrayInitElement__Group_1__0__Impl"
    // InternalSTCoreParser.g:4292:1: rule__STArrayInitElement__Group_1__0__Impl : ( LeftParenthesis ) ;
    public final void rule__STArrayInitElement__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4296:1: ( ( LeftParenthesis ) )
            // InternalSTCoreParser.g:4297:1: ( LeftParenthesis )
            {
            // InternalSTCoreParser.g:4297:1: ( LeftParenthesis )
            // InternalSTCoreParser.g:4298:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitElementAccess().getLeftParenthesisKeyword_1_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitElementAccess().getLeftParenthesisKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group_1__0__Impl"


    // $ANTLR start "rule__STArrayInitElement__Group_1__1"
    // InternalSTCoreParser.g:4307:1: rule__STArrayInitElement__Group_1__1 : rule__STArrayInitElement__Group_1__1__Impl rule__STArrayInitElement__Group_1__2 ;
    public final void rule__STArrayInitElement__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4311:1: ( rule__STArrayInitElement__Group_1__1__Impl rule__STArrayInitElement__Group_1__2 )
            // InternalSTCoreParser.g:4312:2: rule__STArrayInitElement__Group_1__1__Impl rule__STArrayInitElement__Group_1__2
            {
            pushFollow(FOLLOW_18);
            rule__STArrayInitElement__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STArrayInitElement__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group_1__1"


    // $ANTLR start "rule__STArrayInitElement__Group_1__1__Impl"
    // InternalSTCoreParser.g:4319:1: rule__STArrayInitElement__Group_1__1__Impl : ( ( rule__STArrayInitElement__InitExpressionsAssignment_1_1 ) ) ;
    public final void rule__STArrayInitElement__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4323:1: ( ( ( rule__STArrayInitElement__InitExpressionsAssignment_1_1 ) ) )
            // InternalSTCoreParser.g:4324:1: ( ( rule__STArrayInitElement__InitExpressionsAssignment_1_1 ) )
            {
            // InternalSTCoreParser.g:4324:1: ( ( rule__STArrayInitElement__InitExpressionsAssignment_1_1 ) )
            // InternalSTCoreParser.g:4325:2: ( rule__STArrayInitElement__InitExpressionsAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitElementAccess().getInitExpressionsAssignment_1_1()); 
            }
            // InternalSTCoreParser.g:4326:2: ( rule__STArrayInitElement__InitExpressionsAssignment_1_1 )
            // InternalSTCoreParser.g:4326:3: rule__STArrayInitElement__InitExpressionsAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STArrayInitElement__InitExpressionsAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitElementAccess().getInitExpressionsAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group_1__1__Impl"


    // $ANTLR start "rule__STArrayInitElement__Group_1__2"
    // InternalSTCoreParser.g:4334:1: rule__STArrayInitElement__Group_1__2 : rule__STArrayInitElement__Group_1__2__Impl rule__STArrayInitElement__Group_1__3 ;
    public final void rule__STArrayInitElement__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4338:1: ( rule__STArrayInitElement__Group_1__2__Impl rule__STArrayInitElement__Group_1__3 )
            // InternalSTCoreParser.g:4339:2: rule__STArrayInitElement__Group_1__2__Impl rule__STArrayInitElement__Group_1__3
            {
            pushFollow(FOLLOW_18);
            rule__STArrayInitElement__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STArrayInitElement__Group_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group_1__2"


    // $ANTLR start "rule__STArrayInitElement__Group_1__2__Impl"
    // InternalSTCoreParser.g:4346:1: rule__STArrayInitElement__Group_1__2__Impl : ( ( rule__STArrayInitElement__Group_1_2__0 )* ) ;
    public final void rule__STArrayInitElement__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4350:1: ( ( ( rule__STArrayInitElement__Group_1_2__0 )* ) )
            // InternalSTCoreParser.g:4351:1: ( ( rule__STArrayInitElement__Group_1_2__0 )* )
            {
            // InternalSTCoreParser.g:4351:1: ( ( rule__STArrayInitElement__Group_1_2__0 )* )
            // InternalSTCoreParser.g:4352:2: ( rule__STArrayInitElement__Group_1_2__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitElementAccess().getGroup_1_2()); 
            }
            // InternalSTCoreParser.g:4353:2: ( rule__STArrayInitElement__Group_1_2__0 )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==Comma) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // InternalSTCoreParser.g:4353:3: rule__STArrayInitElement__Group_1_2__0
            	    {
            	    pushFollow(FOLLOW_13);
            	    rule__STArrayInitElement__Group_1_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitElementAccess().getGroup_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group_1__2__Impl"


    // $ANTLR start "rule__STArrayInitElement__Group_1__3"
    // InternalSTCoreParser.g:4361:1: rule__STArrayInitElement__Group_1__3 : rule__STArrayInitElement__Group_1__3__Impl ;
    public final void rule__STArrayInitElement__Group_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4365:1: ( rule__STArrayInitElement__Group_1__3__Impl )
            // InternalSTCoreParser.g:4366:2: rule__STArrayInitElement__Group_1__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STArrayInitElement__Group_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group_1__3"


    // $ANTLR start "rule__STArrayInitElement__Group_1__3__Impl"
    // InternalSTCoreParser.g:4372:1: rule__STArrayInitElement__Group_1__3__Impl : ( RightParenthesis ) ;
    public final void rule__STArrayInitElement__Group_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4376:1: ( ( RightParenthesis ) )
            // InternalSTCoreParser.g:4377:1: ( RightParenthesis )
            {
            // InternalSTCoreParser.g:4377:1: ( RightParenthesis )
            // InternalSTCoreParser.g:4378:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitElementAccess().getRightParenthesisKeyword_1_3()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitElementAccess().getRightParenthesisKeyword_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group_1__3__Impl"


    // $ANTLR start "rule__STArrayInitElement__Group_1_2__0"
    // InternalSTCoreParser.g:4388:1: rule__STArrayInitElement__Group_1_2__0 : rule__STArrayInitElement__Group_1_2__0__Impl rule__STArrayInitElement__Group_1_2__1 ;
    public final void rule__STArrayInitElement__Group_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4392:1: ( rule__STArrayInitElement__Group_1_2__0__Impl rule__STArrayInitElement__Group_1_2__1 )
            // InternalSTCoreParser.g:4393:2: rule__STArrayInitElement__Group_1_2__0__Impl rule__STArrayInitElement__Group_1_2__1
            {
            pushFollow(FOLLOW_16);
            rule__STArrayInitElement__Group_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STArrayInitElement__Group_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group_1_2__0"


    // $ANTLR start "rule__STArrayInitElement__Group_1_2__0__Impl"
    // InternalSTCoreParser.g:4400:1: rule__STArrayInitElement__Group_1_2__0__Impl : ( Comma ) ;
    public final void rule__STArrayInitElement__Group_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4404:1: ( ( Comma ) )
            // InternalSTCoreParser.g:4405:1: ( Comma )
            {
            // InternalSTCoreParser.g:4405:1: ( Comma )
            // InternalSTCoreParser.g:4406:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitElementAccess().getCommaKeyword_1_2_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitElementAccess().getCommaKeyword_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group_1_2__0__Impl"


    // $ANTLR start "rule__STArrayInitElement__Group_1_2__1"
    // InternalSTCoreParser.g:4415:1: rule__STArrayInitElement__Group_1_2__1 : rule__STArrayInitElement__Group_1_2__1__Impl ;
    public final void rule__STArrayInitElement__Group_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4419:1: ( rule__STArrayInitElement__Group_1_2__1__Impl )
            // InternalSTCoreParser.g:4420:2: rule__STArrayInitElement__Group_1_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STArrayInitElement__Group_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group_1_2__1"


    // $ANTLR start "rule__STArrayInitElement__Group_1_2__1__Impl"
    // InternalSTCoreParser.g:4426:1: rule__STArrayInitElement__Group_1_2__1__Impl : ( ( rule__STArrayInitElement__InitExpressionsAssignment_1_2_1 ) ) ;
    public final void rule__STArrayInitElement__Group_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4430:1: ( ( ( rule__STArrayInitElement__InitExpressionsAssignment_1_2_1 ) ) )
            // InternalSTCoreParser.g:4431:1: ( ( rule__STArrayInitElement__InitExpressionsAssignment_1_2_1 ) )
            {
            // InternalSTCoreParser.g:4431:1: ( ( rule__STArrayInitElement__InitExpressionsAssignment_1_2_1 ) )
            // InternalSTCoreParser.g:4432:2: ( rule__STArrayInitElement__InitExpressionsAssignment_1_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitElementAccess().getInitExpressionsAssignment_1_2_1()); 
            }
            // InternalSTCoreParser.g:4433:2: ( rule__STArrayInitElement__InitExpressionsAssignment_1_2_1 )
            // InternalSTCoreParser.g:4433:3: rule__STArrayInitElement__InitExpressionsAssignment_1_2_1
            {
            pushFollow(FOLLOW_2);
            rule__STArrayInitElement__InitExpressionsAssignment_1_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitElementAccess().getInitExpressionsAssignment_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__Group_1_2__1__Impl"


    // $ANTLR start "rule__STStructInitializerExpression__Group__0"
    // InternalSTCoreParser.g:4442:1: rule__STStructInitializerExpression__Group__0 : rule__STStructInitializerExpression__Group__0__Impl rule__STStructInitializerExpression__Group__1 ;
    public final void rule__STStructInitializerExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4446:1: ( rule__STStructInitializerExpression__Group__0__Impl rule__STStructInitializerExpression__Group__1 )
            // InternalSTCoreParser.g:4447:2: rule__STStructInitializerExpression__Group__0__Impl rule__STStructInitializerExpression__Group__1
            {
            pushFollow(FOLLOW_19);
            rule__STStructInitializerExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STStructInitializerExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__Group__0"


    // $ANTLR start "rule__STStructInitializerExpression__Group__0__Impl"
    // InternalSTCoreParser.g:4454:1: rule__STStructInitializerExpression__Group__0__Impl : ( LeftParenthesis ) ;
    public final void rule__STStructInitializerExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4458:1: ( ( LeftParenthesis ) )
            // InternalSTCoreParser.g:4459:1: ( LeftParenthesis )
            {
            // InternalSTCoreParser.g:4459:1: ( LeftParenthesis )
            // InternalSTCoreParser.g:4460:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitializerExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitializerExpressionAccess().getLeftParenthesisKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__Group__0__Impl"


    // $ANTLR start "rule__STStructInitializerExpression__Group__1"
    // InternalSTCoreParser.g:4469:1: rule__STStructInitializerExpression__Group__1 : rule__STStructInitializerExpression__Group__1__Impl rule__STStructInitializerExpression__Group__2 ;
    public final void rule__STStructInitializerExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4473:1: ( rule__STStructInitializerExpression__Group__1__Impl rule__STStructInitializerExpression__Group__2 )
            // InternalSTCoreParser.g:4474:2: rule__STStructInitializerExpression__Group__1__Impl rule__STStructInitializerExpression__Group__2
            {
            pushFollow(FOLLOW_18);
            rule__STStructInitializerExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STStructInitializerExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__Group__1"


    // $ANTLR start "rule__STStructInitializerExpression__Group__1__Impl"
    // InternalSTCoreParser.g:4481:1: rule__STStructInitializerExpression__Group__1__Impl : ( ( rule__STStructInitializerExpression__ValuesAssignment_1 ) ) ;
    public final void rule__STStructInitializerExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4485:1: ( ( ( rule__STStructInitializerExpression__ValuesAssignment_1 ) ) )
            // InternalSTCoreParser.g:4486:1: ( ( rule__STStructInitializerExpression__ValuesAssignment_1 ) )
            {
            // InternalSTCoreParser.g:4486:1: ( ( rule__STStructInitializerExpression__ValuesAssignment_1 ) )
            // InternalSTCoreParser.g:4487:2: ( rule__STStructInitializerExpression__ValuesAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitializerExpressionAccess().getValuesAssignment_1()); 
            }
            // InternalSTCoreParser.g:4488:2: ( rule__STStructInitializerExpression__ValuesAssignment_1 )
            // InternalSTCoreParser.g:4488:3: rule__STStructInitializerExpression__ValuesAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__STStructInitializerExpression__ValuesAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitializerExpressionAccess().getValuesAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__Group__1__Impl"


    // $ANTLR start "rule__STStructInitializerExpression__Group__2"
    // InternalSTCoreParser.g:4496:1: rule__STStructInitializerExpression__Group__2 : rule__STStructInitializerExpression__Group__2__Impl rule__STStructInitializerExpression__Group__3 ;
    public final void rule__STStructInitializerExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4500:1: ( rule__STStructInitializerExpression__Group__2__Impl rule__STStructInitializerExpression__Group__3 )
            // InternalSTCoreParser.g:4501:2: rule__STStructInitializerExpression__Group__2__Impl rule__STStructInitializerExpression__Group__3
            {
            pushFollow(FOLLOW_18);
            rule__STStructInitializerExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STStructInitializerExpression__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__Group__2"


    // $ANTLR start "rule__STStructInitializerExpression__Group__2__Impl"
    // InternalSTCoreParser.g:4508:1: rule__STStructInitializerExpression__Group__2__Impl : ( ( rule__STStructInitializerExpression__Group_2__0 )* ) ;
    public final void rule__STStructInitializerExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4512:1: ( ( ( rule__STStructInitializerExpression__Group_2__0 )* ) )
            // InternalSTCoreParser.g:4513:1: ( ( rule__STStructInitializerExpression__Group_2__0 )* )
            {
            // InternalSTCoreParser.g:4513:1: ( ( rule__STStructInitializerExpression__Group_2__0 )* )
            // InternalSTCoreParser.g:4514:2: ( rule__STStructInitializerExpression__Group_2__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitializerExpressionAccess().getGroup_2()); 
            }
            // InternalSTCoreParser.g:4515:2: ( rule__STStructInitializerExpression__Group_2__0 )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==Comma) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // InternalSTCoreParser.g:4515:3: rule__STStructInitializerExpression__Group_2__0
            	    {
            	    pushFollow(FOLLOW_13);
            	    rule__STStructInitializerExpression__Group_2__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitializerExpressionAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__Group__2__Impl"


    // $ANTLR start "rule__STStructInitializerExpression__Group__3"
    // InternalSTCoreParser.g:4523:1: rule__STStructInitializerExpression__Group__3 : rule__STStructInitializerExpression__Group__3__Impl ;
    public final void rule__STStructInitializerExpression__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4527:1: ( rule__STStructInitializerExpression__Group__3__Impl )
            // InternalSTCoreParser.g:4528:2: rule__STStructInitializerExpression__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STStructInitializerExpression__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__Group__3"


    // $ANTLR start "rule__STStructInitializerExpression__Group__3__Impl"
    // InternalSTCoreParser.g:4534:1: rule__STStructInitializerExpression__Group__3__Impl : ( RightParenthesis ) ;
    public final void rule__STStructInitializerExpression__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4538:1: ( ( RightParenthesis ) )
            // InternalSTCoreParser.g:4539:1: ( RightParenthesis )
            {
            // InternalSTCoreParser.g:4539:1: ( RightParenthesis )
            // InternalSTCoreParser.g:4540:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitializerExpressionAccess().getRightParenthesisKeyword_3()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitializerExpressionAccess().getRightParenthesisKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__Group__3__Impl"


    // $ANTLR start "rule__STStructInitializerExpression__Group_2__0"
    // InternalSTCoreParser.g:4550:1: rule__STStructInitializerExpression__Group_2__0 : rule__STStructInitializerExpression__Group_2__0__Impl rule__STStructInitializerExpression__Group_2__1 ;
    public final void rule__STStructInitializerExpression__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4554:1: ( rule__STStructInitializerExpression__Group_2__0__Impl rule__STStructInitializerExpression__Group_2__1 )
            // InternalSTCoreParser.g:4555:2: rule__STStructInitializerExpression__Group_2__0__Impl rule__STStructInitializerExpression__Group_2__1
            {
            pushFollow(FOLLOW_19);
            rule__STStructInitializerExpression__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STStructInitializerExpression__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__Group_2__0"


    // $ANTLR start "rule__STStructInitializerExpression__Group_2__0__Impl"
    // InternalSTCoreParser.g:4562:1: rule__STStructInitializerExpression__Group_2__0__Impl : ( Comma ) ;
    public final void rule__STStructInitializerExpression__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4566:1: ( ( Comma ) )
            // InternalSTCoreParser.g:4567:1: ( Comma )
            {
            // InternalSTCoreParser.g:4567:1: ( Comma )
            // InternalSTCoreParser.g:4568:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitializerExpressionAccess().getCommaKeyword_2_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitializerExpressionAccess().getCommaKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__Group_2__0__Impl"


    // $ANTLR start "rule__STStructInitializerExpression__Group_2__1"
    // InternalSTCoreParser.g:4577:1: rule__STStructInitializerExpression__Group_2__1 : rule__STStructInitializerExpression__Group_2__1__Impl ;
    public final void rule__STStructInitializerExpression__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4581:1: ( rule__STStructInitializerExpression__Group_2__1__Impl )
            // InternalSTCoreParser.g:4582:2: rule__STStructInitializerExpression__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STStructInitializerExpression__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__Group_2__1"


    // $ANTLR start "rule__STStructInitializerExpression__Group_2__1__Impl"
    // InternalSTCoreParser.g:4588:1: rule__STStructInitializerExpression__Group_2__1__Impl : ( ( rule__STStructInitializerExpression__ValuesAssignment_2_1 ) ) ;
    public final void rule__STStructInitializerExpression__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4592:1: ( ( ( rule__STStructInitializerExpression__ValuesAssignment_2_1 ) ) )
            // InternalSTCoreParser.g:4593:1: ( ( rule__STStructInitializerExpression__ValuesAssignment_2_1 ) )
            {
            // InternalSTCoreParser.g:4593:1: ( ( rule__STStructInitializerExpression__ValuesAssignment_2_1 ) )
            // InternalSTCoreParser.g:4594:2: ( rule__STStructInitializerExpression__ValuesAssignment_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitializerExpressionAccess().getValuesAssignment_2_1()); 
            }
            // InternalSTCoreParser.g:4595:2: ( rule__STStructInitializerExpression__ValuesAssignment_2_1 )
            // InternalSTCoreParser.g:4595:3: rule__STStructInitializerExpression__ValuesAssignment_2_1
            {
            pushFollow(FOLLOW_2);
            rule__STStructInitializerExpression__ValuesAssignment_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitializerExpressionAccess().getValuesAssignment_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__Group_2__1__Impl"


    // $ANTLR start "rule__STStructInitElement__Group__0"
    // InternalSTCoreParser.g:4604:1: rule__STStructInitElement__Group__0 : rule__STStructInitElement__Group__0__Impl rule__STStructInitElement__Group__1 ;
    public final void rule__STStructInitElement__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4608:1: ( rule__STStructInitElement__Group__0__Impl rule__STStructInitElement__Group__1 )
            // InternalSTCoreParser.g:4609:2: rule__STStructInitElement__Group__0__Impl rule__STStructInitElement__Group__1
            {
            pushFollow(FOLLOW_20);
            rule__STStructInitElement__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STStructInitElement__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitElement__Group__0"


    // $ANTLR start "rule__STStructInitElement__Group__0__Impl"
    // InternalSTCoreParser.g:4616:1: rule__STStructInitElement__Group__0__Impl : ( ( rule__STStructInitElement__VariableAssignment_0 ) ) ;
    public final void rule__STStructInitElement__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4620:1: ( ( ( rule__STStructInitElement__VariableAssignment_0 ) ) )
            // InternalSTCoreParser.g:4621:1: ( ( rule__STStructInitElement__VariableAssignment_0 ) )
            {
            // InternalSTCoreParser.g:4621:1: ( ( rule__STStructInitElement__VariableAssignment_0 ) )
            // InternalSTCoreParser.g:4622:2: ( rule__STStructInitElement__VariableAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitElementAccess().getVariableAssignment_0()); 
            }
            // InternalSTCoreParser.g:4623:2: ( rule__STStructInitElement__VariableAssignment_0 )
            // InternalSTCoreParser.g:4623:3: rule__STStructInitElement__VariableAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__STStructInitElement__VariableAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitElementAccess().getVariableAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitElement__Group__0__Impl"


    // $ANTLR start "rule__STStructInitElement__Group__1"
    // InternalSTCoreParser.g:4631:1: rule__STStructInitElement__Group__1 : rule__STStructInitElement__Group__1__Impl rule__STStructInitElement__Group__2 ;
    public final void rule__STStructInitElement__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4635:1: ( rule__STStructInitElement__Group__1__Impl rule__STStructInitElement__Group__2 )
            // InternalSTCoreParser.g:4636:2: rule__STStructInitElement__Group__1__Impl rule__STStructInitElement__Group__2
            {
            pushFollow(FOLLOW_16);
            rule__STStructInitElement__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STStructInitElement__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitElement__Group__1"


    // $ANTLR start "rule__STStructInitElement__Group__1__Impl"
    // InternalSTCoreParser.g:4643:1: rule__STStructInitElement__Group__1__Impl : ( ColonEqualsSign ) ;
    public final void rule__STStructInitElement__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4647:1: ( ( ColonEqualsSign ) )
            // InternalSTCoreParser.g:4648:1: ( ColonEqualsSign )
            {
            // InternalSTCoreParser.g:4648:1: ( ColonEqualsSign )
            // InternalSTCoreParser.g:4649:2: ColonEqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitElementAccess().getColonEqualsSignKeyword_1()); 
            }
            match(input,ColonEqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitElementAccess().getColonEqualsSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitElement__Group__1__Impl"


    // $ANTLR start "rule__STStructInitElement__Group__2"
    // InternalSTCoreParser.g:4658:1: rule__STStructInitElement__Group__2 : rule__STStructInitElement__Group__2__Impl ;
    public final void rule__STStructInitElement__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4662:1: ( rule__STStructInitElement__Group__2__Impl )
            // InternalSTCoreParser.g:4663:2: rule__STStructInitElement__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STStructInitElement__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitElement__Group__2"


    // $ANTLR start "rule__STStructInitElement__Group__2__Impl"
    // InternalSTCoreParser.g:4669:1: rule__STStructInitElement__Group__2__Impl : ( ( rule__STStructInitElement__ValueAssignment_2 ) ) ;
    public final void rule__STStructInitElement__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4673:1: ( ( ( rule__STStructInitElement__ValueAssignment_2 ) ) )
            // InternalSTCoreParser.g:4674:1: ( ( rule__STStructInitElement__ValueAssignment_2 ) )
            {
            // InternalSTCoreParser.g:4674:1: ( ( rule__STStructInitElement__ValueAssignment_2 ) )
            // InternalSTCoreParser.g:4675:2: ( rule__STStructInitElement__ValueAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitElementAccess().getValueAssignment_2()); 
            }
            // InternalSTCoreParser.g:4676:2: ( rule__STStructInitElement__ValueAssignment_2 )
            // InternalSTCoreParser.g:4676:3: rule__STStructInitElement__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__STStructInitElement__ValueAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitElementAccess().getValueAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitElement__Group__2__Impl"


    // $ANTLR start "rule__STStatement__Group_0__0"
    // InternalSTCoreParser.g:4685:1: rule__STStatement__Group_0__0 : rule__STStatement__Group_0__0__Impl rule__STStatement__Group_0__1 ;
    public final void rule__STStatement__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4689:1: ( rule__STStatement__Group_0__0__Impl rule__STStatement__Group_0__1 )
            // InternalSTCoreParser.g:4690:2: rule__STStatement__Group_0__0__Impl rule__STStatement__Group_0__1
            {
            pushFollow(FOLLOW_21);
            rule__STStatement__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STStatement__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0__0"


    // $ANTLR start "rule__STStatement__Group_0__0__Impl"
    // InternalSTCoreParser.g:4697:1: rule__STStatement__Group_0__0__Impl : ( ( rule__STStatement__Alternatives_0_0 ) ) ;
    public final void rule__STStatement__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4701:1: ( ( ( rule__STStatement__Alternatives_0_0 ) ) )
            // InternalSTCoreParser.g:4702:1: ( ( rule__STStatement__Alternatives_0_0 ) )
            {
            // InternalSTCoreParser.g:4702:1: ( ( rule__STStatement__Alternatives_0_0 ) )
            // InternalSTCoreParser.g:4703:2: ( rule__STStatement__Alternatives_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStatementAccess().getAlternatives_0_0()); 
            }
            // InternalSTCoreParser.g:4704:2: ( rule__STStatement__Alternatives_0_0 )
            // InternalSTCoreParser.g:4704:3: rule__STStatement__Alternatives_0_0
            {
            pushFollow(FOLLOW_2);
            rule__STStatement__Alternatives_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStatementAccess().getAlternatives_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0__0__Impl"


    // $ANTLR start "rule__STStatement__Group_0__1"
    // InternalSTCoreParser.g:4712:1: rule__STStatement__Group_0__1 : rule__STStatement__Group_0__1__Impl ;
    public final void rule__STStatement__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4716:1: ( rule__STStatement__Group_0__1__Impl )
            // InternalSTCoreParser.g:4717:2: rule__STStatement__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STStatement__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0__1"


    // $ANTLR start "rule__STStatement__Group_0__1__Impl"
    // InternalSTCoreParser.g:4723:1: rule__STStatement__Group_0__1__Impl : ( Semicolon ) ;
    public final void rule__STStatement__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4727:1: ( ( Semicolon ) )
            // InternalSTCoreParser.g:4728:1: ( Semicolon )
            {
            // InternalSTCoreParser.g:4728:1: ( Semicolon )
            // InternalSTCoreParser.g:4729:2: Semicolon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStatementAccess().getSemicolonKeyword_0_1()); 
            }
            match(input,Semicolon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStatementAccess().getSemicolonKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0__1__Impl"


    // $ANTLR start "rule__STStatement__Group_0_0_7__0"
    // InternalSTCoreParser.g:4739:1: rule__STStatement__Group_0_0_7__0 : rule__STStatement__Group_0_0_7__0__Impl rule__STStatement__Group_0_0_7__1 ;
    public final void rule__STStatement__Group_0_0_7__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4743:1: ( rule__STStatement__Group_0_0_7__0__Impl rule__STStatement__Group_0_0_7__1 )
            // InternalSTCoreParser.g:4744:2: rule__STStatement__Group_0_0_7__0__Impl rule__STStatement__Group_0_0_7__1
            {
            pushFollow(FOLLOW_22);
            rule__STStatement__Group_0_0_7__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STStatement__Group_0_0_7__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0_0_7__0"


    // $ANTLR start "rule__STStatement__Group_0_0_7__0__Impl"
    // InternalSTCoreParser.g:4751:1: rule__STStatement__Group_0_0_7__0__Impl : ( () ) ;
    public final void rule__STStatement__Group_0_0_7__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4755:1: ( ( () ) )
            // InternalSTCoreParser.g:4756:1: ( () )
            {
            // InternalSTCoreParser.g:4756:1: ( () )
            // InternalSTCoreParser.g:4757:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStatementAccess().getSTReturnAction_0_0_7_0()); 
            }
            // InternalSTCoreParser.g:4758:2: ()
            // InternalSTCoreParser.g:4758:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStatementAccess().getSTReturnAction_0_0_7_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0_0_7__0__Impl"


    // $ANTLR start "rule__STStatement__Group_0_0_7__1"
    // InternalSTCoreParser.g:4766:1: rule__STStatement__Group_0_0_7__1 : rule__STStatement__Group_0_0_7__1__Impl ;
    public final void rule__STStatement__Group_0_0_7__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4770:1: ( rule__STStatement__Group_0_0_7__1__Impl )
            // InternalSTCoreParser.g:4771:2: rule__STStatement__Group_0_0_7__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STStatement__Group_0_0_7__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0_0_7__1"


    // $ANTLR start "rule__STStatement__Group_0_0_7__1__Impl"
    // InternalSTCoreParser.g:4777:1: rule__STStatement__Group_0_0_7__1__Impl : ( RETURN ) ;
    public final void rule__STStatement__Group_0_0_7__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4781:1: ( ( RETURN ) )
            // InternalSTCoreParser.g:4782:1: ( RETURN )
            {
            // InternalSTCoreParser.g:4782:1: ( RETURN )
            // InternalSTCoreParser.g:4783:2: RETURN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStatementAccess().getRETURNKeyword_0_0_7_1()); 
            }
            match(input,RETURN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStatementAccess().getRETURNKeyword_0_0_7_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0_0_7__1__Impl"


    // $ANTLR start "rule__STStatement__Group_0_0_8__0"
    // InternalSTCoreParser.g:4793:1: rule__STStatement__Group_0_0_8__0 : rule__STStatement__Group_0_0_8__0__Impl rule__STStatement__Group_0_0_8__1 ;
    public final void rule__STStatement__Group_0_0_8__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4797:1: ( rule__STStatement__Group_0_0_8__0__Impl rule__STStatement__Group_0_0_8__1 )
            // InternalSTCoreParser.g:4798:2: rule__STStatement__Group_0_0_8__0__Impl rule__STStatement__Group_0_0_8__1
            {
            pushFollow(FOLLOW_23);
            rule__STStatement__Group_0_0_8__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STStatement__Group_0_0_8__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0_0_8__0"


    // $ANTLR start "rule__STStatement__Group_0_0_8__0__Impl"
    // InternalSTCoreParser.g:4805:1: rule__STStatement__Group_0_0_8__0__Impl : ( () ) ;
    public final void rule__STStatement__Group_0_0_8__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4809:1: ( ( () ) )
            // InternalSTCoreParser.g:4810:1: ( () )
            {
            // InternalSTCoreParser.g:4810:1: ( () )
            // InternalSTCoreParser.g:4811:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStatementAccess().getSTContinueAction_0_0_8_0()); 
            }
            // InternalSTCoreParser.g:4812:2: ()
            // InternalSTCoreParser.g:4812:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStatementAccess().getSTContinueAction_0_0_8_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0_0_8__0__Impl"


    // $ANTLR start "rule__STStatement__Group_0_0_8__1"
    // InternalSTCoreParser.g:4820:1: rule__STStatement__Group_0_0_8__1 : rule__STStatement__Group_0_0_8__1__Impl ;
    public final void rule__STStatement__Group_0_0_8__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4824:1: ( rule__STStatement__Group_0_0_8__1__Impl )
            // InternalSTCoreParser.g:4825:2: rule__STStatement__Group_0_0_8__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STStatement__Group_0_0_8__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0_0_8__1"


    // $ANTLR start "rule__STStatement__Group_0_0_8__1__Impl"
    // InternalSTCoreParser.g:4831:1: rule__STStatement__Group_0_0_8__1__Impl : ( CONTINUE ) ;
    public final void rule__STStatement__Group_0_0_8__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4835:1: ( ( CONTINUE ) )
            // InternalSTCoreParser.g:4836:1: ( CONTINUE )
            {
            // InternalSTCoreParser.g:4836:1: ( CONTINUE )
            // InternalSTCoreParser.g:4837:2: CONTINUE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStatementAccess().getCONTINUEKeyword_0_0_8_1()); 
            }
            match(input,CONTINUE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStatementAccess().getCONTINUEKeyword_0_0_8_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0_0_8__1__Impl"


    // $ANTLR start "rule__STStatement__Group_0_0_9__0"
    // InternalSTCoreParser.g:4847:1: rule__STStatement__Group_0_0_9__0 : rule__STStatement__Group_0_0_9__0__Impl rule__STStatement__Group_0_0_9__1 ;
    public final void rule__STStatement__Group_0_0_9__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4851:1: ( rule__STStatement__Group_0_0_9__0__Impl rule__STStatement__Group_0_0_9__1 )
            // InternalSTCoreParser.g:4852:2: rule__STStatement__Group_0_0_9__0__Impl rule__STStatement__Group_0_0_9__1
            {
            pushFollow(FOLLOW_24);
            rule__STStatement__Group_0_0_9__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STStatement__Group_0_0_9__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0_0_9__0"


    // $ANTLR start "rule__STStatement__Group_0_0_9__0__Impl"
    // InternalSTCoreParser.g:4859:1: rule__STStatement__Group_0_0_9__0__Impl : ( () ) ;
    public final void rule__STStatement__Group_0_0_9__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4863:1: ( ( () ) )
            // InternalSTCoreParser.g:4864:1: ( () )
            {
            // InternalSTCoreParser.g:4864:1: ( () )
            // InternalSTCoreParser.g:4865:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStatementAccess().getSTExitAction_0_0_9_0()); 
            }
            // InternalSTCoreParser.g:4866:2: ()
            // InternalSTCoreParser.g:4866:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStatementAccess().getSTExitAction_0_0_9_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0_0_9__0__Impl"


    // $ANTLR start "rule__STStatement__Group_0_0_9__1"
    // InternalSTCoreParser.g:4874:1: rule__STStatement__Group_0_0_9__1 : rule__STStatement__Group_0_0_9__1__Impl ;
    public final void rule__STStatement__Group_0_0_9__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4878:1: ( rule__STStatement__Group_0_0_9__1__Impl )
            // InternalSTCoreParser.g:4879:2: rule__STStatement__Group_0_0_9__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STStatement__Group_0_0_9__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0_0_9__1"


    // $ANTLR start "rule__STStatement__Group_0_0_9__1__Impl"
    // InternalSTCoreParser.g:4885:1: rule__STStatement__Group_0_0_9__1__Impl : ( EXIT ) ;
    public final void rule__STStatement__Group_0_0_9__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4889:1: ( ( EXIT ) )
            // InternalSTCoreParser.g:4890:1: ( EXIT )
            {
            // InternalSTCoreParser.g:4890:1: ( EXIT )
            // InternalSTCoreParser.g:4891:2: EXIT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStatementAccess().getEXITKeyword_0_0_9_1()); 
            }
            match(input,EXIT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStatementAccess().getEXITKeyword_0_0_9_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_0_0_9__1__Impl"


    // $ANTLR start "rule__STStatement__Group_1__0"
    // InternalSTCoreParser.g:4901:1: rule__STStatement__Group_1__0 : rule__STStatement__Group_1__0__Impl rule__STStatement__Group_1__1 ;
    public final void rule__STStatement__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4905:1: ( rule__STStatement__Group_1__0__Impl rule__STStatement__Group_1__1 )
            // InternalSTCoreParser.g:4906:2: rule__STStatement__Group_1__0__Impl rule__STStatement__Group_1__1
            {
            pushFollow(FOLLOW_3);
            rule__STStatement__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STStatement__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_1__0"


    // $ANTLR start "rule__STStatement__Group_1__0__Impl"
    // InternalSTCoreParser.g:4913:1: rule__STStatement__Group_1__0__Impl : ( () ) ;
    public final void rule__STStatement__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4917:1: ( ( () ) )
            // InternalSTCoreParser.g:4918:1: ( () )
            {
            // InternalSTCoreParser.g:4918:1: ( () )
            // InternalSTCoreParser.g:4919:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStatementAccess().getSTNopAction_1_0()); 
            }
            // InternalSTCoreParser.g:4920:2: ()
            // InternalSTCoreParser.g:4920:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStatementAccess().getSTNopAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_1__0__Impl"


    // $ANTLR start "rule__STStatement__Group_1__1"
    // InternalSTCoreParser.g:4928:1: rule__STStatement__Group_1__1 : rule__STStatement__Group_1__1__Impl ;
    public final void rule__STStatement__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4932:1: ( rule__STStatement__Group_1__1__Impl )
            // InternalSTCoreParser.g:4933:2: rule__STStatement__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STStatement__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_1__1"


    // $ANTLR start "rule__STStatement__Group_1__1__Impl"
    // InternalSTCoreParser.g:4939:1: rule__STStatement__Group_1__1__Impl : ( Semicolon ) ;
    public final void rule__STStatement__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4943:1: ( ( Semicolon ) )
            // InternalSTCoreParser.g:4944:1: ( Semicolon )
            {
            // InternalSTCoreParser.g:4944:1: ( Semicolon )
            // InternalSTCoreParser.g:4945:2: Semicolon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStatementAccess().getSemicolonKeyword_1_1()); 
            }
            match(input,Semicolon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStatementAccess().getSemicolonKeyword_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStatement__Group_1__1__Impl"


    // $ANTLR start "rule__STAssignmentStatement__Group__0"
    // InternalSTCoreParser.g:4955:1: rule__STAssignmentStatement__Group__0 : rule__STAssignmentStatement__Group__0__Impl rule__STAssignmentStatement__Group__1 ;
    public final void rule__STAssignmentStatement__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4959:1: ( rule__STAssignmentStatement__Group__0__Impl rule__STAssignmentStatement__Group__1 )
            // InternalSTCoreParser.g:4960:2: rule__STAssignmentStatement__Group__0__Impl rule__STAssignmentStatement__Group__1
            {
            pushFollow(FOLLOW_20);
            rule__STAssignmentStatement__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAssignmentStatement__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAssignmentStatement__Group__0"


    // $ANTLR start "rule__STAssignmentStatement__Group__0__Impl"
    // InternalSTCoreParser.g:4967:1: rule__STAssignmentStatement__Group__0__Impl : ( ( rule__STAssignmentStatement__LeftAssignment_0 ) ) ;
    public final void rule__STAssignmentStatement__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4971:1: ( ( ( rule__STAssignmentStatement__LeftAssignment_0 ) ) )
            // InternalSTCoreParser.g:4972:1: ( ( rule__STAssignmentStatement__LeftAssignment_0 ) )
            {
            // InternalSTCoreParser.g:4972:1: ( ( rule__STAssignmentStatement__LeftAssignment_0 ) )
            // InternalSTCoreParser.g:4973:2: ( rule__STAssignmentStatement__LeftAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAssignmentStatementAccess().getLeftAssignment_0()); 
            }
            // InternalSTCoreParser.g:4974:2: ( rule__STAssignmentStatement__LeftAssignment_0 )
            // InternalSTCoreParser.g:4974:3: rule__STAssignmentStatement__LeftAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__STAssignmentStatement__LeftAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAssignmentStatementAccess().getLeftAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAssignmentStatement__Group__0__Impl"


    // $ANTLR start "rule__STAssignmentStatement__Group__1"
    // InternalSTCoreParser.g:4982:1: rule__STAssignmentStatement__Group__1 : rule__STAssignmentStatement__Group__1__Impl rule__STAssignmentStatement__Group__2 ;
    public final void rule__STAssignmentStatement__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4986:1: ( rule__STAssignmentStatement__Group__1__Impl rule__STAssignmentStatement__Group__2 )
            // InternalSTCoreParser.g:4987:2: rule__STAssignmentStatement__Group__1__Impl rule__STAssignmentStatement__Group__2
            {
            pushFollow(FOLLOW_11);
            rule__STAssignmentStatement__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAssignmentStatement__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAssignmentStatement__Group__1"


    // $ANTLR start "rule__STAssignmentStatement__Group__1__Impl"
    // InternalSTCoreParser.g:4994:1: rule__STAssignmentStatement__Group__1__Impl : ( ColonEqualsSign ) ;
    public final void rule__STAssignmentStatement__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:4998:1: ( ( ColonEqualsSign ) )
            // InternalSTCoreParser.g:4999:1: ( ColonEqualsSign )
            {
            // InternalSTCoreParser.g:4999:1: ( ColonEqualsSign )
            // InternalSTCoreParser.g:5000:2: ColonEqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAssignmentStatementAccess().getColonEqualsSignKeyword_1()); 
            }
            match(input,ColonEqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAssignmentStatementAccess().getColonEqualsSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAssignmentStatement__Group__1__Impl"


    // $ANTLR start "rule__STAssignmentStatement__Group__2"
    // InternalSTCoreParser.g:5009:1: rule__STAssignmentStatement__Group__2 : rule__STAssignmentStatement__Group__2__Impl ;
    public final void rule__STAssignmentStatement__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5013:1: ( rule__STAssignmentStatement__Group__2__Impl )
            // InternalSTCoreParser.g:5014:2: rule__STAssignmentStatement__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STAssignmentStatement__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAssignmentStatement__Group__2"


    // $ANTLR start "rule__STAssignmentStatement__Group__2__Impl"
    // InternalSTCoreParser.g:5020:1: rule__STAssignmentStatement__Group__2__Impl : ( ( rule__STAssignmentStatement__RightAssignment_2 ) ) ;
    public final void rule__STAssignmentStatement__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5024:1: ( ( ( rule__STAssignmentStatement__RightAssignment_2 ) ) )
            // InternalSTCoreParser.g:5025:1: ( ( rule__STAssignmentStatement__RightAssignment_2 ) )
            {
            // InternalSTCoreParser.g:5025:1: ( ( rule__STAssignmentStatement__RightAssignment_2 ) )
            // InternalSTCoreParser.g:5026:2: ( rule__STAssignmentStatement__RightAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAssignmentStatementAccess().getRightAssignment_2()); 
            }
            // InternalSTCoreParser.g:5027:2: ( rule__STAssignmentStatement__RightAssignment_2 )
            // InternalSTCoreParser.g:5027:3: rule__STAssignmentStatement__RightAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__STAssignmentStatement__RightAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAssignmentStatementAccess().getRightAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAssignmentStatement__Group__2__Impl"


    // $ANTLR start "rule__STCallNamedInputArgument__Group__0"
    // InternalSTCoreParser.g:5036:1: rule__STCallNamedInputArgument__Group__0 : rule__STCallNamedInputArgument__Group__0__Impl rule__STCallNamedInputArgument__Group__1 ;
    public final void rule__STCallNamedInputArgument__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5040:1: ( rule__STCallNamedInputArgument__Group__0__Impl rule__STCallNamedInputArgument__Group__1 )
            // InternalSTCoreParser.g:5041:2: rule__STCallNamedInputArgument__Group__0__Impl rule__STCallNamedInputArgument__Group__1
            {
            pushFollow(FOLLOW_20);
            rule__STCallNamedInputArgument__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCallNamedInputArgument__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedInputArgument__Group__0"


    // $ANTLR start "rule__STCallNamedInputArgument__Group__0__Impl"
    // InternalSTCoreParser.g:5048:1: rule__STCallNamedInputArgument__Group__0__Impl : ( ( rule__STCallNamedInputArgument__ParameterAssignment_0 ) ) ;
    public final void rule__STCallNamedInputArgument__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5052:1: ( ( ( rule__STCallNamedInputArgument__ParameterAssignment_0 ) ) )
            // InternalSTCoreParser.g:5053:1: ( ( rule__STCallNamedInputArgument__ParameterAssignment_0 ) )
            {
            // InternalSTCoreParser.g:5053:1: ( ( rule__STCallNamedInputArgument__ParameterAssignment_0 ) )
            // InternalSTCoreParser.g:5054:2: ( rule__STCallNamedInputArgument__ParameterAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedInputArgumentAccess().getParameterAssignment_0()); 
            }
            // InternalSTCoreParser.g:5055:2: ( rule__STCallNamedInputArgument__ParameterAssignment_0 )
            // InternalSTCoreParser.g:5055:3: rule__STCallNamedInputArgument__ParameterAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__STCallNamedInputArgument__ParameterAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedInputArgumentAccess().getParameterAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedInputArgument__Group__0__Impl"


    // $ANTLR start "rule__STCallNamedInputArgument__Group__1"
    // InternalSTCoreParser.g:5063:1: rule__STCallNamedInputArgument__Group__1 : rule__STCallNamedInputArgument__Group__1__Impl rule__STCallNamedInputArgument__Group__2 ;
    public final void rule__STCallNamedInputArgument__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5067:1: ( rule__STCallNamedInputArgument__Group__1__Impl rule__STCallNamedInputArgument__Group__2 )
            // InternalSTCoreParser.g:5068:2: rule__STCallNamedInputArgument__Group__1__Impl rule__STCallNamedInputArgument__Group__2
            {
            pushFollow(FOLLOW_11);
            rule__STCallNamedInputArgument__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCallNamedInputArgument__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedInputArgument__Group__1"


    // $ANTLR start "rule__STCallNamedInputArgument__Group__1__Impl"
    // InternalSTCoreParser.g:5075:1: rule__STCallNamedInputArgument__Group__1__Impl : ( ColonEqualsSign ) ;
    public final void rule__STCallNamedInputArgument__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5079:1: ( ( ColonEqualsSign ) )
            // InternalSTCoreParser.g:5080:1: ( ColonEqualsSign )
            {
            // InternalSTCoreParser.g:5080:1: ( ColonEqualsSign )
            // InternalSTCoreParser.g:5081:2: ColonEqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedInputArgumentAccess().getColonEqualsSignKeyword_1()); 
            }
            match(input,ColonEqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedInputArgumentAccess().getColonEqualsSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedInputArgument__Group__1__Impl"


    // $ANTLR start "rule__STCallNamedInputArgument__Group__2"
    // InternalSTCoreParser.g:5090:1: rule__STCallNamedInputArgument__Group__2 : rule__STCallNamedInputArgument__Group__2__Impl ;
    public final void rule__STCallNamedInputArgument__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5094:1: ( rule__STCallNamedInputArgument__Group__2__Impl )
            // InternalSTCoreParser.g:5095:2: rule__STCallNamedInputArgument__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STCallNamedInputArgument__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedInputArgument__Group__2"


    // $ANTLR start "rule__STCallNamedInputArgument__Group__2__Impl"
    // InternalSTCoreParser.g:5101:1: rule__STCallNamedInputArgument__Group__2__Impl : ( ( rule__STCallNamedInputArgument__ArgumentAssignment_2 ) ) ;
    public final void rule__STCallNamedInputArgument__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5105:1: ( ( ( rule__STCallNamedInputArgument__ArgumentAssignment_2 ) ) )
            // InternalSTCoreParser.g:5106:1: ( ( rule__STCallNamedInputArgument__ArgumentAssignment_2 ) )
            {
            // InternalSTCoreParser.g:5106:1: ( ( rule__STCallNamedInputArgument__ArgumentAssignment_2 ) )
            // InternalSTCoreParser.g:5107:2: ( rule__STCallNamedInputArgument__ArgumentAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedInputArgumentAccess().getArgumentAssignment_2()); 
            }
            // InternalSTCoreParser.g:5108:2: ( rule__STCallNamedInputArgument__ArgumentAssignment_2 )
            // InternalSTCoreParser.g:5108:3: rule__STCallNamedInputArgument__ArgumentAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__STCallNamedInputArgument__ArgumentAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedInputArgumentAccess().getArgumentAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedInputArgument__Group__2__Impl"


    // $ANTLR start "rule__STCallNamedOutputArgument__Group__0"
    // InternalSTCoreParser.g:5117:1: rule__STCallNamedOutputArgument__Group__0 : rule__STCallNamedOutputArgument__Group__0__Impl rule__STCallNamedOutputArgument__Group__1 ;
    public final void rule__STCallNamedOutputArgument__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5121:1: ( rule__STCallNamedOutputArgument__Group__0__Impl rule__STCallNamedOutputArgument__Group__1 )
            // InternalSTCoreParser.g:5122:2: rule__STCallNamedOutputArgument__Group__0__Impl rule__STCallNamedOutputArgument__Group__1
            {
            pushFollow(FOLLOW_5);
            rule__STCallNamedOutputArgument__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCallNamedOutputArgument__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedOutputArgument__Group__0"


    // $ANTLR start "rule__STCallNamedOutputArgument__Group__0__Impl"
    // InternalSTCoreParser.g:5129:1: rule__STCallNamedOutputArgument__Group__0__Impl : ( ( rule__STCallNamedOutputArgument__NotAssignment_0 )? ) ;
    public final void rule__STCallNamedOutputArgument__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5133:1: ( ( ( rule__STCallNamedOutputArgument__NotAssignment_0 )? ) )
            // InternalSTCoreParser.g:5134:1: ( ( rule__STCallNamedOutputArgument__NotAssignment_0 )? )
            {
            // InternalSTCoreParser.g:5134:1: ( ( rule__STCallNamedOutputArgument__NotAssignment_0 )? )
            // InternalSTCoreParser.g:5135:2: ( rule__STCallNamedOutputArgument__NotAssignment_0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedOutputArgumentAccess().getNotAssignment_0()); 
            }
            // InternalSTCoreParser.g:5136:2: ( rule__STCallNamedOutputArgument__NotAssignment_0 )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==NOT) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // InternalSTCoreParser.g:5136:3: rule__STCallNamedOutputArgument__NotAssignment_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STCallNamedOutputArgument__NotAssignment_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedOutputArgumentAccess().getNotAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedOutputArgument__Group__0__Impl"


    // $ANTLR start "rule__STCallNamedOutputArgument__Group__1"
    // InternalSTCoreParser.g:5144:1: rule__STCallNamedOutputArgument__Group__1 : rule__STCallNamedOutputArgument__Group__1__Impl rule__STCallNamedOutputArgument__Group__2 ;
    public final void rule__STCallNamedOutputArgument__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5148:1: ( rule__STCallNamedOutputArgument__Group__1__Impl rule__STCallNamedOutputArgument__Group__2 )
            // InternalSTCoreParser.g:5149:2: rule__STCallNamedOutputArgument__Group__1__Impl rule__STCallNamedOutputArgument__Group__2
            {
            pushFollow(FOLLOW_25);
            rule__STCallNamedOutputArgument__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCallNamedOutputArgument__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedOutputArgument__Group__1"


    // $ANTLR start "rule__STCallNamedOutputArgument__Group__1__Impl"
    // InternalSTCoreParser.g:5156:1: rule__STCallNamedOutputArgument__Group__1__Impl : ( ( rule__STCallNamedOutputArgument__ParameterAssignment_1 ) ) ;
    public final void rule__STCallNamedOutputArgument__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5160:1: ( ( ( rule__STCallNamedOutputArgument__ParameterAssignment_1 ) ) )
            // InternalSTCoreParser.g:5161:1: ( ( rule__STCallNamedOutputArgument__ParameterAssignment_1 ) )
            {
            // InternalSTCoreParser.g:5161:1: ( ( rule__STCallNamedOutputArgument__ParameterAssignment_1 ) )
            // InternalSTCoreParser.g:5162:2: ( rule__STCallNamedOutputArgument__ParameterAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedOutputArgumentAccess().getParameterAssignment_1()); 
            }
            // InternalSTCoreParser.g:5163:2: ( rule__STCallNamedOutputArgument__ParameterAssignment_1 )
            // InternalSTCoreParser.g:5163:3: rule__STCallNamedOutputArgument__ParameterAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__STCallNamedOutputArgument__ParameterAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedOutputArgumentAccess().getParameterAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedOutputArgument__Group__1__Impl"


    // $ANTLR start "rule__STCallNamedOutputArgument__Group__2"
    // InternalSTCoreParser.g:5171:1: rule__STCallNamedOutputArgument__Group__2 : rule__STCallNamedOutputArgument__Group__2__Impl rule__STCallNamedOutputArgument__Group__3 ;
    public final void rule__STCallNamedOutputArgument__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5175:1: ( rule__STCallNamedOutputArgument__Group__2__Impl rule__STCallNamedOutputArgument__Group__3 )
            // InternalSTCoreParser.g:5176:2: rule__STCallNamedOutputArgument__Group__2__Impl rule__STCallNamedOutputArgument__Group__3
            {
            pushFollow(FOLLOW_11);
            rule__STCallNamedOutputArgument__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCallNamedOutputArgument__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedOutputArgument__Group__2"


    // $ANTLR start "rule__STCallNamedOutputArgument__Group__2__Impl"
    // InternalSTCoreParser.g:5183:1: rule__STCallNamedOutputArgument__Group__2__Impl : ( EqualsSignGreaterThanSign ) ;
    public final void rule__STCallNamedOutputArgument__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5187:1: ( ( EqualsSignGreaterThanSign ) )
            // InternalSTCoreParser.g:5188:1: ( EqualsSignGreaterThanSign )
            {
            // InternalSTCoreParser.g:5188:1: ( EqualsSignGreaterThanSign )
            // InternalSTCoreParser.g:5189:2: EqualsSignGreaterThanSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedOutputArgumentAccess().getEqualsSignGreaterThanSignKeyword_2()); 
            }
            match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedOutputArgumentAccess().getEqualsSignGreaterThanSignKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedOutputArgument__Group__2__Impl"


    // $ANTLR start "rule__STCallNamedOutputArgument__Group__3"
    // InternalSTCoreParser.g:5198:1: rule__STCallNamedOutputArgument__Group__3 : rule__STCallNamedOutputArgument__Group__3__Impl ;
    public final void rule__STCallNamedOutputArgument__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5202:1: ( rule__STCallNamedOutputArgument__Group__3__Impl )
            // InternalSTCoreParser.g:5203:2: rule__STCallNamedOutputArgument__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STCallNamedOutputArgument__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedOutputArgument__Group__3"


    // $ANTLR start "rule__STCallNamedOutputArgument__Group__3__Impl"
    // InternalSTCoreParser.g:5209:1: rule__STCallNamedOutputArgument__Group__3__Impl : ( ( rule__STCallNamedOutputArgument__ArgumentAssignment_3 ) ) ;
    public final void rule__STCallNamedOutputArgument__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5213:1: ( ( ( rule__STCallNamedOutputArgument__ArgumentAssignment_3 ) ) )
            // InternalSTCoreParser.g:5214:1: ( ( rule__STCallNamedOutputArgument__ArgumentAssignment_3 ) )
            {
            // InternalSTCoreParser.g:5214:1: ( ( rule__STCallNamedOutputArgument__ArgumentAssignment_3 ) )
            // InternalSTCoreParser.g:5215:2: ( rule__STCallNamedOutputArgument__ArgumentAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedOutputArgumentAccess().getArgumentAssignment_3()); 
            }
            // InternalSTCoreParser.g:5216:2: ( rule__STCallNamedOutputArgument__ArgumentAssignment_3 )
            // InternalSTCoreParser.g:5216:3: rule__STCallNamedOutputArgument__ArgumentAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__STCallNamedOutputArgument__ArgumentAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedOutputArgumentAccess().getArgumentAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedOutputArgument__Group__3__Impl"


    // $ANTLR start "rule__STIfStatement__Group__0"
    // InternalSTCoreParser.g:5225:1: rule__STIfStatement__Group__0 : rule__STIfStatement__Group__0__Impl rule__STIfStatement__Group__1 ;
    public final void rule__STIfStatement__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5229:1: ( rule__STIfStatement__Group__0__Impl rule__STIfStatement__Group__1 )
            // InternalSTCoreParser.g:5230:2: rule__STIfStatement__Group__0__Impl rule__STIfStatement__Group__1
            {
            pushFollow(FOLLOW_11);
            rule__STIfStatement__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STIfStatement__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__0"


    // $ANTLR start "rule__STIfStatement__Group__0__Impl"
    // InternalSTCoreParser.g:5237:1: rule__STIfStatement__Group__0__Impl : ( IF ) ;
    public final void rule__STIfStatement__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5241:1: ( ( IF ) )
            // InternalSTCoreParser.g:5242:1: ( IF )
            {
            // InternalSTCoreParser.g:5242:1: ( IF )
            // InternalSTCoreParser.g:5243:2: IF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTIfStatementAccess().getIFKeyword_0()); 
            }
            match(input,IF,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTIfStatementAccess().getIFKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__0__Impl"


    // $ANTLR start "rule__STIfStatement__Group__1"
    // InternalSTCoreParser.g:5252:1: rule__STIfStatement__Group__1 : rule__STIfStatement__Group__1__Impl rule__STIfStatement__Group__2 ;
    public final void rule__STIfStatement__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5256:1: ( rule__STIfStatement__Group__1__Impl rule__STIfStatement__Group__2 )
            // InternalSTCoreParser.g:5257:2: rule__STIfStatement__Group__1__Impl rule__STIfStatement__Group__2
            {
            pushFollow(FOLLOW_26);
            rule__STIfStatement__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STIfStatement__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__1"


    // $ANTLR start "rule__STIfStatement__Group__1__Impl"
    // InternalSTCoreParser.g:5264:1: rule__STIfStatement__Group__1__Impl : ( ( rule__STIfStatement__ConditionAssignment_1 ) ) ;
    public final void rule__STIfStatement__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5268:1: ( ( ( rule__STIfStatement__ConditionAssignment_1 ) ) )
            // InternalSTCoreParser.g:5269:1: ( ( rule__STIfStatement__ConditionAssignment_1 ) )
            {
            // InternalSTCoreParser.g:5269:1: ( ( rule__STIfStatement__ConditionAssignment_1 ) )
            // InternalSTCoreParser.g:5270:2: ( rule__STIfStatement__ConditionAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTIfStatementAccess().getConditionAssignment_1()); 
            }
            // InternalSTCoreParser.g:5271:2: ( rule__STIfStatement__ConditionAssignment_1 )
            // InternalSTCoreParser.g:5271:3: rule__STIfStatement__ConditionAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__STIfStatement__ConditionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTIfStatementAccess().getConditionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__1__Impl"


    // $ANTLR start "rule__STIfStatement__Group__2"
    // InternalSTCoreParser.g:5279:1: rule__STIfStatement__Group__2 : rule__STIfStatement__Group__2__Impl rule__STIfStatement__Group__3 ;
    public final void rule__STIfStatement__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5283:1: ( rule__STIfStatement__Group__2__Impl rule__STIfStatement__Group__3 )
            // InternalSTCoreParser.g:5284:2: rule__STIfStatement__Group__2__Impl rule__STIfStatement__Group__3
            {
            pushFollow(FOLLOW_27);
            rule__STIfStatement__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STIfStatement__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__2"


    // $ANTLR start "rule__STIfStatement__Group__2__Impl"
    // InternalSTCoreParser.g:5291:1: rule__STIfStatement__Group__2__Impl : ( THEN ) ;
    public final void rule__STIfStatement__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5295:1: ( ( THEN ) )
            // InternalSTCoreParser.g:5296:1: ( THEN )
            {
            // InternalSTCoreParser.g:5296:1: ( THEN )
            // InternalSTCoreParser.g:5297:2: THEN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTIfStatementAccess().getTHENKeyword_2()); 
            }
            match(input,THEN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTIfStatementAccess().getTHENKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__2__Impl"


    // $ANTLR start "rule__STIfStatement__Group__3"
    // InternalSTCoreParser.g:5306:1: rule__STIfStatement__Group__3 : rule__STIfStatement__Group__3__Impl rule__STIfStatement__Group__4 ;
    public final void rule__STIfStatement__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5310:1: ( rule__STIfStatement__Group__3__Impl rule__STIfStatement__Group__4 )
            // InternalSTCoreParser.g:5311:2: rule__STIfStatement__Group__3__Impl rule__STIfStatement__Group__4
            {
            pushFollow(FOLLOW_27);
            rule__STIfStatement__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STIfStatement__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__3"


    // $ANTLR start "rule__STIfStatement__Group__3__Impl"
    // InternalSTCoreParser.g:5318:1: rule__STIfStatement__Group__3__Impl : ( ( rule__STIfStatement__StatementsAssignment_3 )* ) ;
    public final void rule__STIfStatement__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5322:1: ( ( ( rule__STIfStatement__StatementsAssignment_3 )* ) )
            // InternalSTCoreParser.g:5323:1: ( ( rule__STIfStatement__StatementsAssignment_3 )* )
            {
            // InternalSTCoreParser.g:5323:1: ( ( rule__STIfStatement__StatementsAssignment_3 )* )
            // InternalSTCoreParser.g:5324:2: ( rule__STIfStatement__StatementsAssignment_3 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTIfStatementAccess().getStatementsAssignment_3()); 
            }
            // InternalSTCoreParser.g:5325:2: ( rule__STIfStatement__StatementsAssignment_3 )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==LDATE_AND_TIME||LA50_0==DATE_AND_TIME||LA50_0==LTIME_OF_DAY||LA50_0==TIME_OF_DAY||LA50_0==CONTINUE||LA50_0==WSTRING||LA50_0==REPEAT||LA50_0==RETURN||LA50_0==STRING||LA50_0==DWORD||LA50_0==FALSE||(LA50_0>=LDATE && LA50_0<=ULINT)||(LA50_0>=USINT && LA50_0<=DINT)||(LA50_0>=EXIT && LA50_0<=LTOD)||(LA50_0>=REAL && LA50_0<=SINT)||(LA50_0>=THIS && LA50_0<=TRUE)||LA50_0==UINT||(LA50_0>=WORD && LA50_0<=MOD)||LA50_0==TOD||LA50_0==XOR||(LA50_0>=DT && LA50_0<=LT)||LA50_0==OR||LA50_0==LeftParenthesis||LA50_0==PlusSign||LA50_0==HyphenMinus||LA50_0==Semicolon||(LA50_0>=D && LA50_0<=T)||(LA50_0>=RULE_NON_DECIMAL && LA50_0<=RULE_DECIMAL)||(LA50_0>=RULE_ID && LA50_0<=RULE_STRING)) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // InternalSTCoreParser.g:5325:3: rule__STIfStatement__StatementsAssignment_3
            	    {
            	    pushFollow(FOLLOW_4);
            	    rule__STIfStatement__StatementsAssignment_3();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTIfStatementAccess().getStatementsAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__3__Impl"


    // $ANTLR start "rule__STIfStatement__Group__4"
    // InternalSTCoreParser.g:5333:1: rule__STIfStatement__Group__4 : rule__STIfStatement__Group__4__Impl rule__STIfStatement__Group__5 ;
    public final void rule__STIfStatement__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5337:1: ( rule__STIfStatement__Group__4__Impl rule__STIfStatement__Group__5 )
            // InternalSTCoreParser.g:5338:2: rule__STIfStatement__Group__4__Impl rule__STIfStatement__Group__5
            {
            pushFollow(FOLLOW_27);
            rule__STIfStatement__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STIfStatement__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__4"


    // $ANTLR start "rule__STIfStatement__Group__4__Impl"
    // InternalSTCoreParser.g:5345:1: rule__STIfStatement__Group__4__Impl : ( ( rule__STIfStatement__ElseifsAssignment_4 )* ) ;
    public final void rule__STIfStatement__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5349:1: ( ( ( rule__STIfStatement__ElseifsAssignment_4 )* ) )
            // InternalSTCoreParser.g:5350:1: ( ( rule__STIfStatement__ElseifsAssignment_4 )* )
            {
            // InternalSTCoreParser.g:5350:1: ( ( rule__STIfStatement__ElseifsAssignment_4 )* )
            // InternalSTCoreParser.g:5351:2: ( rule__STIfStatement__ElseifsAssignment_4 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTIfStatementAccess().getElseifsAssignment_4()); 
            }
            // InternalSTCoreParser.g:5352:2: ( rule__STIfStatement__ElseifsAssignment_4 )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==ELSIF) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // InternalSTCoreParser.g:5352:3: rule__STIfStatement__ElseifsAssignment_4
            	    {
            	    pushFollow(FOLLOW_28);
            	    rule__STIfStatement__ElseifsAssignment_4();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTIfStatementAccess().getElseifsAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__4__Impl"


    // $ANTLR start "rule__STIfStatement__Group__5"
    // InternalSTCoreParser.g:5360:1: rule__STIfStatement__Group__5 : rule__STIfStatement__Group__5__Impl rule__STIfStatement__Group__6 ;
    public final void rule__STIfStatement__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5364:1: ( rule__STIfStatement__Group__5__Impl rule__STIfStatement__Group__6 )
            // InternalSTCoreParser.g:5365:2: rule__STIfStatement__Group__5__Impl rule__STIfStatement__Group__6
            {
            pushFollow(FOLLOW_27);
            rule__STIfStatement__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STIfStatement__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__5"


    // $ANTLR start "rule__STIfStatement__Group__5__Impl"
    // InternalSTCoreParser.g:5372:1: rule__STIfStatement__Group__5__Impl : ( ( rule__STIfStatement__ElseAssignment_5 )? ) ;
    public final void rule__STIfStatement__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5376:1: ( ( ( rule__STIfStatement__ElseAssignment_5 )? ) )
            // InternalSTCoreParser.g:5377:1: ( ( rule__STIfStatement__ElseAssignment_5 )? )
            {
            // InternalSTCoreParser.g:5377:1: ( ( rule__STIfStatement__ElseAssignment_5 )? )
            // InternalSTCoreParser.g:5378:2: ( rule__STIfStatement__ElseAssignment_5 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTIfStatementAccess().getElseAssignment_5()); 
            }
            // InternalSTCoreParser.g:5379:2: ( rule__STIfStatement__ElseAssignment_5 )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==ELSE) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // InternalSTCoreParser.g:5379:3: rule__STIfStatement__ElseAssignment_5
                    {
                    pushFollow(FOLLOW_2);
                    rule__STIfStatement__ElseAssignment_5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTIfStatementAccess().getElseAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__5__Impl"


    // $ANTLR start "rule__STIfStatement__Group__6"
    // InternalSTCoreParser.g:5387:1: rule__STIfStatement__Group__6 : rule__STIfStatement__Group__6__Impl ;
    public final void rule__STIfStatement__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5391:1: ( rule__STIfStatement__Group__6__Impl )
            // InternalSTCoreParser.g:5392:2: rule__STIfStatement__Group__6__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STIfStatement__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__6"


    // $ANTLR start "rule__STIfStatement__Group__6__Impl"
    // InternalSTCoreParser.g:5398:1: rule__STIfStatement__Group__6__Impl : ( END_IF ) ;
    public final void rule__STIfStatement__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5402:1: ( ( END_IF ) )
            // InternalSTCoreParser.g:5403:1: ( END_IF )
            {
            // InternalSTCoreParser.g:5403:1: ( END_IF )
            // InternalSTCoreParser.g:5404:2: END_IF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTIfStatementAccess().getEND_IFKeyword_6()); 
            }
            match(input,END_IF,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTIfStatementAccess().getEND_IFKeyword_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__Group__6__Impl"


    // $ANTLR start "rule__STElseIfPart__Group__0"
    // InternalSTCoreParser.g:5414:1: rule__STElseIfPart__Group__0 : rule__STElseIfPart__Group__0__Impl rule__STElseIfPart__Group__1 ;
    public final void rule__STElseIfPart__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5418:1: ( rule__STElseIfPart__Group__0__Impl rule__STElseIfPart__Group__1 )
            // InternalSTCoreParser.g:5419:2: rule__STElseIfPart__Group__0__Impl rule__STElseIfPart__Group__1
            {
            pushFollow(FOLLOW_11);
            rule__STElseIfPart__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STElseIfPart__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElseIfPart__Group__0"


    // $ANTLR start "rule__STElseIfPart__Group__0__Impl"
    // InternalSTCoreParser.g:5426:1: rule__STElseIfPart__Group__0__Impl : ( ELSIF ) ;
    public final void rule__STElseIfPart__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5430:1: ( ( ELSIF ) )
            // InternalSTCoreParser.g:5431:1: ( ELSIF )
            {
            // InternalSTCoreParser.g:5431:1: ( ELSIF )
            // InternalSTCoreParser.g:5432:2: ELSIF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElseIfPartAccess().getELSIFKeyword_0()); 
            }
            match(input,ELSIF,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElseIfPartAccess().getELSIFKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElseIfPart__Group__0__Impl"


    // $ANTLR start "rule__STElseIfPart__Group__1"
    // InternalSTCoreParser.g:5441:1: rule__STElseIfPart__Group__1 : rule__STElseIfPart__Group__1__Impl rule__STElseIfPart__Group__2 ;
    public final void rule__STElseIfPart__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5445:1: ( rule__STElseIfPart__Group__1__Impl rule__STElseIfPart__Group__2 )
            // InternalSTCoreParser.g:5446:2: rule__STElseIfPart__Group__1__Impl rule__STElseIfPart__Group__2
            {
            pushFollow(FOLLOW_26);
            rule__STElseIfPart__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STElseIfPart__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElseIfPart__Group__1"


    // $ANTLR start "rule__STElseIfPart__Group__1__Impl"
    // InternalSTCoreParser.g:5453:1: rule__STElseIfPart__Group__1__Impl : ( ( rule__STElseIfPart__ConditionAssignment_1 ) ) ;
    public final void rule__STElseIfPart__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5457:1: ( ( ( rule__STElseIfPart__ConditionAssignment_1 ) ) )
            // InternalSTCoreParser.g:5458:1: ( ( rule__STElseIfPart__ConditionAssignment_1 ) )
            {
            // InternalSTCoreParser.g:5458:1: ( ( rule__STElseIfPart__ConditionAssignment_1 ) )
            // InternalSTCoreParser.g:5459:2: ( rule__STElseIfPart__ConditionAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElseIfPartAccess().getConditionAssignment_1()); 
            }
            // InternalSTCoreParser.g:5460:2: ( rule__STElseIfPart__ConditionAssignment_1 )
            // InternalSTCoreParser.g:5460:3: rule__STElseIfPart__ConditionAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__STElseIfPart__ConditionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElseIfPartAccess().getConditionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElseIfPart__Group__1__Impl"


    // $ANTLR start "rule__STElseIfPart__Group__2"
    // InternalSTCoreParser.g:5468:1: rule__STElseIfPart__Group__2 : rule__STElseIfPart__Group__2__Impl rule__STElseIfPart__Group__3 ;
    public final void rule__STElseIfPart__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5472:1: ( rule__STElseIfPart__Group__2__Impl rule__STElseIfPart__Group__3 )
            // InternalSTCoreParser.g:5473:2: rule__STElseIfPart__Group__2__Impl rule__STElseIfPart__Group__3
            {
            pushFollow(FOLLOW_3);
            rule__STElseIfPart__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STElseIfPart__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElseIfPart__Group__2"


    // $ANTLR start "rule__STElseIfPart__Group__2__Impl"
    // InternalSTCoreParser.g:5480:1: rule__STElseIfPart__Group__2__Impl : ( THEN ) ;
    public final void rule__STElseIfPart__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5484:1: ( ( THEN ) )
            // InternalSTCoreParser.g:5485:1: ( THEN )
            {
            // InternalSTCoreParser.g:5485:1: ( THEN )
            // InternalSTCoreParser.g:5486:2: THEN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElseIfPartAccess().getTHENKeyword_2()); 
            }
            match(input,THEN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElseIfPartAccess().getTHENKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElseIfPart__Group__2__Impl"


    // $ANTLR start "rule__STElseIfPart__Group__3"
    // InternalSTCoreParser.g:5495:1: rule__STElseIfPart__Group__3 : rule__STElseIfPart__Group__3__Impl ;
    public final void rule__STElseIfPart__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5499:1: ( rule__STElseIfPart__Group__3__Impl )
            // InternalSTCoreParser.g:5500:2: rule__STElseIfPart__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STElseIfPart__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElseIfPart__Group__3"


    // $ANTLR start "rule__STElseIfPart__Group__3__Impl"
    // InternalSTCoreParser.g:5506:1: rule__STElseIfPart__Group__3__Impl : ( ( rule__STElseIfPart__StatementsAssignment_3 )* ) ;
    public final void rule__STElseIfPart__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5510:1: ( ( ( rule__STElseIfPart__StatementsAssignment_3 )* ) )
            // InternalSTCoreParser.g:5511:1: ( ( rule__STElseIfPart__StatementsAssignment_3 )* )
            {
            // InternalSTCoreParser.g:5511:1: ( ( rule__STElseIfPart__StatementsAssignment_3 )* )
            // InternalSTCoreParser.g:5512:2: ( rule__STElseIfPart__StatementsAssignment_3 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElseIfPartAccess().getStatementsAssignment_3()); 
            }
            // InternalSTCoreParser.g:5513:2: ( rule__STElseIfPart__StatementsAssignment_3 )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==LDATE_AND_TIME||LA53_0==DATE_AND_TIME||LA53_0==LTIME_OF_DAY||LA53_0==TIME_OF_DAY||LA53_0==CONTINUE||LA53_0==WSTRING||LA53_0==REPEAT||LA53_0==RETURN||LA53_0==STRING||LA53_0==DWORD||LA53_0==FALSE||(LA53_0>=LDATE && LA53_0<=ULINT)||(LA53_0>=USINT && LA53_0<=DINT)||(LA53_0>=EXIT && LA53_0<=LTOD)||(LA53_0>=REAL && LA53_0<=SINT)||(LA53_0>=THIS && LA53_0<=TRUE)||LA53_0==UINT||(LA53_0>=WORD && LA53_0<=MOD)||LA53_0==TOD||LA53_0==XOR||(LA53_0>=DT && LA53_0<=LT)||LA53_0==OR||LA53_0==LeftParenthesis||LA53_0==PlusSign||LA53_0==HyphenMinus||LA53_0==Semicolon||(LA53_0>=D && LA53_0<=T)||(LA53_0>=RULE_NON_DECIMAL && LA53_0<=RULE_DECIMAL)||(LA53_0>=RULE_ID && LA53_0<=RULE_STRING)) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // InternalSTCoreParser.g:5513:3: rule__STElseIfPart__StatementsAssignment_3
            	    {
            	    pushFollow(FOLLOW_4);
            	    rule__STElseIfPart__StatementsAssignment_3();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElseIfPartAccess().getStatementsAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElseIfPart__Group__3__Impl"


    // $ANTLR start "rule__STCaseStatement__Group__0"
    // InternalSTCoreParser.g:5522:1: rule__STCaseStatement__Group__0 : rule__STCaseStatement__Group__0__Impl rule__STCaseStatement__Group__1 ;
    public final void rule__STCaseStatement__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5526:1: ( rule__STCaseStatement__Group__0__Impl rule__STCaseStatement__Group__1 )
            // InternalSTCoreParser.g:5527:2: rule__STCaseStatement__Group__0__Impl rule__STCaseStatement__Group__1
            {
            pushFollow(FOLLOW_11);
            rule__STCaseStatement__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCaseStatement__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__Group__0"


    // $ANTLR start "rule__STCaseStatement__Group__0__Impl"
    // InternalSTCoreParser.g:5534:1: rule__STCaseStatement__Group__0__Impl : ( CASE ) ;
    public final void rule__STCaseStatement__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5538:1: ( ( CASE ) )
            // InternalSTCoreParser.g:5539:1: ( CASE )
            {
            // InternalSTCoreParser.g:5539:1: ( CASE )
            // InternalSTCoreParser.g:5540:2: CASE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseStatementAccess().getCASEKeyword_0()); 
            }
            match(input,CASE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseStatementAccess().getCASEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__Group__0__Impl"


    // $ANTLR start "rule__STCaseStatement__Group__1"
    // InternalSTCoreParser.g:5549:1: rule__STCaseStatement__Group__1 : rule__STCaseStatement__Group__1__Impl rule__STCaseStatement__Group__2 ;
    public final void rule__STCaseStatement__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5553:1: ( rule__STCaseStatement__Group__1__Impl rule__STCaseStatement__Group__2 )
            // InternalSTCoreParser.g:5554:2: rule__STCaseStatement__Group__1__Impl rule__STCaseStatement__Group__2
            {
            pushFollow(FOLLOW_10);
            rule__STCaseStatement__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCaseStatement__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__Group__1"


    // $ANTLR start "rule__STCaseStatement__Group__1__Impl"
    // InternalSTCoreParser.g:5561:1: rule__STCaseStatement__Group__1__Impl : ( ( rule__STCaseStatement__SelectorAssignment_1 ) ) ;
    public final void rule__STCaseStatement__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5565:1: ( ( ( rule__STCaseStatement__SelectorAssignment_1 ) ) )
            // InternalSTCoreParser.g:5566:1: ( ( rule__STCaseStatement__SelectorAssignment_1 ) )
            {
            // InternalSTCoreParser.g:5566:1: ( ( rule__STCaseStatement__SelectorAssignment_1 ) )
            // InternalSTCoreParser.g:5567:2: ( rule__STCaseStatement__SelectorAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseStatementAccess().getSelectorAssignment_1()); 
            }
            // InternalSTCoreParser.g:5568:2: ( rule__STCaseStatement__SelectorAssignment_1 )
            // InternalSTCoreParser.g:5568:3: rule__STCaseStatement__SelectorAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__STCaseStatement__SelectorAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseStatementAccess().getSelectorAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__Group__1__Impl"


    // $ANTLR start "rule__STCaseStatement__Group__2"
    // InternalSTCoreParser.g:5576:1: rule__STCaseStatement__Group__2 : rule__STCaseStatement__Group__2__Impl rule__STCaseStatement__Group__3 ;
    public final void rule__STCaseStatement__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5580:1: ( rule__STCaseStatement__Group__2__Impl rule__STCaseStatement__Group__3 )
            // InternalSTCoreParser.g:5581:2: rule__STCaseStatement__Group__2__Impl rule__STCaseStatement__Group__3
            {
            pushFollow(FOLLOW_11);
            rule__STCaseStatement__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCaseStatement__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__Group__2"


    // $ANTLR start "rule__STCaseStatement__Group__2__Impl"
    // InternalSTCoreParser.g:5588:1: rule__STCaseStatement__Group__2__Impl : ( OF ) ;
    public final void rule__STCaseStatement__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5592:1: ( ( OF ) )
            // InternalSTCoreParser.g:5593:1: ( OF )
            {
            // InternalSTCoreParser.g:5593:1: ( OF )
            // InternalSTCoreParser.g:5594:2: OF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseStatementAccess().getOFKeyword_2()); 
            }
            match(input,OF,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseStatementAccess().getOFKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__Group__2__Impl"


    // $ANTLR start "rule__STCaseStatement__Group__3"
    // InternalSTCoreParser.g:5603:1: rule__STCaseStatement__Group__3 : rule__STCaseStatement__Group__3__Impl rule__STCaseStatement__Group__4 ;
    public final void rule__STCaseStatement__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5607:1: ( rule__STCaseStatement__Group__3__Impl rule__STCaseStatement__Group__4 )
            // InternalSTCoreParser.g:5608:2: rule__STCaseStatement__Group__3__Impl rule__STCaseStatement__Group__4
            {
            pushFollow(FOLLOW_29);
            rule__STCaseStatement__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCaseStatement__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__Group__3"


    // $ANTLR start "rule__STCaseStatement__Group__3__Impl"
    // InternalSTCoreParser.g:5615:1: rule__STCaseStatement__Group__3__Impl : ( ( ( rule__STCaseStatement__CasesAssignment_3 ) ) ( ( rule__STCaseStatement__CasesAssignment_3 )* ) ) ;
    public final void rule__STCaseStatement__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5619:1: ( ( ( ( rule__STCaseStatement__CasesAssignment_3 ) ) ( ( rule__STCaseStatement__CasesAssignment_3 )* ) ) )
            // InternalSTCoreParser.g:5620:1: ( ( ( rule__STCaseStatement__CasesAssignment_3 ) ) ( ( rule__STCaseStatement__CasesAssignment_3 )* ) )
            {
            // InternalSTCoreParser.g:5620:1: ( ( ( rule__STCaseStatement__CasesAssignment_3 ) ) ( ( rule__STCaseStatement__CasesAssignment_3 )* ) )
            // InternalSTCoreParser.g:5621:2: ( ( rule__STCaseStatement__CasesAssignment_3 ) ) ( ( rule__STCaseStatement__CasesAssignment_3 )* )
            {
            // InternalSTCoreParser.g:5621:2: ( ( rule__STCaseStatement__CasesAssignment_3 ) )
            // InternalSTCoreParser.g:5622:3: ( rule__STCaseStatement__CasesAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseStatementAccess().getCasesAssignment_3()); 
            }
            // InternalSTCoreParser.g:5623:3: ( rule__STCaseStatement__CasesAssignment_3 )
            // InternalSTCoreParser.g:5623:4: rule__STCaseStatement__CasesAssignment_3
            {
            pushFollow(FOLLOW_30);
            rule__STCaseStatement__CasesAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseStatementAccess().getCasesAssignment_3()); 
            }

            }

            // InternalSTCoreParser.g:5626:2: ( ( rule__STCaseStatement__CasesAssignment_3 )* )
            // InternalSTCoreParser.g:5627:3: ( rule__STCaseStatement__CasesAssignment_3 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseStatementAccess().getCasesAssignment_3()); 
            }
            // InternalSTCoreParser.g:5628:3: ( rule__STCaseStatement__CasesAssignment_3 )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==LDATE_AND_TIME||LA54_0==DATE_AND_TIME||LA54_0==LTIME_OF_DAY||LA54_0==TIME_OF_DAY||LA54_0==WSTRING||LA54_0==STRING||LA54_0==DWORD||LA54_0==FALSE||(LA54_0>=LDATE && LA54_0<=ULINT)||(LA54_0>=USINT && LA54_0<=WCHAR)||(LA54_0>=BOOL && LA54_0<=BYTE)||(LA54_0>=CHAR && LA54_0<=DINT)||(LA54_0>=LINT && LA54_0<=LTOD)||(LA54_0>=REAL && LA54_0<=SINT)||(LA54_0>=THIS && LA54_0<=TRUE)||LA54_0==UINT||(LA54_0>=WORD && LA54_0<=AND)||(LA54_0>=INT && LA54_0<=NOT)||LA54_0==TOD||LA54_0==XOR||LA54_0==DT||(LA54_0>=LD && LA54_0<=LT)||LA54_0==OR||LA54_0==LeftParenthesis||LA54_0==PlusSign||LA54_0==HyphenMinus||(LA54_0>=D && LA54_0<=T)||(LA54_0>=RULE_NON_DECIMAL && LA54_0<=RULE_DECIMAL)||(LA54_0>=RULE_ID && LA54_0<=RULE_STRING)) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // InternalSTCoreParser.g:5628:4: rule__STCaseStatement__CasesAssignment_3
            	    {
            	    pushFollow(FOLLOW_30);
            	    rule__STCaseStatement__CasesAssignment_3();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseStatementAccess().getCasesAssignment_3()); 
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__Group__3__Impl"


    // $ANTLR start "rule__STCaseStatement__Group__4"
    // InternalSTCoreParser.g:5637:1: rule__STCaseStatement__Group__4 : rule__STCaseStatement__Group__4__Impl rule__STCaseStatement__Group__5 ;
    public final void rule__STCaseStatement__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5641:1: ( rule__STCaseStatement__Group__4__Impl rule__STCaseStatement__Group__5 )
            // InternalSTCoreParser.g:5642:2: rule__STCaseStatement__Group__4__Impl rule__STCaseStatement__Group__5
            {
            pushFollow(FOLLOW_29);
            rule__STCaseStatement__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCaseStatement__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__Group__4"


    // $ANTLR start "rule__STCaseStatement__Group__4__Impl"
    // InternalSTCoreParser.g:5649:1: rule__STCaseStatement__Group__4__Impl : ( ( rule__STCaseStatement__ElseAssignment_4 )? ) ;
    public final void rule__STCaseStatement__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5653:1: ( ( ( rule__STCaseStatement__ElseAssignment_4 )? ) )
            // InternalSTCoreParser.g:5654:1: ( ( rule__STCaseStatement__ElseAssignment_4 )? )
            {
            // InternalSTCoreParser.g:5654:1: ( ( rule__STCaseStatement__ElseAssignment_4 )? )
            // InternalSTCoreParser.g:5655:2: ( rule__STCaseStatement__ElseAssignment_4 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseStatementAccess().getElseAssignment_4()); 
            }
            // InternalSTCoreParser.g:5656:2: ( rule__STCaseStatement__ElseAssignment_4 )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==ELSE) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // InternalSTCoreParser.g:5656:3: rule__STCaseStatement__ElseAssignment_4
                    {
                    pushFollow(FOLLOW_2);
                    rule__STCaseStatement__ElseAssignment_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseStatementAccess().getElseAssignment_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__Group__4__Impl"


    // $ANTLR start "rule__STCaseStatement__Group__5"
    // InternalSTCoreParser.g:5664:1: rule__STCaseStatement__Group__5 : rule__STCaseStatement__Group__5__Impl ;
    public final void rule__STCaseStatement__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5668:1: ( rule__STCaseStatement__Group__5__Impl )
            // InternalSTCoreParser.g:5669:2: rule__STCaseStatement__Group__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STCaseStatement__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__Group__5"


    // $ANTLR start "rule__STCaseStatement__Group__5__Impl"
    // InternalSTCoreParser.g:5675:1: rule__STCaseStatement__Group__5__Impl : ( END_CASE ) ;
    public final void rule__STCaseStatement__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5679:1: ( ( END_CASE ) )
            // InternalSTCoreParser.g:5680:1: ( END_CASE )
            {
            // InternalSTCoreParser.g:5680:1: ( END_CASE )
            // InternalSTCoreParser.g:5681:2: END_CASE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseStatementAccess().getEND_CASEKeyword_5()); 
            }
            match(input,END_CASE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseStatementAccess().getEND_CASEKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__Group__5__Impl"


    // $ANTLR start "rule__STCaseCases__Group__0"
    // InternalSTCoreParser.g:5691:1: rule__STCaseCases__Group__0 : rule__STCaseCases__Group__0__Impl rule__STCaseCases__Group__1 ;
    public final void rule__STCaseCases__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5695:1: ( rule__STCaseCases__Group__0__Impl rule__STCaseCases__Group__1 )
            // InternalSTCoreParser.g:5696:2: rule__STCaseCases__Group__0__Impl rule__STCaseCases__Group__1
            {
            pushFollow(FOLLOW_31);
            rule__STCaseCases__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCaseCases__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__Group__0"


    // $ANTLR start "rule__STCaseCases__Group__0__Impl"
    // InternalSTCoreParser.g:5703:1: rule__STCaseCases__Group__0__Impl : ( ( rule__STCaseCases__ConditionsAssignment_0 ) ) ;
    public final void rule__STCaseCases__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5707:1: ( ( ( rule__STCaseCases__ConditionsAssignment_0 ) ) )
            // InternalSTCoreParser.g:5708:1: ( ( rule__STCaseCases__ConditionsAssignment_0 ) )
            {
            // InternalSTCoreParser.g:5708:1: ( ( rule__STCaseCases__ConditionsAssignment_0 ) )
            // InternalSTCoreParser.g:5709:2: ( rule__STCaseCases__ConditionsAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseCasesAccess().getConditionsAssignment_0()); 
            }
            // InternalSTCoreParser.g:5710:2: ( rule__STCaseCases__ConditionsAssignment_0 )
            // InternalSTCoreParser.g:5710:3: rule__STCaseCases__ConditionsAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__STCaseCases__ConditionsAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseCasesAccess().getConditionsAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__Group__0__Impl"


    // $ANTLR start "rule__STCaseCases__Group__1"
    // InternalSTCoreParser.g:5718:1: rule__STCaseCases__Group__1 : rule__STCaseCases__Group__1__Impl rule__STCaseCases__Group__2 ;
    public final void rule__STCaseCases__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5722:1: ( rule__STCaseCases__Group__1__Impl rule__STCaseCases__Group__2 )
            // InternalSTCoreParser.g:5723:2: rule__STCaseCases__Group__1__Impl rule__STCaseCases__Group__2
            {
            pushFollow(FOLLOW_31);
            rule__STCaseCases__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCaseCases__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__Group__1"


    // $ANTLR start "rule__STCaseCases__Group__1__Impl"
    // InternalSTCoreParser.g:5730:1: rule__STCaseCases__Group__1__Impl : ( ( rule__STCaseCases__Group_1__0 )* ) ;
    public final void rule__STCaseCases__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5734:1: ( ( ( rule__STCaseCases__Group_1__0 )* ) )
            // InternalSTCoreParser.g:5735:1: ( ( rule__STCaseCases__Group_1__0 )* )
            {
            // InternalSTCoreParser.g:5735:1: ( ( rule__STCaseCases__Group_1__0 )* )
            // InternalSTCoreParser.g:5736:2: ( rule__STCaseCases__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseCasesAccess().getGroup_1()); 
            }
            // InternalSTCoreParser.g:5737:2: ( rule__STCaseCases__Group_1__0 )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==Comma) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // InternalSTCoreParser.g:5737:3: rule__STCaseCases__Group_1__0
            	    {
            	    pushFollow(FOLLOW_13);
            	    rule__STCaseCases__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseCasesAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__Group__1__Impl"


    // $ANTLR start "rule__STCaseCases__Group__2"
    // InternalSTCoreParser.g:5745:1: rule__STCaseCases__Group__2 : rule__STCaseCases__Group__2__Impl rule__STCaseCases__Group__3 ;
    public final void rule__STCaseCases__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5749:1: ( rule__STCaseCases__Group__2__Impl rule__STCaseCases__Group__3 )
            // InternalSTCoreParser.g:5750:2: rule__STCaseCases__Group__2__Impl rule__STCaseCases__Group__3
            {
            pushFollow(FOLLOW_3);
            rule__STCaseCases__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCaseCases__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__Group__2"


    // $ANTLR start "rule__STCaseCases__Group__2__Impl"
    // InternalSTCoreParser.g:5757:1: rule__STCaseCases__Group__2__Impl : ( Colon ) ;
    public final void rule__STCaseCases__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5761:1: ( ( Colon ) )
            // InternalSTCoreParser.g:5762:1: ( Colon )
            {
            // InternalSTCoreParser.g:5762:1: ( Colon )
            // InternalSTCoreParser.g:5763:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseCasesAccess().getColonKeyword_2()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseCasesAccess().getColonKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__Group__2__Impl"


    // $ANTLR start "rule__STCaseCases__Group__3"
    // InternalSTCoreParser.g:5772:1: rule__STCaseCases__Group__3 : rule__STCaseCases__Group__3__Impl ;
    public final void rule__STCaseCases__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5776:1: ( rule__STCaseCases__Group__3__Impl )
            // InternalSTCoreParser.g:5777:2: rule__STCaseCases__Group__3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STCaseCases__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__Group__3"


    // $ANTLR start "rule__STCaseCases__Group__3__Impl"
    // InternalSTCoreParser.g:5783:1: rule__STCaseCases__Group__3__Impl : ( ( rule__STCaseCases__StatementsAssignment_3 )* ) ;
    public final void rule__STCaseCases__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5787:1: ( ( ( rule__STCaseCases__StatementsAssignment_3 )* ) )
            // InternalSTCoreParser.g:5788:1: ( ( rule__STCaseCases__StatementsAssignment_3 )* )
            {
            // InternalSTCoreParser.g:5788:1: ( ( rule__STCaseCases__StatementsAssignment_3 )* )
            // InternalSTCoreParser.g:5789:2: ( rule__STCaseCases__StatementsAssignment_3 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseCasesAccess().getStatementsAssignment_3()); 
            }
            // InternalSTCoreParser.g:5790:2: ( rule__STCaseCases__StatementsAssignment_3 )*
            loop57:
            do {
                int alt57=2;
                alt57 = dfa57.predict(input);
                switch (alt57) {
            	case 1 :
            	    // InternalSTCoreParser.g:5790:3: rule__STCaseCases__StatementsAssignment_3
            	    {
            	    pushFollow(FOLLOW_4);
            	    rule__STCaseCases__StatementsAssignment_3();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseCasesAccess().getStatementsAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__Group__3__Impl"


    // $ANTLR start "rule__STCaseCases__Group_1__0"
    // InternalSTCoreParser.g:5799:1: rule__STCaseCases__Group_1__0 : rule__STCaseCases__Group_1__0__Impl rule__STCaseCases__Group_1__1 ;
    public final void rule__STCaseCases__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5803:1: ( rule__STCaseCases__Group_1__0__Impl rule__STCaseCases__Group_1__1 )
            // InternalSTCoreParser.g:5804:2: rule__STCaseCases__Group_1__0__Impl rule__STCaseCases__Group_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STCaseCases__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STCaseCases__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__Group_1__0"


    // $ANTLR start "rule__STCaseCases__Group_1__0__Impl"
    // InternalSTCoreParser.g:5811:1: rule__STCaseCases__Group_1__0__Impl : ( Comma ) ;
    public final void rule__STCaseCases__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5815:1: ( ( Comma ) )
            // InternalSTCoreParser.g:5816:1: ( Comma )
            {
            // InternalSTCoreParser.g:5816:1: ( Comma )
            // InternalSTCoreParser.g:5817:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseCasesAccess().getCommaKeyword_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseCasesAccess().getCommaKeyword_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__Group_1__0__Impl"


    // $ANTLR start "rule__STCaseCases__Group_1__1"
    // InternalSTCoreParser.g:5826:1: rule__STCaseCases__Group_1__1 : rule__STCaseCases__Group_1__1__Impl ;
    public final void rule__STCaseCases__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5830:1: ( rule__STCaseCases__Group_1__1__Impl )
            // InternalSTCoreParser.g:5831:2: rule__STCaseCases__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STCaseCases__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__Group_1__1"


    // $ANTLR start "rule__STCaseCases__Group_1__1__Impl"
    // InternalSTCoreParser.g:5837:1: rule__STCaseCases__Group_1__1__Impl : ( ( rule__STCaseCases__ConditionsAssignment_1_1 ) ) ;
    public final void rule__STCaseCases__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5841:1: ( ( ( rule__STCaseCases__ConditionsAssignment_1_1 ) ) )
            // InternalSTCoreParser.g:5842:1: ( ( rule__STCaseCases__ConditionsAssignment_1_1 ) )
            {
            // InternalSTCoreParser.g:5842:1: ( ( rule__STCaseCases__ConditionsAssignment_1_1 ) )
            // InternalSTCoreParser.g:5843:2: ( rule__STCaseCases__ConditionsAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseCasesAccess().getConditionsAssignment_1_1()); 
            }
            // InternalSTCoreParser.g:5844:2: ( rule__STCaseCases__ConditionsAssignment_1_1 )
            // InternalSTCoreParser.g:5844:3: rule__STCaseCases__ConditionsAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STCaseCases__ConditionsAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseCasesAccess().getConditionsAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__Group_1__1__Impl"


    // $ANTLR start "rule__STElsePart__Group__0"
    // InternalSTCoreParser.g:5853:1: rule__STElsePart__Group__0 : rule__STElsePart__Group__0__Impl rule__STElsePart__Group__1 ;
    public final void rule__STElsePart__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5857:1: ( rule__STElsePart__Group__0__Impl rule__STElsePart__Group__1 )
            // InternalSTCoreParser.g:5858:2: rule__STElsePart__Group__0__Impl rule__STElsePart__Group__1
            {
            pushFollow(FOLLOW_32);
            rule__STElsePart__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STElsePart__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElsePart__Group__0"


    // $ANTLR start "rule__STElsePart__Group__0__Impl"
    // InternalSTCoreParser.g:5865:1: rule__STElsePart__Group__0__Impl : ( () ) ;
    public final void rule__STElsePart__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5869:1: ( ( () ) )
            // InternalSTCoreParser.g:5870:1: ( () )
            {
            // InternalSTCoreParser.g:5870:1: ( () )
            // InternalSTCoreParser.g:5871:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElsePartAccess().getSTElsePartAction_0()); 
            }
            // InternalSTCoreParser.g:5872:2: ()
            // InternalSTCoreParser.g:5872:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElsePartAccess().getSTElsePartAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElsePart__Group__0__Impl"


    // $ANTLR start "rule__STElsePart__Group__1"
    // InternalSTCoreParser.g:5880:1: rule__STElsePart__Group__1 : rule__STElsePart__Group__1__Impl rule__STElsePart__Group__2 ;
    public final void rule__STElsePart__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5884:1: ( rule__STElsePart__Group__1__Impl rule__STElsePart__Group__2 )
            // InternalSTCoreParser.g:5885:2: rule__STElsePart__Group__1__Impl rule__STElsePart__Group__2
            {
            pushFollow(FOLLOW_3);
            rule__STElsePart__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STElsePart__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElsePart__Group__1"


    // $ANTLR start "rule__STElsePart__Group__1__Impl"
    // InternalSTCoreParser.g:5892:1: rule__STElsePart__Group__1__Impl : ( ELSE ) ;
    public final void rule__STElsePart__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5896:1: ( ( ELSE ) )
            // InternalSTCoreParser.g:5897:1: ( ELSE )
            {
            // InternalSTCoreParser.g:5897:1: ( ELSE )
            // InternalSTCoreParser.g:5898:2: ELSE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElsePartAccess().getELSEKeyword_1()); 
            }
            match(input,ELSE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElsePartAccess().getELSEKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElsePart__Group__1__Impl"


    // $ANTLR start "rule__STElsePart__Group__2"
    // InternalSTCoreParser.g:5907:1: rule__STElsePart__Group__2 : rule__STElsePart__Group__2__Impl ;
    public final void rule__STElsePart__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5911:1: ( rule__STElsePart__Group__2__Impl )
            // InternalSTCoreParser.g:5912:2: rule__STElsePart__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STElsePart__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElsePart__Group__2"


    // $ANTLR start "rule__STElsePart__Group__2__Impl"
    // InternalSTCoreParser.g:5918:1: rule__STElsePart__Group__2__Impl : ( ( rule__STElsePart__StatementsAssignment_2 )* ) ;
    public final void rule__STElsePart__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5922:1: ( ( ( rule__STElsePart__StatementsAssignment_2 )* ) )
            // InternalSTCoreParser.g:5923:1: ( ( rule__STElsePart__StatementsAssignment_2 )* )
            {
            // InternalSTCoreParser.g:5923:1: ( ( rule__STElsePart__StatementsAssignment_2 )* )
            // InternalSTCoreParser.g:5924:2: ( rule__STElsePart__StatementsAssignment_2 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElsePartAccess().getStatementsAssignment_2()); 
            }
            // InternalSTCoreParser.g:5925:2: ( rule__STElsePart__StatementsAssignment_2 )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==LDATE_AND_TIME||LA58_0==DATE_AND_TIME||LA58_0==LTIME_OF_DAY||LA58_0==TIME_OF_DAY||LA58_0==CONTINUE||LA58_0==WSTRING||LA58_0==REPEAT||LA58_0==RETURN||LA58_0==STRING||LA58_0==DWORD||LA58_0==FALSE||(LA58_0>=LDATE && LA58_0<=ULINT)||(LA58_0>=USINT && LA58_0<=DINT)||(LA58_0>=EXIT && LA58_0<=LTOD)||(LA58_0>=REAL && LA58_0<=SINT)||(LA58_0>=THIS && LA58_0<=TRUE)||LA58_0==UINT||(LA58_0>=WORD && LA58_0<=MOD)||LA58_0==TOD||LA58_0==XOR||(LA58_0>=DT && LA58_0<=LT)||LA58_0==OR||LA58_0==LeftParenthesis||LA58_0==PlusSign||LA58_0==HyphenMinus||LA58_0==Semicolon||(LA58_0>=D && LA58_0<=T)||(LA58_0>=RULE_NON_DECIMAL && LA58_0<=RULE_DECIMAL)||(LA58_0>=RULE_ID && LA58_0<=RULE_STRING)) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // InternalSTCoreParser.g:5925:3: rule__STElsePart__StatementsAssignment_2
            	    {
            	    pushFollow(FOLLOW_4);
            	    rule__STElsePart__StatementsAssignment_2();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElsePartAccess().getStatementsAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElsePart__Group__2__Impl"


    // $ANTLR start "rule__STForStatement__Group__0"
    // InternalSTCoreParser.g:5934:1: rule__STForStatement__Group__0 : rule__STForStatement__Group__0__Impl rule__STForStatement__Group__1 ;
    public final void rule__STForStatement__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5938:1: ( rule__STForStatement__Group__0__Impl rule__STForStatement__Group__1 )
            // InternalSTCoreParser.g:5939:2: rule__STForStatement__Group__0__Impl rule__STForStatement__Group__1
            {
            pushFollow(FOLLOW_5);
            rule__STForStatement__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STForStatement__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__0"


    // $ANTLR start "rule__STForStatement__Group__0__Impl"
    // InternalSTCoreParser.g:5946:1: rule__STForStatement__Group__0__Impl : ( FOR ) ;
    public final void rule__STForStatement__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5950:1: ( ( FOR ) )
            // InternalSTCoreParser.g:5951:1: ( FOR )
            {
            // InternalSTCoreParser.g:5951:1: ( FOR )
            // InternalSTCoreParser.g:5952:2: FOR
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getFORKeyword_0()); 
            }
            match(input,FOR,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getFORKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__0__Impl"


    // $ANTLR start "rule__STForStatement__Group__1"
    // InternalSTCoreParser.g:5961:1: rule__STForStatement__Group__1 : rule__STForStatement__Group__1__Impl rule__STForStatement__Group__2 ;
    public final void rule__STForStatement__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5965:1: ( rule__STForStatement__Group__1__Impl rule__STForStatement__Group__2 )
            // InternalSTCoreParser.g:5966:2: rule__STForStatement__Group__1__Impl rule__STForStatement__Group__2
            {
            pushFollow(FOLLOW_20);
            rule__STForStatement__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STForStatement__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__1"


    // $ANTLR start "rule__STForStatement__Group__1__Impl"
    // InternalSTCoreParser.g:5973:1: rule__STForStatement__Group__1__Impl : ( ( rule__STForStatement__VariableAssignment_1 ) ) ;
    public final void rule__STForStatement__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5977:1: ( ( ( rule__STForStatement__VariableAssignment_1 ) ) )
            // InternalSTCoreParser.g:5978:1: ( ( rule__STForStatement__VariableAssignment_1 ) )
            {
            // InternalSTCoreParser.g:5978:1: ( ( rule__STForStatement__VariableAssignment_1 ) )
            // InternalSTCoreParser.g:5979:2: ( rule__STForStatement__VariableAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getVariableAssignment_1()); 
            }
            // InternalSTCoreParser.g:5980:2: ( rule__STForStatement__VariableAssignment_1 )
            // InternalSTCoreParser.g:5980:3: rule__STForStatement__VariableAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__STForStatement__VariableAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getVariableAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__1__Impl"


    // $ANTLR start "rule__STForStatement__Group__2"
    // InternalSTCoreParser.g:5988:1: rule__STForStatement__Group__2 : rule__STForStatement__Group__2__Impl rule__STForStatement__Group__3 ;
    public final void rule__STForStatement__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:5992:1: ( rule__STForStatement__Group__2__Impl rule__STForStatement__Group__3 )
            // InternalSTCoreParser.g:5993:2: rule__STForStatement__Group__2__Impl rule__STForStatement__Group__3
            {
            pushFollow(FOLLOW_11);
            rule__STForStatement__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STForStatement__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__2"


    // $ANTLR start "rule__STForStatement__Group__2__Impl"
    // InternalSTCoreParser.g:6000:1: rule__STForStatement__Group__2__Impl : ( ColonEqualsSign ) ;
    public final void rule__STForStatement__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6004:1: ( ( ColonEqualsSign ) )
            // InternalSTCoreParser.g:6005:1: ( ColonEqualsSign )
            {
            // InternalSTCoreParser.g:6005:1: ( ColonEqualsSign )
            // InternalSTCoreParser.g:6006:2: ColonEqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getColonEqualsSignKeyword_2()); 
            }
            match(input,ColonEqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getColonEqualsSignKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__2__Impl"


    // $ANTLR start "rule__STForStatement__Group__3"
    // InternalSTCoreParser.g:6015:1: rule__STForStatement__Group__3 : rule__STForStatement__Group__3__Impl rule__STForStatement__Group__4 ;
    public final void rule__STForStatement__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6019:1: ( rule__STForStatement__Group__3__Impl rule__STForStatement__Group__4 )
            // InternalSTCoreParser.g:6020:2: rule__STForStatement__Group__3__Impl rule__STForStatement__Group__4
            {
            pushFollow(FOLLOW_33);
            rule__STForStatement__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STForStatement__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__3"


    // $ANTLR start "rule__STForStatement__Group__3__Impl"
    // InternalSTCoreParser.g:6027:1: rule__STForStatement__Group__3__Impl : ( ( rule__STForStatement__FromAssignment_3 ) ) ;
    public final void rule__STForStatement__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6031:1: ( ( ( rule__STForStatement__FromAssignment_3 ) ) )
            // InternalSTCoreParser.g:6032:1: ( ( rule__STForStatement__FromAssignment_3 ) )
            {
            // InternalSTCoreParser.g:6032:1: ( ( rule__STForStatement__FromAssignment_3 ) )
            // InternalSTCoreParser.g:6033:2: ( rule__STForStatement__FromAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getFromAssignment_3()); 
            }
            // InternalSTCoreParser.g:6034:2: ( rule__STForStatement__FromAssignment_3 )
            // InternalSTCoreParser.g:6034:3: rule__STForStatement__FromAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__STForStatement__FromAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getFromAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__3__Impl"


    // $ANTLR start "rule__STForStatement__Group__4"
    // InternalSTCoreParser.g:6042:1: rule__STForStatement__Group__4 : rule__STForStatement__Group__4__Impl rule__STForStatement__Group__5 ;
    public final void rule__STForStatement__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6046:1: ( rule__STForStatement__Group__4__Impl rule__STForStatement__Group__5 )
            // InternalSTCoreParser.g:6047:2: rule__STForStatement__Group__4__Impl rule__STForStatement__Group__5
            {
            pushFollow(FOLLOW_11);
            rule__STForStatement__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STForStatement__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__4"


    // $ANTLR start "rule__STForStatement__Group__4__Impl"
    // InternalSTCoreParser.g:6054:1: rule__STForStatement__Group__4__Impl : ( TO ) ;
    public final void rule__STForStatement__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6058:1: ( ( TO ) )
            // InternalSTCoreParser.g:6059:1: ( TO )
            {
            // InternalSTCoreParser.g:6059:1: ( TO )
            // InternalSTCoreParser.g:6060:2: TO
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getTOKeyword_4()); 
            }
            match(input,TO,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getTOKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__4__Impl"


    // $ANTLR start "rule__STForStatement__Group__5"
    // InternalSTCoreParser.g:6069:1: rule__STForStatement__Group__5 : rule__STForStatement__Group__5__Impl rule__STForStatement__Group__6 ;
    public final void rule__STForStatement__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6073:1: ( rule__STForStatement__Group__5__Impl rule__STForStatement__Group__6 )
            // InternalSTCoreParser.g:6074:2: rule__STForStatement__Group__5__Impl rule__STForStatement__Group__6
            {
            pushFollow(FOLLOW_34);
            rule__STForStatement__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STForStatement__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__5"


    // $ANTLR start "rule__STForStatement__Group__5__Impl"
    // InternalSTCoreParser.g:6081:1: rule__STForStatement__Group__5__Impl : ( ( rule__STForStatement__ToAssignment_5 ) ) ;
    public final void rule__STForStatement__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6085:1: ( ( ( rule__STForStatement__ToAssignment_5 ) ) )
            // InternalSTCoreParser.g:6086:1: ( ( rule__STForStatement__ToAssignment_5 ) )
            {
            // InternalSTCoreParser.g:6086:1: ( ( rule__STForStatement__ToAssignment_5 ) )
            // InternalSTCoreParser.g:6087:2: ( rule__STForStatement__ToAssignment_5 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getToAssignment_5()); 
            }
            // InternalSTCoreParser.g:6088:2: ( rule__STForStatement__ToAssignment_5 )
            // InternalSTCoreParser.g:6088:3: rule__STForStatement__ToAssignment_5
            {
            pushFollow(FOLLOW_2);
            rule__STForStatement__ToAssignment_5();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getToAssignment_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__5__Impl"


    // $ANTLR start "rule__STForStatement__Group__6"
    // InternalSTCoreParser.g:6096:1: rule__STForStatement__Group__6 : rule__STForStatement__Group__6__Impl rule__STForStatement__Group__7 ;
    public final void rule__STForStatement__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6100:1: ( rule__STForStatement__Group__6__Impl rule__STForStatement__Group__7 )
            // InternalSTCoreParser.g:6101:2: rule__STForStatement__Group__6__Impl rule__STForStatement__Group__7
            {
            pushFollow(FOLLOW_34);
            rule__STForStatement__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STForStatement__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__6"


    // $ANTLR start "rule__STForStatement__Group__6__Impl"
    // InternalSTCoreParser.g:6108:1: rule__STForStatement__Group__6__Impl : ( ( rule__STForStatement__Group_6__0 )? ) ;
    public final void rule__STForStatement__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6112:1: ( ( ( rule__STForStatement__Group_6__0 )? ) )
            // InternalSTCoreParser.g:6113:1: ( ( rule__STForStatement__Group_6__0 )? )
            {
            // InternalSTCoreParser.g:6113:1: ( ( rule__STForStatement__Group_6__0 )? )
            // InternalSTCoreParser.g:6114:2: ( rule__STForStatement__Group_6__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getGroup_6()); 
            }
            // InternalSTCoreParser.g:6115:2: ( rule__STForStatement__Group_6__0 )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==BY) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // InternalSTCoreParser.g:6115:3: rule__STForStatement__Group_6__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STForStatement__Group_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getGroup_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__6__Impl"


    // $ANTLR start "rule__STForStatement__Group__7"
    // InternalSTCoreParser.g:6123:1: rule__STForStatement__Group__7 : rule__STForStatement__Group__7__Impl rule__STForStatement__Group__8 ;
    public final void rule__STForStatement__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6127:1: ( rule__STForStatement__Group__7__Impl rule__STForStatement__Group__8 )
            // InternalSTCoreParser.g:6128:2: rule__STForStatement__Group__7__Impl rule__STForStatement__Group__8
            {
            pushFollow(FOLLOW_35);
            rule__STForStatement__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STForStatement__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__7"


    // $ANTLR start "rule__STForStatement__Group__7__Impl"
    // InternalSTCoreParser.g:6135:1: rule__STForStatement__Group__7__Impl : ( DO ) ;
    public final void rule__STForStatement__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6139:1: ( ( DO ) )
            // InternalSTCoreParser.g:6140:1: ( DO )
            {
            // InternalSTCoreParser.g:6140:1: ( DO )
            // InternalSTCoreParser.g:6141:2: DO
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getDOKeyword_7()); 
            }
            match(input,DO,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getDOKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__7__Impl"


    // $ANTLR start "rule__STForStatement__Group__8"
    // InternalSTCoreParser.g:6150:1: rule__STForStatement__Group__8 : rule__STForStatement__Group__8__Impl rule__STForStatement__Group__9 ;
    public final void rule__STForStatement__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6154:1: ( rule__STForStatement__Group__8__Impl rule__STForStatement__Group__9 )
            // InternalSTCoreParser.g:6155:2: rule__STForStatement__Group__8__Impl rule__STForStatement__Group__9
            {
            pushFollow(FOLLOW_35);
            rule__STForStatement__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STForStatement__Group__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__8"


    // $ANTLR start "rule__STForStatement__Group__8__Impl"
    // InternalSTCoreParser.g:6162:1: rule__STForStatement__Group__8__Impl : ( ( rule__STForStatement__StatementsAssignment_8 )* ) ;
    public final void rule__STForStatement__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6166:1: ( ( ( rule__STForStatement__StatementsAssignment_8 )* ) )
            // InternalSTCoreParser.g:6167:1: ( ( rule__STForStatement__StatementsAssignment_8 )* )
            {
            // InternalSTCoreParser.g:6167:1: ( ( rule__STForStatement__StatementsAssignment_8 )* )
            // InternalSTCoreParser.g:6168:2: ( rule__STForStatement__StatementsAssignment_8 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getStatementsAssignment_8()); 
            }
            // InternalSTCoreParser.g:6169:2: ( rule__STForStatement__StatementsAssignment_8 )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==LDATE_AND_TIME||LA60_0==DATE_AND_TIME||LA60_0==LTIME_OF_DAY||LA60_0==TIME_OF_DAY||LA60_0==CONTINUE||LA60_0==WSTRING||LA60_0==REPEAT||LA60_0==RETURN||LA60_0==STRING||LA60_0==DWORD||LA60_0==FALSE||(LA60_0>=LDATE && LA60_0<=ULINT)||(LA60_0>=USINT && LA60_0<=DINT)||(LA60_0>=EXIT && LA60_0<=LTOD)||(LA60_0>=REAL && LA60_0<=SINT)||(LA60_0>=THIS && LA60_0<=TRUE)||LA60_0==UINT||(LA60_0>=WORD && LA60_0<=MOD)||LA60_0==TOD||LA60_0==XOR||(LA60_0>=DT && LA60_0<=LT)||LA60_0==OR||LA60_0==LeftParenthesis||LA60_0==PlusSign||LA60_0==HyphenMinus||LA60_0==Semicolon||(LA60_0>=D && LA60_0<=T)||(LA60_0>=RULE_NON_DECIMAL && LA60_0<=RULE_DECIMAL)||(LA60_0>=RULE_ID && LA60_0<=RULE_STRING)) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // InternalSTCoreParser.g:6169:3: rule__STForStatement__StatementsAssignment_8
            	    {
            	    pushFollow(FOLLOW_4);
            	    rule__STForStatement__StatementsAssignment_8();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getStatementsAssignment_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__8__Impl"


    // $ANTLR start "rule__STForStatement__Group__9"
    // InternalSTCoreParser.g:6177:1: rule__STForStatement__Group__9 : rule__STForStatement__Group__9__Impl ;
    public final void rule__STForStatement__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6181:1: ( rule__STForStatement__Group__9__Impl )
            // InternalSTCoreParser.g:6182:2: rule__STForStatement__Group__9__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STForStatement__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__9"


    // $ANTLR start "rule__STForStatement__Group__9__Impl"
    // InternalSTCoreParser.g:6188:1: rule__STForStatement__Group__9__Impl : ( END_FOR ) ;
    public final void rule__STForStatement__Group__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6192:1: ( ( END_FOR ) )
            // InternalSTCoreParser.g:6193:1: ( END_FOR )
            {
            // InternalSTCoreParser.g:6193:1: ( END_FOR )
            // InternalSTCoreParser.g:6194:2: END_FOR
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getEND_FORKeyword_9()); 
            }
            match(input,END_FOR,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getEND_FORKeyword_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group__9__Impl"


    // $ANTLR start "rule__STForStatement__Group_6__0"
    // InternalSTCoreParser.g:6204:1: rule__STForStatement__Group_6__0 : rule__STForStatement__Group_6__0__Impl rule__STForStatement__Group_6__1 ;
    public final void rule__STForStatement__Group_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6208:1: ( rule__STForStatement__Group_6__0__Impl rule__STForStatement__Group_6__1 )
            // InternalSTCoreParser.g:6209:2: rule__STForStatement__Group_6__0__Impl rule__STForStatement__Group_6__1
            {
            pushFollow(FOLLOW_11);
            rule__STForStatement__Group_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STForStatement__Group_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group_6__0"


    // $ANTLR start "rule__STForStatement__Group_6__0__Impl"
    // InternalSTCoreParser.g:6216:1: rule__STForStatement__Group_6__0__Impl : ( BY ) ;
    public final void rule__STForStatement__Group_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6220:1: ( ( BY ) )
            // InternalSTCoreParser.g:6221:1: ( BY )
            {
            // InternalSTCoreParser.g:6221:1: ( BY )
            // InternalSTCoreParser.g:6222:2: BY
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getBYKeyword_6_0()); 
            }
            match(input,BY,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getBYKeyword_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group_6__0__Impl"


    // $ANTLR start "rule__STForStatement__Group_6__1"
    // InternalSTCoreParser.g:6231:1: rule__STForStatement__Group_6__1 : rule__STForStatement__Group_6__1__Impl ;
    public final void rule__STForStatement__Group_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6235:1: ( rule__STForStatement__Group_6__1__Impl )
            // InternalSTCoreParser.g:6236:2: rule__STForStatement__Group_6__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STForStatement__Group_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group_6__1"


    // $ANTLR start "rule__STForStatement__Group_6__1__Impl"
    // InternalSTCoreParser.g:6242:1: rule__STForStatement__Group_6__1__Impl : ( ( rule__STForStatement__ByAssignment_6_1 ) ) ;
    public final void rule__STForStatement__Group_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6246:1: ( ( ( rule__STForStatement__ByAssignment_6_1 ) ) )
            // InternalSTCoreParser.g:6247:1: ( ( rule__STForStatement__ByAssignment_6_1 ) )
            {
            // InternalSTCoreParser.g:6247:1: ( ( rule__STForStatement__ByAssignment_6_1 ) )
            // InternalSTCoreParser.g:6248:2: ( rule__STForStatement__ByAssignment_6_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getByAssignment_6_1()); 
            }
            // InternalSTCoreParser.g:6249:2: ( rule__STForStatement__ByAssignment_6_1 )
            // InternalSTCoreParser.g:6249:3: rule__STForStatement__ByAssignment_6_1
            {
            pushFollow(FOLLOW_2);
            rule__STForStatement__ByAssignment_6_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getByAssignment_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__Group_6__1__Impl"


    // $ANTLR start "rule__STWhileStatement__Group__0"
    // InternalSTCoreParser.g:6258:1: rule__STWhileStatement__Group__0 : rule__STWhileStatement__Group__0__Impl rule__STWhileStatement__Group__1 ;
    public final void rule__STWhileStatement__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6262:1: ( rule__STWhileStatement__Group__0__Impl rule__STWhileStatement__Group__1 )
            // InternalSTCoreParser.g:6263:2: rule__STWhileStatement__Group__0__Impl rule__STWhileStatement__Group__1
            {
            pushFollow(FOLLOW_11);
            rule__STWhileStatement__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STWhileStatement__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STWhileStatement__Group__0"


    // $ANTLR start "rule__STWhileStatement__Group__0__Impl"
    // InternalSTCoreParser.g:6270:1: rule__STWhileStatement__Group__0__Impl : ( WHILE ) ;
    public final void rule__STWhileStatement__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6274:1: ( ( WHILE ) )
            // InternalSTCoreParser.g:6275:1: ( WHILE )
            {
            // InternalSTCoreParser.g:6275:1: ( WHILE )
            // InternalSTCoreParser.g:6276:2: WHILE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTWhileStatementAccess().getWHILEKeyword_0()); 
            }
            match(input,WHILE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTWhileStatementAccess().getWHILEKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STWhileStatement__Group__0__Impl"


    // $ANTLR start "rule__STWhileStatement__Group__1"
    // InternalSTCoreParser.g:6285:1: rule__STWhileStatement__Group__1 : rule__STWhileStatement__Group__1__Impl rule__STWhileStatement__Group__2 ;
    public final void rule__STWhileStatement__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6289:1: ( rule__STWhileStatement__Group__1__Impl rule__STWhileStatement__Group__2 )
            // InternalSTCoreParser.g:6290:2: rule__STWhileStatement__Group__1__Impl rule__STWhileStatement__Group__2
            {
            pushFollow(FOLLOW_36);
            rule__STWhileStatement__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STWhileStatement__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STWhileStatement__Group__1"


    // $ANTLR start "rule__STWhileStatement__Group__1__Impl"
    // InternalSTCoreParser.g:6297:1: rule__STWhileStatement__Group__1__Impl : ( ( rule__STWhileStatement__ConditionAssignment_1 ) ) ;
    public final void rule__STWhileStatement__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6301:1: ( ( ( rule__STWhileStatement__ConditionAssignment_1 ) ) )
            // InternalSTCoreParser.g:6302:1: ( ( rule__STWhileStatement__ConditionAssignment_1 ) )
            {
            // InternalSTCoreParser.g:6302:1: ( ( rule__STWhileStatement__ConditionAssignment_1 ) )
            // InternalSTCoreParser.g:6303:2: ( rule__STWhileStatement__ConditionAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTWhileStatementAccess().getConditionAssignment_1()); 
            }
            // InternalSTCoreParser.g:6304:2: ( rule__STWhileStatement__ConditionAssignment_1 )
            // InternalSTCoreParser.g:6304:3: rule__STWhileStatement__ConditionAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__STWhileStatement__ConditionAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTWhileStatementAccess().getConditionAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STWhileStatement__Group__1__Impl"


    // $ANTLR start "rule__STWhileStatement__Group__2"
    // InternalSTCoreParser.g:6312:1: rule__STWhileStatement__Group__2 : rule__STWhileStatement__Group__2__Impl rule__STWhileStatement__Group__3 ;
    public final void rule__STWhileStatement__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6316:1: ( rule__STWhileStatement__Group__2__Impl rule__STWhileStatement__Group__3 )
            // InternalSTCoreParser.g:6317:2: rule__STWhileStatement__Group__2__Impl rule__STWhileStatement__Group__3
            {
            pushFollow(FOLLOW_37);
            rule__STWhileStatement__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STWhileStatement__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STWhileStatement__Group__2"


    // $ANTLR start "rule__STWhileStatement__Group__2__Impl"
    // InternalSTCoreParser.g:6324:1: rule__STWhileStatement__Group__2__Impl : ( DO ) ;
    public final void rule__STWhileStatement__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6328:1: ( ( DO ) )
            // InternalSTCoreParser.g:6329:1: ( DO )
            {
            // InternalSTCoreParser.g:6329:1: ( DO )
            // InternalSTCoreParser.g:6330:2: DO
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTWhileStatementAccess().getDOKeyword_2()); 
            }
            match(input,DO,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTWhileStatementAccess().getDOKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STWhileStatement__Group__2__Impl"


    // $ANTLR start "rule__STWhileStatement__Group__3"
    // InternalSTCoreParser.g:6339:1: rule__STWhileStatement__Group__3 : rule__STWhileStatement__Group__3__Impl rule__STWhileStatement__Group__4 ;
    public final void rule__STWhileStatement__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6343:1: ( rule__STWhileStatement__Group__3__Impl rule__STWhileStatement__Group__4 )
            // InternalSTCoreParser.g:6344:2: rule__STWhileStatement__Group__3__Impl rule__STWhileStatement__Group__4
            {
            pushFollow(FOLLOW_37);
            rule__STWhileStatement__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STWhileStatement__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STWhileStatement__Group__3"


    // $ANTLR start "rule__STWhileStatement__Group__3__Impl"
    // InternalSTCoreParser.g:6351:1: rule__STWhileStatement__Group__3__Impl : ( ( rule__STWhileStatement__StatementsAssignment_3 )* ) ;
    public final void rule__STWhileStatement__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6355:1: ( ( ( rule__STWhileStatement__StatementsAssignment_3 )* ) )
            // InternalSTCoreParser.g:6356:1: ( ( rule__STWhileStatement__StatementsAssignment_3 )* )
            {
            // InternalSTCoreParser.g:6356:1: ( ( rule__STWhileStatement__StatementsAssignment_3 )* )
            // InternalSTCoreParser.g:6357:2: ( rule__STWhileStatement__StatementsAssignment_3 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTWhileStatementAccess().getStatementsAssignment_3()); 
            }
            // InternalSTCoreParser.g:6358:2: ( rule__STWhileStatement__StatementsAssignment_3 )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==LDATE_AND_TIME||LA61_0==DATE_AND_TIME||LA61_0==LTIME_OF_DAY||LA61_0==TIME_OF_DAY||LA61_0==CONTINUE||LA61_0==WSTRING||LA61_0==REPEAT||LA61_0==RETURN||LA61_0==STRING||LA61_0==DWORD||LA61_0==FALSE||(LA61_0>=LDATE && LA61_0<=ULINT)||(LA61_0>=USINT && LA61_0<=DINT)||(LA61_0>=EXIT && LA61_0<=LTOD)||(LA61_0>=REAL && LA61_0<=SINT)||(LA61_0>=THIS && LA61_0<=TRUE)||LA61_0==UINT||(LA61_0>=WORD && LA61_0<=MOD)||LA61_0==TOD||LA61_0==XOR||(LA61_0>=DT && LA61_0<=LT)||LA61_0==OR||LA61_0==LeftParenthesis||LA61_0==PlusSign||LA61_0==HyphenMinus||LA61_0==Semicolon||(LA61_0>=D && LA61_0<=T)||(LA61_0>=RULE_NON_DECIMAL && LA61_0<=RULE_DECIMAL)||(LA61_0>=RULE_ID && LA61_0<=RULE_STRING)) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // InternalSTCoreParser.g:6358:3: rule__STWhileStatement__StatementsAssignment_3
            	    {
            	    pushFollow(FOLLOW_4);
            	    rule__STWhileStatement__StatementsAssignment_3();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTWhileStatementAccess().getStatementsAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STWhileStatement__Group__3__Impl"


    // $ANTLR start "rule__STWhileStatement__Group__4"
    // InternalSTCoreParser.g:6366:1: rule__STWhileStatement__Group__4 : rule__STWhileStatement__Group__4__Impl ;
    public final void rule__STWhileStatement__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6370:1: ( rule__STWhileStatement__Group__4__Impl )
            // InternalSTCoreParser.g:6371:2: rule__STWhileStatement__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STWhileStatement__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STWhileStatement__Group__4"


    // $ANTLR start "rule__STWhileStatement__Group__4__Impl"
    // InternalSTCoreParser.g:6377:1: rule__STWhileStatement__Group__4__Impl : ( END_WHILE ) ;
    public final void rule__STWhileStatement__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6381:1: ( ( END_WHILE ) )
            // InternalSTCoreParser.g:6382:1: ( END_WHILE )
            {
            // InternalSTCoreParser.g:6382:1: ( END_WHILE )
            // InternalSTCoreParser.g:6383:2: END_WHILE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTWhileStatementAccess().getEND_WHILEKeyword_4()); 
            }
            match(input,END_WHILE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTWhileStatementAccess().getEND_WHILEKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STWhileStatement__Group__4__Impl"


    // $ANTLR start "rule__STRepeatStatement__Group__0"
    // InternalSTCoreParser.g:6393:1: rule__STRepeatStatement__Group__0 : rule__STRepeatStatement__Group__0__Impl rule__STRepeatStatement__Group__1 ;
    public final void rule__STRepeatStatement__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6397:1: ( rule__STRepeatStatement__Group__0__Impl rule__STRepeatStatement__Group__1 )
            // InternalSTCoreParser.g:6398:2: rule__STRepeatStatement__Group__0__Impl rule__STRepeatStatement__Group__1
            {
            pushFollow(FOLLOW_38);
            rule__STRepeatStatement__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STRepeatStatement__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STRepeatStatement__Group__0"


    // $ANTLR start "rule__STRepeatStatement__Group__0__Impl"
    // InternalSTCoreParser.g:6405:1: rule__STRepeatStatement__Group__0__Impl : ( REPEAT ) ;
    public final void rule__STRepeatStatement__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6409:1: ( ( REPEAT ) )
            // InternalSTCoreParser.g:6410:1: ( REPEAT )
            {
            // InternalSTCoreParser.g:6410:1: ( REPEAT )
            // InternalSTCoreParser.g:6411:2: REPEAT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTRepeatStatementAccess().getREPEATKeyword_0()); 
            }
            match(input,REPEAT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTRepeatStatementAccess().getREPEATKeyword_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STRepeatStatement__Group__0__Impl"


    // $ANTLR start "rule__STRepeatStatement__Group__1"
    // InternalSTCoreParser.g:6420:1: rule__STRepeatStatement__Group__1 : rule__STRepeatStatement__Group__1__Impl rule__STRepeatStatement__Group__2 ;
    public final void rule__STRepeatStatement__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6424:1: ( rule__STRepeatStatement__Group__1__Impl rule__STRepeatStatement__Group__2 )
            // InternalSTCoreParser.g:6425:2: rule__STRepeatStatement__Group__1__Impl rule__STRepeatStatement__Group__2
            {
            pushFollow(FOLLOW_38);
            rule__STRepeatStatement__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STRepeatStatement__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STRepeatStatement__Group__1"


    // $ANTLR start "rule__STRepeatStatement__Group__1__Impl"
    // InternalSTCoreParser.g:6432:1: rule__STRepeatStatement__Group__1__Impl : ( ( rule__STRepeatStatement__StatementsAssignment_1 )* ) ;
    public final void rule__STRepeatStatement__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6436:1: ( ( ( rule__STRepeatStatement__StatementsAssignment_1 )* ) )
            // InternalSTCoreParser.g:6437:1: ( ( rule__STRepeatStatement__StatementsAssignment_1 )* )
            {
            // InternalSTCoreParser.g:6437:1: ( ( rule__STRepeatStatement__StatementsAssignment_1 )* )
            // InternalSTCoreParser.g:6438:2: ( rule__STRepeatStatement__StatementsAssignment_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTRepeatStatementAccess().getStatementsAssignment_1()); 
            }
            // InternalSTCoreParser.g:6439:2: ( rule__STRepeatStatement__StatementsAssignment_1 )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==LDATE_AND_TIME||LA62_0==DATE_AND_TIME||LA62_0==LTIME_OF_DAY||LA62_0==TIME_OF_DAY||LA62_0==CONTINUE||LA62_0==WSTRING||LA62_0==REPEAT||LA62_0==RETURN||LA62_0==STRING||LA62_0==DWORD||LA62_0==FALSE||(LA62_0>=LDATE && LA62_0<=ULINT)||(LA62_0>=USINT && LA62_0<=DINT)||(LA62_0>=EXIT && LA62_0<=LTOD)||(LA62_0>=REAL && LA62_0<=SINT)||(LA62_0>=THIS && LA62_0<=TRUE)||LA62_0==UINT||(LA62_0>=WORD && LA62_0<=MOD)||LA62_0==TOD||LA62_0==XOR||(LA62_0>=DT && LA62_0<=LT)||LA62_0==OR||LA62_0==LeftParenthesis||LA62_0==PlusSign||LA62_0==HyphenMinus||LA62_0==Semicolon||(LA62_0>=D && LA62_0<=T)||(LA62_0>=RULE_NON_DECIMAL && LA62_0<=RULE_DECIMAL)||(LA62_0>=RULE_ID && LA62_0<=RULE_STRING)) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // InternalSTCoreParser.g:6439:3: rule__STRepeatStatement__StatementsAssignment_1
            	    {
            	    pushFollow(FOLLOW_4);
            	    rule__STRepeatStatement__StatementsAssignment_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTRepeatStatementAccess().getStatementsAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STRepeatStatement__Group__1__Impl"


    // $ANTLR start "rule__STRepeatStatement__Group__2"
    // InternalSTCoreParser.g:6447:1: rule__STRepeatStatement__Group__2 : rule__STRepeatStatement__Group__2__Impl rule__STRepeatStatement__Group__3 ;
    public final void rule__STRepeatStatement__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6451:1: ( rule__STRepeatStatement__Group__2__Impl rule__STRepeatStatement__Group__3 )
            // InternalSTCoreParser.g:6452:2: rule__STRepeatStatement__Group__2__Impl rule__STRepeatStatement__Group__3
            {
            pushFollow(FOLLOW_11);
            rule__STRepeatStatement__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STRepeatStatement__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STRepeatStatement__Group__2"


    // $ANTLR start "rule__STRepeatStatement__Group__2__Impl"
    // InternalSTCoreParser.g:6459:1: rule__STRepeatStatement__Group__2__Impl : ( UNTIL ) ;
    public final void rule__STRepeatStatement__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6463:1: ( ( UNTIL ) )
            // InternalSTCoreParser.g:6464:1: ( UNTIL )
            {
            // InternalSTCoreParser.g:6464:1: ( UNTIL )
            // InternalSTCoreParser.g:6465:2: UNTIL
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTRepeatStatementAccess().getUNTILKeyword_2()); 
            }
            match(input,UNTIL,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTRepeatStatementAccess().getUNTILKeyword_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STRepeatStatement__Group__2__Impl"


    // $ANTLR start "rule__STRepeatStatement__Group__3"
    // InternalSTCoreParser.g:6474:1: rule__STRepeatStatement__Group__3 : rule__STRepeatStatement__Group__3__Impl rule__STRepeatStatement__Group__4 ;
    public final void rule__STRepeatStatement__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6478:1: ( rule__STRepeatStatement__Group__3__Impl rule__STRepeatStatement__Group__4 )
            // InternalSTCoreParser.g:6479:2: rule__STRepeatStatement__Group__3__Impl rule__STRepeatStatement__Group__4
            {
            pushFollow(FOLLOW_39);
            rule__STRepeatStatement__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STRepeatStatement__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STRepeatStatement__Group__3"


    // $ANTLR start "rule__STRepeatStatement__Group__3__Impl"
    // InternalSTCoreParser.g:6486:1: rule__STRepeatStatement__Group__3__Impl : ( ( rule__STRepeatStatement__ConditionAssignment_3 ) ) ;
    public final void rule__STRepeatStatement__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6490:1: ( ( ( rule__STRepeatStatement__ConditionAssignment_3 ) ) )
            // InternalSTCoreParser.g:6491:1: ( ( rule__STRepeatStatement__ConditionAssignment_3 ) )
            {
            // InternalSTCoreParser.g:6491:1: ( ( rule__STRepeatStatement__ConditionAssignment_3 ) )
            // InternalSTCoreParser.g:6492:2: ( rule__STRepeatStatement__ConditionAssignment_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTRepeatStatementAccess().getConditionAssignment_3()); 
            }
            // InternalSTCoreParser.g:6493:2: ( rule__STRepeatStatement__ConditionAssignment_3 )
            // InternalSTCoreParser.g:6493:3: rule__STRepeatStatement__ConditionAssignment_3
            {
            pushFollow(FOLLOW_2);
            rule__STRepeatStatement__ConditionAssignment_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTRepeatStatementAccess().getConditionAssignment_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STRepeatStatement__Group__3__Impl"


    // $ANTLR start "rule__STRepeatStatement__Group__4"
    // InternalSTCoreParser.g:6501:1: rule__STRepeatStatement__Group__4 : rule__STRepeatStatement__Group__4__Impl ;
    public final void rule__STRepeatStatement__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6505:1: ( rule__STRepeatStatement__Group__4__Impl )
            // InternalSTCoreParser.g:6506:2: rule__STRepeatStatement__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STRepeatStatement__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STRepeatStatement__Group__4"


    // $ANTLR start "rule__STRepeatStatement__Group__4__Impl"
    // InternalSTCoreParser.g:6512:1: rule__STRepeatStatement__Group__4__Impl : ( END_REPEAT ) ;
    public final void rule__STRepeatStatement__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6516:1: ( ( END_REPEAT ) )
            // InternalSTCoreParser.g:6517:1: ( END_REPEAT )
            {
            // InternalSTCoreParser.g:6517:1: ( END_REPEAT )
            // InternalSTCoreParser.g:6518:2: END_REPEAT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTRepeatStatementAccess().getEND_REPEATKeyword_4()); 
            }
            match(input,END_REPEAT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTRepeatStatementAccess().getEND_REPEATKeyword_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STRepeatStatement__Group__4__Impl"


    // $ANTLR start "rule__STSubrangeExpression__Group__0"
    // InternalSTCoreParser.g:6528:1: rule__STSubrangeExpression__Group__0 : rule__STSubrangeExpression__Group__0__Impl rule__STSubrangeExpression__Group__1 ;
    public final void rule__STSubrangeExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6532:1: ( rule__STSubrangeExpression__Group__0__Impl rule__STSubrangeExpression__Group__1 )
            // InternalSTCoreParser.g:6533:2: rule__STSubrangeExpression__Group__0__Impl rule__STSubrangeExpression__Group__1
            {
            pushFollow(FOLLOW_40);
            rule__STSubrangeExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STSubrangeExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__Group__0"


    // $ANTLR start "rule__STSubrangeExpression__Group__0__Impl"
    // InternalSTCoreParser.g:6540:1: rule__STSubrangeExpression__Group__0__Impl : ( ruleSTOrExpression ) ;
    public final void rule__STSubrangeExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6544:1: ( ( ruleSTOrExpression ) )
            // InternalSTCoreParser.g:6545:1: ( ruleSTOrExpression )
            {
            // InternalSTCoreParser.g:6545:1: ( ruleSTOrExpression )
            // InternalSTCoreParser.g:6546:2: ruleSTOrExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTSubrangeExpressionAccess().getSTOrExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTSubrangeExpressionAccess().getSTOrExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__Group__0__Impl"


    // $ANTLR start "rule__STSubrangeExpression__Group__1"
    // InternalSTCoreParser.g:6555:1: rule__STSubrangeExpression__Group__1 : rule__STSubrangeExpression__Group__1__Impl ;
    public final void rule__STSubrangeExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6559:1: ( rule__STSubrangeExpression__Group__1__Impl )
            // InternalSTCoreParser.g:6560:2: rule__STSubrangeExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STSubrangeExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__Group__1"


    // $ANTLR start "rule__STSubrangeExpression__Group__1__Impl"
    // InternalSTCoreParser.g:6566:1: rule__STSubrangeExpression__Group__1__Impl : ( ( rule__STSubrangeExpression__Group_1__0 )* ) ;
    public final void rule__STSubrangeExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6570:1: ( ( ( rule__STSubrangeExpression__Group_1__0 )* ) )
            // InternalSTCoreParser.g:6571:1: ( ( rule__STSubrangeExpression__Group_1__0 )* )
            {
            // InternalSTCoreParser.g:6571:1: ( ( rule__STSubrangeExpression__Group_1__0 )* )
            // InternalSTCoreParser.g:6572:2: ( rule__STSubrangeExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTSubrangeExpressionAccess().getGroup_1()); 
            }
            // InternalSTCoreParser.g:6573:2: ( rule__STSubrangeExpression__Group_1__0 )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==FullStopFullStop) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // InternalSTCoreParser.g:6573:3: rule__STSubrangeExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_41);
            	    rule__STSubrangeExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTSubrangeExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__Group__1__Impl"


    // $ANTLR start "rule__STSubrangeExpression__Group_1__0"
    // InternalSTCoreParser.g:6582:1: rule__STSubrangeExpression__Group_1__0 : rule__STSubrangeExpression__Group_1__0__Impl rule__STSubrangeExpression__Group_1__1 ;
    public final void rule__STSubrangeExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6586:1: ( rule__STSubrangeExpression__Group_1__0__Impl rule__STSubrangeExpression__Group_1__1 )
            // InternalSTCoreParser.g:6587:2: rule__STSubrangeExpression__Group_1__0__Impl rule__STSubrangeExpression__Group_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STSubrangeExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STSubrangeExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__Group_1__0"


    // $ANTLR start "rule__STSubrangeExpression__Group_1__0__Impl"
    // InternalSTCoreParser.g:6594:1: rule__STSubrangeExpression__Group_1__0__Impl : ( ( rule__STSubrangeExpression__Group_1_0__0 ) ) ;
    public final void rule__STSubrangeExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6598:1: ( ( ( rule__STSubrangeExpression__Group_1_0__0 ) ) )
            // InternalSTCoreParser.g:6599:1: ( ( rule__STSubrangeExpression__Group_1_0__0 ) )
            {
            // InternalSTCoreParser.g:6599:1: ( ( rule__STSubrangeExpression__Group_1_0__0 ) )
            // InternalSTCoreParser.g:6600:2: ( rule__STSubrangeExpression__Group_1_0__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTSubrangeExpressionAccess().getGroup_1_0()); 
            }
            // InternalSTCoreParser.g:6601:2: ( rule__STSubrangeExpression__Group_1_0__0 )
            // InternalSTCoreParser.g:6601:3: rule__STSubrangeExpression__Group_1_0__0
            {
            pushFollow(FOLLOW_2);
            rule__STSubrangeExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTSubrangeExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__Group_1__0__Impl"


    // $ANTLR start "rule__STSubrangeExpression__Group_1__1"
    // InternalSTCoreParser.g:6609:1: rule__STSubrangeExpression__Group_1__1 : rule__STSubrangeExpression__Group_1__1__Impl ;
    public final void rule__STSubrangeExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6613:1: ( rule__STSubrangeExpression__Group_1__1__Impl )
            // InternalSTCoreParser.g:6614:2: rule__STSubrangeExpression__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STSubrangeExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__Group_1__1"


    // $ANTLR start "rule__STSubrangeExpression__Group_1__1__Impl"
    // InternalSTCoreParser.g:6620:1: rule__STSubrangeExpression__Group_1__1__Impl : ( ( rule__STSubrangeExpression__RightAssignment_1_1 ) ) ;
    public final void rule__STSubrangeExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6624:1: ( ( ( rule__STSubrangeExpression__RightAssignment_1_1 ) ) )
            // InternalSTCoreParser.g:6625:1: ( ( rule__STSubrangeExpression__RightAssignment_1_1 ) )
            {
            // InternalSTCoreParser.g:6625:1: ( ( rule__STSubrangeExpression__RightAssignment_1_1 ) )
            // InternalSTCoreParser.g:6626:2: ( rule__STSubrangeExpression__RightAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTSubrangeExpressionAccess().getRightAssignment_1_1()); 
            }
            // InternalSTCoreParser.g:6627:2: ( rule__STSubrangeExpression__RightAssignment_1_1 )
            // InternalSTCoreParser.g:6627:3: rule__STSubrangeExpression__RightAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STSubrangeExpression__RightAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTSubrangeExpressionAccess().getRightAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__Group_1__1__Impl"


    // $ANTLR start "rule__STSubrangeExpression__Group_1_0__0"
    // InternalSTCoreParser.g:6636:1: rule__STSubrangeExpression__Group_1_0__0 : rule__STSubrangeExpression__Group_1_0__0__Impl rule__STSubrangeExpression__Group_1_0__1 ;
    public final void rule__STSubrangeExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6640:1: ( rule__STSubrangeExpression__Group_1_0__0__Impl rule__STSubrangeExpression__Group_1_0__1 )
            // InternalSTCoreParser.g:6641:2: rule__STSubrangeExpression__Group_1_0__0__Impl rule__STSubrangeExpression__Group_1_0__1
            {
            pushFollow(FOLLOW_40);
            rule__STSubrangeExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STSubrangeExpression__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__Group_1_0__0"


    // $ANTLR start "rule__STSubrangeExpression__Group_1_0__0__Impl"
    // InternalSTCoreParser.g:6648:1: rule__STSubrangeExpression__Group_1_0__0__Impl : ( () ) ;
    public final void rule__STSubrangeExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6652:1: ( ( () ) )
            // InternalSTCoreParser.g:6653:1: ( () )
            {
            // InternalSTCoreParser.g:6653:1: ( () )
            // InternalSTCoreParser.g:6654:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTSubrangeExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }
            // InternalSTCoreParser.g:6655:2: ()
            // InternalSTCoreParser.g:6655:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTSubrangeExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__Group_1_0__0__Impl"


    // $ANTLR start "rule__STSubrangeExpression__Group_1_0__1"
    // InternalSTCoreParser.g:6663:1: rule__STSubrangeExpression__Group_1_0__1 : rule__STSubrangeExpression__Group_1_0__1__Impl ;
    public final void rule__STSubrangeExpression__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6667:1: ( rule__STSubrangeExpression__Group_1_0__1__Impl )
            // InternalSTCoreParser.g:6668:2: rule__STSubrangeExpression__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STSubrangeExpression__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__Group_1_0__1"


    // $ANTLR start "rule__STSubrangeExpression__Group_1_0__1__Impl"
    // InternalSTCoreParser.g:6674:1: rule__STSubrangeExpression__Group_1_0__1__Impl : ( ( rule__STSubrangeExpression__OpAssignment_1_0_1 ) ) ;
    public final void rule__STSubrangeExpression__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6678:1: ( ( ( rule__STSubrangeExpression__OpAssignment_1_0_1 ) ) )
            // InternalSTCoreParser.g:6679:1: ( ( rule__STSubrangeExpression__OpAssignment_1_0_1 ) )
            {
            // InternalSTCoreParser.g:6679:1: ( ( rule__STSubrangeExpression__OpAssignment_1_0_1 ) )
            // InternalSTCoreParser.g:6680:2: ( rule__STSubrangeExpression__OpAssignment_1_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTSubrangeExpressionAccess().getOpAssignment_1_0_1()); 
            }
            // InternalSTCoreParser.g:6681:2: ( rule__STSubrangeExpression__OpAssignment_1_0_1 )
            // InternalSTCoreParser.g:6681:3: rule__STSubrangeExpression__OpAssignment_1_0_1
            {
            pushFollow(FOLLOW_2);
            rule__STSubrangeExpression__OpAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTSubrangeExpressionAccess().getOpAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__Group_1_0__1__Impl"


    // $ANTLR start "rule__STOrExpression__Group__0"
    // InternalSTCoreParser.g:6690:1: rule__STOrExpression__Group__0 : rule__STOrExpression__Group__0__Impl rule__STOrExpression__Group__1 ;
    public final void rule__STOrExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6694:1: ( rule__STOrExpression__Group__0__Impl rule__STOrExpression__Group__1 )
            // InternalSTCoreParser.g:6695:2: rule__STOrExpression__Group__0__Impl rule__STOrExpression__Group__1
            {
            pushFollow(FOLLOW_42);
            rule__STOrExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STOrExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__Group__0"


    // $ANTLR start "rule__STOrExpression__Group__0__Impl"
    // InternalSTCoreParser.g:6702:1: rule__STOrExpression__Group__0__Impl : ( ruleSTXorExpression ) ;
    public final void rule__STOrExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6706:1: ( ( ruleSTXorExpression ) )
            // InternalSTCoreParser.g:6707:1: ( ruleSTXorExpression )
            {
            // InternalSTCoreParser.g:6707:1: ( ruleSTXorExpression )
            // InternalSTCoreParser.g:6708:2: ruleSTXorExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTOrExpressionAccess().getSTXorExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTXorExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTOrExpressionAccess().getSTXorExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__Group__0__Impl"


    // $ANTLR start "rule__STOrExpression__Group__1"
    // InternalSTCoreParser.g:6717:1: rule__STOrExpression__Group__1 : rule__STOrExpression__Group__1__Impl ;
    public final void rule__STOrExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6721:1: ( rule__STOrExpression__Group__1__Impl )
            // InternalSTCoreParser.g:6722:2: rule__STOrExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STOrExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__Group__1"


    // $ANTLR start "rule__STOrExpression__Group__1__Impl"
    // InternalSTCoreParser.g:6728:1: rule__STOrExpression__Group__1__Impl : ( ( rule__STOrExpression__Group_1__0 )* ) ;
    public final void rule__STOrExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6732:1: ( ( ( rule__STOrExpression__Group_1__0 )* ) )
            // InternalSTCoreParser.g:6733:1: ( ( rule__STOrExpression__Group_1__0 )* )
            {
            // InternalSTCoreParser.g:6733:1: ( ( rule__STOrExpression__Group_1__0 )* )
            // InternalSTCoreParser.g:6734:2: ( rule__STOrExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTOrExpressionAccess().getGroup_1()); 
            }
            // InternalSTCoreParser.g:6735:2: ( rule__STOrExpression__Group_1__0 )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==OR) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // InternalSTCoreParser.g:6735:3: rule__STOrExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_43);
            	    rule__STOrExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTOrExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__Group__1__Impl"


    // $ANTLR start "rule__STOrExpression__Group_1__0"
    // InternalSTCoreParser.g:6744:1: rule__STOrExpression__Group_1__0 : rule__STOrExpression__Group_1__0__Impl rule__STOrExpression__Group_1__1 ;
    public final void rule__STOrExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6748:1: ( rule__STOrExpression__Group_1__0__Impl rule__STOrExpression__Group_1__1 )
            // InternalSTCoreParser.g:6749:2: rule__STOrExpression__Group_1__0__Impl rule__STOrExpression__Group_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STOrExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STOrExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__Group_1__0"


    // $ANTLR start "rule__STOrExpression__Group_1__0__Impl"
    // InternalSTCoreParser.g:6756:1: rule__STOrExpression__Group_1__0__Impl : ( ( rule__STOrExpression__Group_1_0__0 ) ) ;
    public final void rule__STOrExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6760:1: ( ( ( rule__STOrExpression__Group_1_0__0 ) ) )
            // InternalSTCoreParser.g:6761:1: ( ( rule__STOrExpression__Group_1_0__0 ) )
            {
            // InternalSTCoreParser.g:6761:1: ( ( rule__STOrExpression__Group_1_0__0 ) )
            // InternalSTCoreParser.g:6762:2: ( rule__STOrExpression__Group_1_0__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTOrExpressionAccess().getGroup_1_0()); 
            }
            // InternalSTCoreParser.g:6763:2: ( rule__STOrExpression__Group_1_0__0 )
            // InternalSTCoreParser.g:6763:3: rule__STOrExpression__Group_1_0__0
            {
            pushFollow(FOLLOW_2);
            rule__STOrExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTOrExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__Group_1__0__Impl"


    // $ANTLR start "rule__STOrExpression__Group_1__1"
    // InternalSTCoreParser.g:6771:1: rule__STOrExpression__Group_1__1 : rule__STOrExpression__Group_1__1__Impl ;
    public final void rule__STOrExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6775:1: ( rule__STOrExpression__Group_1__1__Impl )
            // InternalSTCoreParser.g:6776:2: rule__STOrExpression__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STOrExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__Group_1__1"


    // $ANTLR start "rule__STOrExpression__Group_1__1__Impl"
    // InternalSTCoreParser.g:6782:1: rule__STOrExpression__Group_1__1__Impl : ( ( rule__STOrExpression__RightAssignment_1_1 ) ) ;
    public final void rule__STOrExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6786:1: ( ( ( rule__STOrExpression__RightAssignment_1_1 ) ) )
            // InternalSTCoreParser.g:6787:1: ( ( rule__STOrExpression__RightAssignment_1_1 ) )
            {
            // InternalSTCoreParser.g:6787:1: ( ( rule__STOrExpression__RightAssignment_1_1 ) )
            // InternalSTCoreParser.g:6788:2: ( rule__STOrExpression__RightAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTOrExpressionAccess().getRightAssignment_1_1()); 
            }
            // InternalSTCoreParser.g:6789:2: ( rule__STOrExpression__RightAssignment_1_1 )
            // InternalSTCoreParser.g:6789:3: rule__STOrExpression__RightAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STOrExpression__RightAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTOrExpressionAccess().getRightAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__Group_1__1__Impl"


    // $ANTLR start "rule__STOrExpression__Group_1_0__0"
    // InternalSTCoreParser.g:6798:1: rule__STOrExpression__Group_1_0__0 : rule__STOrExpression__Group_1_0__0__Impl rule__STOrExpression__Group_1_0__1 ;
    public final void rule__STOrExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6802:1: ( rule__STOrExpression__Group_1_0__0__Impl rule__STOrExpression__Group_1_0__1 )
            // InternalSTCoreParser.g:6803:2: rule__STOrExpression__Group_1_0__0__Impl rule__STOrExpression__Group_1_0__1
            {
            pushFollow(FOLLOW_42);
            rule__STOrExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STOrExpression__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__Group_1_0__0"


    // $ANTLR start "rule__STOrExpression__Group_1_0__0__Impl"
    // InternalSTCoreParser.g:6810:1: rule__STOrExpression__Group_1_0__0__Impl : ( () ) ;
    public final void rule__STOrExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6814:1: ( ( () ) )
            // InternalSTCoreParser.g:6815:1: ( () )
            {
            // InternalSTCoreParser.g:6815:1: ( () )
            // InternalSTCoreParser.g:6816:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTOrExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }
            // InternalSTCoreParser.g:6817:2: ()
            // InternalSTCoreParser.g:6817:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTOrExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__Group_1_0__0__Impl"


    // $ANTLR start "rule__STOrExpression__Group_1_0__1"
    // InternalSTCoreParser.g:6825:1: rule__STOrExpression__Group_1_0__1 : rule__STOrExpression__Group_1_0__1__Impl ;
    public final void rule__STOrExpression__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6829:1: ( rule__STOrExpression__Group_1_0__1__Impl )
            // InternalSTCoreParser.g:6830:2: rule__STOrExpression__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STOrExpression__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__Group_1_0__1"


    // $ANTLR start "rule__STOrExpression__Group_1_0__1__Impl"
    // InternalSTCoreParser.g:6836:1: rule__STOrExpression__Group_1_0__1__Impl : ( ( rule__STOrExpression__OpAssignment_1_0_1 ) ) ;
    public final void rule__STOrExpression__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6840:1: ( ( ( rule__STOrExpression__OpAssignment_1_0_1 ) ) )
            // InternalSTCoreParser.g:6841:1: ( ( rule__STOrExpression__OpAssignment_1_0_1 ) )
            {
            // InternalSTCoreParser.g:6841:1: ( ( rule__STOrExpression__OpAssignment_1_0_1 ) )
            // InternalSTCoreParser.g:6842:2: ( rule__STOrExpression__OpAssignment_1_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTOrExpressionAccess().getOpAssignment_1_0_1()); 
            }
            // InternalSTCoreParser.g:6843:2: ( rule__STOrExpression__OpAssignment_1_0_1 )
            // InternalSTCoreParser.g:6843:3: rule__STOrExpression__OpAssignment_1_0_1
            {
            pushFollow(FOLLOW_2);
            rule__STOrExpression__OpAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTOrExpressionAccess().getOpAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__Group_1_0__1__Impl"


    // $ANTLR start "rule__STXorExpression__Group__0"
    // InternalSTCoreParser.g:6852:1: rule__STXorExpression__Group__0 : rule__STXorExpression__Group__0__Impl rule__STXorExpression__Group__1 ;
    public final void rule__STXorExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6856:1: ( rule__STXorExpression__Group__0__Impl rule__STXorExpression__Group__1 )
            // InternalSTCoreParser.g:6857:2: rule__STXorExpression__Group__0__Impl rule__STXorExpression__Group__1
            {
            pushFollow(FOLLOW_44);
            rule__STXorExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STXorExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__Group__0"


    // $ANTLR start "rule__STXorExpression__Group__0__Impl"
    // InternalSTCoreParser.g:6864:1: rule__STXorExpression__Group__0__Impl : ( ruleSTAndExpression ) ;
    public final void rule__STXorExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6868:1: ( ( ruleSTAndExpression ) )
            // InternalSTCoreParser.g:6869:1: ( ruleSTAndExpression )
            {
            // InternalSTCoreParser.g:6869:1: ( ruleSTAndExpression )
            // InternalSTCoreParser.g:6870:2: ruleSTAndExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTXorExpressionAccess().getSTAndExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTAndExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTXorExpressionAccess().getSTAndExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__Group__0__Impl"


    // $ANTLR start "rule__STXorExpression__Group__1"
    // InternalSTCoreParser.g:6879:1: rule__STXorExpression__Group__1 : rule__STXorExpression__Group__1__Impl ;
    public final void rule__STXorExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6883:1: ( rule__STXorExpression__Group__1__Impl )
            // InternalSTCoreParser.g:6884:2: rule__STXorExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STXorExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__Group__1"


    // $ANTLR start "rule__STXorExpression__Group__1__Impl"
    // InternalSTCoreParser.g:6890:1: rule__STXorExpression__Group__1__Impl : ( ( rule__STXorExpression__Group_1__0 )* ) ;
    public final void rule__STXorExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6894:1: ( ( ( rule__STXorExpression__Group_1__0 )* ) )
            // InternalSTCoreParser.g:6895:1: ( ( rule__STXorExpression__Group_1__0 )* )
            {
            // InternalSTCoreParser.g:6895:1: ( ( rule__STXorExpression__Group_1__0 )* )
            // InternalSTCoreParser.g:6896:2: ( rule__STXorExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTXorExpressionAccess().getGroup_1()); 
            }
            // InternalSTCoreParser.g:6897:2: ( rule__STXorExpression__Group_1__0 )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==XOR) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // InternalSTCoreParser.g:6897:3: rule__STXorExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_45);
            	    rule__STXorExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTXorExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__Group__1__Impl"


    // $ANTLR start "rule__STXorExpression__Group_1__0"
    // InternalSTCoreParser.g:6906:1: rule__STXorExpression__Group_1__0 : rule__STXorExpression__Group_1__0__Impl rule__STXorExpression__Group_1__1 ;
    public final void rule__STXorExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6910:1: ( rule__STXorExpression__Group_1__0__Impl rule__STXorExpression__Group_1__1 )
            // InternalSTCoreParser.g:6911:2: rule__STXorExpression__Group_1__0__Impl rule__STXorExpression__Group_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STXorExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STXorExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__Group_1__0"


    // $ANTLR start "rule__STXorExpression__Group_1__0__Impl"
    // InternalSTCoreParser.g:6918:1: rule__STXorExpression__Group_1__0__Impl : ( ( rule__STXorExpression__Group_1_0__0 ) ) ;
    public final void rule__STXorExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6922:1: ( ( ( rule__STXorExpression__Group_1_0__0 ) ) )
            // InternalSTCoreParser.g:6923:1: ( ( rule__STXorExpression__Group_1_0__0 ) )
            {
            // InternalSTCoreParser.g:6923:1: ( ( rule__STXorExpression__Group_1_0__0 ) )
            // InternalSTCoreParser.g:6924:2: ( rule__STXorExpression__Group_1_0__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTXorExpressionAccess().getGroup_1_0()); 
            }
            // InternalSTCoreParser.g:6925:2: ( rule__STXorExpression__Group_1_0__0 )
            // InternalSTCoreParser.g:6925:3: rule__STXorExpression__Group_1_0__0
            {
            pushFollow(FOLLOW_2);
            rule__STXorExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTXorExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__Group_1__0__Impl"


    // $ANTLR start "rule__STXorExpression__Group_1__1"
    // InternalSTCoreParser.g:6933:1: rule__STXorExpression__Group_1__1 : rule__STXorExpression__Group_1__1__Impl ;
    public final void rule__STXorExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6937:1: ( rule__STXorExpression__Group_1__1__Impl )
            // InternalSTCoreParser.g:6938:2: rule__STXorExpression__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STXorExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__Group_1__1"


    // $ANTLR start "rule__STXorExpression__Group_1__1__Impl"
    // InternalSTCoreParser.g:6944:1: rule__STXorExpression__Group_1__1__Impl : ( ( rule__STXorExpression__RightAssignment_1_1 ) ) ;
    public final void rule__STXorExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6948:1: ( ( ( rule__STXorExpression__RightAssignment_1_1 ) ) )
            // InternalSTCoreParser.g:6949:1: ( ( rule__STXorExpression__RightAssignment_1_1 ) )
            {
            // InternalSTCoreParser.g:6949:1: ( ( rule__STXorExpression__RightAssignment_1_1 ) )
            // InternalSTCoreParser.g:6950:2: ( rule__STXorExpression__RightAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTXorExpressionAccess().getRightAssignment_1_1()); 
            }
            // InternalSTCoreParser.g:6951:2: ( rule__STXorExpression__RightAssignment_1_1 )
            // InternalSTCoreParser.g:6951:3: rule__STXorExpression__RightAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STXorExpression__RightAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTXorExpressionAccess().getRightAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__Group_1__1__Impl"


    // $ANTLR start "rule__STXorExpression__Group_1_0__0"
    // InternalSTCoreParser.g:6960:1: rule__STXorExpression__Group_1_0__0 : rule__STXorExpression__Group_1_0__0__Impl rule__STXorExpression__Group_1_0__1 ;
    public final void rule__STXorExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6964:1: ( rule__STXorExpression__Group_1_0__0__Impl rule__STXorExpression__Group_1_0__1 )
            // InternalSTCoreParser.g:6965:2: rule__STXorExpression__Group_1_0__0__Impl rule__STXorExpression__Group_1_0__1
            {
            pushFollow(FOLLOW_44);
            rule__STXorExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STXorExpression__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__Group_1_0__0"


    // $ANTLR start "rule__STXorExpression__Group_1_0__0__Impl"
    // InternalSTCoreParser.g:6972:1: rule__STXorExpression__Group_1_0__0__Impl : ( () ) ;
    public final void rule__STXorExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6976:1: ( ( () ) )
            // InternalSTCoreParser.g:6977:1: ( () )
            {
            // InternalSTCoreParser.g:6977:1: ( () )
            // InternalSTCoreParser.g:6978:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTXorExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }
            // InternalSTCoreParser.g:6979:2: ()
            // InternalSTCoreParser.g:6979:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTXorExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__Group_1_0__0__Impl"


    // $ANTLR start "rule__STXorExpression__Group_1_0__1"
    // InternalSTCoreParser.g:6987:1: rule__STXorExpression__Group_1_0__1 : rule__STXorExpression__Group_1_0__1__Impl ;
    public final void rule__STXorExpression__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:6991:1: ( rule__STXorExpression__Group_1_0__1__Impl )
            // InternalSTCoreParser.g:6992:2: rule__STXorExpression__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STXorExpression__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__Group_1_0__1"


    // $ANTLR start "rule__STXorExpression__Group_1_0__1__Impl"
    // InternalSTCoreParser.g:6998:1: rule__STXorExpression__Group_1_0__1__Impl : ( ( rule__STXorExpression__OpAssignment_1_0_1 ) ) ;
    public final void rule__STXorExpression__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7002:1: ( ( ( rule__STXorExpression__OpAssignment_1_0_1 ) ) )
            // InternalSTCoreParser.g:7003:1: ( ( rule__STXorExpression__OpAssignment_1_0_1 ) )
            {
            // InternalSTCoreParser.g:7003:1: ( ( rule__STXorExpression__OpAssignment_1_0_1 ) )
            // InternalSTCoreParser.g:7004:2: ( rule__STXorExpression__OpAssignment_1_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTXorExpressionAccess().getOpAssignment_1_0_1()); 
            }
            // InternalSTCoreParser.g:7005:2: ( rule__STXorExpression__OpAssignment_1_0_1 )
            // InternalSTCoreParser.g:7005:3: rule__STXorExpression__OpAssignment_1_0_1
            {
            pushFollow(FOLLOW_2);
            rule__STXorExpression__OpAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTXorExpressionAccess().getOpAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__Group_1_0__1__Impl"


    // $ANTLR start "rule__STAndExpression__Group__0"
    // InternalSTCoreParser.g:7014:1: rule__STAndExpression__Group__0 : rule__STAndExpression__Group__0__Impl rule__STAndExpression__Group__1 ;
    public final void rule__STAndExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7018:1: ( rule__STAndExpression__Group__0__Impl rule__STAndExpression__Group__1 )
            // InternalSTCoreParser.g:7019:2: rule__STAndExpression__Group__0__Impl rule__STAndExpression__Group__1
            {
            pushFollow(FOLLOW_46);
            rule__STAndExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAndExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__Group__0"


    // $ANTLR start "rule__STAndExpression__Group__0__Impl"
    // InternalSTCoreParser.g:7026:1: rule__STAndExpression__Group__0__Impl : ( ruleSTEqualityExpression ) ;
    public final void rule__STAndExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7030:1: ( ( ruleSTEqualityExpression ) )
            // InternalSTCoreParser.g:7031:1: ( ruleSTEqualityExpression )
            {
            // InternalSTCoreParser.g:7031:1: ( ruleSTEqualityExpression )
            // InternalSTCoreParser.g:7032:2: ruleSTEqualityExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAndExpressionAccess().getSTEqualityExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTEqualityExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAndExpressionAccess().getSTEqualityExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__Group__0__Impl"


    // $ANTLR start "rule__STAndExpression__Group__1"
    // InternalSTCoreParser.g:7041:1: rule__STAndExpression__Group__1 : rule__STAndExpression__Group__1__Impl ;
    public final void rule__STAndExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7045:1: ( rule__STAndExpression__Group__1__Impl )
            // InternalSTCoreParser.g:7046:2: rule__STAndExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STAndExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__Group__1"


    // $ANTLR start "rule__STAndExpression__Group__1__Impl"
    // InternalSTCoreParser.g:7052:1: rule__STAndExpression__Group__1__Impl : ( ( rule__STAndExpression__Group_1__0 )* ) ;
    public final void rule__STAndExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7056:1: ( ( ( rule__STAndExpression__Group_1__0 )* ) )
            // InternalSTCoreParser.g:7057:1: ( ( rule__STAndExpression__Group_1__0 )* )
            {
            // InternalSTCoreParser.g:7057:1: ( ( rule__STAndExpression__Group_1__0 )* )
            // InternalSTCoreParser.g:7058:2: ( rule__STAndExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAndExpressionAccess().getGroup_1()); 
            }
            // InternalSTCoreParser.g:7059:2: ( rule__STAndExpression__Group_1__0 )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==AND||LA66_0==Ampersand) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // InternalSTCoreParser.g:7059:3: rule__STAndExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_47);
            	    rule__STAndExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAndExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__Group__1__Impl"


    // $ANTLR start "rule__STAndExpression__Group_1__0"
    // InternalSTCoreParser.g:7068:1: rule__STAndExpression__Group_1__0 : rule__STAndExpression__Group_1__0__Impl rule__STAndExpression__Group_1__1 ;
    public final void rule__STAndExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7072:1: ( rule__STAndExpression__Group_1__0__Impl rule__STAndExpression__Group_1__1 )
            // InternalSTCoreParser.g:7073:2: rule__STAndExpression__Group_1__0__Impl rule__STAndExpression__Group_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STAndExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAndExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__Group_1__0"


    // $ANTLR start "rule__STAndExpression__Group_1__0__Impl"
    // InternalSTCoreParser.g:7080:1: rule__STAndExpression__Group_1__0__Impl : ( ( rule__STAndExpression__Group_1_0__0 ) ) ;
    public final void rule__STAndExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7084:1: ( ( ( rule__STAndExpression__Group_1_0__0 ) ) )
            // InternalSTCoreParser.g:7085:1: ( ( rule__STAndExpression__Group_1_0__0 ) )
            {
            // InternalSTCoreParser.g:7085:1: ( ( rule__STAndExpression__Group_1_0__0 ) )
            // InternalSTCoreParser.g:7086:2: ( rule__STAndExpression__Group_1_0__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAndExpressionAccess().getGroup_1_0()); 
            }
            // InternalSTCoreParser.g:7087:2: ( rule__STAndExpression__Group_1_0__0 )
            // InternalSTCoreParser.g:7087:3: rule__STAndExpression__Group_1_0__0
            {
            pushFollow(FOLLOW_2);
            rule__STAndExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAndExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__Group_1__0__Impl"


    // $ANTLR start "rule__STAndExpression__Group_1__1"
    // InternalSTCoreParser.g:7095:1: rule__STAndExpression__Group_1__1 : rule__STAndExpression__Group_1__1__Impl ;
    public final void rule__STAndExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7099:1: ( rule__STAndExpression__Group_1__1__Impl )
            // InternalSTCoreParser.g:7100:2: rule__STAndExpression__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STAndExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__Group_1__1"


    // $ANTLR start "rule__STAndExpression__Group_1__1__Impl"
    // InternalSTCoreParser.g:7106:1: rule__STAndExpression__Group_1__1__Impl : ( ( rule__STAndExpression__RightAssignment_1_1 ) ) ;
    public final void rule__STAndExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7110:1: ( ( ( rule__STAndExpression__RightAssignment_1_1 ) ) )
            // InternalSTCoreParser.g:7111:1: ( ( rule__STAndExpression__RightAssignment_1_1 ) )
            {
            // InternalSTCoreParser.g:7111:1: ( ( rule__STAndExpression__RightAssignment_1_1 ) )
            // InternalSTCoreParser.g:7112:2: ( rule__STAndExpression__RightAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAndExpressionAccess().getRightAssignment_1_1()); 
            }
            // InternalSTCoreParser.g:7113:2: ( rule__STAndExpression__RightAssignment_1_1 )
            // InternalSTCoreParser.g:7113:3: rule__STAndExpression__RightAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STAndExpression__RightAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAndExpressionAccess().getRightAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__Group_1__1__Impl"


    // $ANTLR start "rule__STAndExpression__Group_1_0__0"
    // InternalSTCoreParser.g:7122:1: rule__STAndExpression__Group_1_0__0 : rule__STAndExpression__Group_1_0__0__Impl rule__STAndExpression__Group_1_0__1 ;
    public final void rule__STAndExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7126:1: ( rule__STAndExpression__Group_1_0__0__Impl rule__STAndExpression__Group_1_0__1 )
            // InternalSTCoreParser.g:7127:2: rule__STAndExpression__Group_1_0__0__Impl rule__STAndExpression__Group_1_0__1
            {
            pushFollow(FOLLOW_46);
            rule__STAndExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAndExpression__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__Group_1_0__0"


    // $ANTLR start "rule__STAndExpression__Group_1_0__0__Impl"
    // InternalSTCoreParser.g:7134:1: rule__STAndExpression__Group_1_0__0__Impl : ( () ) ;
    public final void rule__STAndExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7138:1: ( ( () ) )
            // InternalSTCoreParser.g:7139:1: ( () )
            {
            // InternalSTCoreParser.g:7139:1: ( () )
            // InternalSTCoreParser.g:7140:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAndExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }
            // InternalSTCoreParser.g:7141:2: ()
            // InternalSTCoreParser.g:7141:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAndExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__Group_1_0__0__Impl"


    // $ANTLR start "rule__STAndExpression__Group_1_0__1"
    // InternalSTCoreParser.g:7149:1: rule__STAndExpression__Group_1_0__1 : rule__STAndExpression__Group_1_0__1__Impl ;
    public final void rule__STAndExpression__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7153:1: ( rule__STAndExpression__Group_1_0__1__Impl )
            // InternalSTCoreParser.g:7154:2: rule__STAndExpression__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STAndExpression__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__Group_1_0__1"


    // $ANTLR start "rule__STAndExpression__Group_1_0__1__Impl"
    // InternalSTCoreParser.g:7160:1: rule__STAndExpression__Group_1_0__1__Impl : ( ( rule__STAndExpression__OpAssignment_1_0_1 ) ) ;
    public final void rule__STAndExpression__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7164:1: ( ( ( rule__STAndExpression__OpAssignment_1_0_1 ) ) )
            // InternalSTCoreParser.g:7165:1: ( ( rule__STAndExpression__OpAssignment_1_0_1 ) )
            {
            // InternalSTCoreParser.g:7165:1: ( ( rule__STAndExpression__OpAssignment_1_0_1 ) )
            // InternalSTCoreParser.g:7166:2: ( rule__STAndExpression__OpAssignment_1_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAndExpressionAccess().getOpAssignment_1_0_1()); 
            }
            // InternalSTCoreParser.g:7167:2: ( rule__STAndExpression__OpAssignment_1_0_1 )
            // InternalSTCoreParser.g:7167:3: rule__STAndExpression__OpAssignment_1_0_1
            {
            pushFollow(FOLLOW_2);
            rule__STAndExpression__OpAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAndExpressionAccess().getOpAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__Group_1_0__1__Impl"


    // $ANTLR start "rule__STEqualityExpression__Group__0"
    // InternalSTCoreParser.g:7176:1: rule__STEqualityExpression__Group__0 : rule__STEqualityExpression__Group__0__Impl rule__STEqualityExpression__Group__1 ;
    public final void rule__STEqualityExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7180:1: ( rule__STEqualityExpression__Group__0__Impl rule__STEqualityExpression__Group__1 )
            // InternalSTCoreParser.g:7181:2: rule__STEqualityExpression__Group__0__Impl rule__STEqualityExpression__Group__1
            {
            pushFollow(FOLLOW_48);
            rule__STEqualityExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STEqualityExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__Group__0"


    // $ANTLR start "rule__STEqualityExpression__Group__0__Impl"
    // InternalSTCoreParser.g:7188:1: rule__STEqualityExpression__Group__0__Impl : ( ruleSTComparisonExpression ) ;
    public final void rule__STEqualityExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7192:1: ( ( ruleSTComparisonExpression ) )
            // InternalSTCoreParser.g:7193:1: ( ruleSTComparisonExpression )
            {
            // InternalSTCoreParser.g:7193:1: ( ruleSTComparisonExpression )
            // InternalSTCoreParser.g:7194:2: ruleSTComparisonExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTEqualityExpressionAccess().getSTComparisonExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTComparisonExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTEqualityExpressionAccess().getSTComparisonExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__Group__0__Impl"


    // $ANTLR start "rule__STEqualityExpression__Group__1"
    // InternalSTCoreParser.g:7203:1: rule__STEqualityExpression__Group__1 : rule__STEqualityExpression__Group__1__Impl ;
    public final void rule__STEqualityExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7207:1: ( rule__STEqualityExpression__Group__1__Impl )
            // InternalSTCoreParser.g:7208:2: rule__STEqualityExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STEqualityExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__Group__1"


    // $ANTLR start "rule__STEqualityExpression__Group__1__Impl"
    // InternalSTCoreParser.g:7214:1: rule__STEqualityExpression__Group__1__Impl : ( ( rule__STEqualityExpression__Group_1__0 )* ) ;
    public final void rule__STEqualityExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7218:1: ( ( ( rule__STEqualityExpression__Group_1__0 )* ) )
            // InternalSTCoreParser.g:7219:1: ( ( rule__STEqualityExpression__Group_1__0 )* )
            {
            // InternalSTCoreParser.g:7219:1: ( ( rule__STEqualityExpression__Group_1__0 )* )
            // InternalSTCoreParser.g:7220:2: ( rule__STEqualityExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTEqualityExpressionAccess().getGroup_1()); 
            }
            // InternalSTCoreParser.g:7221:2: ( rule__STEqualityExpression__Group_1__0 )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==LessThanSignGreaterThanSign||LA67_0==EqualsSign) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // InternalSTCoreParser.g:7221:3: rule__STEqualityExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_49);
            	    rule__STEqualityExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTEqualityExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__Group__1__Impl"


    // $ANTLR start "rule__STEqualityExpression__Group_1__0"
    // InternalSTCoreParser.g:7230:1: rule__STEqualityExpression__Group_1__0 : rule__STEqualityExpression__Group_1__0__Impl rule__STEqualityExpression__Group_1__1 ;
    public final void rule__STEqualityExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7234:1: ( rule__STEqualityExpression__Group_1__0__Impl rule__STEqualityExpression__Group_1__1 )
            // InternalSTCoreParser.g:7235:2: rule__STEqualityExpression__Group_1__0__Impl rule__STEqualityExpression__Group_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STEqualityExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STEqualityExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__Group_1__0"


    // $ANTLR start "rule__STEqualityExpression__Group_1__0__Impl"
    // InternalSTCoreParser.g:7242:1: rule__STEqualityExpression__Group_1__0__Impl : ( ( rule__STEqualityExpression__Group_1_0__0 ) ) ;
    public final void rule__STEqualityExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7246:1: ( ( ( rule__STEqualityExpression__Group_1_0__0 ) ) )
            // InternalSTCoreParser.g:7247:1: ( ( rule__STEqualityExpression__Group_1_0__0 ) )
            {
            // InternalSTCoreParser.g:7247:1: ( ( rule__STEqualityExpression__Group_1_0__0 ) )
            // InternalSTCoreParser.g:7248:2: ( rule__STEqualityExpression__Group_1_0__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTEqualityExpressionAccess().getGroup_1_0()); 
            }
            // InternalSTCoreParser.g:7249:2: ( rule__STEqualityExpression__Group_1_0__0 )
            // InternalSTCoreParser.g:7249:3: rule__STEqualityExpression__Group_1_0__0
            {
            pushFollow(FOLLOW_2);
            rule__STEqualityExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTEqualityExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__Group_1__0__Impl"


    // $ANTLR start "rule__STEqualityExpression__Group_1__1"
    // InternalSTCoreParser.g:7257:1: rule__STEqualityExpression__Group_1__1 : rule__STEqualityExpression__Group_1__1__Impl ;
    public final void rule__STEqualityExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7261:1: ( rule__STEqualityExpression__Group_1__1__Impl )
            // InternalSTCoreParser.g:7262:2: rule__STEqualityExpression__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STEqualityExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__Group_1__1"


    // $ANTLR start "rule__STEqualityExpression__Group_1__1__Impl"
    // InternalSTCoreParser.g:7268:1: rule__STEqualityExpression__Group_1__1__Impl : ( ( rule__STEqualityExpression__RightAssignment_1_1 ) ) ;
    public final void rule__STEqualityExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7272:1: ( ( ( rule__STEqualityExpression__RightAssignment_1_1 ) ) )
            // InternalSTCoreParser.g:7273:1: ( ( rule__STEqualityExpression__RightAssignment_1_1 ) )
            {
            // InternalSTCoreParser.g:7273:1: ( ( rule__STEqualityExpression__RightAssignment_1_1 ) )
            // InternalSTCoreParser.g:7274:2: ( rule__STEqualityExpression__RightAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTEqualityExpressionAccess().getRightAssignment_1_1()); 
            }
            // InternalSTCoreParser.g:7275:2: ( rule__STEqualityExpression__RightAssignment_1_1 )
            // InternalSTCoreParser.g:7275:3: rule__STEqualityExpression__RightAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STEqualityExpression__RightAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTEqualityExpressionAccess().getRightAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__Group_1__1__Impl"


    // $ANTLR start "rule__STEqualityExpression__Group_1_0__0"
    // InternalSTCoreParser.g:7284:1: rule__STEqualityExpression__Group_1_0__0 : rule__STEqualityExpression__Group_1_0__0__Impl rule__STEqualityExpression__Group_1_0__1 ;
    public final void rule__STEqualityExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7288:1: ( rule__STEqualityExpression__Group_1_0__0__Impl rule__STEqualityExpression__Group_1_0__1 )
            // InternalSTCoreParser.g:7289:2: rule__STEqualityExpression__Group_1_0__0__Impl rule__STEqualityExpression__Group_1_0__1
            {
            pushFollow(FOLLOW_48);
            rule__STEqualityExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STEqualityExpression__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__Group_1_0__0"


    // $ANTLR start "rule__STEqualityExpression__Group_1_0__0__Impl"
    // InternalSTCoreParser.g:7296:1: rule__STEqualityExpression__Group_1_0__0__Impl : ( () ) ;
    public final void rule__STEqualityExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7300:1: ( ( () ) )
            // InternalSTCoreParser.g:7301:1: ( () )
            {
            // InternalSTCoreParser.g:7301:1: ( () )
            // InternalSTCoreParser.g:7302:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTEqualityExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }
            // InternalSTCoreParser.g:7303:2: ()
            // InternalSTCoreParser.g:7303:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTEqualityExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__Group_1_0__0__Impl"


    // $ANTLR start "rule__STEqualityExpression__Group_1_0__1"
    // InternalSTCoreParser.g:7311:1: rule__STEqualityExpression__Group_1_0__1 : rule__STEqualityExpression__Group_1_0__1__Impl ;
    public final void rule__STEqualityExpression__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7315:1: ( rule__STEqualityExpression__Group_1_0__1__Impl )
            // InternalSTCoreParser.g:7316:2: rule__STEqualityExpression__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STEqualityExpression__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__Group_1_0__1"


    // $ANTLR start "rule__STEqualityExpression__Group_1_0__1__Impl"
    // InternalSTCoreParser.g:7322:1: rule__STEqualityExpression__Group_1_0__1__Impl : ( ( rule__STEqualityExpression__OpAssignment_1_0_1 ) ) ;
    public final void rule__STEqualityExpression__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7326:1: ( ( ( rule__STEqualityExpression__OpAssignment_1_0_1 ) ) )
            // InternalSTCoreParser.g:7327:1: ( ( rule__STEqualityExpression__OpAssignment_1_0_1 ) )
            {
            // InternalSTCoreParser.g:7327:1: ( ( rule__STEqualityExpression__OpAssignment_1_0_1 ) )
            // InternalSTCoreParser.g:7328:2: ( rule__STEqualityExpression__OpAssignment_1_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTEqualityExpressionAccess().getOpAssignment_1_0_1()); 
            }
            // InternalSTCoreParser.g:7329:2: ( rule__STEqualityExpression__OpAssignment_1_0_1 )
            // InternalSTCoreParser.g:7329:3: rule__STEqualityExpression__OpAssignment_1_0_1
            {
            pushFollow(FOLLOW_2);
            rule__STEqualityExpression__OpAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTEqualityExpressionAccess().getOpAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__Group_1_0__1__Impl"


    // $ANTLR start "rule__STComparisonExpression__Group__0"
    // InternalSTCoreParser.g:7338:1: rule__STComparisonExpression__Group__0 : rule__STComparisonExpression__Group__0__Impl rule__STComparisonExpression__Group__1 ;
    public final void rule__STComparisonExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7342:1: ( rule__STComparisonExpression__Group__0__Impl rule__STComparisonExpression__Group__1 )
            // InternalSTCoreParser.g:7343:2: rule__STComparisonExpression__Group__0__Impl rule__STComparisonExpression__Group__1
            {
            pushFollow(FOLLOW_50);
            rule__STComparisonExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STComparisonExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__Group__0"


    // $ANTLR start "rule__STComparisonExpression__Group__0__Impl"
    // InternalSTCoreParser.g:7350:1: rule__STComparisonExpression__Group__0__Impl : ( ruleSTAddSubExpression ) ;
    public final void rule__STComparisonExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7354:1: ( ( ruleSTAddSubExpression ) )
            // InternalSTCoreParser.g:7355:1: ( ruleSTAddSubExpression )
            {
            // InternalSTCoreParser.g:7355:1: ( ruleSTAddSubExpression )
            // InternalSTCoreParser.g:7356:2: ruleSTAddSubExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTComparisonExpressionAccess().getSTAddSubExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTAddSubExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTComparisonExpressionAccess().getSTAddSubExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__Group__0__Impl"


    // $ANTLR start "rule__STComparisonExpression__Group__1"
    // InternalSTCoreParser.g:7365:1: rule__STComparisonExpression__Group__1 : rule__STComparisonExpression__Group__1__Impl ;
    public final void rule__STComparisonExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7369:1: ( rule__STComparisonExpression__Group__1__Impl )
            // InternalSTCoreParser.g:7370:2: rule__STComparisonExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STComparisonExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__Group__1"


    // $ANTLR start "rule__STComparisonExpression__Group__1__Impl"
    // InternalSTCoreParser.g:7376:1: rule__STComparisonExpression__Group__1__Impl : ( ( rule__STComparisonExpression__Group_1__0 )* ) ;
    public final void rule__STComparisonExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7380:1: ( ( ( rule__STComparisonExpression__Group_1__0 )* ) )
            // InternalSTCoreParser.g:7381:1: ( ( rule__STComparisonExpression__Group_1__0 )* )
            {
            // InternalSTCoreParser.g:7381:1: ( ( rule__STComparisonExpression__Group_1__0 )* )
            // InternalSTCoreParser.g:7382:2: ( rule__STComparisonExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTComparisonExpressionAccess().getGroup_1()); 
            }
            // InternalSTCoreParser.g:7383:2: ( rule__STComparisonExpression__Group_1__0 )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==LessThanSignEqualsSign||LA68_0==GreaterThanSignEqualsSign||LA68_0==LessThanSign||LA68_0==GreaterThanSign) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // InternalSTCoreParser.g:7383:3: rule__STComparisonExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_51);
            	    rule__STComparisonExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTComparisonExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__Group__1__Impl"


    // $ANTLR start "rule__STComparisonExpression__Group_1__0"
    // InternalSTCoreParser.g:7392:1: rule__STComparisonExpression__Group_1__0 : rule__STComparisonExpression__Group_1__0__Impl rule__STComparisonExpression__Group_1__1 ;
    public final void rule__STComparisonExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7396:1: ( rule__STComparisonExpression__Group_1__0__Impl rule__STComparisonExpression__Group_1__1 )
            // InternalSTCoreParser.g:7397:2: rule__STComparisonExpression__Group_1__0__Impl rule__STComparisonExpression__Group_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STComparisonExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STComparisonExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__Group_1__0"


    // $ANTLR start "rule__STComparisonExpression__Group_1__0__Impl"
    // InternalSTCoreParser.g:7404:1: rule__STComparisonExpression__Group_1__0__Impl : ( ( rule__STComparisonExpression__Group_1_0__0 ) ) ;
    public final void rule__STComparisonExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7408:1: ( ( ( rule__STComparisonExpression__Group_1_0__0 ) ) )
            // InternalSTCoreParser.g:7409:1: ( ( rule__STComparisonExpression__Group_1_0__0 ) )
            {
            // InternalSTCoreParser.g:7409:1: ( ( rule__STComparisonExpression__Group_1_0__0 ) )
            // InternalSTCoreParser.g:7410:2: ( rule__STComparisonExpression__Group_1_0__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTComparisonExpressionAccess().getGroup_1_0()); 
            }
            // InternalSTCoreParser.g:7411:2: ( rule__STComparisonExpression__Group_1_0__0 )
            // InternalSTCoreParser.g:7411:3: rule__STComparisonExpression__Group_1_0__0
            {
            pushFollow(FOLLOW_2);
            rule__STComparisonExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTComparisonExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__Group_1__0__Impl"


    // $ANTLR start "rule__STComparisonExpression__Group_1__1"
    // InternalSTCoreParser.g:7419:1: rule__STComparisonExpression__Group_1__1 : rule__STComparisonExpression__Group_1__1__Impl ;
    public final void rule__STComparisonExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7423:1: ( rule__STComparisonExpression__Group_1__1__Impl )
            // InternalSTCoreParser.g:7424:2: rule__STComparisonExpression__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STComparisonExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__Group_1__1"


    // $ANTLR start "rule__STComparisonExpression__Group_1__1__Impl"
    // InternalSTCoreParser.g:7430:1: rule__STComparisonExpression__Group_1__1__Impl : ( ( rule__STComparisonExpression__RightAssignment_1_1 ) ) ;
    public final void rule__STComparisonExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7434:1: ( ( ( rule__STComparisonExpression__RightAssignment_1_1 ) ) )
            // InternalSTCoreParser.g:7435:1: ( ( rule__STComparisonExpression__RightAssignment_1_1 ) )
            {
            // InternalSTCoreParser.g:7435:1: ( ( rule__STComparisonExpression__RightAssignment_1_1 ) )
            // InternalSTCoreParser.g:7436:2: ( rule__STComparisonExpression__RightAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTComparisonExpressionAccess().getRightAssignment_1_1()); 
            }
            // InternalSTCoreParser.g:7437:2: ( rule__STComparisonExpression__RightAssignment_1_1 )
            // InternalSTCoreParser.g:7437:3: rule__STComparisonExpression__RightAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STComparisonExpression__RightAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTComparisonExpressionAccess().getRightAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__Group_1__1__Impl"


    // $ANTLR start "rule__STComparisonExpression__Group_1_0__0"
    // InternalSTCoreParser.g:7446:1: rule__STComparisonExpression__Group_1_0__0 : rule__STComparisonExpression__Group_1_0__0__Impl rule__STComparisonExpression__Group_1_0__1 ;
    public final void rule__STComparisonExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7450:1: ( rule__STComparisonExpression__Group_1_0__0__Impl rule__STComparisonExpression__Group_1_0__1 )
            // InternalSTCoreParser.g:7451:2: rule__STComparisonExpression__Group_1_0__0__Impl rule__STComparisonExpression__Group_1_0__1
            {
            pushFollow(FOLLOW_50);
            rule__STComparisonExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STComparisonExpression__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__Group_1_0__0"


    // $ANTLR start "rule__STComparisonExpression__Group_1_0__0__Impl"
    // InternalSTCoreParser.g:7458:1: rule__STComparisonExpression__Group_1_0__0__Impl : ( () ) ;
    public final void rule__STComparisonExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7462:1: ( ( () ) )
            // InternalSTCoreParser.g:7463:1: ( () )
            {
            // InternalSTCoreParser.g:7463:1: ( () )
            // InternalSTCoreParser.g:7464:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTComparisonExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }
            // InternalSTCoreParser.g:7465:2: ()
            // InternalSTCoreParser.g:7465:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTComparisonExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__Group_1_0__0__Impl"


    // $ANTLR start "rule__STComparisonExpression__Group_1_0__1"
    // InternalSTCoreParser.g:7473:1: rule__STComparisonExpression__Group_1_0__1 : rule__STComparisonExpression__Group_1_0__1__Impl ;
    public final void rule__STComparisonExpression__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7477:1: ( rule__STComparisonExpression__Group_1_0__1__Impl )
            // InternalSTCoreParser.g:7478:2: rule__STComparisonExpression__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STComparisonExpression__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__Group_1_0__1"


    // $ANTLR start "rule__STComparisonExpression__Group_1_0__1__Impl"
    // InternalSTCoreParser.g:7484:1: rule__STComparisonExpression__Group_1_0__1__Impl : ( ( rule__STComparisonExpression__OpAssignment_1_0_1 ) ) ;
    public final void rule__STComparisonExpression__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7488:1: ( ( ( rule__STComparisonExpression__OpAssignment_1_0_1 ) ) )
            // InternalSTCoreParser.g:7489:1: ( ( rule__STComparisonExpression__OpAssignment_1_0_1 ) )
            {
            // InternalSTCoreParser.g:7489:1: ( ( rule__STComparisonExpression__OpAssignment_1_0_1 ) )
            // InternalSTCoreParser.g:7490:2: ( rule__STComparisonExpression__OpAssignment_1_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTComparisonExpressionAccess().getOpAssignment_1_0_1()); 
            }
            // InternalSTCoreParser.g:7491:2: ( rule__STComparisonExpression__OpAssignment_1_0_1 )
            // InternalSTCoreParser.g:7491:3: rule__STComparisonExpression__OpAssignment_1_0_1
            {
            pushFollow(FOLLOW_2);
            rule__STComparisonExpression__OpAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTComparisonExpressionAccess().getOpAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__Group_1_0__1__Impl"


    // $ANTLR start "rule__STAddSubExpression__Group__0"
    // InternalSTCoreParser.g:7500:1: rule__STAddSubExpression__Group__0 : rule__STAddSubExpression__Group__0__Impl rule__STAddSubExpression__Group__1 ;
    public final void rule__STAddSubExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7504:1: ( rule__STAddSubExpression__Group__0__Impl rule__STAddSubExpression__Group__1 )
            // InternalSTCoreParser.g:7505:2: rule__STAddSubExpression__Group__0__Impl rule__STAddSubExpression__Group__1
            {
            pushFollow(FOLLOW_52);
            rule__STAddSubExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAddSubExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__Group__0"


    // $ANTLR start "rule__STAddSubExpression__Group__0__Impl"
    // InternalSTCoreParser.g:7512:1: rule__STAddSubExpression__Group__0__Impl : ( ruleSTMulDivModExpression ) ;
    public final void rule__STAddSubExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7516:1: ( ( ruleSTMulDivModExpression ) )
            // InternalSTCoreParser.g:7517:1: ( ruleSTMulDivModExpression )
            {
            // InternalSTCoreParser.g:7517:1: ( ruleSTMulDivModExpression )
            // InternalSTCoreParser.g:7518:2: ruleSTMulDivModExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAddSubExpressionAccess().getSTMulDivModExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTMulDivModExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAddSubExpressionAccess().getSTMulDivModExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__Group__0__Impl"


    // $ANTLR start "rule__STAddSubExpression__Group__1"
    // InternalSTCoreParser.g:7527:1: rule__STAddSubExpression__Group__1 : rule__STAddSubExpression__Group__1__Impl ;
    public final void rule__STAddSubExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7531:1: ( rule__STAddSubExpression__Group__1__Impl )
            // InternalSTCoreParser.g:7532:2: rule__STAddSubExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STAddSubExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__Group__1"


    // $ANTLR start "rule__STAddSubExpression__Group__1__Impl"
    // InternalSTCoreParser.g:7538:1: rule__STAddSubExpression__Group__1__Impl : ( ( rule__STAddSubExpression__Group_1__0 )* ) ;
    public final void rule__STAddSubExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7542:1: ( ( ( rule__STAddSubExpression__Group_1__0 )* ) )
            // InternalSTCoreParser.g:7543:1: ( ( rule__STAddSubExpression__Group_1__0 )* )
            {
            // InternalSTCoreParser.g:7543:1: ( ( rule__STAddSubExpression__Group_1__0 )* )
            // InternalSTCoreParser.g:7544:2: ( rule__STAddSubExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAddSubExpressionAccess().getGroup_1()); 
            }
            // InternalSTCoreParser.g:7545:2: ( rule__STAddSubExpression__Group_1__0 )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==PlusSign||LA69_0==HyphenMinus) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // InternalSTCoreParser.g:7545:3: rule__STAddSubExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_53);
            	    rule__STAddSubExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAddSubExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__Group__1__Impl"


    // $ANTLR start "rule__STAddSubExpression__Group_1__0"
    // InternalSTCoreParser.g:7554:1: rule__STAddSubExpression__Group_1__0 : rule__STAddSubExpression__Group_1__0__Impl rule__STAddSubExpression__Group_1__1 ;
    public final void rule__STAddSubExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7558:1: ( rule__STAddSubExpression__Group_1__0__Impl rule__STAddSubExpression__Group_1__1 )
            // InternalSTCoreParser.g:7559:2: rule__STAddSubExpression__Group_1__0__Impl rule__STAddSubExpression__Group_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STAddSubExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAddSubExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__Group_1__0"


    // $ANTLR start "rule__STAddSubExpression__Group_1__0__Impl"
    // InternalSTCoreParser.g:7566:1: rule__STAddSubExpression__Group_1__0__Impl : ( ( rule__STAddSubExpression__Group_1_0__0 ) ) ;
    public final void rule__STAddSubExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7570:1: ( ( ( rule__STAddSubExpression__Group_1_0__0 ) ) )
            // InternalSTCoreParser.g:7571:1: ( ( rule__STAddSubExpression__Group_1_0__0 ) )
            {
            // InternalSTCoreParser.g:7571:1: ( ( rule__STAddSubExpression__Group_1_0__0 ) )
            // InternalSTCoreParser.g:7572:2: ( rule__STAddSubExpression__Group_1_0__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAddSubExpressionAccess().getGroup_1_0()); 
            }
            // InternalSTCoreParser.g:7573:2: ( rule__STAddSubExpression__Group_1_0__0 )
            // InternalSTCoreParser.g:7573:3: rule__STAddSubExpression__Group_1_0__0
            {
            pushFollow(FOLLOW_2);
            rule__STAddSubExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAddSubExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__Group_1__0__Impl"


    // $ANTLR start "rule__STAddSubExpression__Group_1__1"
    // InternalSTCoreParser.g:7581:1: rule__STAddSubExpression__Group_1__1 : rule__STAddSubExpression__Group_1__1__Impl ;
    public final void rule__STAddSubExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7585:1: ( rule__STAddSubExpression__Group_1__1__Impl )
            // InternalSTCoreParser.g:7586:2: rule__STAddSubExpression__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STAddSubExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__Group_1__1"


    // $ANTLR start "rule__STAddSubExpression__Group_1__1__Impl"
    // InternalSTCoreParser.g:7592:1: rule__STAddSubExpression__Group_1__1__Impl : ( ( rule__STAddSubExpression__RightAssignment_1_1 ) ) ;
    public final void rule__STAddSubExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7596:1: ( ( ( rule__STAddSubExpression__RightAssignment_1_1 ) ) )
            // InternalSTCoreParser.g:7597:1: ( ( rule__STAddSubExpression__RightAssignment_1_1 ) )
            {
            // InternalSTCoreParser.g:7597:1: ( ( rule__STAddSubExpression__RightAssignment_1_1 ) )
            // InternalSTCoreParser.g:7598:2: ( rule__STAddSubExpression__RightAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAddSubExpressionAccess().getRightAssignment_1_1()); 
            }
            // InternalSTCoreParser.g:7599:2: ( rule__STAddSubExpression__RightAssignment_1_1 )
            // InternalSTCoreParser.g:7599:3: rule__STAddSubExpression__RightAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STAddSubExpression__RightAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAddSubExpressionAccess().getRightAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__Group_1__1__Impl"


    // $ANTLR start "rule__STAddSubExpression__Group_1_0__0"
    // InternalSTCoreParser.g:7608:1: rule__STAddSubExpression__Group_1_0__0 : rule__STAddSubExpression__Group_1_0__0__Impl rule__STAddSubExpression__Group_1_0__1 ;
    public final void rule__STAddSubExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7612:1: ( rule__STAddSubExpression__Group_1_0__0__Impl rule__STAddSubExpression__Group_1_0__1 )
            // InternalSTCoreParser.g:7613:2: rule__STAddSubExpression__Group_1_0__0__Impl rule__STAddSubExpression__Group_1_0__1
            {
            pushFollow(FOLLOW_52);
            rule__STAddSubExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAddSubExpression__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__Group_1_0__0"


    // $ANTLR start "rule__STAddSubExpression__Group_1_0__0__Impl"
    // InternalSTCoreParser.g:7620:1: rule__STAddSubExpression__Group_1_0__0__Impl : ( () ) ;
    public final void rule__STAddSubExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7624:1: ( ( () ) )
            // InternalSTCoreParser.g:7625:1: ( () )
            {
            // InternalSTCoreParser.g:7625:1: ( () )
            // InternalSTCoreParser.g:7626:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAddSubExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }
            // InternalSTCoreParser.g:7627:2: ()
            // InternalSTCoreParser.g:7627:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAddSubExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__Group_1_0__0__Impl"


    // $ANTLR start "rule__STAddSubExpression__Group_1_0__1"
    // InternalSTCoreParser.g:7635:1: rule__STAddSubExpression__Group_1_0__1 : rule__STAddSubExpression__Group_1_0__1__Impl ;
    public final void rule__STAddSubExpression__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7639:1: ( rule__STAddSubExpression__Group_1_0__1__Impl )
            // InternalSTCoreParser.g:7640:2: rule__STAddSubExpression__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STAddSubExpression__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__Group_1_0__1"


    // $ANTLR start "rule__STAddSubExpression__Group_1_0__1__Impl"
    // InternalSTCoreParser.g:7646:1: rule__STAddSubExpression__Group_1_0__1__Impl : ( ( rule__STAddSubExpression__OpAssignment_1_0_1 ) ) ;
    public final void rule__STAddSubExpression__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7650:1: ( ( ( rule__STAddSubExpression__OpAssignment_1_0_1 ) ) )
            // InternalSTCoreParser.g:7651:1: ( ( rule__STAddSubExpression__OpAssignment_1_0_1 ) )
            {
            // InternalSTCoreParser.g:7651:1: ( ( rule__STAddSubExpression__OpAssignment_1_0_1 ) )
            // InternalSTCoreParser.g:7652:2: ( rule__STAddSubExpression__OpAssignment_1_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAddSubExpressionAccess().getOpAssignment_1_0_1()); 
            }
            // InternalSTCoreParser.g:7653:2: ( rule__STAddSubExpression__OpAssignment_1_0_1 )
            // InternalSTCoreParser.g:7653:3: rule__STAddSubExpression__OpAssignment_1_0_1
            {
            pushFollow(FOLLOW_2);
            rule__STAddSubExpression__OpAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAddSubExpressionAccess().getOpAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__Group_1_0__1__Impl"


    // $ANTLR start "rule__STMulDivModExpression__Group__0"
    // InternalSTCoreParser.g:7662:1: rule__STMulDivModExpression__Group__0 : rule__STMulDivModExpression__Group__0__Impl rule__STMulDivModExpression__Group__1 ;
    public final void rule__STMulDivModExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7666:1: ( rule__STMulDivModExpression__Group__0__Impl rule__STMulDivModExpression__Group__1 )
            // InternalSTCoreParser.g:7667:2: rule__STMulDivModExpression__Group__0__Impl rule__STMulDivModExpression__Group__1
            {
            pushFollow(FOLLOW_54);
            rule__STMulDivModExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STMulDivModExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__Group__0"


    // $ANTLR start "rule__STMulDivModExpression__Group__0__Impl"
    // InternalSTCoreParser.g:7674:1: rule__STMulDivModExpression__Group__0__Impl : ( ruleSTPowerExpression ) ;
    public final void rule__STMulDivModExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7678:1: ( ( ruleSTPowerExpression ) )
            // InternalSTCoreParser.g:7679:1: ( ruleSTPowerExpression )
            {
            // InternalSTCoreParser.g:7679:1: ( ruleSTPowerExpression )
            // InternalSTCoreParser.g:7680:2: ruleSTPowerExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMulDivModExpressionAccess().getSTPowerExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTPowerExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMulDivModExpressionAccess().getSTPowerExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__Group__0__Impl"


    // $ANTLR start "rule__STMulDivModExpression__Group__1"
    // InternalSTCoreParser.g:7689:1: rule__STMulDivModExpression__Group__1 : rule__STMulDivModExpression__Group__1__Impl ;
    public final void rule__STMulDivModExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7693:1: ( rule__STMulDivModExpression__Group__1__Impl )
            // InternalSTCoreParser.g:7694:2: rule__STMulDivModExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STMulDivModExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__Group__1"


    // $ANTLR start "rule__STMulDivModExpression__Group__1__Impl"
    // InternalSTCoreParser.g:7700:1: rule__STMulDivModExpression__Group__1__Impl : ( ( rule__STMulDivModExpression__Group_1__0 )* ) ;
    public final void rule__STMulDivModExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7704:1: ( ( ( rule__STMulDivModExpression__Group_1__0 )* ) )
            // InternalSTCoreParser.g:7705:1: ( ( rule__STMulDivModExpression__Group_1__0 )* )
            {
            // InternalSTCoreParser.g:7705:1: ( ( rule__STMulDivModExpression__Group_1__0 )* )
            // InternalSTCoreParser.g:7706:2: ( rule__STMulDivModExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMulDivModExpressionAccess().getGroup_1()); 
            }
            // InternalSTCoreParser.g:7707:2: ( rule__STMulDivModExpression__Group_1__0 )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==MOD||LA70_0==Asterisk||LA70_0==Solidus) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // InternalSTCoreParser.g:7707:3: rule__STMulDivModExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_55);
            	    rule__STMulDivModExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMulDivModExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__Group__1__Impl"


    // $ANTLR start "rule__STMulDivModExpression__Group_1__0"
    // InternalSTCoreParser.g:7716:1: rule__STMulDivModExpression__Group_1__0 : rule__STMulDivModExpression__Group_1__0__Impl rule__STMulDivModExpression__Group_1__1 ;
    public final void rule__STMulDivModExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7720:1: ( rule__STMulDivModExpression__Group_1__0__Impl rule__STMulDivModExpression__Group_1__1 )
            // InternalSTCoreParser.g:7721:2: rule__STMulDivModExpression__Group_1__0__Impl rule__STMulDivModExpression__Group_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STMulDivModExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STMulDivModExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__Group_1__0"


    // $ANTLR start "rule__STMulDivModExpression__Group_1__0__Impl"
    // InternalSTCoreParser.g:7728:1: rule__STMulDivModExpression__Group_1__0__Impl : ( ( rule__STMulDivModExpression__Group_1_0__0 ) ) ;
    public final void rule__STMulDivModExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7732:1: ( ( ( rule__STMulDivModExpression__Group_1_0__0 ) ) )
            // InternalSTCoreParser.g:7733:1: ( ( rule__STMulDivModExpression__Group_1_0__0 ) )
            {
            // InternalSTCoreParser.g:7733:1: ( ( rule__STMulDivModExpression__Group_1_0__0 ) )
            // InternalSTCoreParser.g:7734:2: ( rule__STMulDivModExpression__Group_1_0__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMulDivModExpressionAccess().getGroup_1_0()); 
            }
            // InternalSTCoreParser.g:7735:2: ( rule__STMulDivModExpression__Group_1_0__0 )
            // InternalSTCoreParser.g:7735:3: rule__STMulDivModExpression__Group_1_0__0
            {
            pushFollow(FOLLOW_2);
            rule__STMulDivModExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMulDivModExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__Group_1__0__Impl"


    // $ANTLR start "rule__STMulDivModExpression__Group_1__1"
    // InternalSTCoreParser.g:7743:1: rule__STMulDivModExpression__Group_1__1 : rule__STMulDivModExpression__Group_1__1__Impl ;
    public final void rule__STMulDivModExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7747:1: ( rule__STMulDivModExpression__Group_1__1__Impl )
            // InternalSTCoreParser.g:7748:2: rule__STMulDivModExpression__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STMulDivModExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__Group_1__1"


    // $ANTLR start "rule__STMulDivModExpression__Group_1__1__Impl"
    // InternalSTCoreParser.g:7754:1: rule__STMulDivModExpression__Group_1__1__Impl : ( ( rule__STMulDivModExpression__RightAssignment_1_1 ) ) ;
    public final void rule__STMulDivModExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7758:1: ( ( ( rule__STMulDivModExpression__RightAssignment_1_1 ) ) )
            // InternalSTCoreParser.g:7759:1: ( ( rule__STMulDivModExpression__RightAssignment_1_1 ) )
            {
            // InternalSTCoreParser.g:7759:1: ( ( rule__STMulDivModExpression__RightAssignment_1_1 ) )
            // InternalSTCoreParser.g:7760:2: ( rule__STMulDivModExpression__RightAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMulDivModExpressionAccess().getRightAssignment_1_1()); 
            }
            // InternalSTCoreParser.g:7761:2: ( rule__STMulDivModExpression__RightAssignment_1_1 )
            // InternalSTCoreParser.g:7761:3: rule__STMulDivModExpression__RightAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STMulDivModExpression__RightAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMulDivModExpressionAccess().getRightAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__Group_1__1__Impl"


    // $ANTLR start "rule__STMulDivModExpression__Group_1_0__0"
    // InternalSTCoreParser.g:7770:1: rule__STMulDivModExpression__Group_1_0__0 : rule__STMulDivModExpression__Group_1_0__0__Impl rule__STMulDivModExpression__Group_1_0__1 ;
    public final void rule__STMulDivModExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7774:1: ( rule__STMulDivModExpression__Group_1_0__0__Impl rule__STMulDivModExpression__Group_1_0__1 )
            // InternalSTCoreParser.g:7775:2: rule__STMulDivModExpression__Group_1_0__0__Impl rule__STMulDivModExpression__Group_1_0__1
            {
            pushFollow(FOLLOW_54);
            rule__STMulDivModExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STMulDivModExpression__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__Group_1_0__0"


    // $ANTLR start "rule__STMulDivModExpression__Group_1_0__0__Impl"
    // InternalSTCoreParser.g:7782:1: rule__STMulDivModExpression__Group_1_0__0__Impl : ( () ) ;
    public final void rule__STMulDivModExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7786:1: ( ( () ) )
            // InternalSTCoreParser.g:7787:1: ( () )
            {
            // InternalSTCoreParser.g:7787:1: ( () )
            // InternalSTCoreParser.g:7788:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMulDivModExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }
            // InternalSTCoreParser.g:7789:2: ()
            // InternalSTCoreParser.g:7789:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMulDivModExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__Group_1_0__0__Impl"


    // $ANTLR start "rule__STMulDivModExpression__Group_1_0__1"
    // InternalSTCoreParser.g:7797:1: rule__STMulDivModExpression__Group_1_0__1 : rule__STMulDivModExpression__Group_1_0__1__Impl ;
    public final void rule__STMulDivModExpression__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7801:1: ( rule__STMulDivModExpression__Group_1_0__1__Impl )
            // InternalSTCoreParser.g:7802:2: rule__STMulDivModExpression__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STMulDivModExpression__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__Group_1_0__1"


    // $ANTLR start "rule__STMulDivModExpression__Group_1_0__1__Impl"
    // InternalSTCoreParser.g:7808:1: rule__STMulDivModExpression__Group_1_0__1__Impl : ( ( rule__STMulDivModExpression__OpAssignment_1_0_1 ) ) ;
    public final void rule__STMulDivModExpression__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7812:1: ( ( ( rule__STMulDivModExpression__OpAssignment_1_0_1 ) ) )
            // InternalSTCoreParser.g:7813:1: ( ( rule__STMulDivModExpression__OpAssignment_1_0_1 ) )
            {
            // InternalSTCoreParser.g:7813:1: ( ( rule__STMulDivModExpression__OpAssignment_1_0_1 ) )
            // InternalSTCoreParser.g:7814:2: ( rule__STMulDivModExpression__OpAssignment_1_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMulDivModExpressionAccess().getOpAssignment_1_0_1()); 
            }
            // InternalSTCoreParser.g:7815:2: ( rule__STMulDivModExpression__OpAssignment_1_0_1 )
            // InternalSTCoreParser.g:7815:3: rule__STMulDivModExpression__OpAssignment_1_0_1
            {
            pushFollow(FOLLOW_2);
            rule__STMulDivModExpression__OpAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMulDivModExpressionAccess().getOpAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__Group_1_0__1__Impl"


    // $ANTLR start "rule__STPowerExpression__Group__0"
    // InternalSTCoreParser.g:7824:1: rule__STPowerExpression__Group__0 : rule__STPowerExpression__Group__0__Impl rule__STPowerExpression__Group__1 ;
    public final void rule__STPowerExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7828:1: ( rule__STPowerExpression__Group__0__Impl rule__STPowerExpression__Group__1 )
            // InternalSTCoreParser.g:7829:2: rule__STPowerExpression__Group__0__Impl rule__STPowerExpression__Group__1
            {
            pushFollow(FOLLOW_56);
            rule__STPowerExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STPowerExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__Group__0"


    // $ANTLR start "rule__STPowerExpression__Group__0__Impl"
    // InternalSTCoreParser.g:7836:1: rule__STPowerExpression__Group__0__Impl : ( ruleSTUnaryExpression ) ;
    public final void rule__STPowerExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7840:1: ( ( ruleSTUnaryExpression ) )
            // InternalSTCoreParser.g:7841:1: ( ruleSTUnaryExpression )
            {
            // InternalSTCoreParser.g:7841:1: ( ruleSTUnaryExpression )
            // InternalSTCoreParser.g:7842:2: ruleSTUnaryExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPowerExpressionAccess().getSTUnaryExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTUnaryExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPowerExpressionAccess().getSTUnaryExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__Group__0__Impl"


    // $ANTLR start "rule__STPowerExpression__Group__1"
    // InternalSTCoreParser.g:7851:1: rule__STPowerExpression__Group__1 : rule__STPowerExpression__Group__1__Impl ;
    public final void rule__STPowerExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7855:1: ( rule__STPowerExpression__Group__1__Impl )
            // InternalSTCoreParser.g:7856:2: rule__STPowerExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STPowerExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__Group__1"


    // $ANTLR start "rule__STPowerExpression__Group__1__Impl"
    // InternalSTCoreParser.g:7862:1: rule__STPowerExpression__Group__1__Impl : ( ( rule__STPowerExpression__Group_1__0 )* ) ;
    public final void rule__STPowerExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7866:1: ( ( ( rule__STPowerExpression__Group_1__0 )* ) )
            // InternalSTCoreParser.g:7867:1: ( ( rule__STPowerExpression__Group_1__0 )* )
            {
            // InternalSTCoreParser.g:7867:1: ( ( rule__STPowerExpression__Group_1__0 )* )
            // InternalSTCoreParser.g:7868:2: ( rule__STPowerExpression__Group_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPowerExpressionAccess().getGroup_1()); 
            }
            // InternalSTCoreParser.g:7869:2: ( rule__STPowerExpression__Group_1__0 )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==AsteriskAsterisk) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // InternalSTCoreParser.g:7869:3: rule__STPowerExpression__Group_1__0
            	    {
            	    pushFollow(FOLLOW_57);
            	    rule__STPowerExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPowerExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__Group__1__Impl"


    // $ANTLR start "rule__STPowerExpression__Group_1__0"
    // InternalSTCoreParser.g:7878:1: rule__STPowerExpression__Group_1__0 : rule__STPowerExpression__Group_1__0__Impl rule__STPowerExpression__Group_1__1 ;
    public final void rule__STPowerExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7882:1: ( rule__STPowerExpression__Group_1__0__Impl rule__STPowerExpression__Group_1__1 )
            // InternalSTCoreParser.g:7883:2: rule__STPowerExpression__Group_1__0__Impl rule__STPowerExpression__Group_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STPowerExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STPowerExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__Group_1__0"


    // $ANTLR start "rule__STPowerExpression__Group_1__0__Impl"
    // InternalSTCoreParser.g:7890:1: rule__STPowerExpression__Group_1__0__Impl : ( ( rule__STPowerExpression__Group_1_0__0 ) ) ;
    public final void rule__STPowerExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7894:1: ( ( ( rule__STPowerExpression__Group_1_0__0 ) ) )
            // InternalSTCoreParser.g:7895:1: ( ( rule__STPowerExpression__Group_1_0__0 ) )
            {
            // InternalSTCoreParser.g:7895:1: ( ( rule__STPowerExpression__Group_1_0__0 ) )
            // InternalSTCoreParser.g:7896:2: ( rule__STPowerExpression__Group_1_0__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPowerExpressionAccess().getGroup_1_0()); 
            }
            // InternalSTCoreParser.g:7897:2: ( rule__STPowerExpression__Group_1_0__0 )
            // InternalSTCoreParser.g:7897:3: rule__STPowerExpression__Group_1_0__0
            {
            pushFollow(FOLLOW_2);
            rule__STPowerExpression__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPowerExpressionAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__Group_1__0__Impl"


    // $ANTLR start "rule__STPowerExpression__Group_1__1"
    // InternalSTCoreParser.g:7905:1: rule__STPowerExpression__Group_1__1 : rule__STPowerExpression__Group_1__1__Impl ;
    public final void rule__STPowerExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7909:1: ( rule__STPowerExpression__Group_1__1__Impl )
            // InternalSTCoreParser.g:7910:2: rule__STPowerExpression__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STPowerExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__Group_1__1"


    // $ANTLR start "rule__STPowerExpression__Group_1__1__Impl"
    // InternalSTCoreParser.g:7916:1: rule__STPowerExpression__Group_1__1__Impl : ( ( rule__STPowerExpression__RightAssignment_1_1 ) ) ;
    public final void rule__STPowerExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7920:1: ( ( ( rule__STPowerExpression__RightAssignment_1_1 ) ) )
            // InternalSTCoreParser.g:7921:1: ( ( rule__STPowerExpression__RightAssignment_1_1 ) )
            {
            // InternalSTCoreParser.g:7921:1: ( ( rule__STPowerExpression__RightAssignment_1_1 ) )
            // InternalSTCoreParser.g:7922:2: ( rule__STPowerExpression__RightAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPowerExpressionAccess().getRightAssignment_1_1()); 
            }
            // InternalSTCoreParser.g:7923:2: ( rule__STPowerExpression__RightAssignment_1_1 )
            // InternalSTCoreParser.g:7923:3: rule__STPowerExpression__RightAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STPowerExpression__RightAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPowerExpressionAccess().getRightAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__Group_1__1__Impl"


    // $ANTLR start "rule__STPowerExpression__Group_1_0__0"
    // InternalSTCoreParser.g:7932:1: rule__STPowerExpression__Group_1_0__0 : rule__STPowerExpression__Group_1_0__0__Impl rule__STPowerExpression__Group_1_0__1 ;
    public final void rule__STPowerExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7936:1: ( rule__STPowerExpression__Group_1_0__0__Impl rule__STPowerExpression__Group_1_0__1 )
            // InternalSTCoreParser.g:7937:2: rule__STPowerExpression__Group_1_0__0__Impl rule__STPowerExpression__Group_1_0__1
            {
            pushFollow(FOLLOW_56);
            rule__STPowerExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STPowerExpression__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__Group_1_0__0"


    // $ANTLR start "rule__STPowerExpression__Group_1_0__0__Impl"
    // InternalSTCoreParser.g:7944:1: rule__STPowerExpression__Group_1_0__0__Impl : ( () ) ;
    public final void rule__STPowerExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7948:1: ( ( () ) )
            // InternalSTCoreParser.g:7949:1: ( () )
            {
            // InternalSTCoreParser.g:7949:1: ( () )
            // InternalSTCoreParser.g:7950:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPowerExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }
            // InternalSTCoreParser.g:7951:2: ()
            // InternalSTCoreParser.g:7951:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPowerExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__Group_1_0__0__Impl"


    // $ANTLR start "rule__STPowerExpression__Group_1_0__1"
    // InternalSTCoreParser.g:7959:1: rule__STPowerExpression__Group_1_0__1 : rule__STPowerExpression__Group_1_0__1__Impl ;
    public final void rule__STPowerExpression__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7963:1: ( rule__STPowerExpression__Group_1_0__1__Impl )
            // InternalSTCoreParser.g:7964:2: rule__STPowerExpression__Group_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STPowerExpression__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__Group_1_0__1"


    // $ANTLR start "rule__STPowerExpression__Group_1_0__1__Impl"
    // InternalSTCoreParser.g:7970:1: rule__STPowerExpression__Group_1_0__1__Impl : ( ( rule__STPowerExpression__OpAssignment_1_0_1 ) ) ;
    public final void rule__STPowerExpression__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7974:1: ( ( ( rule__STPowerExpression__OpAssignment_1_0_1 ) ) )
            // InternalSTCoreParser.g:7975:1: ( ( rule__STPowerExpression__OpAssignment_1_0_1 ) )
            {
            // InternalSTCoreParser.g:7975:1: ( ( rule__STPowerExpression__OpAssignment_1_0_1 ) )
            // InternalSTCoreParser.g:7976:2: ( rule__STPowerExpression__OpAssignment_1_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPowerExpressionAccess().getOpAssignment_1_0_1()); 
            }
            // InternalSTCoreParser.g:7977:2: ( rule__STPowerExpression__OpAssignment_1_0_1 )
            // InternalSTCoreParser.g:7977:3: rule__STPowerExpression__OpAssignment_1_0_1
            {
            pushFollow(FOLLOW_2);
            rule__STPowerExpression__OpAssignment_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPowerExpressionAccess().getOpAssignment_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__Group_1_0__1__Impl"


    // $ANTLR start "rule__STUnaryExpression__Group_1__0"
    // InternalSTCoreParser.g:7986:1: rule__STUnaryExpression__Group_1__0 : rule__STUnaryExpression__Group_1__0__Impl rule__STUnaryExpression__Group_1__1 ;
    public final void rule__STUnaryExpression__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:7990:1: ( rule__STUnaryExpression__Group_1__0__Impl rule__STUnaryExpression__Group_1__1 )
            // InternalSTCoreParser.g:7991:2: rule__STUnaryExpression__Group_1__0__Impl rule__STUnaryExpression__Group_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STUnaryExpression__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STUnaryExpression__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STUnaryExpression__Group_1__0"


    // $ANTLR start "rule__STUnaryExpression__Group_1__0__Impl"
    // InternalSTCoreParser.g:7998:1: rule__STUnaryExpression__Group_1__0__Impl : ( () ) ;
    public final void rule__STUnaryExpression__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8002:1: ( ( () ) )
            // InternalSTCoreParser.g:8003:1: ( () )
            {
            // InternalSTCoreParser.g:8003:1: ( () )
            // InternalSTCoreParser.g:8004:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTUnaryExpressionAccess().getSTUnaryExpressionAction_1_0()); 
            }
            // InternalSTCoreParser.g:8005:2: ()
            // InternalSTCoreParser.g:8005:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTUnaryExpressionAccess().getSTUnaryExpressionAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STUnaryExpression__Group_1__0__Impl"


    // $ANTLR start "rule__STUnaryExpression__Group_1__1"
    // InternalSTCoreParser.g:8013:1: rule__STUnaryExpression__Group_1__1 : rule__STUnaryExpression__Group_1__1__Impl rule__STUnaryExpression__Group_1__2 ;
    public final void rule__STUnaryExpression__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8017:1: ( rule__STUnaryExpression__Group_1__1__Impl rule__STUnaryExpression__Group_1__2 )
            // InternalSTCoreParser.g:8018:2: rule__STUnaryExpression__Group_1__1__Impl rule__STUnaryExpression__Group_1__2
            {
            pushFollow(FOLLOW_11);
            rule__STUnaryExpression__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STUnaryExpression__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STUnaryExpression__Group_1__1"


    // $ANTLR start "rule__STUnaryExpression__Group_1__1__Impl"
    // InternalSTCoreParser.g:8025:1: rule__STUnaryExpression__Group_1__1__Impl : ( ( rule__STUnaryExpression__OpAssignment_1_1 ) ) ;
    public final void rule__STUnaryExpression__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8029:1: ( ( ( rule__STUnaryExpression__OpAssignment_1_1 ) ) )
            // InternalSTCoreParser.g:8030:1: ( ( rule__STUnaryExpression__OpAssignment_1_1 ) )
            {
            // InternalSTCoreParser.g:8030:1: ( ( rule__STUnaryExpression__OpAssignment_1_1 ) )
            // InternalSTCoreParser.g:8031:2: ( rule__STUnaryExpression__OpAssignment_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTUnaryExpressionAccess().getOpAssignment_1_1()); 
            }
            // InternalSTCoreParser.g:8032:2: ( rule__STUnaryExpression__OpAssignment_1_1 )
            // InternalSTCoreParser.g:8032:3: rule__STUnaryExpression__OpAssignment_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STUnaryExpression__OpAssignment_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTUnaryExpressionAccess().getOpAssignment_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STUnaryExpression__Group_1__1__Impl"


    // $ANTLR start "rule__STUnaryExpression__Group_1__2"
    // InternalSTCoreParser.g:8040:1: rule__STUnaryExpression__Group_1__2 : rule__STUnaryExpression__Group_1__2__Impl ;
    public final void rule__STUnaryExpression__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8044:1: ( rule__STUnaryExpression__Group_1__2__Impl )
            // InternalSTCoreParser.g:8045:2: rule__STUnaryExpression__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STUnaryExpression__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STUnaryExpression__Group_1__2"


    // $ANTLR start "rule__STUnaryExpression__Group_1__2__Impl"
    // InternalSTCoreParser.g:8051:1: rule__STUnaryExpression__Group_1__2__Impl : ( ( rule__STUnaryExpression__ExpressionAssignment_1_2 ) ) ;
    public final void rule__STUnaryExpression__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8055:1: ( ( ( rule__STUnaryExpression__ExpressionAssignment_1_2 ) ) )
            // InternalSTCoreParser.g:8056:1: ( ( rule__STUnaryExpression__ExpressionAssignment_1_2 ) )
            {
            // InternalSTCoreParser.g:8056:1: ( ( rule__STUnaryExpression__ExpressionAssignment_1_2 ) )
            // InternalSTCoreParser.g:8057:2: ( rule__STUnaryExpression__ExpressionAssignment_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTUnaryExpressionAccess().getExpressionAssignment_1_2()); 
            }
            // InternalSTCoreParser.g:8058:2: ( rule__STUnaryExpression__ExpressionAssignment_1_2 )
            // InternalSTCoreParser.g:8058:3: rule__STUnaryExpression__ExpressionAssignment_1_2
            {
            pushFollow(FOLLOW_2);
            rule__STUnaryExpression__ExpressionAssignment_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTUnaryExpressionAccess().getExpressionAssignment_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STUnaryExpression__Group_1__2__Impl"


    // $ANTLR start "rule__STAccessExpression__Group__0"
    // InternalSTCoreParser.g:8067:1: rule__STAccessExpression__Group__0 : rule__STAccessExpression__Group__0__Impl rule__STAccessExpression__Group__1 ;
    public final void rule__STAccessExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8071:1: ( rule__STAccessExpression__Group__0__Impl rule__STAccessExpression__Group__1 )
            // InternalSTCoreParser.g:8072:2: rule__STAccessExpression__Group__0__Impl rule__STAccessExpression__Group__1
            {
            pushFollow(FOLLOW_58);
            rule__STAccessExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group__0"


    // $ANTLR start "rule__STAccessExpression__Group__0__Impl"
    // InternalSTCoreParser.g:8079:1: rule__STAccessExpression__Group__0__Impl : ( ruleSTPrimaryExpression ) ;
    public final void rule__STAccessExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8083:1: ( ( ruleSTPrimaryExpression ) )
            // InternalSTCoreParser.g:8084:1: ( ruleSTPrimaryExpression )
            {
            // InternalSTCoreParser.g:8084:1: ( ruleSTPrimaryExpression )
            // InternalSTCoreParser.g:8085:2: ruleSTPrimaryExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getSTPrimaryExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTPrimaryExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getSTPrimaryExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group__0__Impl"


    // $ANTLR start "rule__STAccessExpression__Group__1"
    // InternalSTCoreParser.g:8094:1: rule__STAccessExpression__Group__1 : rule__STAccessExpression__Group__1__Impl ;
    public final void rule__STAccessExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8098:1: ( rule__STAccessExpression__Group__1__Impl )
            // InternalSTCoreParser.g:8099:2: rule__STAccessExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group__1"


    // $ANTLR start "rule__STAccessExpression__Group__1__Impl"
    // InternalSTCoreParser.g:8105:1: rule__STAccessExpression__Group__1__Impl : ( ( rule__STAccessExpression__Alternatives_1 )* ) ;
    public final void rule__STAccessExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8109:1: ( ( ( rule__STAccessExpression__Alternatives_1 )* ) )
            // InternalSTCoreParser.g:8110:1: ( ( rule__STAccessExpression__Alternatives_1 )* )
            {
            // InternalSTCoreParser.g:8110:1: ( ( rule__STAccessExpression__Alternatives_1 )* )
            // InternalSTCoreParser.g:8111:2: ( rule__STAccessExpression__Alternatives_1 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getAlternatives_1()); 
            }
            // InternalSTCoreParser.g:8112:2: ( rule__STAccessExpression__Alternatives_1 )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==FullStop||LA72_0==LeftSquareBracket) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // InternalSTCoreParser.g:8112:3: rule__STAccessExpression__Alternatives_1
            	    {
            	    pushFollow(FOLLOW_59);
            	    rule__STAccessExpression__Alternatives_1();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group__1__Impl"


    // $ANTLR start "rule__STAccessExpression__Group_1_0__0"
    // InternalSTCoreParser.g:8121:1: rule__STAccessExpression__Group_1_0__0 : rule__STAccessExpression__Group_1_0__0__Impl rule__STAccessExpression__Group_1_0__1 ;
    public final void rule__STAccessExpression__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8125:1: ( rule__STAccessExpression__Group_1_0__0__Impl rule__STAccessExpression__Group_1_0__1 )
            // InternalSTCoreParser.g:8126:2: rule__STAccessExpression__Group_1_0__0__Impl rule__STAccessExpression__Group_1_0__1
            {
            pushFollow(FOLLOW_60);
            rule__STAccessExpression__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_0__0"


    // $ANTLR start "rule__STAccessExpression__Group_1_0__0__Impl"
    // InternalSTCoreParser.g:8133:1: rule__STAccessExpression__Group_1_0__0__Impl : ( () ) ;
    public final void rule__STAccessExpression__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8137:1: ( ( () ) )
            // InternalSTCoreParser.g:8138:1: ( () )
            {
            // InternalSTCoreParser.g:8138:1: ( () )
            // InternalSTCoreParser.g:8139:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getSTMemberAccessExpressionReceiverAction_1_0_0()); 
            }
            // InternalSTCoreParser.g:8140:2: ()
            // InternalSTCoreParser.g:8140:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getSTMemberAccessExpressionReceiverAction_1_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_0__0__Impl"


    // $ANTLR start "rule__STAccessExpression__Group_1_0__1"
    // InternalSTCoreParser.g:8148:1: rule__STAccessExpression__Group_1_0__1 : rule__STAccessExpression__Group_1_0__1__Impl rule__STAccessExpression__Group_1_0__2 ;
    public final void rule__STAccessExpression__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8152:1: ( rule__STAccessExpression__Group_1_0__1__Impl rule__STAccessExpression__Group_1_0__2 )
            // InternalSTCoreParser.g:8153:2: rule__STAccessExpression__Group_1_0__1__Impl rule__STAccessExpression__Group_1_0__2
            {
            pushFollow(FOLLOW_61);
            rule__STAccessExpression__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__Group_1_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_0__1"


    // $ANTLR start "rule__STAccessExpression__Group_1_0__1__Impl"
    // InternalSTCoreParser.g:8160:1: rule__STAccessExpression__Group_1_0__1__Impl : ( FullStop ) ;
    public final void rule__STAccessExpression__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8164:1: ( ( FullStop ) )
            // InternalSTCoreParser.g:8165:1: ( FullStop )
            {
            // InternalSTCoreParser.g:8165:1: ( FullStop )
            // InternalSTCoreParser.g:8166:2: FullStop
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getFullStopKeyword_1_0_1()); 
            }
            match(input,FullStop,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getFullStopKeyword_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_0__1__Impl"


    // $ANTLR start "rule__STAccessExpression__Group_1_0__2"
    // InternalSTCoreParser.g:8175:1: rule__STAccessExpression__Group_1_0__2 : rule__STAccessExpression__Group_1_0__2__Impl ;
    public final void rule__STAccessExpression__Group_1_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8179:1: ( rule__STAccessExpression__Group_1_0__2__Impl )
            // InternalSTCoreParser.g:8180:2: rule__STAccessExpression__Group_1_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__Group_1_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_0__2"


    // $ANTLR start "rule__STAccessExpression__Group_1_0__2__Impl"
    // InternalSTCoreParser.g:8186:1: rule__STAccessExpression__Group_1_0__2__Impl : ( ( rule__STAccessExpression__MemberAssignment_1_0_2 ) ) ;
    public final void rule__STAccessExpression__Group_1_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8190:1: ( ( ( rule__STAccessExpression__MemberAssignment_1_0_2 ) ) )
            // InternalSTCoreParser.g:8191:1: ( ( rule__STAccessExpression__MemberAssignment_1_0_2 ) )
            {
            // InternalSTCoreParser.g:8191:1: ( ( rule__STAccessExpression__MemberAssignment_1_0_2 ) )
            // InternalSTCoreParser.g:8192:2: ( rule__STAccessExpression__MemberAssignment_1_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getMemberAssignment_1_0_2()); 
            }
            // InternalSTCoreParser.g:8193:2: ( rule__STAccessExpression__MemberAssignment_1_0_2 )
            // InternalSTCoreParser.g:8193:3: rule__STAccessExpression__MemberAssignment_1_0_2
            {
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__MemberAssignment_1_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getMemberAssignment_1_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_0__2__Impl"


    // $ANTLR start "rule__STAccessExpression__Group_1_1__0"
    // InternalSTCoreParser.g:8202:1: rule__STAccessExpression__Group_1_1__0 : rule__STAccessExpression__Group_1_1__0__Impl rule__STAccessExpression__Group_1_1__1 ;
    public final void rule__STAccessExpression__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8206:1: ( rule__STAccessExpression__Group_1_1__0__Impl rule__STAccessExpression__Group_1_1__1 )
            // InternalSTCoreParser.g:8207:2: rule__STAccessExpression__Group_1_1__0__Impl rule__STAccessExpression__Group_1_1__1
            {
            pushFollow(FOLLOW_58);
            rule__STAccessExpression__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1__0"


    // $ANTLR start "rule__STAccessExpression__Group_1_1__0__Impl"
    // InternalSTCoreParser.g:8214:1: rule__STAccessExpression__Group_1_1__0__Impl : ( () ) ;
    public final void rule__STAccessExpression__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8218:1: ( ( () ) )
            // InternalSTCoreParser.g:8219:1: ( () )
            {
            // InternalSTCoreParser.g:8219:1: ( () )
            // InternalSTCoreParser.g:8220:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getSTArrayAccessExpressionReceiverAction_1_1_0()); 
            }
            // InternalSTCoreParser.g:8221:2: ()
            // InternalSTCoreParser.g:8221:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getSTArrayAccessExpressionReceiverAction_1_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1__0__Impl"


    // $ANTLR start "rule__STAccessExpression__Group_1_1__1"
    // InternalSTCoreParser.g:8229:1: rule__STAccessExpression__Group_1_1__1 : rule__STAccessExpression__Group_1_1__1__Impl rule__STAccessExpression__Group_1_1__2 ;
    public final void rule__STAccessExpression__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8233:1: ( rule__STAccessExpression__Group_1_1__1__Impl rule__STAccessExpression__Group_1_1__2 )
            // InternalSTCoreParser.g:8234:2: rule__STAccessExpression__Group_1_1__1__Impl rule__STAccessExpression__Group_1_1__2
            {
            pushFollow(FOLLOW_11);
            rule__STAccessExpression__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__Group_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1__1"


    // $ANTLR start "rule__STAccessExpression__Group_1_1__1__Impl"
    // InternalSTCoreParser.g:8241:1: rule__STAccessExpression__Group_1_1__1__Impl : ( LeftSquareBracket ) ;
    public final void rule__STAccessExpression__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8245:1: ( ( LeftSquareBracket ) )
            // InternalSTCoreParser.g:8246:1: ( LeftSquareBracket )
            {
            // InternalSTCoreParser.g:8246:1: ( LeftSquareBracket )
            // InternalSTCoreParser.g:8247:2: LeftSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getLeftSquareBracketKeyword_1_1_1()); 
            }
            match(input,LeftSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getLeftSquareBracketKeyword_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1__1__Impl"


    // $ANTLR start "rule__STAccessExpression__Group_1_1__2"
    // InternalSTCoreParser.g:8256:1: rule__STAccessExpression__Group_1_1__2 : rule__STAccessExpression__Group_1_1__2__Impl rule__STAccessExpression__Group_1_1__3 ;
    public final void rule__STAccessExpression__Group_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8260:1: ( rule__STAccessExpression__Group_1_1__2__Impl rule__STAccessExpression__Group_1_1__3 )
            // InternalSTCoreParser.g:8261:2: rule__STAccessExpression__Group_1_1__2__Impl rule__STAccessExpression__Group_1_1__3
            {
            pushFollow(FOLLOW_12);
            rule__STAccessExpression__Group_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__Group_1_1__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1__2"


    // $ANTLR start "rule__STAccessExpression__Group_1_1__2__Impl"
    // InternalSTCoreParser.g:8268:1: rule__STAccessExpression__Group_1_1__2__Impl : ( ( rule__STAccessExpression__IndexAssignment_1_1_2 ) ) ;
    public final void rule__STAccessExpression__Group_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8272:1: ( ( ( rule__STAccessExpression__IndexAssignment_1_1_2 ) ) )
            // InternalSTCoreParser.g:8273:1: ( ( rule__STAccessExpression__IndexAssignment_1_1_2 ) )
            {
            // InternalSTCoreParser.g:8273:1: ( ( rule__STAccessExpression__IndexAssignment_1_1_2 ) )
            // InternalSTCoreParser.g:8274:2: ( rule__STAccessExpression__IndexAssignment_1_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getIndexAssignment_1_1_2()); 
            }
            // InternalSTCoreParser.g:8275:2: ( rule__STAccessExpression__IndexAssignment_1_1_2 )
            // InternalSTCoreParser.g:8275:3: rule__STAccessExpression__IndexAssignment_1_1_2
            {
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__IndexAssignment_1_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getIndexAssignment_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1__2__Impl"


    // $ANTLR start "rule__STAccessExpression__Group_1_1__3"
    // InternalSTCoreParser.g:8283:1: rule__STAccessExpression__Group_1_1__3 : rule__STAccessExpression__Group_1_1__3__Impl rule__STAccessExpression__Group_1_1__4 ;
    public final void rule__STAccessExpression__Group_1_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8287:1: ( rule__STAccessExpression__Group_1_1__3__Impl rule__STAccessExpression__Group_1_1__4 )
            // InternalSTCoreParser.g:8288:2: rule__STAccessExpression__Group_1_1__3__Impl rule__STAccessExpression__Group_1_1__4
            {
            pushFollow(FOLLOW_12);
            rule__STAccessExpression__Group_1_1__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__Group_1_1__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1__3"


    // $ANTLR start "rule__STAccessExpression__Group_1_1__3__Impl"
    // InternalSTCoreParser.g:8295:1: rule__STAccessExpression__Group_1_1__3__Impl : ( ( rule__STAccessExpression__Group_1_1_3__0 )* ) ;
    public final void rule__STAccessExpression__Group_1_1__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8299:1: ( ( ( rule__STAccessExpression__Group_1_1_3__0 )* ) )
            // InternalSTCoreParser.g:8300:1: ( ( rule__STAccessExpression__Group_1_1_3__0 )* )
            {
            // InternalSTCoreParser.g:8300:1: ( ( rule__STAccessExpression__Group_1_1_3__0 )* )
            // InternalSTCoreParser.g:8301:2: ( rule__STAccessExpression__Group_1_1_3__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getGroup_1_1_3()); 
            }
            // InternalSTCoreParser.g:8302:2: ( rule__STAccessExpression__Group_1_1_3__0 )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==Comma) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // InternalSTCoreParser.g:8302:3: rule__STAccessExpression__Group_1_1_3__0
            	    {
            	    pushFollow(FOLLOW_13);
            	    rule__STAccessExpression__Group_1_1_3__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getGroup_1_1_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1__3__Impl"


    // $ANTLR start "rule__STAccessExpression__Group_1_1__4"
    // InternalSTCoreParser.g:8310:1: rule__STAccessExpression__Group_1_1__4 : rule__STAccessExpression__Group_1_1__4__Impl ;
    public final void rule__STAccessExpression__Group_1_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8314:1: ( rule__STAccessExpression__Group_1_1__4__Impl )
            // InternalSTCoreParser.g:8315:2: rule__STAccessExpression__Group_1_1__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__Group_1_1__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1__4"


    // $ANTLR start "rule__STAccessExpression__Group_1_1__4__Impl"
    // InternalSTCoreParser.g:8321:1: rule__STAccessExpression__Group_1_1__4__Impl : ( RightSquareBracket ) ;
    public final void rule__STAccessExpression__Group_1_1__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8325:1: ( ( RightSquareBracket ) )
            // InternalSTCoreParser.g:8326:1: ( RightSquareBracket )
            {
            // InternalSTCoreParser.g:8326:1: ( RightSquareBracket )
            // InternalSTCoreParser.g:8327:2: RightSquareBracket
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getRightSquareBracketKeyword_1_1_4()); 
            }
            match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getRightSquareBracketKeyword_1_1_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1__4__Impl"


    // $ANTLR start "rule__STAccessExpression__Group_1_1_3__0"
    // InternalSTCoreParser.g:8337:1: rule__STAccessExpression__Group_1_1_3__0 : rule__STAccessExpression__Group_1_1_3__0__Impl rule__STAccessExpression__Group_1_1_3__1 ;
    public final void rule__STAccessExpression__Group_1_1_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8341:1: ( rule__STAccessExpression__Group_1_1_3__0__Impl rule__STAccessExpression__Group_1_1_3__1 )
            // InternalSTCoreParser.g:8342:2: rule__STAccessExpression__Group_1_1_3__0__Impl rule__STAccessExpression__Group_1_1_3__1
            {
            pushFollow(FOLLOW_11);
            rule__STAccessExpression__Group_1_1_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__Group_1_1_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1_3__0"


    // $ANTLR start "rule__STAccessExpression__Group_1_1_3__0__Impl"
    // InternalSTCoreParser.g:8349:1: rule__STAccessExpression__Group_1_1_3__0__Impl : ( Comma ) ;
    public final void rule__STAccessExpression__Group_1_1_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8353:1: ( ( Comma ) )
            // InternalSTCoreParser.g:8354:1: ( Comma )
            {
            // InternalSTCoreParser.g:8354:1: ( Comma )
            // InternalSTCoreParser.g:8355:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getCommaKeyword_1_1_3_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getCommaKeyword_1_1_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1_3__0__Impl"


    // $ANTLR start "rule__STAccessExpression__Group_1_1_3__1"
    // InternalSTCoreParser.g:8364:1: rule__STAccessExpression__Group_1_1_3__1 : rule__STAccessExpression__Group_1_1_3__1__Impl ;
    public final void rule__STAccessExpression__Group_1_1_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8368:1: ( rule__STAccessExpression__Group_1_1_3__1__Impl )
            // InternalSTCoreParser.g:8369:2: rule__STAccessExpression__Group_1_1_3__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__Group_1_1_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1_3__1"


    // $ANTLR start "rule__STAccessExpression__Group_1_1_3__1__Impl"
    // InternalSTCoreParser.g:8375:1: rule__STAccessExpression__Group_1_1_3__1__Impl : ( ( rule__STAccessExpression__IndexAssignment_1_1_3_1 ) ) ;
    public final void rule__STAccessExpression__Group_1_1_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8379:1: ( ( ( rule__STAccessExpression__IndexAssignment_1_1_3_1 ) ) )
            // InternalSTCoreParser.g:8380:1: ( ( rule__STAccessExpression__IndexAssignment_1_1_3_1 ) )
            {
            // InternalSTCoreParser.g:8380:1: ( ( rule__STAccessExpression__IndexAssignment_1_1_3_1 ) )
            // InternalSTCoreParser.g:8381:2: ( rule__STAccessExpression__IndexAssignment_1_1_3_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getIndexAssignment_1_1_3_1()); 
            }
            // InternalSTCoreParser.g:8382:2: ( rule__STAccessExpression__IndexAssignment_1_1_3_1 )
            // InternalSTCoreParser.g:8382:3: rule__STAccessExpression__IndexAssignment_1_1_3_1
            {
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__IndexAssignment_1_1_3_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getIndexAssignment_1_1_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__Group_1_1_3__1__Impl"


    // $ANTLR start "rule__STPrimaryExpression__Group_0__0"
    // InternalSTCoreParser.g:8391:1: rule__STPrimaryExpression__Group_0__0 : rule__STPrimaryExpression__Group_0__0__Impl rule__STPrimaryExpression__Group_0__1 ;
    public final void rule__STPrimaryExpression__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8395:1: ( rule__STPrimaryExpression__Group_0__0__Impl rule__STPrimaryExpression__Group_0__1 )
            // InternalSTCoreParser.g:8396:2: rule__STPrimaryExpression__Group_0__0__Impl rule__STPrimaryExpression__Group_0__1
            {
            pushFollow(FOLLOW_11);
            rule__STPrimaryExpression__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STPrimaryExpression__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPrimaryExpression__Group_0__0"


    // $ANTLR start "rule__STPrimaryExpression__Group_0__0__Impl"
    // InternalSTCoreParser.g:8403:1: rule__STPrimaryExpression__Group_0__0__Impl : ( LeftParenthesis ) ;
    public final void rule__STPrimaryExpression__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8407:1: ( ( LeftParenthesis ) )
            // InternalSTCoreParser.g:8408:1: ( LeftParenthesis )
            {
            // InternalSTCoreParser.g:8408:1: ( LeftParenthesis )
            // InternalSTCoreParser.g:8409:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPrimaryExpression__Group_0__0__Impl"


    // $ANTLR start "rule__STPrimaryExpression__Group_0__1"
    // InternalSTCoreParser.g:8418:1: rule__STPrimaryExpression__Group_0__1 : rule__STPrimaryExpression__Group_0__1__Impl rule__STPrimaryExpression__Group_0__2 ;
    public final void rule__STPrimaryExpression__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8422:1: ( rule__STPrimaryExpression__Group_0__1__Impl rule__STPrimaryExpression__Group_0__2 )
            // InternalSTCoreParser.g:8423:2: rule__STPrimaryExpression__Group_0__1__Impl rule__STPrimaryExpression__Group_0__2
            {
            pushFollow(FOLLOW_62);
            rule__STPrimaryExpression__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STPrimaryExpression__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPrimaryExpression__Group_0__1"


    // $ANTLR start "rule__STPrimaryExpression__Group_0__1__Impl"
    // InternalSTCoreParser.g:8430:1: rule__STPrimaryExpression__Group_0__1__Impl : ( ruleSTExpression ) ;
    public final void rule__STPrimaryExpression__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8434:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:8435:1: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:8435:1: ( ruleSTExpression )
            // InternalSTCoreParser.g:8436:2: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPrimaryExpressionAccess().getSTExpressionParserRuleCall_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPrimaryExpressionAccess().getSTExpressionParserRuleCall_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPrimaryExpression__Group_0__1__Impl"


    // $ANTLR start "rule__STPrimaryExpression__Group_0__2"
    // InternalSTCoreParser.g:8445:1: rule__STPrimaryExpression__Group_0__2 : rule__STPrimaryExpression__Group_0__2__Impl ;
    public final void rule__STPrimaryExpression__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8449:1: ( rule__STPrimaryExpression__Group_0__2__Impl )
            // InternalSTCoreParser.g:8450:2: rule__STPrimaryExpression__Group_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STPrimaryExpression__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPrimaryExpression__Group_0__2"


    // $ANTLR start "rule__STPrimaryExpression__Group_0__2__Impl"
    // InternalSTCoreParser.g:8456:1: rule__STPrimaryExpression__Group_0__2__Impl : ( RightParenthesis ) ;
    public final void rule__STPrimaryExpression__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8460:1: ( ( RightParenthesis ) )
            // InternalSTCoreParser.g:8461:1: ( RightParenthesis )
            {
            // InternalSTCoreParser.g:8461:1: ( RightParenthesis )
            // InternalSTCoreParser.g:8462:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPrimaryExpression__Group_0__2__Impl"


    // $ANTLR start "rule__STFeatureExpression__Group__0"
    // InternalSTCoreParser.g:8472:1: rule__STFeatureExpression__Group__0 : rule__STFeatureExpression__Group__0__Impl rule__STFeatureExpression__Group__1 ;
    public final void rule__STFeatureExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8476:1: ( rule__STFeatureExpression__Group__0__Impl rule__STFeatureExpression__Group__1 )
            // InternalSTCoreParser.g:8477:2: rule__STFeatureExpression__Group__0__Impl rule__STFeatureExpression__Group__1
            {
            pushFollow(FOLLOW_19);
            rule__STFeatureExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group__0"


    // $ANTLR start "rule__STFeatureExpression__Group__0__Impl"
    // InternalSTCoreParser.g:8484:1: rule__STFeatureExpression__Group__0__Impl : ( () ) ;
    public final void rule__STFeatureExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8488:1: ( ( () ) )
            // InternalSTCoreParser.g:8489:1: ( () )
            {
            // InternalSTCoreParser.g:8489:1: ( () )
            // InternalSTCoreParser.g:8490:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getSTFeatureExpressionAction_0()); 
            }
            // InternalSTCoreParser.g:8491:2: ()
            // InternalSTCoreParser.g:8491:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getSTFeatureExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group__0__Impl"


    // $ANTLR start "rule__STFeatureExpression__Group__1"
    // InternalSTCoreParser.g:8499:1: rule__STFeatureExpression__Group__1 : rule__STFeatureExpression__Group__1__Impl rule__STFeatureExpression__Group__2 ;
    public final void rule__STFeatureExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8503:1: ( rule__STFeatureExpression__Group__1__Impl rule__STFeatureExpression__Group__2 )
            // InternalSTCoreParser.g:8504:2: rule__STFeatureExpression__Group__1__Impl rule__STFeatureExpression__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__STFeatureExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group__1"


    // $ANTLR start "rule__STFeatureExpression__Group__1__Impl"
    // InternalSTCoreParser.g:8511:1: rule__STFeatureExpression__Group__1__Impl : ( ( rule__STFeatureExpression__FeatureAssignment_1 ) ) ;
    public final void rule__STFeatureExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8515:1: ( ( ( rule__STFeatureExpression__FeatureAssignment_1 ) ) )
            // InternalSTCoreParser.g:8516:1: ( ( rule__STFeatureExpression__FeatureAssignment_1 ) )
            {
            // InternalSTCoreParser.g:8516:1: ( ( rule__STFeatureExpression__FeatureAssignment_1 ) )
            // InternalSTCoreParser.g:8517:2: ( rule__STFeatureExpression__FeatureAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getFeatureAssignment_1()); 
            }
            // InternalSTCoreParser.g:8518:2: ( rule__STFeatureExpression__FeatureAssignment_1 )
            // InternalSTCoreParser.g:8518:3: rule__STFeatureExpression__FeatureAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__FeatureAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getFeatureAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group__1__Impl"


    // $ANTLR start "rule__STFeatureExpression__Group__2"
    // InternalSTCoreParser.g:8526:1: rule__STFeatureExpression__Group__2 : rule__STFeatureExpression__Group__2__Impl ;
    public final void rule__STFeatureExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8530:1: ( rule__STFeatureExpression__Group__2__Impl )
            // InternalSTCoreParser.g:8531:2: rule__STFeatureExpression__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group__2"


    // $ANTLR start "rule__STFeatureExpression__Group__2__Impl"
    // InternalSTCoreParser.g:8537:1: rule__STFeatureExpression__Group__2__Impl : ( ( rule__STFeatureExpression__Group_2__0 )? ) ;
    public final void rule__STFeatureExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8541:1: ( ( ( rule__STFeatureExpression__Group_2__0 )? ) )
            // InternalSTCoreParser.g:8542:1: ( ( rule__STFeatureExpression__Group_2__0 )? )
            {
            // InternalSTCoreParser.g:8542:1: ( ( rule__STFeatureExpression__Group_2__0 )? )
            // InternalSTCoreParser.g:8543:2: ( rule__STFeatureExpression__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getGroup_2()); 
            }
            // InternalSTCoreParser.g:8544:2: ( rule__STFeatureExpression__Group_2__0 )?
            int alt74=2;
            alt74 = dfa74.predict(input);
            switch (alt74) {
                case 1 :
                    // InternalSTCoreParser.g:8544:3: rule__STFeatureExpression__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STFeatureExpression__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group__2__Impl"


    // $ANTLR start "rule__STFeatureExpression__Group_2__0"
    // InternalSTCoreParser.g:8553:1: rule__STFeatureExpression__Group_2__0 : rule__STFeatureExpression__Group_2__0__Impl rule__STFeatureExpression__Group_2__1 ;
    public final void rule__STFeatureExpression__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8557:1: ( rule__STFeatureExpression__Group_2__0__Impl rule__STFeatureExpression__Group_2__1 )
            // InternalSTCoreParser.g:8558:2: rule__STFeatureExpression__Group_2__0__Impl rule__STFeatureExpression__Group_2__1
            {
            pushFollow(FOLLOW_63);
            rule__STFeatureExpression__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2__0"


    // $ANTLR start "rule__STFeatureExpression__Group_2__0__Impl"
    // InternalSTCoreParser.g:8565:1: rule__STFeatureExpression__Group_2__0__Impl : ( ( rule__STFeatureExpression__CallAssignment_2_0 ) ) ;
    public final void rule__STFeatureExpression__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8569:1: ( ( ( rule__STFeatureExpression__CallAssignment_2_0 ) ) )
            // InternalSTCoreParser.g:8570:1: ( ( rule__STFeatureExpression__CallAssignment_2_0 ) )
            {
            // InternalSTCoreParser.g:8570:1: ( ( rule__STFeatureExpression__CallAssignment_2_0 ) )
            // InternalSTCoreParser.g:8571:2: ( rule__STFeatureExpression__CallAssignment_2_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getCallAssignment_2_0()); 
            }
            // InternalSTCoreParser.g:8572:2: ( rule__STFeatureExpression__CallAssignment_2_0 )
            // InternalSTCoreParser.g:8572:3: rule__STFeatureExpression__CallAssignment_2_0
            {
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__CallAssignment_2_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getCallAssignment_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2__0__Impl"


    // $ANTLR start "rule__STFeatureExpression__Group_2__1"
    // InternalSTCoreParser.g:8580:1: rule__STFeatureExpression__Group_2__1 : rule__STFeatureExpression__Group_2__1__Impl rule__STFeatureExpression__Group_2__2 ;
    public final void rule__STFeatureExpression__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8584:1: ( rule__STFeatureExpression__Group_2__1__Impl rule__STFeatureExpression__Group_2__2 )
            // InternalSTCoreParser.g:8585:2: rule__STFeatureExpression__Group_2__1__Impl rule__STFeatureExpression__Group_2__2
            {
            pushFollow(FOLLOW_63);
            rule__STFeatureExpression__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__Group_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2__1"


    // $ANTLR start "rule__STFeatureExpression__Group_2__1__Impl"
    // InternalSTCoreParser.g:8592:1: rule__STFeatureExpression__Group_2__1__Impl : ( ( rule__STFeatureExpression__Group_2_1__0 )? ) ;
    public final void rule__STFeatureExpression__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8596:1: ( ( ( rule__STFeatureExpression__Group_2_1__0 )? ) )
            // InternalSTCoreParser.g:8597:1: ( ( rule__STFeatureExpression__Group_2_1__0 )? )
            {
            // InternalSTCoreParser.g:8597:1: ( ( rule__STFeatureExpression__Group_2_1__0 )? )
            // InternalSTCoreParser.g:8598:2: ( rule__STFeatureExpression__Group_2_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getGroup_2_1()); 
            }
            // InternalSTCoreParser.g:8599:2: ( rule__STFeatureExpression__Group_2_1__0 )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==LDATE_AND_TIME||LA75_0==DATE_AND_TIME||LA75_0==LTIME_OF_DAY||LA75_0==TIME_OF_DAY||LA75_0==WSTRING||LA75_0==STRING||LA75_0==DWORD||LA75_0==FALSE||(LA75_0>=LDATE && LA75_0<=ULINT)||(LA75_0>=USINT && LA75_0<=WCHAR)||(LA75_0>=BOOL && LA75_0<=BYTE)||(LA75_0>=CHAR && LA75_0<=DINT)||(LA75_0>=LINT && LA75_0<=LTOD)||(LA75_0>=REAL && LA75_0<=SINT)||(LA75_0>=THIS && LA75_0<=TRUE)||LA75_0==UINT||(LA75_0>=WORD && LA75_0<=AND)||(LA75_0>=INT && LA75_0<=NOT)||LA75_0==TOD||LA75_0==XOR||LA75_0==DT||(LA75_0>=LD && LA75_0<=LT)||LA75_0==OR||LA75_0==LeftParenthesis||LA75_0==PlusSign||LA75_0==HyphenMinus||(LA75_0>=D && LA75_0<=T)||(LA75_0>=RULE_NON_DECIMAL && LA75_0<=RULE_DECIMAL)||(LA75_0>=RULE_ID && LA75_0<=RULE_STRING)) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // InternalSTCoreParser.g:8599:3: rule__STFeatureExpression__Group_2_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STFeatureExpression__Group_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getGroup_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2__1__Impl"


    // $ANTLR start "rule__STFeatureExpression__Group_2__2"
    // InternalSTCoreParser.g:8607:1: rule__STFeatureExpression__Group_2__2 : rule__STFeatureExpression__Group_2__2__Impl ;
    public final void rule__STFeatureExpression__Group_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8611:1: ( rule__STFeatureExpression__Group_2__2__Impl )
            // InternalSTCoreParser.g:8612:2: rule__STFeatureExpression__Group_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__Group_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2__2"


    // $ANTLR start "rule__STFeatureExpression__Group_2__2__Impl"
    // InternalSTCoreParser.g:8618:1: rule__STFeatureExpression__Group_2__2__Impl : ( RightParenthesis ) ;
    public final void rule__STFeatureExpression__Group_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8622:1: ( ( RightParenthesis ) )
            // InternalSTCoreParser.g:8623:1: ( RightParenthesis )
            {
            // InternalSTCoreParser.g:8623:1: ( RightParenthesis )
            // InternalSTCoreParser.g:8624:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getRightParenthesisKeyword_2_2()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getRightParenthesisKeyword_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2__2__Impl"


    // $ANTLR start "rule__STFeatureExpression__Group_2_1__0"
    // InternalSTCoreParser.g:8634:1: rule__STFeatureExpression__Group_2_1__0 : rule__STFeatureExpression__Group_2_1__0__Impl rule__STFeatureExpression__Group_2_1__1 ;
    public final void rule__STFeatureExpression__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8638:1: ( rule__STFeatureExpression__Group_2_1__0__Impl rule__STFeatureExpression__Group_2_1__1 )
            // InternalSTCoreParser.g:8639:2: rule__STFeatureExpression__Group_2_1__0__Impl rule__STFeatureExpression__Group_2_1__1
            {
            pushFollow(FOLLOW_64);
            rule__STFeatureExpression__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2_1__0"


    // $ANTLR start "rule__STFeatureExpression__Group_2_1__0__Impl"
    // InternalSTCoreParser.g:8646:1: rule__STFeatureExpression__Group_2_1__0__Impl : ( ( rule__STFeatureExpression__ParametersAssignment_2_1_0 ) ) ;
    public final void rule__STFeatureExpression__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8650:1: ( ( ( rule__STFeatureExpression__ParametersAssignment_2_1_0 ) ) )
            // InternalSTCoreParser.g:8651:1: ( ( rule__STFeatureExpression__ParametersAssignment_2_1_0 ) )
            {
            // InternalSTCoreParser.g:8651:1: ( ( rule__STFeatureExpression__ParametersAssignment_2_1_0 ) )
            // InternalSTCoreParser.g:8652:2: ( rule__STFeatureExpression__ParametersAssignment_2_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getParametersAssignment_2_1_0()); 
            }
            // InternalSTCoreParser.g:8653:2: ( rule__STFeatureExpression__ParametersAssignment_2_1_0 )
            // InternalSTCoreParser.g:8653:3: rule__STFeatureExpression__ParametersAssignment_2_1_0
            {
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__ParametersAssignment_2_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getParametersAssignment_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2_1__0__Impl"


    // $ANTLR start "rule__STFeatureExpression__Group_2_1__1"
    // InternalSTCoreParser.g:8661:1: rule__STFeatureExpression__Group_2_1__1 : rule__STFeatureExpression__Group_2_1__1__Impl ;
    public final void rule__STFeatureExpression__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8665:1: ( rule__STFeatureExpression__Group_2_1__1__Impl )
            // InternalSTCoreParser.g:8666:2: rule__STFeatureExpression__Group_2_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2_1__1"


    // $ANTLR start "rule__STFeatureExpression__Group_2_1__1__Impl"
    // InternalSTCoreParser.g:8672:1: rule__STFeatureExpression__Group_2_1__1__Impl : ( ( rule__STFeatureExpression__Group_2_1_1__0 )* ) ;
    public final void rule__STFeatureExpression__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8676:1: ( ( ( rule__STFeatureExpression__Group_2_1_1__0 )* ) )
            // InternalSTCoreParser.g:8677:1: ( ( rule__STFeatureExpression__Group_2_1_1__0 )* )
            {
            // InternalSTCoreParser.g:8677:1: ( ( rule__STFeatureExpression__Group_2_1_1__0 )* )
            // InternalSTCoreParser.g:8678:2: ( rule__STFeatureExpression__Group_2_1_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getGroup_2_1_1()); 
            }
            // InternalSTCoreParser.g:8679:2: ( rule__STFeatureExpression__Group_2_1_1__0 )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==Comma) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // InternalSTCoreParser.g:8679:3: rule__STFeatureExpression__Group_2_1_1__0
            	    {
            	    pushFollow(FOLLOW_13);
            	    rule__STFeatureExpression__Group_2_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getGroup_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2_1__1__Impl"


    // $ANTLR start "rule__STFeatureExpression__Group_2_1_1__0"
    // InternalSTCoreParser.g:8688:1: rule__STFeatureExpression__Group_2_1_1__0 : rule__STFeatureExpression__Group_2_1_1__0__Impl rule__STFeatureExpression__Group_2_1_1__1 ;
    public final void rule__STFeatureExpression__Group_2_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8692:1: ( rule__STFeatureExpression__Group_2_1_1__0__Impl rule__STFeatureExpression__Group_2_1_1__1 )
            // InternalSTCoreParser.g:8693:2: rule__STFeatureExpression__Group_2_1_1__0__Impl rule__STFeatureExpression__Group_2_1_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STFeatureExpression__Group_2_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__Group_2_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2_1_1__0"


    // $ANTLR start "rule__STFeatureExpression__Group_2_1_1__0__Impl"
    // InternalSTCoreParser.g:8700:1: rule__STFeatureExpression__Group_2_1_1__0__Impl : ( Comma ) ;
    public final void rule__STFeatureExpression__Group_2_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8704:1: ( ( Comma ) )
            // InternalSTCoreParser.g:8705:1: ( Comma )
            {
            // InternalSTCoreParser.g:8705:1: ( Comma )
            // InternalSTCoreParser.g:8706:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getCommaKeyword_2_1_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getCommaKeyword_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2_1_1__0__Impl"


    // $ANTLR start "rule__STFeatureExpression__Group_2_1_1__1"
    // InternalSTCoreParser.g:8715:1: rule__STFeatureExpression__Group_2_1_1__1 : rule__STFeatureExpression__Group_2_1_1__1__Impl ;
    public final void rule__STFeatureExpression__Group_2_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8719:1: ( rule__STFeatureExpression__Group_2_1_1__1__Impl )
            // InternalSTCoreParser.g:8720:2: rule__STFeatureExpression__Group_2_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__Group_2_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2_1_1__1"


    // $ANTLR start "rule__STFeatureExpression__Group_2_1_1__1__Impl"
    // InternalSTCoreParser.g:8726:1: rule__STFeatureExpression__Group_2_1_1__1__Impl : ( ( rule__STFeatureExpression__ParametersAssignment_2_1_1_1 ) ) ;
    public final void rule__STFeatureExpression__Group_2_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8730:1: ( ( ( rule__STFeatureExpression__ParametersAssignment_2_1_1_1 ) ) )
            // InternalSTCoreParser.g:8731:1: ( ( rule__STFeatureExpression__ParametersAssignment_2_1_1_1 ) )
            {
            // InternalSTCoreParser.g:8731:1: ( ( rule__STFeatureExpression__ParametersAssignment_2_1_1_1 ) )
            // InternalSTCoreParser.g:8732:2: ( rule__STFeatureExpression__ParametersAssignment_2_1_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getParametersAssignment_2_1_1_1()); 
            }
            // InternalSTCoreParser.g:8733:2: ( rule__STFeatureExpression__ParametersAssignment_2_1_1_1 )
            // InternalSTCoreParser.g:8733:3: rule__STFeatureExpression__ParametersAssignment_2_1_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STFeatureExpression__ParametersAssignment_2_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getParametersAssignment_2_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__Group_2_1_1__1__Impl"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group__0"
    // InternalSTCoreParser.g:8742:1: rule__STBuiltinFeatureExpression__Group__0 : rule__STBuiltinFeatureExpression__Group__0__Impl rule__STBuiltinFeatureExpression__Group__1 ;
    public final void rule__STBuiltinFeatureExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8746:1: ( rule__STBuiltinFeatureExpression__Group__0__Impl rule__STBuiltinFeatureExpression__Group__1 )
            // InternalSTCoreParser.g:8747:2: rule__STBuiltinFeatureExpression__Group__0__Impl rule__STBuiltinFeatureExpression__Group__1
            {
            pushFollow(FOLLOW_65);
            rule__STBuiltinFeatureExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group__0"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group__0__Impl"
    // InternalSTCoreParser.g:8754:1: rule__STBuiltinFeatureExpression__Group__0__Impl : ( () ) ;
    public final void rule__STBuiltinFeatureExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8758:1: ( ( () ) )
            // InternalSTCoreParser.g:8759:1: ( () )
            {
            // InternalSTCoreParser.g:8759:1: ( () )
            // InternalSTCoreParser.g:8760:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getSTBuiltinFeatureExpressionAction_0()); 
            }
            // InternalSTCoreParser.g:8761:2: ()
            // InternalSTCoreParser.g:8761:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getSTBuiltinFeatureExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group__0__Impl"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group__1"
    // InternalSTCoreParser.g:8769:1: rule__STBuiltinFeatureExpression__Group__1 : rule__STBuiltinFeatureExpression__Group__1__Impl rule__STBuiltinFeatureExpression__Group__2 ;
    public final void rule__STBuiltinFeatureExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8773:1: ( rule__STBuiltinFeatureExpression__Group__1__Impl rule__STBuiltinFeatureExpression__Group__2 )
            // InternalSTCoreParser.g:8774:2: rule__STBuiltinFeatureExpression__Group__1__Impl rule__STBuiltinFeatureExpression__Group__2
            {
            pushFollow(FOLLOW_17);
            rule__STBuiltinFeatureExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group__1"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group__1__Impl"
    // InternalSTCoreParser.g:8781:1: rule__STBuiltinFeatureExpression__Group__1__Impl : ( ( rule__STBuiltinFeatureExpression__FeatureAssignment_1 ) ) ;
    public final void rule__STBuiltinFeatureExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8785:1: ( ( ( rule__STBuiltinFeatureExpression__FeatureAssignment_1 ) ) )
            // InternalSTCoreParser.g:8786:1: ( ( rule__STBuiltinFeatureExpression__FeatureAssignment_1 ) )
            {
            // InternalSTCoreParser.g:8786:1: ( ( rule__STBuiltinFeatureExpression__FeatureAssignment_1 ) )
            // InternalSTCoreParser.g:8787:2: ( rule__STBuiltinFeatureExpression__FeatureAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getFeatureAssignment_1()); 
            }
            // InternalSTCoreParser.g:8788:2: ( rule__STBuiltinFeatureExpression__FeatureAssignment_1 )
            // InternalSTCoreParser.g:8788:3: rule__STBuiltinFeatureExpression__FeatureAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__FeatureAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getFeatureAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group__1__Impl"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group__2"
    // InternalSTCoreParser.g:8796:1: rule__STBuiltinFeatureExpression__Group__2 : rule__STBuiltinFeatureExpression__Group__2__Impl ;
    public final void rule__STBuiltinFeatureExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8800:1: ( rule__STBuiltinFeatureExpression__Group__2__Impl )
            // InternalSTCoreParser.g:8801:2: rule__STBuiltinFeatureExpression__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group__2"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group__2__Impl"
    // InternalSTCoreParser.g:8807:1: rule__STBuiltinFeatureExpression__Group__2__Impl : ( ( rule__STBuiltinFeatureExpression__Group_2__0 )? ) ;
    public final void rule__STBuiltinFeatureExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8811:1: ( ( ( rule__STBuiltinFeatureExpression__Group_2__0 )? ) )
            // InternalSTCoreParser.g:8812:1: ( ( rule__STBuiltinFeatureExpression__Group_2__0 )? )
            {
            // InternalSTCoreParser.g:8812:1: ( ( rule__STBuiltinFeatureExpression__Group_2__0 )? )
            // InternalSTCoreParser.g:8813:2: ( rule__STBuiltinFeatureExpression__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getGroup_2()); 
            }
            // InternalSTCoreParser.g:8814:2: ( rule__STBuiltinFeatureExpression__Group_2__0 )?
            int alt77=2;
            alt77 = dfa77.predict(input);
            switch (alt77) {
                case 1 :
                    // InternalSTCoreParser.g:8814:3: rule__STBuiltinFeatureExpression__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STBuiltinFeatureExpression__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group__2__Impl"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2__0"
    // InternalSTCoreParser.g:8823:1: rule__STBuiltinFeatureExpression__Group_2__0 : rule__STBuiltinFeatureExpression__Group_2__0__Impl rule__STBuiltinFeatureExpression__Group_2__1 ;
    public final void rule__STBuiltinFeatureExpression__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8827:1: ( rule__STBuiltinFeatureExpression__Group_2__0__Impl rule__STBuiltinFeatureExpression__Group_2__1 )
            // InternalSTCoreParser.g:8828:2: rule__STBuiltinFeatureExpression__Group_2__0__Impl rule__STBuiltinFeatureExpression__Group_2__1
            {
            pushFollow(FOLLOW_63);
            rule__STBuiltinFeatureExpression__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2__0"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2__0__Impl"
    // InternalSTCoreParser.g:8835:1: rule__STBuiltinFeatureExpression__Group_2__0__Impl : ( ( rule__STBuiltinFeatureExpression__CallAssignment_2_0 ) ) ;
    public final void rule__STBuiltinFeatureExpression__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8839:1: ( ( ( rule__STBuiltinFeatureExpression__CallAssignment_2_0 ) ) )
            // InternalSTCoreParser.g:8840:1: ( ( rule__STBuiltinFeatureExpression__CallAssignment_2_0 ) )
            {
            // InternalSTCoreParser.g:8840:1: ( ( rule__STBuiltinFeatureExpression__CallAssignment_2_0 ) )
            // InternalSTCoreParser.g:8841:2: ( rule__STBuiltinFeatureExpression__CallAssignment_2_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getCallAssignment_2_0()); 
            }
            // InternalSTCoreParser.g:8842:2: ( rule__STBuiltinFeatureExpression__CallAssignment_2_0 )
            // InternalSTCoreParser.g:8842:3: rule__STBuiltinFeatureExpression__CallAssignment_2_0
            {
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__CallAssignment_2_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getCallAssignment_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2__0__Impl"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2__1"
    // InternalSTCoreParser.g:8850:1: rule__STBuiltinFeatureExpression__Group_2__1 : rule__STBuiltinFeatureExpression__Group_2__1__Impl rule__STBuiltinFeatureExpression__Group_2__2 ;
    public final void rule__STBuiltinFeatureExpression__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8854:1: ( rule__STBuiltinFeatureExpression__Group_2__1__Impl rule__STBuiltinFeatureExpression__Group_2__2 )
            // InternalSTCoreParser.g:8855:2: rule__STBuiltinFeatureExpression__Group_2__1__Impl rule__STBuiltinFeatureExpression__Group_2__2
            {
            pushFollow(FOLLOW_63);
            rule__STBuiltinFeatureExpression__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__Group_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2__1"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2__1__Impl"
    // InternalSTCoreParser.g:8862:1: rule__STBuiltinFeatureExpression__Group_2__1__Impl : ( ( rule__STBuiltinFeatureExpression__Group_2_1__0 )? ) ;
    public final void rule__STBuiltinFeatureExpression__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8866:1: ( ( ( rule__STBuiltinFeatureExpression__Group_2_1__0 )? ) )
            // InternalSTCoreParser.g:8867:1: ( ( rule__STBuiltinFeatureExpression__Group_2_1__0 )? )
            {
            // InternalSTCoreParser.g:8867:1: ( ( rule__STBuiltinFeatureExpression__Group_2_1__0 )? )
            // InternalSTCoreParser.g:8868:2: ( rule__STBuiltinFeatureExpression__Group_2_1__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getGroup_2_1()); 
            }
            // InternalSTCoreParser.g:8869:2: ( rule__STBuiltinFeatureExpression__Group_2_1__0 )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==LDATE_AND_TIME||LA78_0==DATE_AND_TIME||LA78_0==LTIME_OF_DAY||LA78_0==TIME_OF_DAY||LA78_0==WSTRING||LA78_0==STRING||LA78_0==DWORD||LA78_0==FALSE||(LA78_0>=LDATE && LA78_0<=ULINT)||(LA78_0>=USINT && LA78_0<=WCHAR)||(LA78_0>=BOOL && LA78_0<=BYTE)||(LA78_0>=CHAR && LA78_0<=DINT)||(LA78_0>=LINT && LA78_0<=LTOD)||(LA78_0>=REAL && LA78_0<=SINT)||(LA78_0>=THIS && LA78_0<=TRUE)||LA78_0==UINT||(LA78_0>=WORD && LA78_0<=AND)||(LA78_0>=INT && LA78_0<=NOT)||LA78_0==TOD||LA78_0==XOR||LA78_0==DT||(LA78_0>=LD && LA78_0<=LT)||LA78_0==OR||LA78_0==LeftParenthesis||LA78_0==PlusSign||LA78_0==HyphenMinus||(LA78_0>=D && LA78_0<=T)||(LA78_0>=RULE_NON_DECIMAL && LA78_0<=RULE_DECIMAL)||(LA78_0>=RULE_ID && LA78_0<=RULE_STRING)) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // InternalSTCoreParser.g:8869:3: rule__STBuiltinFeatureExpression__Group_2_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STBuiltinFeatureExpression__Group_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getGroup_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2__1__Impl"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2__2"
    // InternalSTCoreParser.g:8877:1: rule__STBuiltinFeatureExpression__Group_2__2 : rule__STBuiltinFeatureExpression__Group_2__2__Impl ;
    public final void rule__STBuiltinFeatureExpression__Group_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8881:1: ( rule__STBuiltinFeatureExpression__Group_2__2__Impl )
            // InternalSTCoreParser.g:8882:2: rule__STBuiltinFeatureExpression__Group_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__Group_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2__2"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2__2__Impl"
    // InternalSTCoreParser.g:8888:1: rule__STBuiltinFeatureExpression__Group_2__2__Impl : ( RightParenthesis ) ;
    public final void rule__STBuiltinFeatureExpression__Group_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8892:1: ( ( RightParenthesis ) )
            // InternalSTCoreParser.g:8893:1: ( RightParenthesis )
            {
            // InternalSTCoreParser.g:8893:1: ( RightParenthesis )
            // InternalSTCoreParser.g:8894:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getRightParenthesisKeyword_2_2()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getRightParenthesisKeyword_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2__2__Impl"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2_1__0"
    // InternalSTCoreParser.g:8904:1: rule__STBuiltinFeatureExpression__Group_2_1__0 : rule__STBuiltinFeatureExpression__Group_2_1__0__Impl rule__STBuiltinFeatureExpression__Group_2_1__1 ;
    public final void rule__STBuiltinFeatureExpression__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8908:1: ( rule__STBuiltinFeatureExpression__Group_2_1__0__Impl rule__STBuiltinFeatureExpression__Group_2_1__1 )
            // InternalSTCoreParser.g:8909:2: rule__STBuiltinFeatureExpression__Group_2_1__0__Impl rule__STBuiltinFeatureExpression__Group_2_1__1
            {
            pushFollow(FOLLOW_64);
            rule__STBuiltinFeatureExpression__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2_1__0"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2_1__0__Impl"
    // InternalSTCoreParser.g:8916:1: rule__STBuiltinFeatureExpression__Group_2_1__0__Impl : ( ( rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_0 ) ) ;
    public final void rule__STBuiltinFeatureExpression__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8920:1: ( ( ( rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_0 ) ) )
            // InternalSTCoreParser.g:8921:1: ( ( rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_0 ) )
            {
            // InternalSTCoreParser.g:8921:1: ( ( rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_0 ) )
            // InternalSTCoreParser.g:8922:2: ( rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getParametersAssignment_2_1_0()); 
            }
            // InternalSTCoreParser.g:8923:2: ( rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_0 )
            // InternalSTCoreParser.g:8923:3: rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_0
            {
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getParametersAssignment_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2_1__0__Impl"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2_1__1"
    // InternalSTCoreParser.g:8931:1: rule__STBuiltinFeatureExpression__Group_2_1__1 : rule__STBuiltinFeatureExpression__Group_2_1__1__Impl ;
    public final void rule__STBuiltinFeatureExpression__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8935:1: ( rule__STBuiltinFeatureExpression__Group_2_1__1__Impl )
            // InternalSTCoreParser.g:8936:2: rule__STBuiltinFeatureExpression__Group_2_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2_1__1"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2_1__1__Impl"
    // InternalSTCoreParser.g:8942:1: rule__STBuiltinFeatureExpression__Group_2_1__1__Impl : ( ( rule__STBuiltinFeatureExpression__Group_2_1_1__0 )* ) ;
    public final void rule__STBuiltinFeatureExpression__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8946:1: ( ( ( rule__STBuiltinFeatureExpression__Group_2_1_1__0 )* ) )
            // InternalSTCoreParser.g:8947:1: ( ( rule__STBuiltinFeatureExpression__Group_2_1_1__0 )* )
            {
            // InternalSTCoreParser.g:8947:1: ( ( rule__STBuiltinFeatureExpression__Group_2_1_1__0 )* )
            // InternalSTCoreParser.g:8948:2: ( rule__STBuiltinFeatureExpression__Group_2_1_1__0 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getGroup_2_1_1()); 
            }
            // InternalSTCoreParser.g:8949:2: ( rule__STBuiltinFeatureExpression__Group_2_1_1__0 )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==Comma) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // InternalSTCoreParser.g:8949:3: rule__STBuiltinFeatureExpression__Group_2_1_1__0
            	    {
            	    pushFollow(FOLLOW_13);
            	    rule__STBuiltinFeatureExpression__Group_2_1_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getGroup_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2_1__1__Impl"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2_1_1__0"
    // InternalSTCoreParser.g:8958:1: rule__STBuiltinFeatureExpression__Group_2_1_1__0 : rule__STBuiltinFeatureExpression__Group_2_1_1__0__Impl rule__STBuiltinFeatureExpression__Group_2_1_1__1 ;
    public final void rule__STBuiltinFeatureExpression__Group_2_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8962:1: ( rule__STBuiltinFeatureExpression__Group_2_1_1__0__Impl rule__STBuiltinFeatureExpression__Group_2_1_1__1 )
            // InternalSTCoreParser.g:8963:2: rule__STBuiltinFeatureExpression__Group_2_1_1__0__Impl rule__STBuiltinFeatureExpression__Group_2_1_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STBuiltinFeatureExpression__Group_2_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__Group_2_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2_1_1__0"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2_1_1__0__Impl"
    // InternalSTCoreParser.g:8970:1: rule__STBuiltinFeatureExpression__Group_2_1_1__0__Impl : ( Comma ) ;
    public final void rule__STBuiltinFeatureExpression__Group_2_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8974:1: ( ( Comma ) )
            // InternalSTCoreParser.g:8975:1: ( Comma )
            {
            // InternalSTCoreParser.g:8975:1: ( Comma )
            // InternalSTCoreParser.g:8976:2: Comma
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getCommaKeyword_2_1_1_0()); 
            }
            match(input,Comma,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getCommaKeyword_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2_1_1__0__Impl"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2_1_1__1"
    // InternalSTCoreParser.g:8985:1: rule__STBuiltinFeatureExpression__Group_2_1_1__1 : rule__STBuiltinFeatureExpression__Group_2_1_1__1__Impl ;
    public final void rule__STBuiltinFeatureExpression__Group_2_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:8989:1: ( rule__STBuiltinFeatureExpression__Group_2_1_1__1__Impl )
            // InternalSTCoreParser.g:8990:2: rule__STBuiltinFeatureExpression__Group_2_1_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__Group_2_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2_1_1__1"


    // $ANTLR start "rule__STBuiltinFeatureExpression__Group_2_1_1__1__Impl"
    // InternalSTCoreParser.g:8996:1: rule__STBuiltinFeatureExpression__Group_2_1_1__1__Impl : ( ( rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_1_1 ) ) ;
    public final void rule__STBuiltinFeatureExpression__Group_2_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9000:1: ( ( ( rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_1_1 ) ) )
            // InternalSTCoreParser.g:9001:1: ( ( rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_1_1 ) )
            {
            // InternalSTCoreParser.g:9001:1: ( ( rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_1_1 ) )
            // InternalSTCoreParser.g:9002:2: ( rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getParametersAssignment_2_1_1_1()); 
            }
            // InternalSTCoreParser.g:9003:2: ( rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_1_1 )
            // InternalSTCoreParser.g:9003:3: rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getParametersAssignment_2_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__Group_2_1_1__1__Impl"


    // $ANTLR start "rule__STMultibitPartialExpression__Group__0"
    // InternalSTCoreParser.g:9012:1: rule__STMultibitPartialExpression__Group__0 : rule__STMultibitPartialExpression__Group__0__Impl rule__STMultibitPartialExpression__Group__1 ;
    public final void rule__STMultibitPartialExpression__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9016:1: ( rule__STMultibitPartialExpression__Group__0__Impl rule__STMultibitPartialExpression__Group__1 )
            // InternalSTCoreParser.g:9017:2: rule__STMultibitPartialExpression__Group__0__Impl rule__STMultibitPartialExpression__Group__1
            {
            pushFollow(FOLLOW_61);
            rule__STMultibitPartialExpression__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STMultibitPartialExpression__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__Group__0"


    // $ANTLR start "rule__STMultibitPartialExpression__Group__0__Impl"
    // InternalSTCoreParser.g:9024:1: rule__STMultibitPartialExpression__Group__0__Impl : ( () ) ;
    public final void rule__STMultibitPartialExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9028:1: ( ( () ) )
            // InternalSTCoreParser.g:9029:1: ( () )
            {
            // InternalSTCoreParser.g:9029:1: ( () )
            // InternalSTCoreParser.g:9030:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMultibitPartialExpressionAccess().getSTMultibitPartialExpressionAction_0()); 
            }
            // InternalSTCoreParser.g:9031:2: ()
            // InternalSTCoreParser.g:9031:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMultibitPartialExpressionAccess().getSTMultibitPartialExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__Group__0__Impl"


    // $ANTLR start "rule__STMultibitPartialExpression__Group__1"
    // InternalSTCoreParser.g:9039:1: rule__STMultibitPartialExpression__Group__1 : rule__STMultibitPartialExpression__Group__1__Impl rule__STMultibitPartialExpression__Group__2 ;
    public final void rule__STMultibitPartialExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9043:1: ( rule__STMultibitPartialExpression__Group__1__Impl rule__STMultibitPartialExpression__Group__2 )
            // InternalSTCoreParser.g:9044:2: rule__STMultibitPartialExpression__Group__1__Impl rule__STMultibitPartialExpression__Group__2
            {
            pushFollow(FOLLOW_61);
            rule__STMultibitPartialExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STMultibitPartialExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__Group__1"


    // $ANTLR start "rule__STMultibitPartialExpression__Group__1__Impl"
    // InternalSTCoreParser.g:9051:1: rule__STMultibitPartialExpression__Group__1__Impl : ( ( rule__STMultibitPartialExpression__SpecifierAssignment_1 )? ) ;
    public final void rule__STMultibitPartialExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9055:1: ( ( ( rule__STMultibitPartialExpression__SpecifierAssignment_1 )? ) )
            // InternalSTCoreParser.g:9056:1: ( ( rule__STMultibitPartialExpression__SpecifierAssignment_1 )? )
            {
            // InternalSTCoreParser.g:9056:1: ( ( rule__STMultibitPartialExpression__SpecifierAssignment_1 )? )
            // InternalSTCoreParser.g:9057:2: ( rule__STMultibitPartialExpression__SpecifierAssignment_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMultibitPartialExpressionAccess().getSpecifierAssignment_1()); 
            }
            // InternalSTCoreParser.g:9058:2: ( rule__STMultibitPartialExpression__SpecifierAssignment_1 )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( ((LA80_0>=B && LA80_0<=X)) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // InternalSTCoreParser.g:9058:3: rule__STMultibitPartialExpression__SpecifierAssignment_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__STMultibitPartialExpression__SpecifierAssignment_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMultibitPartialExpressionAccess().getSpecifierAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__Group__1__Impl"


    // $ANTLR start "rule__STMultibitPartialExpression__Group__2"
    // InternalSTCoreParser.g:9066:1: rule__STMultibitPartialExpression__Group__2 : rule__STMultibitPartialExpression__Group__2__Impl ;
    public final void rule__STMultibitPartialExpression__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9070:1: ( rule__STMultibitPartialExpression__Group__2__Impl )
            // InternalSTCoreParser.g:9071:2: rule__STMultibitPartialExpression__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STMultibitPartialExpression__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__Group__2"


    // $ANTLR start "rule__STMultibitPartialExpression__Group__2__Impl"
    // InternalSTCoreParser.g:9077:1: rule__STMultibitPartialExpression__Group__2__Impl : ( ( rule__STMultibitPartialExpression__Alternatives_2 ) ) ;
    public final void rule__STMultibitPartialExpression__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9081:1: ( ( ( rule__STMultibitPartialExpression__Alternatives_2 ) ) )
            // InternalSTCoreParser.g:9082:1: ( ( rule__STMultibitPartialExpression__Alternatives_2 ) )
            {
            // InternalSTCoreParser.g:9082:1: ( ( rule__STMultibitPartialExpression__Alternatives_2 ) )
            // InternalSTCoreParser.g:9083:2: ( rule__STMultibitPartialExpression__Alternatives_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMultibitPartialExpressionAccess().getAlternatives_2()); 
            }
            // InternalSTCoreParser.g:9084:2: ( rule__STMultibitPartialExpression__Alternatives_2 )
            // InternalSTCoreParser.g:9084:3: rule__STMultibitPartialExpression__Alternatives_2
            {
            pushFollow(FOLLOW_2);
            rule__STMultibitPartialExpression__Alternatives_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMultibitPartialExpressionAccess().getAlternatives_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__Group__2__Impl"


    // $ANTLR start "rule__STMultibitPartialExpression__Group_2_1__0"
    // InternalSTCoreParser.g:9093:1: rule__STMultibitPartialExpression__Group_2_1__0 : rule__STMultibitPartialExpression__Group_2_1__0__Impl rule__STMultibitPartialExpression__Group_2_1__1 ;
    public final void rule__STMultibitPartialExpression__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9097:1: ( rule__STMultibitPartialExpression__Group_2_1__0__Impl rule__STMultibitPartialExpression__Group_2_1__1 )
            // InternalSTCoreParser.g:9098:2: rule__STMultibitPartialExpression__Group_2_1__0__Impl rule__STMultibitPartialExpression__Group_2_1__1
            {
            pushFollow(FOLLOW_11);
            rule__STMultibitPartialExpression__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STMultibitPartialExpression__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__Group_2_1__0"


    // $ANTLR start "rule__STMultibitPartialExpression__Group_2_1__0__Impl"
    // InternalSTCoreParser.g:9105:1: rule__STMultibitPartialExpression__Group_2_1__0__Impl : ( LeftParenthesis ) ;
    public final void rule__STMultibitPartialExpression__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9109:1: ( ( LeftParenthesis ) )
            // InternalSTCoreParser.g:9110:1: ( LeftParenthesis )
            {
            // InternalSTCoreParser.g:9110:1: ( LeftParenthesis )
            // InternalSTCoreParser.g:9111:2: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMultibitPartialExpressionAccess().getLeftParenthesisKeyword_2_1_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMultibitPartialExpressionAccess().getLeftParenthesisKeyword_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__Group_2_1__0__Impl"


    // $ANTLR start "rule__STMultibitPartialExpression__Group_2_1__1"
    // InternalSTCoreParser.g:9120:1: rule__STMultibitPartialExpression__Group_2_1__1 : rule__STMultibitPartialExpression__Group_2_1__1__Impl rule__STMultibitPartialExpression__Group_2_1__2 ;
    public final void rule__STMultibitPartialExpression__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9124:1: ( rule__STMultibitPartialExpression__Group_2_1__1__Impl rule__STMultibitPartialExpression__Group_2_1__2 )
            // InternalSTCoreParser.g:9125:2: rule__STMultibitPartialExpression__Group_2_1__1__Impl rule__STMultibitPartialExpression__Group_2_1__2
            {
            pushFollow(FOLLOW_62);
            rule__STMultibitPartialExpression__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STMultibitPartialExpression__Group_2_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__Group_2_1__1"


    // $ANTLR start "rule__STMultibitPartialExpression__Group_2_1__1__Impl"
    // InternalSTCoreParser.g:9132:1: rule__STMultibitPartialExpression__Group_2_1__1__Impl : ( ( rule__STMultibitPartialExpression__ExpressionAssignment_2_1_1 ) ) ;
    public final void rule__STMultibitPartialExpression__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9136:1: ( ( ( rule__STMultibitPartialExpression__ExpressionAssignment_2_1_1 ) ) )
            // InternalSTCoreParser.g:9137:1: ( ( rule__STMultibitPartialExpression__ExpressionAssignment_2_1_1 ) )
            {
            // InternalSTCoreParser.g:9137:1: ( ( rule__STMultibitPartialExpression__ExpressionAssignment_2_1_1 ) )
            // InternalSTCoreParser.g:9138:2: ( rule__STMultibitPartialExpression__ExpressionAssignment_2_1_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMultibitPartialExpressionAccess().getExpressionAssignment_2_1_1()); 
            }
            // InternalSTCoreParser.g:9139:2: ( rule__STMultibitPartialExpression__ExpressionAssignment_2_1_1 )
            // InternalSTCoreParser.g:9139:3: rule__STMultibitPartialExpression__ExpressionAssignment_2_1_1
            {
            pushFollow(FOLLOW_2);
            rule__STMultibitPartialExpression__ExpressionAssignment_2_1_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMultibitPartialExpressionAccess().getExpressionAssignment_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__Group_2_1__1__Impl"


    // $ANTLR start "rule__STMultibitPartialExpression__Group_2_1__2"
    // InternalSTCoreParser.g:9147:1: rule__STMultibitPartialExpression__Group_2_1__2 : rule__STMultibitPartialExpression__Group_2_1__2__Impl ;
    public final void rule__STMultibitPartialExpression__Group_2_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9151:1: ( rule__STMultibitPartialExpression__Group_2_1__2__Impl )
            // InternalSTCoreParser.g:9152:2: rule__STMultibitPartialExpression__Group_2_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STMultibitPartialExpression__Group_2_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__Group_2_1__2"


    // $ANTLR start "rule__STMultibitPartialExpression__Group_2_1__2__Impl"
    // InternalSTCoreParser.g:9158:1: rule__STMultibitPartialExpression__Group_2_1__2__Impl : ( RightParenthesis ) ;
    public final void rule__STMultibitPartialExpression__Group_2_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9162:1: ( ( RightParenthesis ) )
            // InternalSTCoreParser.g:9163:1: ( RightParenthesis )
            {
            // InternalSTCoreParser.g:9163:1: ( RightParenthesis )
            // InternalSTCoreParser.g:9164:2: RightParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMultibitPartialExpressionAccess().getRightParenthesisKeyword_2_1_2()); 
            }
            match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMultibitPartialExpressionAccess().getRightParenthesisKeyword_2_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__Group_2_1__2__Impl"


    // $ANTLR start "rule__STNumericLiteral__Group__0"
    // InternalSTCoreParser.g:9174:1: rule__STNumericLiteral__Group__0 : rule__STNumericLiteral__Group__0__Impl rule__STNumericLiteral__Group__1 ;
    public final void rule__STNumericLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9178:1: ( rule__STNumericLiteral__Group__0__Impl rule__STNumericLiteral__Group__1 )
            // InternalSTCoreParser.g:9179:2: rule__STNumericLiteral__Group__0__Impl rule__STNumericLiteral__Group__1
            {
            pushFollow(FOLLOW_66);
            rule__STNumericLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STNumericLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STNumericLiteral__Group__0"


    // $ANTLR start "rule__STNumericLiteral__Group__0__Impl"
    // InternalSTCoreParser.g:9186:1: rule__STNumericLiteral__Group__0__Impl : ( ( rule__STNumericLiteral__Group_0__0 )? ) ;
    public final void rule__STNumericLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9190:1: ( ( ( rule__STNumericLiteral__Group_0__0 )? ) )
            // InternalSTCoreParser.g:9191:1: ( ( rule__STNumericLiteral__Group_0__0 )? )
            {
            // InternalSTCoreParser.g:9191:1: ( ( rule__STNumericLiteral__Group_0__0 )? )
            // InternalSTCoreParser.g:9192:2: ( rule__STNumericLiteral__Group_0__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTNumericLiteralAccess().getGroup_0()); 
            }
            // InternalSTCoreParser.g:9193:2: ( rule__STNumericLiteral__Group_0__0 )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==DWORD||LA81_0==LREAL||(LA81_0>=LWORD && LA81_0<=ULINT)||LA81_0==USINT||(LA81_0>=BOOL && LA81_0<=BYTE)||LA81_0==DINT||LA81_0==LINT||(LA81_0>=REAL && LA81_0<=SINT)||LA81_0==UINT||LA81_0==WORD||LA81_0==INT) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // InternalSTCoreParser.g:9193:3: rule__STNumericLiteral__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STNumericLiteral__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTNumericLiteralAccess().getGroup_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STNumericLiteral__Group__0__Impl"


    // $ANTLR start "rule__STNumericLiteral__Group__1"
    // InternalSTCoreParser.g:9201:1: rule__STNumericLiteral__Group__1 : rule__STNumericLiteral__Group__1__Impl ;
    public final void rule__STNumericLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9205:1: ( rule__STNumericLiteral__Group__1__Impl )
            // InternalSTCoreParser.g:9206:2: rule__STNumericLiteral__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STNumericLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STNumericLiteral__Group__1"


    // $ANTLR start "rule__STNumericLiteral__Group__1__Impl"
    // InternalSTCoreParser.g:9212:1: rule__STNumericLiteral__Group__1__Impl : ( ( rule__STNumericLiteral__ValueAssignment_1 ) ) ;
    public final void rule__STNumericLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9216:1: ( ( ( rule__STNumericLiteral__ValueAssignment_1 ) ) )
            // InternalSTCoreParser.g:9217:1: ( ( rule__STNumericLiteral__ValueAssignment_1 ) )
            {
            // InternalSTCoreParser.g:9217:1: ( ( rule__STNumericLiteral__ValueAssignment_1 ) )
            // InternalSTCoreParser.g:9218:2: ( rule__STNumericLiteral__ValueAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTNumericLiteralAccess().getValueAssignment_1()); 
            }
            // InternalSTCoreParser.g:9219:2: ( rule__STNumericLiteral__ValueAssignment_1 )
            // InternalSTCoreParser.g:9219:3: rule__STNumericLiteral__ValueAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__STNumericLiteral__ValueAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTNumericLiteralAccess().getValueAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STNumericLiteral__Group__1__Impl"


    // $ANTLR start "rule__STNumericLiteral__Group_0__0"
    // InternalSTCoreParser.g:9228:1: rule__STNumericLiteral__Group_0__0 : rule__STNumericLiteral__Group_0__0__Impl rule__STNumericLiteral__Group_0__1 ;
    public final void rule__STNumericLiteral__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9232:1: ( rule__STNumericLiteral__Group_0__0__Impl rule__STNumericLiteral__Group_0__1 )
            // InternalSTCoreParser.g:9233:2: rule__STNumericLiteral__Group_0__0__Impl rule__STNumericLiteral__Group_0__1
            {
            pushFollow(FOLLOW_67);
            rule__STNumericLiteral__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STNumericLiteral__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STNumericLiteral__Group_0__0"


    // $ANTLR start "rule__STNumericLiteral__Group_0__0__Impl"
    // InternalSTCoreParser.g:9240:1: rule__STNumericLiteral__Group_0__0__Impl : ( ( rule__STNumericLiteral__TypeAssignment_0_0 ) ) ;
    public final void rule__STNumericLiteral__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9244:1: ( ( ( rule__STNumericLiteral__TypeAssignment_0_0 ) ) )
            // InternalSTCoreParser.g:9245:1: ( ( rule__STNumericLiteral__TypeAssignment_0_0 ) )
            {
            // InternalSTCoreParser.g:9245:1: ( ( rule__STNumericLiteral__TypeAssignment_0_0 ) )
            // InternalSTCoreParser.g:9246:2: ( rule__STNumericLiteral__TypeAssignment_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTNumericLiteralAccess().getTypeAssignment_0_0()); 
            }
            // InternalSTCoreParser.g:9247:2: ( rule__STNumericLiteral__TypeAssignment_0_0 )
            // InternalSTCoreParser.g:9247:3: rule__STNumericLiteral__TypeAssignment_0_0
            {
            pushFollow(FOLLOW_2);
            rule__STNumericLiteral__TypeAssignment_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTNumericLiteralAccess().getTypeAssignment_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STNumericLiteral__Group_0__0__Impl"


    // $ANTLR start "rule__STNumericLiteral__Group_0__1"
    // InternalSTCoreParser.g:9255:1: rule__STNumericLiteral__Group_0__1 : rule__STNumericLiteral__Group_0__1__Impl ;
    public final void rule__STNumericLiteral__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9259:1: ( rule__STNumericLiteral__Group_0__1__Impl )
            // InternalSTCoreParser.g:9260:2: rule__STNumericLiteral__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STNumericLiteral__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STNumericLiteral__Group_0__1"


    // $ANTLR start "rule__STNumericLiteral__Group_0__1__Impl"
    // InternalSTCoreParser.g:9266:1: rule__STNumericLiteral__Group_0__1__Impl : ( NumberSign ) ;
    public final void rule__STNumericLiteral__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9270:1: ( ( NumberSign ) )
            // InternalSTCoreParser.g:9271:1: ( NumberSign )
            {
            // InternalSTCoreParser.g:9271:1: ( NumberSign )
            // InternalSTCoreParser.g:9272:2: NumberSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTNumericLiteralAccess().getNumberSignKeyword_0_1()); 
            }
            match(input,NumberSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTNumericLiteralAccess().getNumberSignKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STNumericLiteral__Group_0__1__Impl"


    // $ANTLR start "rule__STDateLiteral__Group__0"
    // InternalSTCoreParser.g:9282:1: rule__STDateLiteral__Group__0 : rule__STDateLiteral__Group__0__Impl rule__STDateLiteral__Group__1 ;
    public final void rule__STDateLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9286:1: ( rule__STDateLiteral__Group__0__Impl rule__STDateLiteral__Group__1 )
            // InternalSTCoreParser.g:9287:2: rule__STDateLiteral__Group__0__Impl rule__STDateLiteral__Group__1
            {
            pushFollow(FOLLOW_67);
            rule__STDateLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STDateLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateLiteral__Group__0"


    // $ANTLR start "rule__STDateLiteral__Group__0__Impl"
    // InternalSTCoreParser.g:9294:1: rule__STDateLiteral__Group__0__Impl : ( ( rule__STDateLiteral__TypeAssignment_0 ) ) ;
    public final void rule__STDateLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9298:1: ( ( ( rule__STDateLiteral__TypeAssignment_0 ) ) )
            // InternalSTCoreParser.g:9299:1: ( ( rule__STDateLiteral__TypeAssignment_0 ) )
            {
            // InternalSTCoreParser.g:9299:1: ( ( rule__STDateLiteral__TypeAssignment_0 ) )
            // InternalSTCoreParser.g:9300:2: ( rule__STDateLiteral__TypeAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateLiteralAccess().getTypeAssignment_0()); 
            }
            // InternalSTCoreParser.g:9301:2: ( rule__STDateLiteral__TypeAssignment_0 )
            // InternalSTCoreParser.g:9301:3: rule__STDateLiteral__TypeAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__STDateLiteral__TypeAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateLiteralAccess().getTypeAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateLiteral__Group__0__Impl"


    // $ANTLR start "rule__STDateLiteral__Group__1"
    // InternalSTCoreParser.g:9309:1: rule__STDateLiteral__Group__1 : rule__STDateLiteral__Group__1__Impl rule__STDateLiteral__Group__2 ;
    public final void rule__STDateLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9313:1: ( rule__STDateLiteral__Group__1__Impl rule__STDateLiteral__Group__2 )
            // InternalSTCoreParser.g:9314:2: rule__STDateLiteral__Group__1__Impl rule__STDateLiteral__Group__2
            {
            pushFollow(FOLLOW_68);
            rule__STDateLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STDateLiteral__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateLiteral__Group__1"


    // $ANTLR start "rule__STDateLiteral__Group__1__Impl"
    // InternalSTCoreParser.g:9321:1: rule__STDateLiteral__Group__1__Impl : ( NumberSign ) ;
    public final void rule__STDateLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9325:1: ( ( NumberSign ) )
            // InternalSTCoreParser.g:9326:1: ( NumberSign )
            {
            // InternalSTCoreParser.g:9326:1: ( NumberSign )
            // InternalSTCoreParser.g:9327:2: NumberSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateLiteralAccess().getNumberSignKeyword_1()); 
            }
            match(input,NumberSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateLiteralAccess().getNumberSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateLiteral__Group__1__Impl"


    // $ANTLR start "rule__STDateLiteral__Group__2"
    // InternalSTCoreParser.g:9336:1: rule__STDateLiteral__Group__2 : rule__STDateLiteral__Group__2__Impl ;
    public final void rule__STDateLiteral__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9340:1: ( rule__STDateLiteral__Group__2__Impl )
            // InternalSTCoreParser.g:9341:2: rule__STDateLiteral__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STDateLiteral__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateLiteral__Group__2"


    // $ANTLR start "rule__STDateLiteral__Group__2__Impl"
    // InternalSTCoreParser.g:9347:1: rule__STDateLiteral__Group__2__Impl : ( ( rule__STDateLiteral__ValueAssignment_2 ) ) ;
    public final void rule__STDateLiteral__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9351:1: ( ( ( rule__STDateLiteral__ValueAssignment_2 ) ) )
            // InternalSTCoreParser.g:9352:1: ( ( rule__STDateLiteral__ValueAssignment_2 ) )
            {
            // InternalSTCoreParser.g:9352:1: ( ( rule__STDateLiteral__ValueAssignment_2 ) )
            // InternalSTCoreParser.g:9353:2: ( rule__STDateLiteral__ValueAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateLiteralAccess().getValueAssignment_2()); 
            }
            // InternalSTCoreParser.g:9354:2: ( rule__STDateLiteral__ValueAssignment_2 )
            // InternalSTCoreParser.g:9354:3: rule__STDateLiteral__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__STDateLiteral__ValueAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateLiteralAccess().getValueAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateLiteral__Group__2__Impl"


    // $ANTLR start "rule__STTimeLiteral__Group__0"
    // InternalSTCoreParser.g:9363:1: rule__STTimeLiteral__Group__0 : rule__STTimeLiteral__Group__0__Impl rule__STTimeLiteral__Group__1 ;
    public final void rule__STTimeLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9367:1: ( rule__STTimeLiteral__Group__0__Impl rule__STTimeLiteral__Group__1 )
            // InternalSTCoreParser.g:9368:2: rule__STTimeLiteral__Group__0__Impl rule__STTimeLiteral__Group__1
            {
            pushFollow(FOLLOW_67);
            rule__STTimeLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STTimeLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeLiteral__Group__0"


    // $ANTLR start "rule__STTimeLiteral__Group__0__Impl"
    // InternalSTCoreParser.g:9375:1: rule__STTimeLiteral__Group__0__Impl : ( ( rule__STTimeLiteral__TypeAssignment_0 ) ) ;
    public final void rule__STTimeLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9379:1: ( ( ( rule__STTimeLiteral__TypeAssignment_0 ) ) )
            // InternalSTCoreParser.g:9380:1: ( ( rule__STTimeLiteral__TypeAssignment_0 ) )
            {
            // InternalSTCoreParser.g:9380:1: ( ( rule__STTimeLiteral__TypeAssignment_0 ) )
            // InternalSTCoreParser.g:9381:2: ( rule__STTimeLiteral__TypeAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeLiteralAccess().getTypeAssignment_0()); 
            }
            // InternalSTCoreParser.g:9382:2: ( rule__STTimeLiteral__TypeAssignment_0 )
            // InternalSTCoreParser.g:9382:3: rule__STTimeLiteral__TypeAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__STTimeLiteral__TypeAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeLiteralAccess().getTypeAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeLiteral__Group__0__Impl"


    // $ANTLR start "rule__STTimeLiteral__Group__1"
    // InternalSTCoreParser.g:9390:1: rule__STTimeLiteral__Group__1 : rule__STTimeLiteral__Group__1__Impl rule__STTimeLiteral__Group__2 ;
    public final void rule__STTimeLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9394:1: ( rule__STTimeLiteral__Group__1__Impl rule__STTimeLiteral__Group__2 )
            // InternalSTCoreParser.g:9395:2: rule__STTimeLiteral__Group__1__Impl rule__STTimeLiteral__Group__2
            {
            pushFollow(FOLLOW_69);
            rule__STTimeLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STTimeLiteral__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeLiteral__Group__1"


    // $ANTLR start "rule__STTimeLiteral__Group__1__Impl"
    // InternalSTCoreParser.g:9402:1: rule__STTimeLiteral__Group__1__Impl : ( NumberSign ) ;
    public final void rule__STTimeLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9406:1: ( ( NumberSign ) )
            // InternalSTCoreParser.g:9407:1: ( NumberSign )
            {
            // InternalSTCoreParser.g:9407:1: ( NumberSign )
            // InternalSTCoreParser.g:9408:2: NumberSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeLiteralAccess().getNumberSignKeyword_1()); 
            }
            match(input,NumberSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeLiteralAccess().getNumberSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeLiteral__Group__1__Impl"


    // $ANTLR start "rule__STTimeLiteral__Group__2"
    // InternalSTCoreParser.g:9417:1: rule__STTimeLiteral__Group__2 : rule__STTimeLiteral__Group__2__Impl ;
    public final void rule__STTimeLiteral__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9421:1: ( rule__STTimeLiteral__Group__2__Impl )
            // InternalSTCoreParser.g:9422:2: rule__STTimeLiteral__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STTimeLiteral__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeLiteral__Group__2"


    // $ANTLR start "rule__STTimeLiteral__Group__2__Impl"
    // InternalSTCoreParser.g:9428:1: rule__STTimeLiteral__Group__2__Impl : ( ( rule__STTimeLiteral__ValueAssignment_2 ) ) ;
    public final void rule__STTimeLiteral__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9432:1: ( ( ( rule__STTimeLiteral__ValueAssignment_2 ) ) )
            // InternalSTCoreParser.g:9433:1: ( ( rule__STTimeLiteral__ValueAssignment_2 ) )
            {
            // InternalSTCoreParser.g:9433:1: ( ( rule__STTimeLiteral__ValueAssignment_2 ) )
            // InternalSTCoreParser.g:9434:2: ( rule__STTimeLiteral__ValueAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeLiteralAccess().getValueAssignment_2()); 
            }
            // InternalSTCoreParser.g:9435:2: ( rule__STTimeLiteral__ValueAssignment_2 )
            // InternalSTCoreParser.g:9435:3: rule__STTimeLiteral__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__STTimeLiteral__ValueAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeLiteralAccess().getValueAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeLiteral__Group__2__Impl"


    // $ANTLR start "rule__STTimeOfDayLiteral__Group__0"
    // InternalSTCoreParser.g:9444:1: rule__STTimeOfDayLiteral__Group__0 : rule__STTimeOfDayLiteral__Group__0__Impl rule__STTimeOfDayLiteral__Group__1 ;
    public final void rule__STTimeOfDayLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9448:1: ( rule__STTimeOfDayLiteral__Group__0__Impl rule__STTimeOfDayLiteral__Group__1 )
            // InternalSTCoreParser.g:9449:2: rule__STTimeOfDayLiteral__Group__0__Impl rule__STTimeOfDayLiteral__Group__1
            {
            pushFollow(FOLLOW_67);
            rule__STTimeOfDayLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STTimeOfDayLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeOfDayLiteral__Group__0"


    // $ANTLR start "rule__STTimeOfDayLiteral__Group__0__Impl"
    // InternalSTCoreParser.g:9456:1: rule__STTimeOfDayLiteral__Group__0__Impl : ( ( rule__STTimeOfDayLiteral__TypeAssignment_0 ) ) ;
    public final void rule__STTimeOfDayLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9460:1: ( ( ( rule__STTimeOfDayLiteral__TypeAssignment_0 ) ) )
            // InternalSTCoreParser.g:9461:1: ( ( rule__STTimeOfDayLiteral__TypeAssignment_0 ) )
            {
            // InternalSTCoreParser.g:9461:1: ( ( rule__STTimeOfDayLiteral__TypeAssignment_0 ) )
            // InternalSTCoreParser.g:9462:2: ( rule__STTimeOfDayLiteral__TypeAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeOfDayLiteralAccess().getTypeAssignment_0()); 
            }
            // InternalSTCoreParser.g:9463:2: ( rule__STTimeOfDayLiteral__TypeAssignment_0 )
            // InternalSTCoreParser.g:9463:3: rule__STTimeOfDayLiteral__TypeAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__STTimeOfDayLiteral__TypeAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeOfDayLiteralAccess().getTypeAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeOfDayLiteral__Group__0__Impl"


    // $ANTLR start "rule__STTimeOfDayLiteral__Group__1"
    // InternalSTCoreParser.g:9471:1: rule__STTimeOfDayLiteral__Group__1 : rule__STTimeOfDayLiteral__Group__1__Impl rule__STTimeOfDayLiteral__Group__2 ;
    public final void rule__STTimeOfDayLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9475:1: ( rule__STTimeOfDayLiteral__Group__1__Impl rule__STTimeOfDayLiteral__Group__2 )
            // InternalSTCoreParser.g:9476:2: rule__STTimeOfDayLiteral__Group__1__Impl rule__STTimeOfDayLiteral__Group__2
            {
            pushFollow(FOLLOW_68);
            rule__STTimeOfDayLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STTimeOfDayLiteral__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeOfDayLiteral__Group__1"


    // $ANTLR start "rule__STTimeOfDayLiteral__Group__1__Impl"
    // InternalSTCoreParser.g:9483:1: rule__STTimeOfDayLiteral__Group__1__Impl : ( NumberSign ) ;
    public final void rule__STTimeOfDayLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9487:1: ( ( NumberSign ) )
            // InternalSTCoreParser.g:9488:1: ( NumberSign )
            {
            // InternalSTCoreParser.g:9488:1: ( NumberSign )
            // InternalSTCoreParser.g:9489:2: NumberSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeOfDayLiteralAccess().getNumberSignKeyword_1()); 
            }
            match(input,NumberSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeOfDayLiteralAccess().getNumberSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeOfDayLiteral__Group__1__Impl"


    // $ANTLR start "rule__STTimeOfDayLiteral__Group__2"
    // InternalSTCoreParser.g:9498:1: rule__STTimeOfDayLiteral__Group__2 : rule__STTimeOfDayLiteral__Group__2__Impl ;
    public final void rule__STTimeOfDayLiteral__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9502:1: ( rule__STTimeOfDayLiteral__Group__2__Impl )
            // InternalSTCoreParser.g:9503:2: rule__STTimeOfDayLiteral__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STTimeOfDayLiteral__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeOfDayLiteral__Group__2"


    // $ANTLR start "rule__STTimeOfDayLiteral__Group__2__Impl"
    // InternalSTCoreParser.g:9509:1: rule__STTimeOfDayLiteral__Group__2__Impl : ( ( rule__STTimeOfDayLiteral__ValueAssignment_2 ) ) ;
    public final void rule__STTimeOfDayLiteral__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9513:1: ( ( ( rule__STTimeOfDayLiteral__ValueAssignment_2 ) ) )
            // InternalSTCoreParser.g:9514:1: ( ( rule__STTimeOfDayLiteral__ValueAssignment_2 ) )
            {
            // InternalSTCoreParser.g:9514:1: ( ( rule__STTimeOfDayLiteral__ValueAssignment_2 ) )
            // InternalSTCoreParser.g:9515:2: ( rule__STTimeOfDayLiteral__ValueAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeOfDayLiteralAccess().getValueAssignment_2()); 
            }
            // InternalSTCoreParser.g:9516:2: ( rule__STTimeOfDayLiteral__ValueAssignment_2 )
            // InternalSTCoreParser.g:9516:3: rule__STTimeOfDayLiteral__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__STTimeOfDayLiteral__ValueAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeOfDayLiteralAccess().getValueAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeOfDayLiteral__Group__2__Impl"


    // $ANTLR start "rule__STDateAndTimeLiteral__Group__0"
    // InternalSTCoreParser.g:9525:1: rule__STDateAndTimeLiteral__Group__0 : rule__STDateAndTimeLiteral__Group__0__Impl rule__STDateAndTimeLiteral__Group__1 ;
    public final void rule__STDateAndTimeLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9529:1: ( rule__STDateAndTimeLiteral__Group__0__Impl rule__STDateAndTimeLiteral__Group__1 )
            // InternalSTCoreParser.g:9530:2: rule__STDateAndTimeLiteral__Group__0__Impl rule__STDateAndTimeLiteral__Group__1
            {
            pushFollow(FOLLOW_67);
            rule__STDateAndTimeLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STDateAndTimeLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateAndTimeLiteral__Group__0"


    // $ANTLR start "rule__STDateAndTimeLiteral__Group__0__Impl"
    // InternalSTCoreParser.g:9537:1: rule__STDateAndTimeLiteral__Group__0__Impl : ( ( rule__STDateAndTimeLiteral__TypeAssignment_0 ) ) ;
    public final void rule__STDateAndTimeLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9541:1: ( ( ( rule__STDateAndTimeLiteral__TypeAssignment_0 ) ) )
            // InternalSTCoreParser.g:9542:1: ( ( rule__STDateAndTimeLiteral__TypeAssignment_0 ) )
            {
            // InternalSTCoreParser.g:9542:1: ( ( rule__STDateAndTimeLiteral__TypeAssignment_0 ) )
            // InternalSTCoreParser.g:9543:2: ( rule__STDateAndTimeLiteral__TypeAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateAndTimeLiteralAccess().getTypeAssignment_0()); 
            }
            // InternalSTCoreParser.g:9544:2: ( rule__STDateAndTimeLiteral__TypeAssignment_0 )
            // InternalSTCoreParser.g:9544:3: rule__STDateAndTimeLiteral__TypeAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__STDateAndTimeLiteral__TypeAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateAndTimeLiteralAccess().getTypeAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateAndTimeLiteral__Group__0__Impl"


    // $ANTLR start "rule__STDateAndTimeLiteral__Group__1"
    // InternalSTCoreParser.g:9552:1: rule__STDateAndTimeLiteral__Group__1 : rule__STDateAndTimeLiteral__Group__1__Impl rule__STDateAndTimeLiteral__Group__2 ;
    public final void rule__STDateAndTimeLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9556:1: ( rule__STDateAndTimeLiteral__Group__1__Impl rule__STDateAndTimeLiteral__Group__2 )
            // InternalSTCoreParser.g:9557:2: rule__STDateAndTimeLiteral__Group__1__Impl rule__STDateAndTimeLiteral__Group__2
            {
            pushFollow(FOLLOW_68);
            rule__STDateAndTimeLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STDateAndTimeLiteral__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateAndTimeLiteral__Group__1"


    // $ANTLR start "rule__STDateAndTimeLiteral__Group__1__Impl"
    // InternalSTCoreParser.g:9564:1: rule__STDateAndTimeLiteral__Group__1__Impl : ( NumberSign ) ;
    public final void rule__STDateAndTimeLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9568:1: ( ( NumberSign ) )
            // InternalSTCoreParser.g:9569:1: ( NumberSign )
            {
            // InternalSTCoreParser.g:9569:1: ( NumberSign )
            // InternalSTCoreParser.g:9570:2: NumberSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateAndTimeLiteralAccess().getNumberSignKeyword_1()); 
            }
            match(input,NumberSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateAndTimeLiteralAccess().getNumberSignKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateAndTimeLiteral__Group__1__Impl"


    // $ANTLR start "rule__STDateAndTimeLiteral__Group__2"
    // InternalSTCoreParser.g:9579:1: rule__STDateAndTimeLiteral__Group__2 : rule__STDateAndTimeLiteral__Group__2__Impl ;
    public final void rule__STDateAndTimeLiteral__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9583:1: ( rule__STDateAndTimeLiteral__Group__2__Impl )
            // InternalSTCoreParser.g:9584:2: rule__STDateAndTimeLiteral__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STDateAndTimeLiteral__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateAndTimeLiteral__Group__2"


    // $ANTLR start "rule__STDateAndTimeLiteral__Group__2__Impl"
    // InternalSTCoreParser.g:9590:1: rule__STDateAndTimeLiteral__Group__2__Impl : ( ( rule__STDateAndTimeLiteral__ValueAssignment_2 ) ) ;
    public final void rule__STDateAndTimeLiteral__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9594:1: ( ( ( rule__STDateAndTimeLiteral__ValueAssignment_2 ) ) )
            // InternalSTCoreParser.g:9595:1: ( ( rule__STDateAndTimeLiteral__ValueAssignment_2 ) )
            {
            // InternalSTCoreParser.g:9595:1: ( ( rule__STDateAndTimeLiteral__ValueAssignment_2 ) )
            // InternalSTCoreParser.g:9596:2: ( rule__STDateAndTimeLiteral__ValueAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateAndTimeLiteralAccess().getValueAssignment_2()); 
            }
            // InternalSTCoreParser.g:9597:2: ( rule__STDateAndTimeLiteral__ValueAssignment_2 )
            // InternalSTCoreParser.g:9597:3: rule__STDateAndTimeLiteral__ValueAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__STDateAndTimeLiteral__ValueAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateAndTimeLiteralAccess().getValueAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateAndTimeLiteral__Group__2__Impl"


    // $ANTLR start "rule__STStringLiteral__Group__0"
    // InternalSTCoreParser.g:9606:1: rule__STStringLiteral__Group__0 : rule__STStringLiteral__Group__0__Impl rule__STStringLiteral__Group__1 ;
    public final void rule__STStringLiteral__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9610:1: ( rule__STStringLiteral__Group__0__Impl rule__STStringLiteral__Group__1 )
            // InternalSTCoreParser.g:9611:2: rule__STStringLiteral__Group__0__Impl rule__STStringLiteral__Group__1
            {
            pushFollow(FOLLOW_70);
            rule__STStringLiteral__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STStringLiteral__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStringLiteral__Group__0"


    // $ANTLR start "rule__STStringLiteral__Group__0__Impl"
    // InternalSTCoreParser.g:9618:1: rule__STStringLiteral__Group__0__Impl : ( ( rule__STStringLiteral__Group_0__0 )? ) ;
    public final void rule__STStringLiteral__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9622:1: ( ( ( rule__STStringLiteral__Group_0__0 )? ) )
            // InternalSTCoreParser.g:9623:1: ( ( rule__STStringLiteral__Group_0__0 )? )
            {
            // InternalSTCoreParser.g:9623:1: ( ( rule__STStringLiteral__Group_0__0 )? )
            // InternalSTCoreParser.g:9624:2: ( rule__STStringLiteral__Group_0__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStringLiteralAccess().getGroup_0()); 
            }
            // InternalSTCoreParser.g:9625:2: ( rule__STStringLiteral__Group_0__0 )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==WSTRING||LA82_0==STRING||LA82_0==WCHAR||LA82_0==CHAR) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // InternalSTCoreParser.g:9625:3: rule__STStringLiteral__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__STStringLiteral__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStringLiteralAccess().getGroup_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStringLiteral__Group__0__Impl"


    // $ANTLR start "rule__STStringLiteral__Group__1"
    // InternalSTCoreParser.g:9633:1: rule__STStringLiteral__Group__1 : rule__STStringLiteral__Group__1__Impl ;
    public final void rule__STStringLiteral__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9637:1: ( rule__STStringLiteral__Group__1__Impl )
            // InternalSTCoreParser.g:9638:2: rule__STStringLiteral__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STStringLiteral__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStringLiteral__Group__1"


    // $ANTLR start "rule__STStringLiteral__Group__1__Impl"
    // InternalSTCoreParser.g:9644:1: rule__STStringLiteral__Group__1__Impl : ( ( rule__STStringLiteral__ValueAssignment_1 ) ) ;
    public final void rule__STStringLiteral__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9648:1: ( ( ( rule__STStringLiteral__ValueAssignment_1 ) ) )
            // InternalSTCoreParser.g:9649:1: ( ( rule__STStringLiteral__ValueAssignment_1 ) )
            {
            // InternalSTCoreParser.g:9649:1: ( ( rule__STStringLiteral__ValueAssignment_1 ) )
            // InternalSTCoreParser.g:9650:2: ( rule__STStringLiteral__ValueAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStringLiteralAccess().getValueAssignment_1()); 
            }
            // InternalSTCoreParser.g:9651:2: ( rule__STStringLiteral__ValueAssignment_1 )
            // InternalSTCoreParser.g:9651:3: rule__STStringLiteral__ValueAssignment_1
            {
            pushFollow(FOLLOW_2);
            rule__STStringLiteral__ValueAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStringLiteralAccess().getValueAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStringLiteral__Group__1__Impl"


    // $ANTLR start "rule__STStringLiteral__Group_0__0"
    // InternalSTCoreParser.g:9660:1: rule__STStringLiteral__Group_0__0 : rule__STStringLiteral__Group_0__0__Impl rule__STStringLiteral__Group_0__1 ;
    public final void rule__STStringLiteral__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9664:1: ( rule__STStringLiteral__Group_0__0__Impl rule__STStringLiteral__Group_0__1 )
            // InternalSTCoreParser.g:9665:2: rule__STStringLiteral__Group_0__0__Impl rule__STStringLiteral__Group_0__1
            {
            pushFollow(FOLLOW_67);
            rule__STStringLiteral__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__STStringLiteral__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStringLiteral__Group_0__0"


    // $ANTLR start "rule__STStringLiteral__Group_0__0__Impl"
    // InternalSTCoreParser.g:9672:1: rule__STStringLiteral__Group_0__0__Impl : ( ( rule__STStringLiteral__TypeAssignment_0_0 ) ) ;
    public final void rule__STStringLiteral__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9676:1: ( ( ( rule__STStringLiteral__TypeAssignment_0_0 ) ) )
            // InternalSTCoreParser.g:9677:1: ( ( rule__STStringLiteral__TypeAssignment_0_0 ) )
            {
            // InternalSTCoreParser.g:9677:1: ( ( rule__STStringLiteral__TypeAssignment_0_0 ) )
            // InternalSTCoreParser.g:9678:2: ( rule__STStringLiteral__TypeAssignment_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStringLiteralAccess().getTypeAssignment_0_0()); 
            }
            // InternalSTCoreParser.g:9679:2: ( rule__STStringLiteral__TypeAssignment_0_0 )
            // InternalSTCoreParser.g:9679:3: rule__STStringLiteral__TypeAssignment_0_0
            {
            pushFollow(FOLLOW_2);
            rule__STStringLiteral__TypeAssignment_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStringLiteralAccess().getTypeAssignment_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStringLiteral__Group_0__0__Impl"


    // $ANTLR start "rule__STStringLiteral__Group_0__1"
    // InternalSTCoreParser.g:9687:1: rule__STStringLiteral__Group_0__1 : rule__STStringLiteral__Group_0__1__Impl ;
    public final void rule__STStringLiteral__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9691:1: ( rule__STStringLiteral__Group_0__1__Impl )
            // InternalSTCoreParser.g:9692:2: rule__STStringLiteral__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__STStringLiteral__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStringLiteral__Group_0__1"


    // $ANTLR start "rule__STStringLiteral__Group_0__1__Impl"
    // InternalSTCoreParser.g:9698:1: rule__STStringLiteral__Group_0__1__Impl : ( NumberSign ) ;
    public final void rule__STStringLiteral__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9702:1: ( ( NumberSign ) )
            // InternalSTCoreParser.g:9703:1: ( NumberSign )
            {
            // InternalSTCoreParser.g:9703:1: ( NumberSign )
            // InternalSTCoreParser.g:9704:2: NumberSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStringLiteralAccess().getNumberSignKeyword_0_1()); 
            }
            match(input,NumberSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStringLiteralAccess().getNumberSignKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStringLiteral__Group_0__1__Impl"


    // $ANTLR start "rule__Number__Group__0"
    // InternalSTCoreParser.g:9714:1: rule__Number__Group__0 : rule__Number__Group__0__Impl rule__Number__Group__1 ;
    public final void rule__Number__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9718:1: ( rule__Number__Group__0__Impl rule__Number__Group__1 )
            // InternalSTCoreParser.g:9719:2: rule__Number__Group__0__Impl rule__Number__Group__1
            {
            pushFollow(FOLLOW_71);
            rule__Number__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Number__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group__0"


    // $ANTLR start "rule__Number__Group__0__Impl"
    // InternalSTCoreParser.g:9726:1: rule__Number__Group__0__Impl : ( ( rule__Number__Alternatives_0 )? ) ;
    public final void rule__Number__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9730:1: ( ( ( rule__Number__Alternatives_0 )? ) )
            // InternalSTCoreParser.g:9731:1: ( ( rule__Number__Alternatives_0 )? )
            {
            // InternalSTCoreParser.g:9731:1: ( ( rule__Number__Alternatives_0 )? )
            // InternalSTCoreParser.g:9732:2: ( rule__Number__Alternatives_0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getAlternatives_0()); 
            }
            // InternalSTCoreParser.g:9733:2: ( rule__Number__Alternatives_0 )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==PlusSign||LA83_0==HyphenMinus) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // InternalSTCoreParser.g:9733:3: rule__Number__Alternatives_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Number__Alternatives_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getAlternatives_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group__0__Impl"


    // $ANTLR start "rule__Number__Group__1"
    // InternalSTCoreParser.g:9741:1: rule__Number__Group__1 : rule__Number__Group__1__Impl rule__Number__Group__2 ;
    public final void rule__Number__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9745:1: ( rule__Number__Group__1__Impl rule__Number__Group__2 )
            // InternalSTCoreParser.g:9746:2: rule__Number__Group__1__Impl rule__Number__Group__2
            {
            pushFollow(FOLLOW_60);
            rule__Number__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Number__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group__1"


    // $ANTLR start "rule__Number__Group__1__Impl"
    // InternalSTCoreParser.g:9753:1: rule__Number__Group__1__Impl : ( ( rule__Number__Alternatives_1 ) ) ;
    public final void rule__Number__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9757:1: ( ( ( rule__Number__Alternatives_1 ) ) )
            // InternalSTCoreParser.g:9758:1: ( ( rule__Number__Alternatives_1 ) )
            {
            // InternalSTCoreParser.g:9758:1: ( ( rule__Number__Alternatives_1 ) )
            // InternalSTCoreParser.g:9759:2: ( rule__Number__Alternatives_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getAlternatives_1()); 
            }
            // InternalSTCoreParser.g:9760:2: ( rule__Number__Alternatives_1 )
            // InternalSTCoreParser.g:9760:3: rule__Number__Alternatives_1
            {
            pushFollow(FOLLOW_2);
            rule__Number__Alternatives_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getAlternatives_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group__1__Impl"


    // $ANTLR start "rule__Number__Group__2"
    // InternalSTCoreParser.g:9768:1: rule__Number__Group__2 : rule__Number__Group__2__Impl ;
    public final void rule__Number__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9772:1: ( rule__Number__Group__2__Impl )
            // InternalSTCoreParser.g:9773:2: rule__Number__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Number__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group__2"


    // $ANTLR start "rule__Number__Group__2__Impl"
    // InternalSTCoreParser.g:9779:1: rule__Number__Group__2__Impl : ( ( rule__Number__Group_2__0 )? ) ;
    public final void rule__Number__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9783:1: ( ( ( rule__Number__Group_2__0 )? ) )
            // InternalSTCoreParser.g:9784:1: ( ( rule__Number__Group_2__0 )? )
            {
            // InternalSTCoreParser.g:9784:1: ( ( rule__Number__Group_2__0 )? )
            // InternalSTCoreParser.g:9785:2: ( rule__Number__Group_2__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getGroup_2()); 
            }
            // InternalSTCoreParser.g:9786:2: ( rule__Number__Group_2__0 )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==FullStop) ) {
                int LA84_1 = input.LA(2);

                if ( (LA84_1==RULE_INT) ) {
                    int LA84_3 = input.LA(3);

                    if ( (synpred139_InternalSTCoreParser()) ) {
                        alt84=1;
                    }
                }
                else if ( (LA84_1==RULE_DECIMAL) ) {
                    alt84=1;
                }
            }
            switch (alt84) {
                case 1 :
                    // InternalSTCoreParser.g:9786:3: rule__Number__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Number__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getGroup_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group__2__Impl"


    // $ANTLR start "rule__Number__Group_2__0"
    // InternalSTCoreParser.g:9795:1: rule__Number__Group_2__0 : rule__Number__Group_2__0__Impl rule__Number__Group_2__1 ;
    public final void rule__Number__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9799:1: ( rule__Number__Group_2__0__Impl rule__Number__Group_2__1 )
            // InternalSTCoreParser.g:9800:2: rule__Number__Group_2__0__Impl rule__Number__Group_2__1
            {
            pushFollow(FOLLOW_72);
            rule__Number__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Number__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_2__0"


    // $ANTLR start "rule__Number__Group_2__0__Impl"
    // InternalSTCoreParser.g:9807:1: rule__Number__Group_2__0__Impl : ( ( FullStop ) ) ;
    public final void rule__Number__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9811:1: ( ( ( FullStop ) ) )
            // InternalSTCoreParser.g:9812:1: ( ( FullStop ) )
            {
            // InternalSTCoreParser.g:9812:1: ( ( FullStop ) )
            // InternalSTCoreParser.g:9813:2: ( FullStop )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getFullStopKeyword_2_0()); 
            }
            // InternalSTCoreParser.g:9814:2: ( FullStop )
            // InternalSTCoreParser.g:9814:3: FullStop
            {
            match(input,FullStop,FOLLOW_2); if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getFullStopKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_2__0__Impl"


    // $ANTLR start "rule__Number__Group_2__1"
    // InternalSTCoreParser.g:9822:1: rule__Number__Group_2__1 : rule__Number__Group_2__1__Impl ;
    public final void rule__Number__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9826:1: ( rule__Number__Group_2__1__Impl )
            // InternalSTCoreParser.g:9827:2: rule__Number__Group_2__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Number__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_2__1"


    // $ANTLR start "rule__Number__Group_2__1__Impl"
    // InternalSTCoreParser.g:9833:1: rule__Number__Group_2__1__Impl : ( ( rule__Number__Alternatives_2_1 ) ) ;
    public final void rule__Number__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9837:1: ( ( ( rule__Number__Alternatives_2_1 ) ) )
            // InternalSTCoreParser.g:9838:1: ( ( rule__Number__Alternatives_2_1 ) )
            {
            // InternalSTCoreParser.g:9838:1: ( ( rule__Number__Alternatives_2_1 ) )
            // InternalSTCoreParser.g:9839:2: ( rule__Number__Alternatives_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getNumberAccess().getAlternatives_2_1()); 
            }
            // InternalSTCoreParser.g:9840:2: ( rule__Number__Alternatives_2_1 )
            // InternalSTCoreParser.g:9840:3: rule__Number__Alternatives_2_1
            {
            pushFollow(FOLLOW_2);
            rule__Number__Alternatives_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getNumberAccess().getAlternatives_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Number__Group_2__1__Impl"


    // $ANTLR start "rule__Time__Group__0"
    // InternalSTCoreParser.g:9849:1: rule__Time__Group__0 : rule__Time__Group__0__Impl rule__Time__Group__1 ;
    public final void rule__Time__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9853:1: ( rule__Time__Group__0__Impl rule__Time__Group__1 )
            // InternalSTCoreParser.g:9854:2: rule__Time__Group__0__Impl rule__Time__Group__1
            {
            pushFollow(FOLLOW_69);
            rule__Time__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Time__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Time__Group__0"


    // $ANTLR start "rule__Time__Group__0__Impl"
    // InternalSTCoreParser.g:9861:1: rule__Time__Group__0__Impl : ( ( rule__Time__Alternatives_0 )? ) ;
    public final void rule__Time__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9865:1: ( ( ( rule__Time__Alternatives_0 )? ) )
            // InternalSTCoreParser.g:9866:1: ( ( rule__Time__Alternatives_0 )? )
            {
            // InternalSTCoreParser.g:9866:1: ( ( rule__Time__Alternatives_0 )? )
            // InternalSTCoreParser.g:9867:2: ( rule__Time__Alternatives_0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeAccess().getAlternatives_0()); 
            }
            // InternalSTCoreParser.g:9868:2: ( rule__Time__Alternatives_0 )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==PlusSign||LA85_0==HyphenMinus) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // InternalSTCoreParser.g:9868:3: rule__Time__Alternatives_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Time__Alternatives_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeAccess().getAlternatives_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Time__Group__0__Impl"


    // $ANTLR start "rule__Time__Group__1"
    // InternalSTCoreParser.g:9876:1: rule__Time__Group__1 : rule__Time__Group__1__Impl ;
    public final void rule__Time__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9880:1: ( rule__Time__Group__1__Impl )
            // InternalSTCoreParser.g:9881:2: rule__Time__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Time__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Time__Group__1"


    // $ANTLR start "rule__Time__Group__1__Impl"
    // InternalSTCoreParser.g:9887:1: rule__Time__Group__1__Impl : ( RULE_TIME_VALUE ) ;
    public final void rule__Time__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9891:1: ( ( RULE_TIME_VALUE ) )
            // InternalSTCoreParser.g:9892:1: ( RULE_TIME_VALUE )
            {
            // InternalSTCoreParser.g:9892:1: ( RULE_TIME_VALUE )
            // InternalSTCoreParser.g:9893:2: RULE_TIME_VALUE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeAccess().getTIME_VALUETerminalRuleCall_1()); 
            }
            match(input,RULE_TIME_VALUE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeAccess().getTIME_VALUETerminalRuleCall_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Time__Group__1__Impl"


    // $ANTLR start "rule__Date__Group__0"
    // InternalSTCoreParser.g:9903:1: rule__Date__Group__0 : rule__Date__Group__0__Impl rule__Date__Group__1 ;
    public final void rule__Date__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9907:1: ( rule__Date__Group__0__Impl rule__Date__Group__1 )
            // InternalSTCoreParser.g:9908:2: rule__Date__Group__0__Impl rule__Date__Group__1
            {
            pushFollow(FOLLOW_73);
            rule__Date__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Date__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Date__Group__0"


    // $ANTLR start "rule__Date__Group__0__Impl"
    // InternalSTCoreParser.g:9915:1: rule__Date__Group__0__Impl : ( RULE_INT ) ;
    public final void rule__Date__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9919:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:9920:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:9920:1: ( RULE_INT )
            // InternalSTCoreParser.g:9921:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAccess().getINTTerminalRuleCall_0()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAccess().getINTTerminalRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Date__Group__0__Impl"


    // $ANTLR start "rule__Date__Group__1"
    // InternalSTCoreParser.g:9930:1: rule__Date__Group__1 : rule__Date__Group__1__Impl rule__Date__Group__2 ;
    public final void rule__Date__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9934:1: ( rule__Date__Group__1__Impl rule__Date__Group__2 )
            // InternalSTCoreParser.g:9935:2: rule__Date__Group__1__Impl rule__Date__Group__2
            {
            pushFollow(FOLLOW_68);
            rule__Date__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Date__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Date__Group__1"


    // $ANTLR start "rule__Date__Group__1__Impl"
    // InternalSTCoreParser.g:9942:1: rule__Date__Group__1__Impl : ( HyphenMinus ) ;
    public final void rule__Date__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9946:1: ( ( HyphenMinus ) )
            // InternalSTCoreParser.g:9947:1: ( HyphenMinus )
            {
            // InternalSTCoreParser.g:9947:1: ( HyphenMinus )
            // InternalSTCoreParser.g:9948:2: HyphenMinus
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAccess().getHyphenMinusKeyword_1()); 
            }
            match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAccess().getHyphenMinusKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Date__Group__1__Impl"


    // $ANTLR start "rule__Date__Group__2"
    // InternalSTCoreParser.g:9957:1: rule__Date__Group__2 : rule__Date__Group__2__Impl rule__Date__Group__3 ;
    public final void rule__Date__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9961:1: ( rule__Date__Group__2__Impl rule__Date__Group__3 )
            // InternalSTCoreParser.g:9962:2: rule__Date__Group__2__Impl rule__Date__Group__3
            {
            pushFollow(FOLLOW_73);
            rule__Date__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Date__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Date__Group__2"


    // $ANTLR start "rule__Date__Group__2__Impl"
    // InternalSTCoreParser.g:9969:1: rule__Date__Group__2__Impl : ( RULE_INT ) ;
    public final void rule__Date__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9973:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:9974:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:9974:1: ( RULE_INT )
            // InternalSTCoreParser.g:9975:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAccess().getINTTerminalRuleCall_2()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAccess().getINTTerminalRuleCall_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Date__Group__2__Impl"


    // $ANTLR start "rule__Date__Group__3"
    // InternalSTCoreParser.g:9984:1: rule__Date__Group__3 : rule__Date__Group__3__Impl rule__Date__Group__4 ;
    public final void rule__Date__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:9988:1: ( rule__Date__Group__3__Impl rule__Date__Group__4 )
            // InternalSTCoreParser.g:9989:2: rule__Date__Group__3__Impl rule__Date__Group__4
            {
            pushFollow(FOLLOW_68);
            rule__Date__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Date__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Date__Group__3"


    // $ANTLR start "rule__Date__Group__3__Impl"
    // InternalSTCoreParser.g:9996:1: rule__Date__Group__3__Impl : ( HyphenMinus ) ;
    public final void rule__Date__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10000:1: ( ( HyphenMinus ) )
            // InternalSTCoreParser.g:10001:1: ( HyphenMinus )
            {
            // InternalSTCoreParser.g:10001:1: ( HyphenMinus )
            // InternalSTCoreParser.g:10002:2: HyphenMinus
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAccess().getHyphenMinusKeyword_3()); 
            }
            match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAccess().getHyphenMinusKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Date__Group__3__Impl"


    // $ANTLR start "rule__Date__Group__4"
    // InternalSTCoreParser.g:10011:1: rule__Date__Group__4 : rule__Date__Group__4__Impl ;
    public final void rule__Date__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10015:1: ( rule__Date__Group__4__Impl )
            // InternalSTCoreParser.g:10016:2: rule__Date__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Date__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Date__Group__4"


    // $ANTLR start "rule__Date__Group__4__Impl"
    // InternalSTCoreParser.g:10022:1: rule__Date__Group__4__Impl : ( RULE_INT ) ;
    public final void rule__Date__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10026:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:10027:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:10027:1: ( RULE_INT )
            // InternalSTCoreParser.g:10028:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAccess().getINTTerminalRuleCall_4()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAccess().getINTTerminalRuleCall_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Date__Group__4__Impl"


    // $ANTLR start "rule__DateAndTime__Group__0"
    // InternalSTCoreParser.g:10038:1: rule__DateAndTime__Group__0 : rule__DateAndTime__Group__0__Impl rule__DateAndTime__Group__1 ;
    public final void rule__DateAndTime__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10042:1: ( rule__DateAndTime__Group__0__Impl rule__DateAndTime__Group__1 )
            // InternalSTCoreParser.g:10043:2: rule__DateAndTime__Group__0__Impl rule__DateAndTime__Group__1
            {
            pushFollow(FOLLOW_73);
            rule__DateAndTime__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__0"


    // $ANTLR start "rule__DateAndTime__Group__0__Impl"
    // InternalSTCoreParser.g:10050:1: rule__DateAndTime__Group__0__Impl : ( RULE_INT ) ;
    public final void rule__DateAndTime__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10054:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:10055:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:10055:1: ( RULE_INT )
            // InternalSTCoreParser.g:10056:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_0()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__0__Impl"


    // $ANTLR start "rule__DateAndTime__Group__1"
    // InternalSTCoreParser.g:10065:1: rule__DateAndTime__Group__1 : rule__DateAndTime__Group__1__Impl rule__DateAndTime__Group__2 ;
    public final void rule__DateAndTime__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10069:1: ( rule__DateAndTime__Group__1__Impl rule__DateAndTime__Group__2 )
            // InternalSTCoreParser.g:10070:2: rule__DateAndTime__Group__1__Impl rule__DateAndTime__Group__2
            {
            pushFollow(FOLLOW_68);
            rule__DateAndTime__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__1"


    // $ANTLR start "rule__DateAndTime__Group__1__Impl"
    // InternalSTCoreParser.g:10077:1: rule__DateAndTime__Group__1__Impl : ( HyphenMinus ) ;
    public final void rule__DateAndTime__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10081:1: ( ( HyphenMinus ) )
            // InternalSTCoreParser.g:10082:1: ( HyphenMinus )
            {
            // InternalSTCoreParser.g:10082:1: ( HyphenMinus )
            // InternalSTCoreParser.g:10083:2: HyphenMinus
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getHyphenMinusKeyword_1()); 
            }
            match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getHyphenMinusKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__1__Impl"


    // $ANTLR start "rule__DateAndTime__Group__2"
    // InternalSTCoreParser.g:10092:1: rule__DateAndTime__Group__2 : rule__DateAndTime__Group__2__Impl rule__DateAndTime__Group__3 ;
    public final void rule__DateAndTime__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10096:1: ( rule__DateAndTime__Group__2__Impl rule__DateAndTime__Group__3 )
            // InternalSTCoreParser.g:10097:2: rule__DateAndTime__Group__2__Impl rule__DateAndTime__Group__3
            {
            pushFollow(FOLLOW_73);
            rule__DateAndTime__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__2"


    // $ANTLR start "rule__DateAndTime__Group__2__Impl"
    // InternalSTCoreParser.g:10104:1: rule__DateAndTime__Group__2__Impl : ( RULE_INT ) ;
    public final void rule__DateAndTime__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10108:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:10109:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:10109:1: ( RULE_INT )
            // InternalSTCoreParser.g:10110:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_2()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__2__Impl"


    // $ANTLR start "rule__DateAndTime__Group__3"
    // InternalSTCoreParser.g:10119:1: rule__DateAndTime__Group__3 : rule__DateAndTime__Group__3__Impl rule__DateAndTime__Group__4 ;
    public final void rule__DateAndTime__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10123:1: ( rule__DateAndTime__Group__3__Impl rule__DateAndTime__Group__4 )
            // InternalSTCoreParser.g:10124:2: rule__DateAndTime__Group__3__Impl rule__DateAndTime__Group__4
            {
            pushFollow(FOLLOW_68);
            rule__DateAndTime__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__3"


    // $ANTLR start "rule__DateAndTime__Group__3__Impl"
    // InternalSTCoreParser.g:10131:1: rule__DateAndTime__Group__3__Impl : ( HyphenMinus ) ;
    public final void rule__DateAndTime__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10135:1: ( ( HyphenMinus ) )
            // InternalSTCoreParser.g:10136:1: ( HyphenMinus )
            {
            // InternalSTCoreParser.g:10136:1: ( HyphenMinus )
            // InternalSTCoreParser.g:10137:2: HyphenMinus
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getHyphenMinusKeyword_3()); 
            }
            match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getHyphenMinusKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__3__Impl"


    // $ANTLR start "rule__DateAndTime__Group__4"
    // InternalSTCoreParser.g:10146:1: rule__DateAndTime__Group__4 : rule__DateAndTime__Group__4__Impl rule__DateAndTime__Group__5 ;
    public final void rule__DateAndTime__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10150:1: ( rule__DateAndTime__Group__4__Impl rule__DateAndTime__Group__5 )
            // InternalSTCoreParser.g:10151:2: rule__DateAndTime__Group__4__Impl rule__DateAndTime__Group__5
            {
            pushFollow(FOLLOW_73);
            rule__DateAndTime__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__4"


    // $ANTLR start "rule__DateAndTime__Group__4__Impl"
    // InternalSTCoreParser.g:10158:1: rule__DateAndTime__Group__4__Impl : ( RULE_INT ) ;
    public final void rule__DateAndTime__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10162:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:10163:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:10163:1: ( RULE_INT )
            // InternalSTCoreParser.g:10164:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_4()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__4__Impl"


    // $ANTLR start "rule__DateAndTime__Group__5"
    // InternalSTCoreParser.g:10173:1: rule__DateAndTime__Group__5 : rule__DateAndTime__Group__5__Impl rule__DateAndTime__Group__6 ;
    public final void rule__DateAndTime__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10177:1: ( rule__DateAndTime__Group__5__Impl rule__DateAndTime__Group__6 )
            // InternalSTCoreParser.g:10178:2: rule__DateAndTime__Group__5__Impl rule__DateAndTime__Group__6
            {
            pushFollow(FOLLOW_68);
            rule__DateAndTime__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group__6();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__5"


    // $ANTLR start "rule__DateAndTime__Group__5__Impl"
    // InternalSTCoreParser.g:10185:1: rule__DateAndTime__Group__5__Impl : ( HyphenMinus ) ;
    public final void rule__DateAndTime__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10189:1: ( ( HyphenMinus ) )
            // InternalSTCoreParser.g:10190:1: ( HyphenMinus )
            {
            // InternalSTCoreParser.g:10190:1: ( HyphenMinus )
            // InternalSTCoreParser.g:10191:2: HyphenMinus
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getHyphenMinusKeyword_5()); 
            }
            match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getHyphenMinusKeyword_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__5__Impl"


    // $ANTLR start "rule__DateAndTime__Group__6"
    // InternalSTCoreParser.g:10200:1: rule__DateAndTime__Group__6 : rule__DateAndTime__Group__6__Impl rule__DateAndTime__Group__7 ;
    public final void rule__DateAndTime__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10204:1: ( rule__DateAndTime__Group__6__Impl rule__DateAndTime__Group__7 )
            // InternalSTCoreParser.g:10205:2: rule__DateAndTime__Group__6__Impl rule__DateAndTime__Group__7
            {
            pushFollow(FOLLOW_74);
            rule__DateAndTime__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group__7();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__6"


    // $ANTLR start "rule__DateAndTime__Group__6__Impl"
    // InternalSTCoreParser.g:10212:1: rule__DateAndTime__Group__6__Impl : ( RULE_INT ) ;
    public final void rule__DateAndTime__Group__6__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10216:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:10217:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:10217:1: ( RULE_INT )
            // InternalSTCoreParser.g:10218:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_6()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_6()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__6__Impl"


    // $ANTLR start "rule__DateAndTime__Group__7"
    // InternalSTCoreParser.g:10227:1: rule__DateAndTime__Group__7 : rule__DateAndTime__Group__7__Impl rule__DateAndTime__Group__8 ;
    public final void rule__DateAndTime__Group__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10231:1: ( rule__DateAndTime__Group__7__Impl rule__DateAndTime__Group__8 )
            // InternalSTCoreParser.g:10232:2: rule__DateAndTime__Group__7__Impl rule__DateAndTime__Group__8
            {
            pushFollow(FOLLOW_68);
            rule__DateAndTime__Group__7__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group__8();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__7"


    // $ANTLR start "rule__DateAndTime__Group__7__Impl"
    // InternalSTCoreParser.g:10239:1: rule__DateAndTime__Group__7__Impl : ( Colon ) ;
    public final void rule__DateAndTime__Group__7__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10243:1: ( ( Colon ) )
            // InternalSTCoreParser.g:10244:1: ( Colon )
            {
            // InternalSTCoreParser.g:10244:1: ( Colon )
            // InternalSTCoreParser.g:10245:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getColonKeyword_7()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getColonKeyword_7()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__7__Impl"


    // $ANTLR start "rule__DateAndTime__Group__8"
    // InternalSTCoreParser.g:10254:1: rule__DateAndTime__Group__8 : rule__DateAndTime__Group__8__Impl rule__DateAndTime__Group__9 ;
    public final void rule__DateAndTime__Group__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10258:1: ( rule__DateAndTime__Group__8__Impl rule__DateAndTime__Group__9 )
            // InternalSTCoreParser.g:10259:2: rule__DateAndTime__Group__8__Impl rule__DateAndTime__Group__9
            {
            pushFollow(FOLLOW_74);
            rule__DateAndTime__Group__8__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group__9();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__8"


    // $ANTLR start "rule__DateAndTime__Group__8__Impl"
    // InternalSTCoreParser.g:10266:1: rule__DateAndTime__Group__8__Impl : ( RULE_INT ) ;
    public final void rule__DateAndTime__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10270:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:10271:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:10271:1: ( RULE_INT )
            // InternalSTCoreParser.g:10272:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_8()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__8__Impl"


    // $ANTLR start "rule__DateAndTime__Group__9"
    // InternalSTCoreParser.g:10281:1: rule__DateAndTime__Group__9 : rule__DateAndTime__Group__9__Impl rule__DateAndTime__Group__10 ;
    public final void rule__DateAndTime__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10285:1: ( rule__DateAndTime__Group__9__Impl rule__DateAndTime__Group__10 )
            // InternalSTCoreParser.g:10286:2: rule__DateAndTime__Group__9__Impl rule__DateAndTime__Group__10
            {
            pushFollow(FOLLOW_68);
            rule__DateAndTime__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group__10();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__9"


    // $ANTLR start "rule__DateAndTime__Group__9__Impl"
    // InternalSTCoreParser.g:10293:1: rule__DateAndTime__Group__9__Impl : ( Colon ) ;
    public final void rule__DateAndTime__Group__9__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10297:1: ( ( Colon ) )
            // InternalSTCoreParser.g:10298:1: ( Colon )
            {
            // InternalSTCoreParser.g:10298:1: ( Colon )
            // InternalSTCoreParser.g:10299:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getColonKeyword_9()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getColonKeyword_9()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__9__Impl"


    // $ANTLR start "rule__DateAndTime__Group__10"
    // InternalSTCoreParser.g:10308:1: rule__DateAndTime__Group__10 : rule__DateAndTime__Group__10__Impl rule__DateAndTime__Group__11 ;
    public final void rule__DateAndTime__Group__10() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10312:1: ( rule__DateAndTime__Group__10__Impl rule__DateAndTime__Group__11 )
            // InternalSTCoreParser.g:10313:2: rule__DateAndTime__Group__10__Impl rule__DateAndTime__Group__11
            {
            pushFollow(FOLLOW_60);
            rule__DateAndTime__Group__10__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group__11();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__10"


    // $ANTLR start "rule__DateAndTime__Group__10__Impl"
    // InternalSTCoreParser.g:10320:1: rule__DateAndTime__Group__10__Impl : ( RULE_INT ) ;
    public final void rule__DateAndTime__Group__10__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10324:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:10325:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:10325:1: ( RULE_INT )
            // InternalSTCoreParser.g:10326:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_10()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_10()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__10__Impl"


    // $ANTLR start "rule__DateAndTime__Group__11"
    // InternalSTCoreParser.g:10335:1: rule__DateAndTime__Group__11 : rule__DateAndTime__Group__11__Impl ;
    public final void rule__DateAndTime__Group__11() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10339:1: ( rule__DateAndTime__Group__11__Impl )
            // InternalSTCoreParser.g:10340:2: rule__DateAndTime__Group__11__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group__11__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__11"


    // $ANTLR start "rule__DateAndTime__Group__11__Impl"
    // InternalSTCoreParser.g:10346:1: rule__DateAndTime__Group__11__Impl : ( ( rule__DateAndTime__Group_11__0 )? ) ;
    public final void rule__DateAndTime__Group__11__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10350:1: ( ( ( rule__DateAndTime__Group_11__0 )? ) )
            // InternalSTCoreParser.g:10351:1: ( ( rule__DateAndTime__Group_11__0 )? )
            {
            // InternalSTCoreParser.g:10351:1: ( ( rule__DateAndTime__Group_11__0 )? )
            // InternalSTCoreParser.g:10352:2: ( rule__DateAndTime__Group_11__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getGroup_11()); 
            }
            // InternalSTCoreParser.g:10353:2: ( rule__DateAndTime__Group_11__0 )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==FullStop) ) {
                int LA86_1 = input.LA(2);

                if ( (LA86_1==RULE_INT) ) {
                    int LA86_3 = input.LA(3);

                    if ( (synpred141_InternalSTCoreParser()) ) {
                        alt86=1;
                    }
                }
            }
            switch (alt86) {
                case 1 :
                    // InternalSTCoreParser.g:10353:3: rule__DateAndTime__Group_11__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__DateAndTime__Group_11__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getGroup_11()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group__11__Impl"


    // $ANTLR start "rule__DateAndTime__Group_11__0"
    // InternalSTCoreParser.g:10362:1: rule__DateAndTime__Group_11__0 : rule__DateAndTime__Group_11__0__Impl rule__DateAndTime__Group_11__1 ;
    public final void rule__DateAndTime__Group_11__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10366:1: ( rule__DateAndTime__Group_11__0__Impl rule__DateAndTime__Group_11__1 )
            // InternalSTCoreParser.g:10367:2: rule__DateAndTime__Group_11__0__Impl rule__DateAndTime__Group_11__1
            {
            pushFollow(FOLLOW_68);
            rule__DateAndTime__Group_11__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group_11__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group_11__0"


    // $ANTLR start "rule__DateAndTime__Group_11__0__Impl"
    // InternalSTCoreParser.g:10374:1: rule__DateAndTime__Group_11__0__Impl : ( ( FullStop ) ) ;
    public final void rule__DateAndTime__Group_11__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10378:1: ( ( ( FullStop ) ) )
            // InternalSTCoreParser.g:10379:1: ( ( FullStop ) )
            {
            // InternalSTCoreParser.g:10379:1: ( ( FullStop ) )
            // InternalSTCoreParser.g:10380:2: ( FullStop )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getFullStopKeyword_11_0()); 
            }
            // InternalSTCoreParser.g:10381:2: ( FullStop )
            // InternalSTCoreParser.g:10381:3: FullStop
            {
            match(input,FullStop,FOLLOW_2); if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getFullStopKeyword_11_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group_11__0__Impl"


    // $ANTLR start "rule__DateAndTime__Group_11__1"
    // InternalSTCoreParser.g:10389:1: rule__DateAndTime__Group_11__1 : rule__DateAndTime__Group_11__1__Impl ;
    public final void rule__DateAndTime__Group_11__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10393:1: ( rule__DateAndTime__Group_11__1__Impl )
            // InternalSTCoreParser.g:10394:2: rule__DateAndTime__Group_11__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__DateAndTime__Group_11__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group_11__1"


    // $ANTLR start "rule__DateAndTime__Group_11__1__Impl"
    // InternalSTCoreParser.g:10400:1: rule__DateAndTime__Group_11__1__Impl : ( RULE_INT ) ;
    public final void rule__DateAndTime__Group_11__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10404:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:10405:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:10405:1: ( RULE_INT )
            // InternalSTCoreParser.g:10406:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_11_1()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDateAndTimeAccess().getINTTerminalRuleCall_11_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__DateAndTime__Group_11__1__Impl"


    // $ANTLR start "rule__TimeOfDay__Group__0"
    // InternalSTCoreParser.g:10416:1: rule__TimeOfDay__Group__0 : rule__TimeOfDay__Group__0__Impl rule__TimeOfDay__Group__1 ;
    public final void rule__TimeOfDay__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10420:1: ( rule__TimeOfDay__Group__0__Impl rule__TimeOfDay__Group__1 )
            // InternalSTCoreParser.g:10421:2: rule__TimeOfDay__Group__0__Impl rule__TimeOfDay__Group__1
            {
            pushFollow(FOLLOW_74);
            rule__TimeOfDay__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__TimeOfDay__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group__0"


    // $ANTLR start "rule__TimeOfDay__Group__0__Impl"
    // InternalSTCoreParser.g:10428:1: rule__TimeOfDay__Group__0__Impl : ( RULE_INT ) ;
    public final void rule__TimeOfDay__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10432:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:10433:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:10433:1: ( RULE_INT )
            // InternalSTCoreParser.g:10434:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_0()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group__0__Impl"


    // $ANTLR start "rule__TimeOfDay__Group__1"
    // InternalSTCoreParser.g:10443:1: rule__TimeOfDay__Group__1 : rule__TimeOfDay__Group__1__Impl rule__TimeOfDay__Group__2 ;
    public final void rule__TimeOfDay__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10447:1: ( rule__TimeOfDay__Group__1__Impl rule__TimeOfDay__Group__2 )
            // InternalSTCoreParser.g:10448:2: rule__TimeOfDay__Group__1__Impl rule__TimeOfDay__Group__2
            {
            pushFollow(FOLLOW_68);
            rule__TimeOfDay__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__TimeOfDay__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group__1"


    // $ANTLR start "rule__TimeOfDay__Group__1__Impl"
    // InternalSTCoreParser.g:10455:1: rule__TimeOfDay__Group__1__Impl : ( Colon ) ;
    public final void rule__TimeOfDay__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10459:1: ( ( Colon ) )
            // InternalSTCoreParser.g:10460:1: ( Colon )
            {
            // InternalSTCoreParser.g:10460:1: ( Colon )
            // InternalSTCoreParser.g:10461:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeOfDayAccess().getColonKeyword_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeOfDayAccess().getColonKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group__1__Impl"


    // $ANTLR start "rule__TimeOfDay__Group__2"
    // InternalSTCoreParser.g:10470:1: rule__TimeOfDay__Group__2 : rule__TimeOfDay__Group__2__Impl rule__TimeOfDay__Group__3 ;
    public final void rule__TimeOfDay__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10474:1: ( rule__TimeOfDay__Group__2__Impl rule__TimeOfDay__Group__3 )
            // InternalSTCoreParser.g:10475:2: rule__TimeOfDay__Group__2__Impl rule__TimeOfDay__Group__3
            {
            pushFollow(FOLLOW_74);
            rule__TimeOfDay__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__TimeOfDay__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group__2"


    // $ANTLR start "rule__TimeOfDay__Group__2__Impl"
    // InternalSTCoreParser.g:10482:1: rule__TimeOfDay__Group__2__Impl : ( RULE_INT ) ;
    public final void rule__TimeOfDay__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10486:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:10487:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:10487:1: ( RULE_INT )
            // InternalSTCoreParser.g:10488:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_2()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group__2__Impl"


    // $ANTLR start "rule__TimeOfDay__Group__3"
    // InternalSTCoreParser.g:10497:1: rule__TimeOfDay__Group__3 : rule__TimeOfDay__Group__3__Impl rule__TimeOfDay__Group__4 ;
    public final void rule__TimeOfDay__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10501:1: ( rule__TimeOfDay__Group__3__Impl rule__TimeOfDay__Group__4 )
            // InternalSTCoreParser.g:10502:2: rule__TimeOfDay__Group__3__Impl rule__TimeOfDay__Group__4
            {
            pushFollow(FOLLOW_68);
            rule__TimeOfDay__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__TimeOfDay__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group__3"


    // $ANTLR start "rule__TimeOfDay__Group__3__Impl"
    // InternalSTCoreParser.g:10509:1: rule__TimeOfDay__Group__3__Impl : ( Colon ) ;
    public final void rule__TimeOfDay__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10513:1: ( ( Colon ) )
            // InternalSTCoreParser.g:10514:1: ( Colon )
            {
            // InternalSTCoreParser.g:10514:1: ( Colon )
            // InternalSTCoreParser.g:10515:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeOfDayAccess().getColonKeyword_3()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeOfDayAccess().getColonKeyword_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group__3__Impl"


    // $ANTLR start "rule__TimeOfDay__Group__4"
    // InternalSTCoreParser.g:10524:1: rule__TimeOfDay__Group__4 : rule__TimeOfDay__Group__4__Impl rule__TimeOfDay__Group__5 ;
    public final void rule__TimeOfDay__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10528:1: ( rule__TimeOfDay__Group__4__Impl rule__TimeOfDay__Group__5 )
            // InternalSTCoreParser.g:10529:2: rule__TimeOfDay__Group__4__Impl rule__TimeOfDay__Group__5
            {
            pushFollow(FOLLOW_60);
            rule__TimeOfDay__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__TimeOfDay__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group__4"


    // $ANTLR start "rule__TimeOfDay__Group__4__Impl"
    // InternalSTCoreParser.g:10536:1: rule__TimeOfDay__Group__4__Impl : ( RULE_INT ) ;
    public final void rule__TimeOfDay__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10540:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:10541:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:10541:1: ( RULE_INT )
            // InternalSTCoreParser.g:10542:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_4()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group__4__Impl"


    // $ANTLR start "rule__TimeOfDay__Group__5"
    // InternalSTCoreParser.g:10551:1: rule__TimeOfDay__Group__5 : rule__TimeOfDay__Group__5__Impl ;
    public final void rule__TimeOfDay__Group__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10555:1: ( rule__TimeOfDay__Group__5__Impl )
            // InternalSTCoreParser.g:10556:2: rule__TimeOfDay__Group__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__TimeOfDay__Group__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group__5"


    // $ANTLR start "rule__TimeOfDay__Group__5__Impl"
    // InternalSTCoreParser.g:10562:1: rule__TimeOfDay__Group__5__Impl : ( ( rule__TimeOfDay__Group_5__0 )? ) ;
    public final void rule__TimeOfDay__Group__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10566:1: ( ( ( rule__TimeOfDay__Group_5__0 )? ) )
            // InternalSTCoreParser.g:10567:1: ( ( rule__TimeOfDay__Group_5__0 )? )
            {
            // InternalSTCoreParser.g:10567:1: ( ( rule__TimeOfDay__Group_5__0 )? )
            // InternalSTCoreParser.g:10568:2: ( rule__TimeOfDay__Group_5__0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeOfDayAccess().getGroup_5()); 
            }
            // InternalSTCoreParser.g:10569:2: ( rule__TimeOfDay__Group_5__0 )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==FullStop) ) {
                int LA87_1 = input.LA(2);

                if ( (LA87_1==RULE_INT) ) {
                    int LA87_3 = input.LA(3);

                    if ( (synpred142_InternalSTCoreParser()) ) {
                        alt87=1;
                    }
                }
            }
            switch (alt87) {
                case 1 :
                    // InternalSTCoreParser.g:10569:3: rule__TimeOfDay__Group_5__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__TimeOfDay__Group_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeOfDayAccess().getGroup_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group__5__Impl"


    // $ANTLR start "rule__TimeOfDay__Group_5__0"
    // InternalSTCoreParser.g:10578:1: rule__TimeOfDay__Group_5__0 : rule__TimeOfDay__Group_5__0__Impl rule__TimeOfDay__Group_5__1 ;
    public final void rule__TimeOfDay__Group_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10582:1: ( rule__TimeOfDay__Group_5__0__Impl rule__TimeOfDay__Group_5__1 )
            // InternalSTCoreParser.g:10583:2: rule__TimeOfDay__Group_5__0__Impl rule__TimeOfDay__Group_5__1
            {
            pushFollow(FOLLOW_68);
            rule__TimeOfDay__Group_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__TimeOfDay__Group_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group_5__0"


    // $ANTLR start "rule__TimeOfDay__Group_5__0__Impl"
    // InternalSTCoreParser.g:10590:1: rule__TimeOfDay__Group_5__0__Impl : ( ( FullStop ) ) ;
    public final void rule__TimeOfDay__Group_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10594:1: ( ( ( FullStop ) ) )
            // InternalSTCoreParser.g:10595:1: ( ( FullStop ) )
            {
            // InternalSTCoreParser.g:10595:1: ( ( FullStop ) )
            // InternalSTCoreParser.g:10596:2: ( FullStop )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeOfDayAccess().getFullStopKeyword_5_0()); 
            }
            // InternalSTCoreParser.g:10597:2: ( FullStop )
            // InternalSTCoreParser.g:10597:3: FullStop
            {
            match(input,FullStop,FOLLOW_2); if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeOfDayAccess().getFullStopKeyword_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group_5__0__Impl"


    // $ANTLR start "rule__TimeOfDay__Group_5__1"
    // InternalSTCoreParser.g:10605:1: rule__TimeOfDay__Group_5__1 : rule__TimeOfDay__Group_5__1__Impl ;
    public final void rule__TimeOfDay__Group_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10609:1: ( rule__TimeOfDay__Group_5__1__Impl )
            // InternalSTCoreParser.g:10610:2: rule__TimeOfDay__Group_5__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__TimeOfDay__Group_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group_5__1"


    // $ANTLR start "rule__TimeOfDay__Group_5__1__Impl"
    // InternalSTCoreParser.g:10616:1: rule__TimeOfDay__Group_5__1__Impl : ( RULE_INT ) ;
    public final void rule__TimeOfDay__Group_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10620:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:10621:1: ( RULE_INT )
            {
            // InternalSTCoreParser.g:10621:1: ( RULE_INT )
            // InternalSTCoreParser.g:10622:2: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_5_1()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTimeOfDayAccess().getINTTerminalRuleCall_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__TimeOfDay__Group_5__1__Impl"


    // $ANTLR start "rule__STCoreSource__StatementsAssignment_1"
    // InternalSTCoreParser.g:10632:1: rule__STCoreSource__StatementsAssignment_1 : ( ruleSTStatement ) ;
    public final void rule__STCoreSource__StatementsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10636:1: ( ( ruleSTStatement ) )
            // InternalSTCoreParser.g:10637:2: ( ruleSTStatement )
            {
            // InternalSTCoreParser.g:10637:2: ( ruleSTStatement )
            // InternalSTCoreParser.g:10638:3: ruleSTStatement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCoreSourceAccess().getStatementsSTStatementParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCoreSourceAccess().getStatementsSTStatementParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCoreSource__StatementsAssignment_1"


    // $ANTLR start "rule__STVarDeclaration__NameAssignment_1"
    // InternalSTCoreParser.g:10647:1: rule__STVarDeclaration__NameAssignment_1 : ( RULE_ID ) ;
    public final void rule__STVarDeclaration__NameAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10651:1: ( ( RULE_ID ) )
            // InternalSTCoreParser.g:10652:2: ( RULE_ID )
            {
            // InternalSTCoreParser.g:10652:2: ( RULE_ID )
            // InternalSTCoreParser.g:10653:3: RULE_ID
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
            }
            match(input,RULE_ID,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__NameAssignment_1"


    // $ANTLR start "rule__STVarDeclaration__LocatedAtAssignment_2_1"
    // InternalSTCoreParser.g:10662:1: rule__STVarDeclaration__LocatedAtAssignment_2_1 : ( ( RULE_ID ) ) ;
    public final void rule__STVarDeclaration__LocatedAtAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10666:1: ( ( ( RULE_ID ) ) )
            // InternalSTCoreParser.g:10667:2: ( ( RULE_ID ) )
            {
            // InternalSTCoreParser.g:10667:2: ( ( RULE_ID ) )
            // InternalSTCoreParser.g:10668:3: ( RULE_ID )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getLocatedAtINamedElementCrossReference_2_1_0()); 
            }
            // InternalSTCoreParser.g:10669:3: ( RULE_ID )
            // InternalSTCoreParser.g:10670:4: RULE_ID
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getLocatedAtINamedElementIDTerminalRuleCall_2_1_0_1()); 
            }
            match(input,RULE_ID,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getLocatedAtINamedElementIDTerminalRuleCall_2_1_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getLocatedAtINamedElementCrossReference_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__LocatedAtAssignment_2_1"


    // $ANTLR start "rule__STVarDeclaration__ArrayAssignment_4_0"
    // InternalSTCoreParser.g:10681:1: rule__STVarDeclaration__ArrayAssignment_4_0 : ( ( ARRAY ) ) ;
    public final void rule__STVarDeclaration__ArrayAssignment_4_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10685:1: ( ( ( ARRAY ) ) )
            // InternalSTCoreParser.g:10686:2: ( ( ARRAY ) )
            {
            // InternalSTCoreParser.g:10686:2: ( ( ARRAY ) )
            // InternalSTCoreParser.g:10687:3: ( ARRAY )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getArrayARRAYKeyword_4_0_0()); 
            }
            // InternalSTCoreParser.g:10688:3: ( ARRAY )
            // InternalSTCoreParser.g:10689:4: ARRAY
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getArrayARRAYKeyword_4_0_0()); 
            }
            match(input,ARRAY,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getArrayARRAYKeyword_4_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getArrayARRAYKeyword_4_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__ArrayAssignment_4_0"


    // $ANTLR start "rule__STVarDeclaration__RangesAssignment_4_1_0_1"
    // InternalSTCoreParser.g:10700:1: rule__STVarDeclaration__RangesAssignment_4_1_0_1 : ( ruleSTExpression ) ;
    public final void rule__STVarDeclaration__RangesAssignment_4_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10704:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:10705:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:10705:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:10706:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getRangesSTExpressionParserRuleCall_4_1_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getRangesSTExpressionParserRuleCall_4_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__RangesAssignment_4_1_0_1"


    // $ANTLR start "rule__STVarDeclaration__RangesAssignment_4_1_0_2_1"
    // InternalSTCoreParser.g:10715:1: rule__STVarDeclaration__RangesAssignment_4_1_0_2_1 : ( ruleSTExpression ) ;
    public final void rule__STVarDeclaration__RangesAssignment_4_1_0_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10719:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:10720:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:10720:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:10721:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getRangesSTExpressionParserRuleCall_4_1_0_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getRangesSTExpressionParserRuleCall_4_1_0_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__RangesAssignment_4_1_0_2_1"


    // $ANTLR start "rule__STVarDeclaration__CountAssignment_4_1_1_1"
    // InternalSTCoreParser.g:10730:1: rule__STVarDeclaration__CountAssignment_4_1_1_1 : ( ( Asterisk ) ) ;
    public final void rule__STVarDeclaration__CountAssignment_4_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10734:1: ( ( ( Asterisk ) ) )
            // InternalSTCoreParser.g:10735:2: ( ( Asterisk ) )
            {
            // InternalSTCoreParser.g:10735:2: ( ( Asterisk ) )
            // InternalSTCoreParser.g:10736:3: ( Asterisk )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_1_0()); 
            }
            // InternalSTCoreParser.g:10737:3: ( Asterisk )
            // InternalSTCoreParser.g:10738:4: Asterisk
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_1_0()); 
            }
            match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__CountAssignment_4_1_1_1"


    // $ANTLR start "rule__STVarDeclaration__CountAssignment_4_1_1_2_1"
    // InternalSTCoreParser.g:10749:1: rule__STVarDeclaration__CountAssignment_4_1_1_2_1 : ( ( Asterisk ) ) ;
    public final void rule__STVarDeclaration__CountAssignment_4_1_1_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10753:1: ( ( ( Asterisk ) ) )
            // InternalSTCoreParser.g:10754:2: ( ( Asterisk ) )
            {
            // InternalSTCoreParser.g:10754:2: ( ( Asterisk ) )
            // InternalSTCoreParser.g:10755:3: ( Asterisk )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_2_1_0()); 
            }
            // InternalSTCoreParser.g:10756:3: ( Asterisk )
            // InternalSTCoreParser.g:10757:4: Asterisk
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_2_1_0()); 
            }
            match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_2_1_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getCountAsteriskKeyword_4_1_1_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__CountAssignment_4_1_1_2_1"


    // $ANTLR start "rule__STVarDeclaration__TypeAssignment_5"
    // InternalSTCoreParser.g:10768:1: rule__STVarDeclaration__TypeAssignment_5 : ( ( ruleSTAnyType ) ) ;
    public final void rule__STVarDeclaration__TypeAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10772:1: ( ( ( ruleSTAnyType ) ) )
            // InternalSTCoreParser.g:10773:2: ( ( ruleSTAnyType ) )
            {
            // InternalSTCoreParser.g:10773:2: ( ( ruleSTAnyType ) )
            // InternalSTCoreParser.g:10774:3: ( ruleSTAnyType )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getTypeINamedElementCrossReference_5_0()); 
            }
            // InternalSTCoreParser.g:10775:3: ( ruleSTAnyType )
            // InternalSTCoreParser.g:10776:4: ruleSTAnyType
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getTypeINamedElementSTAnyTypeParserRuleCall_5_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTAnyType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getTypeINamedElementSTAnyTypeParserRuleCall_5_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getTypeINamedElementCrossReference_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__TypeAssignment_5"


    // $ANTLR start "rule__STVarDeclaration__MaxLengthAssignment_6_1"
    // InternalSTCoreParser.g:10787:1: rule__STVarDeclaration__MaxLengthAssignment_6_1 : ( ruleSTExpression ) ;
    public final void rule__STVarDeclaration__MaxLengthAssignment_6_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10791:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:10792:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:10792:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:10793:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getMaxLengthSTExpressionParserRuleCall_6_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getMaxLengthSTExpressionParserRuleCall_6_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__MaxLengthAssignment_6_1"


    // $ANTLR start "rule__STVarDeclaration__DefaultValueAssignment_7_1"
    // InternalSTCoreParser.g:10802:1: rule__STVarDeclaration__DefaultValueAssignment_7_1 : ( ruleSTInitializerExpression ) ;
    public final void rule__STVarDeclaration__DefaultValueAssignment_7_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10806:1: ( ( ruleSTInitializerExpression ) )
            // InternalSTCoreParser.g:10807:2: ( ruleSTInitializerExpression )
            {
            // InternalSTCoreParser.g:10807:2: ( ruleSTInitializerExpression )
            // InternalSTCoreParser.g:10808:3: ruleSTInitializerExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTVarDeclarationAccess().getDefaultValueSTInitializerExpressionParserRuleCall_7_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTInitializerExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTVarDeclarationAccess().getDefaultValueSTInitializerExpressionParserRuleCall_7_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STVarDeclaration__DefaultValueAssignment_7_1"


    // $ANTLR start "rule__STElementaryInitializerExpression__ValueAssignment"
    // InternalSTCoreParser.g:10817:1: rule__STElementaryInitializerExpression__ValueAssignment : ( ruleSTExpression ) ;
    public final void rule__STElementaryInitializerExpression__ValueAssignment() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10821:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:10822:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:10822:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:10823:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElementaryInitializerExpressionAccess().getValueSTExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElementaryInitializerExpressionAccess().getValueSTExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElementaryInitializerExpression__ValueAssignment"


    // $ANTLR start "rule__STArrayInitializerExpression__ValuesAssignment_1"
    // InternalSTCoreParser.g:10832:1: rule__STArrayInitializerExpression__ValuesAssignment_1 : ( ruleSTArrayInitElement ) ;
    public final void rule__STArrayInitializerExpression__ValuesAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10836:1: ( ( ruleSTArrayInitElement ) )
            // InternalSTCoreParser.g:10837:2: ( ruleSTArrayInitElement )
            {
            // InternalSTCoreParser.g:10837:2: ( ruleSTArrayInitElement )
            // InternalSTCoreParser.g:10838:3: ruleSTArrayInitElement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitializerExpressionAccess().getValuesSTArrayInitElementParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTArrayInitElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitializerExpressionAccess().getValuesSTArrayInitElementParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__ValuesAssignment_1"


    // $ANTLR start "rule__STArrayInitializerExpression__ValuesAssignment_2_1"
    // InternalSTCoreParser.g:10847:1: rule__STArrayInitializerExpression__ValuesAssignment_2_1 : ( ruleSTArrayInitElement ) ;
    public final void rule__STArrayInitializerExpression__ValuesAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10851:1: ( ( ruleSTArrayInitElement ) )
            // InternalSTCoreParser.g:10852:2: ( ruleSTArrayInitElement )
            {
            // InternalSTCoreParser.g:10852:2: ( ruleSTArrayInitElement )
            // InternalSTCoreParser.g:10853:3: ruleSTArrayInitElement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitializerExpressionAccess().getValuesSTArrayInitElementParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTArrayInitElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitializerExpressionAccess().getValuesSTArrayInitElementParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitializerExpression__ValuesAssignment_2_1"


    // $ANTLR start "rule__STArrayInitElement__IndexOrInitExpressionAssignment_0"
    // InternalSTCoreParser.g:10862:1: rule__STArrayInitElement__IndexOrInitExpressionAssignment_0 : ( ruleSTInitializerExpression ) ;
    public final void rule__STArrayInitElement__IndexOrInitExpressionAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10866:1: ( ( ruleSTInitializerExpression ) )
            // InternalSTCoreParser.g:10867:2: ( ruleSTInitializerExpression )
            {
            // InternalSTCoreParser.g:10867:2: ( ruleSTInitializerExpression )
            // InternalSTCoreParser.g:10868:3: ruleSTInitializerExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitElementAccess().getIndexOrInitExpressionSTInitializerExpressionParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTInitializerExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitElementAccess().getIndexOrInitExpressionSTInitializerExpressionParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__IndexOrInitExpressionAssignment_0"


    // $ANTLR start "rule__STArrayInitElement__InitExpressionsAssignment_1_1"
    // InternalSTCoreParser.g:10877:1: rule__STArrayInitElement__InitExpressionsAssignment_1_1 : ( ruleSTInitializerExpression ) ;
    public final void rule__STArrayInitElement__InitExpressionsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10881:1: ( ( ruleSTInitializerExpression ) )
            // InternalSTCoreParser.g:10882:2: ( ruleSTInitializerExpression )
            {
            // InternalSTCoreParser.g:10882:2: ( ruleSTInitializerExpression )
            // InternalSTCoreParser.g:10883:3: ruleSTInitializerExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitElementAccess().getInitExpressionsSTInitializerExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTInitializerExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitElementAccess().getInitExpressionsSTInitializerExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__InitExpressionsAssignment_1_1"


    // $ANTLR start "rule__STArrayInitElement__InitExpressionsAssignment_1_2_1"
    // InternalSTCoreParser.g:10892:1: rule__STArrayInitElement__InitExpressionsAssignment_1_2_1 : ( ruleSTInitializerExpression ) ;
    public final void rule__STArrayInitElement__InitExpressionsAssignment_1_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10896:1: ( ( ruleSTInitializerExpression ) )
            // InternalSTCoreParser.g:10897:2: ( ruleSTInitializerExpression )
            {
            // InternalSTCoreParser.g:10897:2: ( ruleSTInitializerExpression )
            // InternalSTCoreParser.g:10898:3: ruleSTInitializerExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTArrayInitElementAccess().getInitExpressionsSTInitializerExpressionParserRuleCall_1_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTInitializerExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTArrayInitElementAccess().getInitExpressionsSTInitializerExpressionParserRuleCall_1_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STArrayInitElement__InitExpressionsAssignment_1_2_1"


    // $ANTLR start "rule__STStructInitializerExpression__ValuesAssignment_1"
    // InternalSTCoreParser.g:10907:1: rule__STStructInitializerExpression__ValuesAssignment_1 : ( ruleSTStructInitElement ) ;
    public final void rule__STStructInitializerExpression__ValuesAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10911:1: ( ( ruleSTStructInitElement ) )
            // InternalSTCoreParser.g:10912:2: ( ruleSTStructInitElement )
            {
            // InternalSTCoreParser.g:10912:2: ( ruleSTStructInitElement )
            // InternalSTCoreParser.g:10913:3: ruleSTStructInitElement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitializerExpressionAccess().getValuesSTStructInitElementParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTStructInitElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitializerExpressionAccess().getValuesSTStructInitElementParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__ValuesAssignment_1"


    // $ANTLR start "rule__STStructInitializerExpression__ValuesAssignment_2_1"
    // InternalSTCoreParser.g:10922:1: rule__STStructInitializerExpression__ValuesAssignment_2_1 : ( ruleSTStructInitElement ) ;
    public final void rule__STStructInitializerExpression__ValuesAssignment_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10926:1: ( ( ruleSTStructInitElement ) )
            // InternalSTCoreParser.g:10927:2: ( ruleSTStructInitElement )
            {
            // InternalSTCoreParser.g:10927:2: ( ruleSTStructInitElement )
            // InternalSTCoreParser.g:10928:3: ruleSTStructInitElement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitializerExpressionAccess().getValuesSTStructInitElementParserRuleCall_2_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTStructInitElement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitializerExpressionAccess().getValuesSTStructInitElementParserRuleCall_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitializerExpression__ValuesAssignment_2_1"


    // $ANTLR start "rule__STStructInitElement__VariableAssignment_0"
    // InternalSTCoreParser.g:10937:1: rule__STStructInitElement__VariableAssignment_0 : ( ( ruleSTFeatureName ) ) ;
    public final void rule__STStructInitElement__VariableAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10941:1: ( ( ( ruleSTFeatureName ) ) )
            // InternalSTCoreParser.g:10942:2: ( ( ruleSTFeatureName ) )
            {
            // InternalSTCoreParser.g:10942:2: ( ( ruleSTFeatureName ) )
            // InternalSTCoreParser.g:10943:3: ( ruleSTFeatureName )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitElementAccess().getVariableINamedElementCrossReference_0_0()); 
            }
            // InternalSTCoreParser.g:10944:3: ( ruleSTFeatureName )
            // InternalSTCoreParser.g:10945:4: ruleSTFeatureName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitElementAccess().getVariableINamedElementSTFeatureNameParserRuleCall_0_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTFeatureName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitElementAccess().getVariableINamedElementSTFeatureNameParserRuleCall_0_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitElementAccess().getVariableINamedElementCrossReference_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitElement__VariableAssignment_0"


    // $ANTLR start "rule__STStructInitElement__ValueAssignment_2"
    // InternalSTCoreParser.g:10956:1: rule__STStructInitElement__ValueAssignment_2 : ( ruleSTInitializerExpression ) ;
    public final void rule__STStructInitElement__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10960:1: ( ( ruleSTInitializerExpression ) )
            // InternalSTCoreParser.g:10961:2: ( ruleSTInitializerExpression )
            {
            // InternalSTCoreParser.g:10961:2: ( ruleSTInitializerExpression )
            // InternalSTCoreParser.g:10962:3: ruleSTInitializerExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStructInitElementAccess().getValueSTInitializerExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTInitializerExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStructInitElementAccess().getValueSTInitializerExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStructInitElement__ValueAssignment_2"


    // $ANTLR start "rule__STAssignmentStatement__LeftAssignment_0"
    // InternalSTCoreParser.g:10971:1: rule__STAssignmentStatement__LeftAssignment_0 : ( ruleSTAccessExpression ) ;
    public final void rule__STAssignmentStatement__LeftAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10975:1: ( ( ruleSTAccessExpression ) )
            // InternalSTCoreParser.g:10976:2: ( ruleSTAccessExpression )
            {
            // InternalSTCoreParser.g:10976:2: ( ruleSTAccessExpression )
            // InternalSTCoreParser.g:10977:3: ruleSTAccessExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAssignmentStatementAccess().getLeftSTAccessExpressionParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTAccessExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAssignmentStatementAccess().getLeftSTAccessExpressionParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAssignmentStatement__LeftAssignment_0"


    // $ANTLR start "rule__STAssignmentStatement__RightAssignment_2"
    // InternalSTCoreParser.g:10986:1: rule__STAssignmentStatement__RightAssignment_2 : ( ruleSTExpression ) ;
    public final void rule__STAssignmentStatement__RightAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:10990:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:10991:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:10991:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:10992:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAssignmentStatementAccess().getRightSTExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAssignmentStatementAccess().getRightSTExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAssignmentStatement__RightAssignment_2"


    // $ANTLR start "rule__STCallStatement__CallAssignment"
    // InternalSTCoreParser.g:11001:1: rule__STCallStatement__CallAssignment : ( ruleSTAccessExpression ) ;
    public final void rule__STCallStatement__CallAssignment() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11005:1: ( ( ruleSTAccessExpression ) )
            // InternalSTCoreParser.g:11006:2: ( ruleSTAccessExpression )
            {
            // InternalSTCoreParser.g:11006:2: ( ruleSTAccessExpression )
            // InternalSTCoreParser.g:11007:3: ruleSTAccessExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallStatementAccess().getCallSTAccessExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTAccessExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallStatementAccess().getCallSTAccessExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallStatement__CallAssignment"


    // $ANTLR start "rule__STCallUnnamedArgument__ArgumentAssignment"
    // InternalSTCoreParser.g:11016:1: rule__STCallUnnamedArgument__ArgumentAssignment : ( ruleSTExpression ) ;
    public final void rule__STCallUnnamedArgument__ArgumentAssignment() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11020:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11021:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11021:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11022:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallUnnamedArgumentAccess().getArgumentSTExpressionParserRuleCall_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallUnnamedArgumentAccess().getArgumentSTExpressionParserRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallUnnamedArgument__ArgumentAssignment"


    // $ANTLR start "rule__STCallNamedInputArgument__ParameterAssignment_0"
    // InternalSTCoreParser.g:11031:1: rule__STCallNamedInputArgument__ParameterAssignment_0 : ( ( RULE_ID ) ) ;
    public final void rule__STCallNamedInputArgument__ParameterAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11035:1: ( ( ( RULE_ID ) ) )
            // InternalSTCoreParser.g:11036:2: ( ( RULE_ID ) )
            {
            // InternalSTCoreParser.g:11036:2: ( ( RULE_ID ) )
            // InternalSTCoreParser.g:11037:3: ( RULE_ID )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedInputArgumentAccess().getParameterINamedElementCrossReference_0_0()); 
            }
            // InternalSTCoreParser.g:11038:3: ( RULE_ID )
            // InternalSTCoreParser.g:11039:4: RULE_ID
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedInputArgumentAccess().getParameterINamedElementIDTerminalRuleCall_0_0_1()); 
            }
            match(input,RULE_ID,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedInputArgumentAccess().getParameterINamedElementIDTerminalRuleCall_0_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedInputArgumentAccess().getParameterINamedElementCrossReference_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedInputArgument__ParameterAssignment_0"


    // $ANTLR start "rule__STCallNamedInputArgument__ArgumentAssignment_2"
    // InternalSTCoreParser.g:11050:1: rule__STCallNamedInputArgument__ArgumentAssignment_2 : ( ruleSTExpression ) ;
    public final void rule__STCallNamedInputArgument__ArgumentAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11054:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11055:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11055:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11056:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedInputArgumentAccess().getArgumentSTExpressionParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedInputArgumentAccess().getArgumentSTExpressionParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedInputArgument__ArgumentAssignment_2"


    // $ANTLR start "rule__STCallNamedOutputArgument__NotAssignment_0"
    // InternalSTCoreParser.g:11065:1: rule__STCallNamedOutputArgument__NotAssignment_0 : ( ( NOT ) ) ;
    public final void rule__STCallNamedOutputArgument__NotAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11069:1: ( ( ( NOT ) ) )
            // InternalSTCoreParser.g:11070:2: ( ( NOT ) )
            {
            // InternalSTCoreParser.g:11070:2: ( ( NOT ) )
            // InternalSTCoreParser.g:11071:3: ( NOT )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedOutputArgumentAccess().getNotNOTKeyword_0_0()); 
            }
            // InternalSTCoreParser.g:11072:3: ( NOT )
            // InternalSTCoreParser.g:11073:4: NOT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedOutputArgumentAccess().getNotNOTKeyword_0_0()); 
            }
            match(input,NOT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedOutputArgumentAccess().getNotNOTKeyword_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedOutputArgumentAccess().getNotNOTKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedOutputArgument__NotAssignment_0"


    // $ANTLR start "rule__STCallNamedOutputArgument__ParameterAssignment_1"
    // InternalSTCoreParser.g:11084:1: rule__STCallNamedOutputArgument__ParameterAssignment_1 : ( ( RULE_ID ) ) ;
    public final void rule__STCallNamedOutputArgument__ParameterAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11088:1: ( ( ( RULE_ID ) ) )
            // InternalSTCoreParser.g:11089:2: ( ( RULE_ID ) )
            {
            // InternalSTCoreParser.g:11089:2: ( ( RULE_ID ) )
            // InternalSTCoreParser.g:11090:3: ( RULE_ID )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedOutputArgumentAccess().getParameterINamedElementCrossReference_1_0()); 
            }
            // InternalSTCoreParser.g:11091:3: ( RULE_ID )
            // InternalSTCoreParser.g:11092:4: RULE_ID
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedOutputArgumentAccess().getParameterINamedElementIDTerminalRuleCall_1_0_1()); 
            }
            match(input,RULE_ID,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedOutputArgumentAccess().getParameterINamedElementIDTerminalRuleCall_1_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedOutputArgumentAccess().getParameterINamedElementCrossReference_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedOutputArgument__ParameterAssignment_1"


    // $ANTLR start "rule__STCallNamedOutputArgument__ArgumentAssignment_3"
    // InternalSTCoreParser.g:11103:1: rule__STCallNamedOutputArgument__ArgumentAssignment_3 : ( ruleSTExpression ) ;
    public final void rule__STCallNamedOutputArgument__ArgumentAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11107:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11108:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11108:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11109:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCallNamedOutputArgumentAccess().getArgumentSTExpressionParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCallNamedOutputArgumentAccess().getArgumentSTExpressionParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCallNamedOutputArgument__ArgumentAssignment_3"


    // $ANTLR start "rule__STIfStatement__ConditionAssignment_1"
    // InternalSTCoreParser.g:11118:1: rule__STIfStatement__ConditionAssignment_1 : ( ruleSTExpression ) ;
    public final void rule__STIfStatement__ConditionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11122:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11123:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11123:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11124:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTIfStatementAccess().getConditionSTExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTIfStatementAccess().getConditionSTExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__ConditionAssignment_1"


    // $ANTLR start "rule__STIfStatement__StatementsAssignment_3"
    // InternalSTCoreParser.g:11133:1: rule__STIfStatement__StatementsAssignment_3 : ( ruleSTStatement ) ;
    public final void rule__STIfStatement__StatementsAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11137:1: ( ( ruleSTStatement ) )
            // InternalSTCoreParser.g:11138:2: ( ruleSTStatement )
            {
            // InternalSTCoreParser.g:11138:2: ( ruleSTStatement )
            // InternalSTCoreParser.g:11139:3: ruleSTStatement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTIfStatementAccess().getStatementsSTStatementParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTIfStatementAccess().getStatementsSTStatementParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__StatementsAssignment_3"


    // $ANTLR start "rule__STIfStatement__ElseifsAssignment_4"
    // InternalSTCoreParser.g:11148:1: rule__STIfStatement__ElseifsAssignment_4 : ( ruleSTElseIfPart ) ;
    public final void rule__STIfStatement__ElseifsAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11152:1: ( ( ruleSTElseIfPart ) )
            // InternalSTCoreParser.g:11153:2: ( ruleSTElseIfPart )
            {
            // InternalSTCoreParser.g:11153:2: ( ruleSTElseIfPart )
            // InternalSTCoreParser.g:11154:3: ruleSTElseIfPart
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTIfStatementAccess().getElseifsSTElseIfPartParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTElseIfPart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTIfStatementAccess().getElseifsSTElseIfPartParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__ElseifsAssignment_4"


    // $ANTLR start "rule__STIfStatement__ElseAssignment_5"
    // InternalSTCoreParser.g:11163:1: rule__STIfStatement__ElseAssignment_5 : ( ruleSTElsePart ) ;
    public final void rule__STIfStatement__ElseAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11167:1: ( ( ruleSTElsePart ) )
            // InternalSTCoreParser.g:11168:2: ( ruleSTElsePart )
            {
            // InternalSTCoreParser.g:11168:2: ( ruleSTElsePart )
            // InternalSTCoreParser.g:11169:3: ruleSTElsePart
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTIfStatementAccess().getElseSTElsePartParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTElsePart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTIfStatementAccess().getElseSTElsePartParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STIfStatement__ElseAssignment_5"


    // $ANTLR start "rule__STElseIfPart__ConditionAssignment_1"
    // InternalSTCoreParser.g:11178:1: rule__STElseIfPart__ConditionAssignment_1 : ( ruleSTExpression ) ;
    public final void rule__STElseIfPart__ConditionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11182:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11183:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11183:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11184:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElseIfPartAccess().getConditionSTExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElseIfPartAccess().getConditionSTExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElseIfPart__ConditionAssignment_1"


    // $ANTLR start "rule__STElseIfPart__StatementsAssignment_3"
    // InternalSTCoreParser.g:11193:1: rule__STElseIfPart__StatementsAssignment_3 : ( ruleSTStatement ) ;
    public final void rule__STElseIfPart__StatementsAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11197:1: ( ( ruleSTStatement ) )
            // InternalSTCoreParser.g:11198:2: ( ruleSTStatement )
            {
            // InternalSTCoreParser.g:11198:2: ( ruleSTStatement )
            // InternalSTCoreParser.g:11199:3: ruleSTStatement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElseIfPartAccess().getStatementsSTStatementParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElseIfPartAccess().getStatementsSTStatementParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElseIfPart__StatementsAssignment_3"


    // $ANTLR start "rule__STCaseStatement__SelectorAssignment_1"
    // InternalSTCoreParser.g:11208:1: rule__STCaseStatement__SelectorAssignment_1 : ( ruleSTExpression ) ;
    public final void rule__STCaseStatement__SelectorAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11212:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11213:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11213:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11214:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseStatementAccess().getSelectorSTExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseStatementAccess().getSelectorSTExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__SelectorAssignment_1"


    // $ANTLR start "rule__STCaseStatement__CasesAssignment_3"
    // InternalSTCoreParser.g:11223:1: rule__STCaseStatement__CasesAssignment_3 : ( ruleSTCaseCases ) ;
    public final void rule__STCaseStatement__CasesAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11227:1: ( ( ruleSTCaseCases ) )
            // InternalSTCoreParser.g:11228:2: ( ruleSTCaseCases )
            {
            // InternalSTCoreParser.g:11228:2: ( ruleSTCaseCases )
            // InternalSTCoreParser.g:11229:3: ruleSTCaseCases
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseStatementAccess().getCasesSTCaseCasesParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTCaseCases();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseStatementAccess().getCasesSTCaseCasesParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__CasesAssignment_3"


    // $ANTLR start "rule__STCaseStatement__ElseAssignment_4"
    // InternalSTCoreParser.g:11238:1: rule__STCaseStatement__ElseAssignment_4 : ( ruleSTElsePart ) ;
    public final void rule__STCaseStatement__ElseAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11242:1: ( ( ruleSTElsePart ) )
            // InternalSTCoreParser.g:11243:2: ( ruleSTElsePart )
            {
            // InternalSTCoreParser.g:11243:2: ( ruleSTElsePart )
            // InternalSTCoreParser.g:11244:3: ruleSTElsePart
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseStatementAccess().getElseSTElsePartParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTElsePart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseStatementAccess().getElseSTElsePartParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseStatement__ElseAssignment_4"


    // $ANTLR start "rule__STCaseCases__ConditionsAssignment_0"
    // InternalSTCoreParser.g:11253:1: rule__STCaseCases__ConditionsAssignment_0 : ( ruleSTExpression ) ;
    public final void rule__STCaseCases__ConditionsAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11257:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11258:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11258:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11259:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__ConditionsAssignment_0"


    // $ANTLR start "rule__STCaseCases__ConditionsAssignment_1_1"
    // InternalSTCoreParser.g:11268:1: rule__STCaseCases__ConditionsAssignment_1_1 : ( ruleSTExpression ) ;
    public final void rule__STCaseCases__ConditionsAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11272:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11273:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11273:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11274:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__ConditionsAssignment_1_1"


    // $ANTLR start "rule__STCaseCases__StatementsAssignment_3"
    // InternalSTCoreParser.g:11283:1: rule__STCaseCases__StatementsAssignment_3 : ( ruleSTStatement ) ;
    public final void rule__STCaseCases__StatementsAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11287:1: ( ( ruleSTStatement ) )
            // InternalSTCoreParser.g:11288:2: ( ruleSTStatement )
            {
            // InternalSTCoreParser.g:11288:2: ( ruleSTStatement )
            // InternalSTCoreParser.g:11289:3: ruleSTStatement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTCaseCasesAccess().getStatementsSTStatementParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTCaseCasesAccess().getStatementsSTStatementParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STCaseCases__StatementsAssignment_3"


    // $ANTLR start "rule__STElsePart__StatementsAssignment_2"
    // InternalSTCoreParser.g:11298:1: rule__STElsePart__StatementsAssignment_2 : ( ruleSTStatement ) ;
    public final void rule__STElsePart__StatementsAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11302:1: ( ( ruleSTStatement ) )
            // InternalSTCoreParser.g:11303:2: ( ruleSTStatement )
            {
            // InternalSTCoreParser.g:11303:2: ( ruleSTStatement )
            // InternalSTCoreParser.g:11304:3: ruleSTStatement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTElsePartAccess().getStatementsSTStatementParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTElsePartAccess().getStatementsSTStatementParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STElsePart__StatementsAssignment_2"


    // $ANTLR start "rule__STForStatement__VariableAssignment_1"
    // InternalSTCoreParser.g:11313:1: rule__STForStatement__VariableAssignment_1 : ( ( RULE_ID ) ) ;
    public final void rule__STForStatement__VariableAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11317:1: ( ( ( RULE_ID ) ) )
            // InternalSTCoreParser.g:11318:2: ( ( RULE_ID ) )
            {
            // InternalSTCoreParser.g:11318:2: ( ( RULE_ID ) )
            // InternalSTCoreParser.g:11319:3: ( RULE_ID )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getVariableSTVarDeclarationCrossReference_1_0()); 
            }
            // InternalSTCoreParser.g:11320:3: ( RULE_ID )
            // InternalSTCoreParser.g:11321:4: RULE_ID
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getVariableSTVarDeclarationIDTerminalRuleCall_1_0_1()); 
            }
            match(input,RULE_ID,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getVariableSTVarDeclarationIDTerminalRuleCall_1_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getVariableSTVarDeclarationCrossReference_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__VariableAssignment_1"


    // $ANTLR start "rule__STForStatement__FromAssignment_3"
    // InternalSTCoreParser.g:11332:1: rule__STForStatement__FromAssignment_3 : ( ruleSTExpression ) ;
    public final void rule__STForStatement__FromAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11336:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11337:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11337:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11338:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getFromSTExpressionParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getFromSTExpressionParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__FromAssignment_3"


    // $ANTLR start "rule__STForStatement__ToAssignment_5"
    // InternalSTCoreParser.g:11347:1: rule__STForStatement__ToAssignment_5 : ( ruleSTExpression ) ;
    public final void rule__STForStatement__ToAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11351:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11352:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11352:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11353:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getToSTExpressionParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getToSTExpressionParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__ToAssignment_5"


    // $ANTLR start "rule__STForStatement__ByAssignment_6_1"
    // InternalSTCoreParser.g:11362:1: rule__STForStatement__ByAssignment_6_1 : ( ruleSTExpression ) ;
    public final void rule__STForStatement__ByAssignment_6_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11366:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11367:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11367:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11368:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getBySTExpressionParserRuleCall_6_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getBySTExpressionParserRuleCall_6_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__ByAssignment_6_1"


    // $ANTLR start "rule__STForStatement__StatementsAssignment_8"
    // InternalSTCoreParser.g:11377:1: rule__STForStatement__StatementsAssignment_8 : ( ruleSTStatement ) ;
    public final void rule__STForStatement__StatementsAssignment_8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11381:1: ( ( ruleSTStatement ) )
            // InternalSTCoreParser.g:11382:2: ( ruleSTStatement )
            {
            // InternalSTCoreParser.g:11382:2: ( ruleSTStatement )
            // InternalSTCoreParser.g:11383:3: ruleSTStatement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTForStatementAccess().getStatementsSTStatementParserRuleCall_8_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTForStatementAccess().getStatementsSTStatementParserRuleCall_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STForStatement__StatementsAssignment_8"


    // $ANTLR start "rule__STWhileStatement__ConditionAssignment_1"
    // InternalSTCoreParser.g:11392:1: rule__STWhileStatement__ConditionAssignment_1 : ( ruleSTExpression ) ;
    public final void rule__STWhileStatement__ConditionAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11396:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11397:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11397:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11398:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTWhileStatementAccess().getConditionSTExpressionParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTWhileStatementAccess().getConditionSTExpressionParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STWhileStatement__ConditionAssignment_1"


    // $ANTLR start "rule__STWhileStatement__StatementsAssignment_3"
    // InternalSTCoreParser.g:11407:1: rule__STWhileStatement__StatementsAssignment_3 : ( ruleSTStatement ) ;
    public final void rule__STWhileStatement__StatementsAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11411:1: ( ( ruleSTStatement ) )
            // InternalSTCoreParser.g:11412:2: ( ruleSTStatement )
            {
            // InternalSTCoreParser.g:11412:2: ( ruleSTStatement )
            // InternalSTCoreParser.g:11413:3: ruleSTStatement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTWhileStatementAccess().getStatementsSTStatementParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTWhileStatementAccess().getStatementsSTStatementParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STWhileStatement__StatementsAssignment_3"


    // $ANTLR start "rule__STRepeatStatement__StatementsAssignment_1"
    // InternalSTCoreParser.g:11422:1: rule__STRepeatStatement__StatementsAssignment_1 : ( ruleSTStatement ) ;
    public final void rule__STRepeatStatement__StatementsAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11426:1: ( ( ruleSTStatement ) )
            // InternalSTCoreParser.g:11427:2: ( ruleSTStatement )
            {
            // InternalSTCoreParser.g:11427:2: ( ruleSTStatement )
            // InternalSTCoreParser.g:11428:3: ruleSTStatement
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTRepeatStatementAccess().getStatementsSTStatementParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTStatement();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTRepeatStatementAccess().getStatementsSTStatementParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STRepeatStatement__StatementsAssignment_1"


    // $ANTLR start "rule__STRepeatStatement__ConditionAssignment_3"
    // InternalSTCoreParser.g:11437:1: rule__STRepeatStatement__ConditionAssignment_3 : ( ruleSTExpression ) ;
    public final void rule__STRepeatStatement__ConditionAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11441:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11442:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11442:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11443:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTRepeatStatementAccess().getConditionSTExpressionParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTRepeatStatementAccess().getConditionSTExpressionParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STRepeatStatement__ConditionAssignment_3"


    // $ANTLR start "rule__STSubrangeExpression__OpAssignment_1_0_1"
    // InternalSTCoreParser.g:11452:1: rule__STSubrangeExpression__OpAssignment_1_0_1 : ( ruleSubrangeOperator ) ;
    public final void rule__STSubrangeExpression__OpAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11456:1: ( ( ruleSubrangeOperator ) )
            // InternalSTCoreParser.g:11457:2: ( ruleSubrangeOperator )
            {
            // InternalSTCoreParser.g:11457:2: ( ruleSubrangeOperator )
            // InternalSTCoreParser.g:11458:3: ruleSubrangeOperator
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTSubrangeExpressionAccess().getOpSubrangeOperatorEnumRuleCall_1_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSubrangeOperator();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTSubrangeExpressionAccess().getOpSubrangeOperatorEnumRuleCall_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__OpAssignment_1_0_1"


    // $ANTLR start "rule__STSubrangeExpression__RightAssignment_1_1"
    // InternalSTCoreParser.g:11467:1: rule__STSubrangeExpression__RightAssignment_1_1 : ( ruleSTOrExpression ) ;
    public final void rule__STSubrangeExpression__RightAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11471:1: ( ( ruleSTOrExpression ) )
            // InternalSTCoreParser.g:11472:2: ( ruleSTOrExpression )
            {
            // InternalSTCoreParser.g:11472:2: ( ruleSTOrExpression )
            // InternalSTCoreParser.g:11473:3: ruleSTOrExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTSubrangeExpressionAccess().getRightSTOrExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTOrExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTSubrangeExpressionAccess().getRightSTOrExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STSubrangeExpression__RightAssignment_1_1"


    // $ANTLR start "rule__STOrExpression__OpAssignment_1_0_1"
    // InternalSTCoreParser.g:11482:1: rule__STOrExpression__OpAssignment_1_0_1 : ( ruleOrOperator ) ;
    public final void rule__STOrExpression__OpAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11486:1: ( ( ruleOrOperator ) )
            // InternalSTCoreParser.g:11487:2: ( ruleOrOperator )
            {
            // InternalSTCoreParser.g:11487:2: ( ruleOrOperator )
            // InternalSTCoreParser.g:11488:3: ruleOrOperator
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTOrExpressionAccess().getOpOrOperatorEnumRuleCall_1_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleOrOperator();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTOrExpressionAccess().getOpOrOperatorEnumRuleCall_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__OpAssignment_1_0_1"


    // $ANTLR start "rule__STOrExpression__RightAssignment_1_1"
    // InternalSTCoreParser.g:11497:1: rule__STOrExpression__RightAssignment_1_1 : ( ruleSTXorExpression ) ;
    public final void rule__STOrExpression__RightAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11501:1: ( ( ruleSTXorExpression ) )
            // InternalSTCoreParser.g:11502:2: ( ruleSTXorExpression )
            {
            // InternalSTCoreParser.g:11502:2: ( ruleSTXorExpression )
            // InternalSTCoreParser.g:11503:3: ruleSTXorExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTOrExpressionAccess().getRightSTXorExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTXorExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTOrExpressionAccess().getRightSTXorExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STOrExpression__RightAssignment_1_1"


    // $ANTLR start "rule__STXorExpression__OpAssignment_1_0_1"
    // InternalSTCoreParser.g:11512:1: rule__STXorExpression__OpAssignment_1_0_1 : ( ruleXorOperator ) ;
    public final void rule__STXorExpression__OpAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11516:1: ( ( ruleXorOperator ) )
            // InternalSTCoreParser.g:11517:2: ( ruleXorOperator )
            {
            // InternalSTCoreParser.g:11517:2: ( ruleXorOperator )
            // InternalSTCoreParser.g:11518:3: ruleXorOperator
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTXorExpressionAccess().getOpXorOperatorEnumRuleCall_1_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleXorOperator();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTXorExpressionAccess().getOpXorOperatorEnumRuleCall_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__OpAssignment_1_0_1"


    // $ANTLR start "rule__STXorExpression__RightAssignment_1_1"
    // InternalSTCoreParser.g:11527:1: rule__STXorExpression__RightAssignment_1_1 : ( ruleSTAndExpression ) ;
    public final void rule__STXorExpression__RightAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11531:1: ( ( ruleSTAndExpression ) )
            // InternalSTCoreParser.g:11532:2: ( ruleSTAndExpression )
            {
            // InternalSTCoreParser.g:11532:2: ( ruleSTAndExpression )
            // InternalSTCoreParser.g:11533:3: ruleSTAndExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTXorExpressionAccess().getRightSTAndExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTAndExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTXorExpressionAccess().getRightSTAndExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STXorExpression__RightAssignment_1_1"


    // $ANTLR start "rule__STAndExpression__OpAssignment_1_0_1"
    // InternalSTCoreParser.g:11542:1: rule__STAndExpression__OpAssignment_1_0_1 : ( ruleAndOperator ) ;
    public final void rule__STAndExpression__OpAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11546:1: ( ( ruleAndOperator ) )
            // InternalSTCoreParser.g:11547:2: ( ruleAndOperator )
            {
            // InternalSTCoreParser.g:11547:2: ( ruleAndOperator )
            // InternalSTCoreParser.g:11548:3: ruleAndOperator
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAndExpressionAccess().getOpAndOperatorEnumRuleCall_1_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAndOperator();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAndExpressionAccess().getOpAndOperatorEnumRuleCall_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__OpAssignment_1_0_1"


    // $ANTLR start "rule__STAndExpression__RightAssignment_1_1"
    // InternalSTCoreParser.g:11557:1: rule__STAndExpression__RightAssignment_1_1 : ( ruleSTEqualityExpression ) ;
    public final void rule__STAndExpression__RightAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11561:1: ( ( ruleSTEqualityExpression ) )
            // InternalSTCoreParser.g:11562:2: ( ruleSTEqualityExpression )
            {
            // InternalSTCoreParser.g:11562:2: ( ruleSTEqualityExpression )
            // InternalSTCoreParser.g:11563:3: ruleSTEqualityExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAndExpressionAccess().getRightSTEqualityExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTEqualityExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAndExpressionAccess().getRightSTEqualityExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAndExpression__RightAssignment_1_1"


    // $ANTLR start "rule__STEqualityExpression__OpAssignment_1_0_1"
    // InternalSTCoreParser.g:11572:1: rule__STEqualityExpression__OpAssignment_1_0_1 : ( ruleEqualityOperator ) ;
    public final void rule__STEqualityExpression__OpAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11576:1: ( ( ruleEqualityOperator ) )
            // InternalSTCoreParser.g:11577:2: ( ruleEqualityOperator )
            {
            // InternalSTCoreParser.g:11577:2: ( ruleEqualityOperator )
            // InternalSTCoreParser.g:11578:3: ruleEqualityOperator
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleEqualityOperator();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__OpAssignment_1_0_1"


    // $ANTLR start "rule__STEqualityExpression__RightAssignment_1_1"
    // InternalSTCoreParser.g:11587:1: rule__STEqualityExpression__RightAssignment_1_1 : ( ruleSTComparisonExpression ) ;
    public final void rule__STEqualityExpression__RightAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11591:1: ( ( ruleSTComparisonExpression ) )
            // InternalSTCoreParser.g:11592:2: ( ruleSTComparisonExpression )
            {
            // InternalSTCoreParser.g:11592:2: ( ruleSTComparisonExpression )
            // InternalSTCoreParser.g:11593:3: ruleSTComparisonExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTEqualityExpressionAccess().getRightSTComparisonExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTComparisonExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTEqualityExpressionAccess().getRightSTComparisonExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STEqualityExpression__RightAssignment_1_1"


    // $ANTLR start "rule__STComparisonExpression__OpAssignment_1_0_1"
    // InternalSTCoreParser.g:11602:1: rule__STComparisonExpression__OpAssignment_1_0_1 : ( ruleCompareOperator ) ;
    public final void rule__STComparisonExpression__OpAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11606:1: ( ( ruleCompareOperator ) )
            // InternalSTCoreParser.g:11607:2: ( ruleCompareOperator )
            {
            // InternalSTCoreParser.g:11607:2: ( ruleCompareOperator )
            // InternalSTCoreParser.g:11608:3: ruleCompareOperator
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTComparisonExpressionAccess().getOpCompareOperatorEnumRuleCall_1_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleCompareOperator();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTComparisonExpressionAccess().getOpCompareOperatorEnumRuleCall_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__OpAssignment_1_0_1"


    // $ANTLR start "rule__STComparisonExpression__RightAssignment_1_1"
    // InternalSTCoreParser.g:11617:1: rule__STComparisonExpression__RightAssignment_1_1 : ( ruleSTAddSubExpression ) ;
    public final void rule__STComparisonExpression__RightAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11621:1: ( ( ruleSTAddSubExpression ) )
            // InternalSTCoreParser.g:11622:2: ( ruleSTAddSubExpression )
            {
            // InternalSTCoreParser.g:11622:2: ( ruleSTAddSubExpression )
            // InternalSTCoreParser.g:11623:3: ruleSTAddSubExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTComparisonExpressionAccess().getRightSTAddSubExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTAddSubExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTComparisonExpressionAccess().getRightSTAddSubExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STComparisonExpression__RightAssignment_1_1"


    // $ANTLR start "rule__STAddSubExpression__OpAssignment_1_0_1"
    // InternalSTCoreParser.g:11632:1: rule__STAddSubExpression__OpAssignment_1_0_1 : ( ruleAddSubOperator ) ;
    public final void rule__STAddSubExpression__OpAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11636:1: ( ( ruleAddSubOperator ) )
            // InternalSTCoreParser.g:11637:2: ( ruleAddSubOperator )
            {
            // InternalSTCoreParser.g:11637:2: ( ruleAddSubOperator )
            // InternalSTCoreParser.g:11638:3: ruleAddSubOperator
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAddSubExpressionAccess().getOpAddSubOperatorEnumRuleCall_1_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAddSubOperator();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAddSubExpressionAccess().getOpAddSubOperatorEnumRuleCall_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__OpAssignment_1_0_1"


    // $ANTLR start "rule__STAddSubExpression__RightAssignment_1_1"
    // InternalSTCoreParser.g:11647:1: rule__STAddSubExpression__RightAssignment_1_1 : ( ruleSTMulDivModExpression ) ;
    public final void rule__STAddSubExpression__RightAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11651:1: ( ( ruleSTMulDivModExpression ) )
            // InternalSTCoreParser.g:11652:2: ( ruleSTMulDivModExpression )
            {
            // InternalSTCoreParser.g:11652:2: ( ruleSTMulDivModExpression )
            // InternalSTCoreParser.g:11653:3: ruleSTMulDivModExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAddSubExpressionAccess().getRightSTMulDivModExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTMulDivModExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAddSubExpressionAccess().getRightSTMulDivModExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAddSubExpression__RightAssignment_1_1"


    // $ANTLR start "rule__STMulDivModExpression__OpAssignment_1_0_1"
    // InternalSTCoreParser.g:11662:1: rule__STMulDivModExpression__OpAssignment_1_0_1 : ( ruleMulDivModOperator ) ;
    public final void rule__STMulDivModExpression__OpAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11666:1: ( ( ruleMulDivModOperator ) )
            // InternalSTCoreParser.g:11667:2: ( ruleMulDivModOperator )
            {
            // InternalSTCoreParser.g:11667:2: ( ruleMulDivModOperator )
            // InternalSTCoreParser.g:11668:3: ruleMulDivModOperator
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMulDivModExpressionAccess().getOpMulDivModOperatorEnumRuleCall_1_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleMulDivModOperator();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMulDivModExpressionAccess().getOpMulDivModOperatorEnumRuleCall_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__OpAssignment_1_0_1"


    // $ANTLR start "rule__STMulDivModExpression__RightAssignment_1_1"
    // InternalSTCoreParser.g:11677:1: rule__STMulDivModExpression__RightAssignment_1_1 : ( ruleSTPowerExpression ) ;
    public final void rule__STMulDivModExpression__RightAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11681:1: ( ( ruleSTPowerExpression ) )
            // InternalSTCoreParser.g:11682:2: ( ruleSTPowerExpression )
            {
            // InternalSTCoreParser.g:11682:2: ( ruleSTPowerExpression )
            // InternalSTCoreParser.g:11683:3: ruleSTPowerExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMulDivModExpressionAccess().getRightSTPowerExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTPowerExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMulDivModExpressionAccess().getRightSTPowerExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMulDivModExpression__RightAssignment_1_1"


    // $ANTLR start "rule__STPowerExpression__OpAssignment_1_0_1"
    // InternalSTCoreParser.g:11692:1: rule__STPowerExpression__OpAssignment_1_0_1 : ( rulePowerOperator ) ;
    public final void rule__STPowerExpression__OpAssignment_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11696:1: ( ( rulePowerOperator ) )
            // InternalSTCoreParser.g:11697:2: ( rulePowerOperator )
            {
            // InternalSTCoreParser.g:11697:2: ( rulePowerOperator )
            // InternalSTCoreParser.g:11698:3: rulePowerOperator
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPowerExpressionAccess().getOpPowerOperatorEnumRuleCall_1_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePowerOperator();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPowerExpressionAccess().getOpPowerOperatorEnumRuleCall_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__OpAssignment_1_0_1"


    // $ANTLR start "rule__STPowerExpression__RightAssignment_1_1"
    // InternalSTCoreParser.g:11707:1: rule__STPowerExpression__RightAssignment_1_1 : ( ruleSTUnaryExpression ) ;
    public final void rule__STPowerExpression__RightAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11711:1: ( ( ruleSTUnaryExpression ) )
            // InternalSTCoreParser.g:11712:2: ( ruleSTUnaryExpression )
            {
            // InternalSTCoreParser.g:11712:2: ( ruleSTUnaryExpression )
            // InternalSTCoreParser.g:11713:3: ruleSTUnaryExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTPowerExpressionAccess().getRightSTUnaryExpressionParserRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTUnaryExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTPowerExpressionAccess().getRightSTUnaryExpressionParserRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STPowerExpression__RightAssignment_1_1"


    // $ANTLR start "rule__STUnaryExpression__OpAssignment_1_1"
    // InternalSTCoreParser.g:11722:1: rule__STUnaryExpression__OpAssignment_1_1 : ( ruleUnaryOperator ) ;
    public final void rule__STUnaryExpression__OpAssignment_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11726:1: ( ( ruleUnaryOperator ) )
            // InternalSTCoreParser.g:11727:2: ( ruleUnaryOperator )
            {
            // InternalSTCoreParser.g:11727:2: ( ruleUnaryOperator )
            // InternalSTCoreParser.g:11728:3: ruleUnaryOperator
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleUnaryOperator();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STUnaryExpression__OpAssignment_1_1"


    // $ANTLR start "rule__STUnaryExpression__ExpressionAssignment_1_2"
    // InternalSTCoreParser.g:11737:1: rule__STUnaryExpression__ExpressionAssignment_1_2 : ( ruleSTUnaryExpression ) ;
    public final void rule__STUnaryExpression__ExpressionAssignment_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11741:1: ( ( ruleSTUnaryExpression ) )
            // InternalSTCoreParser.g:11742:2: ( ruleSTUnaryExpression )
            {
            // InternalSTCoreParser.g:11742:2: ( ruleSTUnaryExpression )
            // InternalSTCoreParser.g:11743:3: ruleSTUnaryExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTUnaryExpressionAccess().getExpressionSTUnaryExpressionParserRuleCall_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTUnaryExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTUnaryExpressionAccess().getExpressionSTUnaryExpressionParserRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STUnaryExpression__ExpressionAssignment_1_2"


    // $ANTLR start "rule__STAccessExpression__MemberAssignment_1_0_2"
    // InternalSTCoreParser.g:11752:1: rule__STAccessExpression__MemberAssignment_1_0_2 : ( ( rule__STAccessExpression__MemberAlternatives_1_0_2_0 ) ) ;
    public final void rule__STAccessExpression__MemberAssignment_1_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11756:1: ( ( ( rule__STAccessExpression__MemberAlternatives_1_0_2_0 ) ) )
            // InternalSTCoreParser.g:11757:2: ( ( rule__STAccessExpression__MemberAlternatives_1_0_2_0 ) )
            {
            // InternalSTCoreParser.g:11757:2: ( ( rule__STAccessExpression__MemberAlternatives_1_0_2_0 ) )
            // InternalSTCoreParser.g:11758:3: ( rule__STAccessExpression__MemberAlternatives_1_0_2_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getMemberAlternatives_1_0_2_0()); 
            }
            // InternalSTCoreParser.g:11759:3: ( rule__STAccessExpression__MemberAlternatives_1_0_2_0 )
            // InternalSTCoreParser.g:11759:4: rule__STAccessExpression__MemberAlternatives_1_0_2_0
            {
            pushFollow(FOLLOW_2);
            rule__STAccessExpression__MemberAlternatives_1_0_2_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getMemberAlternatives_1_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__MemberAssignment_1_0_2"


    // $ANTLR start "rule__STAccessExpression__IndexAssignment_1_1_2"
    // InternalSTCoreParser.g:11767:1: rule__STAccessExpression__IndexAssignment_1_1_2 : ( ruleSTExpression ) ;
    public final void rule__STAccessExpression__IndexAssignment_1_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11771:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11772:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11772:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11773:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__IndexAssignment_1_1_2"


    // $ANTLR start "rule__STAccessExpression__IndexAssignment_1_1_3_1"
    // InternalSTCoreParser.g:11782:1: rule__STAccessExpression__IndexAssignment_1_1_3_1 : ( ruleSTExpression ) ;
    public final void rule__STAccessExpression__IndexAssignment_1_1_3_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11786:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11787:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11787:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11788:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTAccessExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_3_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTAccessExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STAccessExpression__IndexAssignment_1_1_3_1"


    // $ANTLR start "rule__STFeatureExpression__FeatureAssignment_1"
    // InternalSTCoreParser.g:11797:1: rule__STFeatureExpression__FeatureAssignment_1 : ( ( ruleSTFeatureName ) ) ;
    public final void rule__STFeatureExpression__FeatureAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11801:1: ( ( ( ruleSTFeatureName ) ) )
            // InternalSTCoreParser.g:11802:2: ( ( ruleSTFeatureName ) )
            {
            // InternalSTCoreParser.g:11802:2: ( ( ruleSTFeatureName ) )
            // InternalSTCoreParser.g:11803:3: ( ruleSTFeatureName )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getFeatureINamedElementCrossReference_1_0()); 
            }
            // InternalSTCoreParser.g:11804:3: ( ruleSTFeatureName )
            // InternalSTCoreParser.g:11805:4: ruleSTFeatureName
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getFeatureINamedElementSTFeatureNameParserRuleCall_1_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTFeatureName();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getFeatureINamedElementSTFeatureNameParserRuleCall_1_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getFeatureINamedElementCrossReference_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__FeatureAssignment_1"


    // $ANTLR start "rule__STFeatureExpression__CallAssignment_2_0"
    // InternalSTCoreParser.g:11816:1: rule__STFeatureExpression__CallAssignment_2_0 : ( ( LeftParenthesis ) ) ;
    public final void rule__STFeatureExpression__CallAssignment_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11820:1: ( ( ( LeftParenthesis ) ) )
            // InternalSTCoreParser.g:11821:2: ( ( LeftParenthesis ) )
            {
            // InternalSTCoreParser.g:11821:2: ( ( LeftParenthesis ) )
            // InternalSTCoreParser.g:11822:3: ( LeftParenthesis )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getCallLeftParenthesisKeyword_2_0_0()); 
            }
            // InternalSTCoreParser.g:11823:3: ( LeftParenthesis )
            // InternalSTCoreParser.g:11824:4: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getCallLeftParenthesisKeyword_2_0_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getCallLeftParenthesisKeyword_2_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getCallLeftParenthesisKeyword_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__CallAssignment_2_0"


    // $ANTLR start "rule__STFeatureExpression__ParametersAssignment_2_1_0"
    // InternalSTCoreParser.g:11835:1: rule__STFeatureExpression__ParametersAssignment_2_1_0 : ( ruleSTCallArgument ) ;
    public final void rule__STFeatureExpression__ParametersAssignment_2_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11839:1: ( ( ruleSTCallArgument ) )
            // InternalSTCoreParser.g:11840:2: ( ruleSTCallArgument )
            {
            // InternalSTCoreParser.g:11840:2: ( ruleSTCallArgument )
            // InternalSTCoreParser.g:11841:3: ruleSTCallArgument
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getParametersSTCallArgumentParserRuleCall_2_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTCallArgument();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getParametersSTCallArgumentParserRuleCall_2_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__ParametersAssignment_2_1_0"


    // $ANTLR start "rule__STFeatureExpression__ParametersAssignment_2_1_1_1"
    // InternalSTCoreParser.g:11850:1: rule__STFeatureExpression__ParametersAssignment_2_1_1_1 : ( ruleSTCallArgument ) ;
    public final void rule__STFeatureExpression__ParametersAssignment_2_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11854:1: ( ( ruleSTCallArgument ) )
            // InternalSTCoreParser.g:11855:2: ( ruleSTCallArgument )
            {
            // InternalSTCoreParser.g:11855:2: ( ruleSTCallArgument )
            // InternalSTCoreParser.g:11856:3: ruleSTCallArgument
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTFeatureExpressionAccess().getParametersSTCallArgumentParserRuleCall_2_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTCallArgument();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTFeatureExpressionAccess().getParametersSTCallArgumentParserRuleCall_2_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STFeatureExpression__ParametersAssignment_2_1_1_1"


    // $ANTLR start "rule__STBuiltinFeatureExpression__FeatureAssignment_1"
    // InternalSTCoreParser.g:11865:1: rule__STBuiltinFeatureExpression__FeatureAssignment_1 : ( ruleSTBuiltinFeature ) ;
    public final void rule__STBuiltinFeatureExpression__FeatureAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11869:1: ( ( ruleSTBuiltinFeature ) )
            // InternalSTCoreParser.g:11870:2: ( ruleSTBuiltinFeature )
            {
            // InternalSTCoreParser.g:11870:2: ( ruleSTBuiltinFeature )
            // InternalSTCoreParser.g:11871:3: ruleSTBuiltinFeature
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getFeatureSTBuiltinFeatureEnumRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTBuiltinFeature();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getFeatureSTBuiltinFeatureEnumRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__FeatureAssignment_1"


    // $ANTLR start "rule__STBuiltinFeatureExpression__CallAssignment_2_0"
    // InternalSTCoreParser.g:11880:1: rule__STBuiltinFeatureExpression__CallAssignment_2_0 : ( ( LeftParenthesis ) ) ;
    public final void rule__STBuiltinFeatureExpression__CallAssignment_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11884:1: ( ( ( LeftParenthesis ) ) )
            // InternalSTCoreParser.g:11885:2: ( ( LeftParenthesis ) )
            {
            // InternalSTCoreParser.g:11885:2: ( ( LeftParenthesis ) )
            // InternalSTCoreParser.g:11886:3: ( LeftParenthesis )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getCallLeftParenthesisKeyword_2_0_0()); 
            }
            // InternalSTCoreParser.g:11887:3: ( LeftParenthesis )
            // InternalSTCoreParser.g:11888:4: LeftParenthesis
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getCallLeftParenthesisKeyword_2_0_0()); 
            }
            match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getCallLeftParenthesisKeyword_2_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getCallLeftParenthesisKeyword_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__CallAssignment_2_0"


    // $ANTLR start "rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_0"
    // InternalSTCoreParser.g:11899:1: rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_0 : ( ruleSTCallArgument ) ;
    public final void rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11903:1: ( ( ruleSTCallArgument ) )
            // InternalSTCoreParser.g:11904:2: ( ruleSTCallArgument )
            {
            // InternalSTCoreParser.g:11904:2: ( ruleSTCallArgument )
            // InternalSTCoreParser.g:11905:3: ruleSTCallArgument
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getParametersSTCallArgumentParserRuleCall_2_1_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTCallArgument();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getParametersSTCallArgumentParserRuleCall_2_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_0"


    // $ANTLR start "rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_1_1"
    // InternalSTCoreParser.g:11914:1: rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_1_1 : ( ruleSTCallArgument ) ;
    public final void rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11918:1: ( ( ruleSTCallArgument ) )
            // InternalSTCoreParser.g:11919:2: ( ruleSTCallArgument )
            {
            // InternalSTCoreParser.g:11919:2: ( ruleSTCallArgument )
            // InternalSTCoreParser.g:11920:3: ruleSTCallArgument
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTBuiltinFeatureExpressionAccess().getParametersSTCallArgumentParserRuleCall_2_1_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTCallArgument();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTBuiltinFeatureExpressionAccess().getParametersSTCallArgumentParserRuleCall_2_1_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STBuiltinFeatureExpression__ParametersAssignment_2_1_1_1"


    // $ANTLR start "rule__STMultibitPartialExpression__SpecifierAssignment_1"
    // InternalSTCoreParser.g:11929:1: rule__STMultibitPartialExpression__SpecifierAssignment_1 : ( ruleSTMultiBitAccessSpecifier ) ;
    public final void rule__STMultibitPartialExpression__SpecifierAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11933:1: ( ( ruleSTMultiBitAccessSpecifier ) )
            // InternalSTCoreParser.g:11934:2: ( ruleSTMultiBitAccessSpecifier )
            {
            // InternalSTCoreParser.g:11934:2: ( ruleSTMultiBitAccessSpecifier )
            // InternalSTCoreParser.g:11935:3: ruleSTMultiBitAccessSpecifier
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMultibitPartialExpressionAccess().getSpecifierSTMultiBitAccessSpecifierEnumRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTMultiBitAccessSpecifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMultibitPartialExpressionAccess().getSpecifierSTMultiBitAccessSpecifierEnumRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__SpecifierAssignment_1"


    // $ANTLR start "rule__STMultibitPartialExpression__IndexAssignment_2_0"
    // InternalSTCoreParser.g:11944:1: rule__STMultibitPartialExpression__IndexAssignment_2_0 : ( RULE_INT ) ;
    public final void rule__STMultibitPartialExpression__IndexAssignment_2_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11948:1: ( ( RULE_INT ) )
            // InternalSTCoreParser.g:11949:2: ( RULE_INT )
            {
            // InternalSTCoreParser.g:11949:2: ( RULE_INT )
            // InternalSTCoreParser.g:11950:3: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMultibitPartialExpressionAccess().getIndexINTTerminalRuleCall_2_0_0()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMultibitPartialExpressionAccess().getIndexINTTerminalRuleCall_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__IndexAssignment_2_0"


    // $ANTLR start "rule__STMultibitPartialExpression__ExpressionAssignment_2_1_1"
    // InternalSTCoreParser.g:11959:1: rule__STMultibitPartialExpression__ExpressionAssignment_2_1_1 : ( ruleSTExpression ) ;
    public final void rule__STMultibitPartialExpression__ExpressionAssignment_2_1_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11963:1: ( ( ruleSTExpression ) )
            // InternalSTCoreParser.g:11964:2: ( ruleSTExpression )
            {
            // InternalSTCoreParser.g:11964:2: ( ruleSTExpression )
            // InternalSTCoreParser.g:11965:3: ruleSTExpression
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTMultibitPartialExpressionAccess().getExpressionSTExpressionParserRuleCall_2_1_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTMultibitPartialExpressionAccess().getExpressionSTExpressionParserRuleCall_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STMultibitPartialExpression__ExpressionAssignment_2_1_1"


    // $ANTLR start "rule__STNumericLiteral__TypeAssignment_0_0"
    // InternalSTCoreParser.g:11974:1: rule__STNumericLiteral__TypeAssignment_0_0 : ( ( ruleSTNumericLiteralType ) ) ;
    public final void rule__STNumericLiteral__TypeAssignment_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11978:1: ( ( ( ruleSTNumericLiteralType ) ) )
            // InternalSTCoreParser.g:11979:2: ( ( ruleSTNumericLiteralType ) )
            {
            // InternalSTCoreParser.g:11979:2: ( ( ruleSTNumericLiteralType ) )
            // InternalSTCoreParser.g:11980:3: ( ruleSTNumericLiteralType )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTNumericLiteralAccess().getTypeDataTypeCrossReference_0_0_0()); 
            }
            // InternalSTCoreParser.g:11981:3: ( ruleSTNumericLiteralType )
            // InternalSTCoreParser.g:11982:4: ruleSTNumericLiteralType
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTNumericLiteralAccess().getTypeDataTypeSTNumericLiteralTypeParserRuleCall_0_0_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTNumericLiteralType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTNumericLiteralAccess().getTypeDataTypeSTNumericLiteralTypeParserRuleCall_0_0_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTNumericLiteralAccess().getTypeDataTypeCrossReference_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STNumericLiteral__TypeAssignment_0_0"


    // $ANTLR start "rule__STNumericLiteral__ValueAssignment_1"
    // InternalSTCoreParser.g:11993:1: rule__STNumericLiteral__ValueAssignment_1 : ( ruleNumeric ) ;
    public final void rule__STNumericLiteral__ValueAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:11997:1: ( ( ruleNumeric ) )
            // InternalSTCoreParser.g:11998:2: ( ruleNumeric )
            {
            // InternalSTCoreParser.g:11998:2: ( ruleNumeric )
            // InternalSTCoreParser.g:11999:3: ruleNumeric
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTNumericLiteralAccess().getValueNumericParserRuleCall_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleNumeric();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTNumericLiteralAccess().getValueNumericParserRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STNumericLiteral__ValueAssignment_1"


    // $ANTLR start "rule__STDateLiteral__TypeAssignment_0"
    // InternalSTCoreParser.g:12008:1: rule__STDateLiteral__TypeAssignment_0 : ( ( ruleSTDateLiteralType ) ) ;
    public final void rule__STDateLiteral__TypeAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:12012:1: ( ( ( ruleSTDateLiteralType ) ) )
            // InternalSTCoreParser.g:12013:2: ( ( ruleSTDateLiteralType ) )
            {
            // InternalSTCoreParser.g:12013:2: ( ( ruleSTDateLiteralType ) )
            // InternalSTCoreParser.g:12014:3: ( ruleSTDateLiteralType )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateLiteralAccess().getTypeDataTypeCrossReference_0_0()); 
            }
            // InternalSTCoreParser.g:12015:3: ( ruleSTDateLiteralType )
            // InternalSTCoreParser.g:12016:4: ruleSTDateLiteralType
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateLiteralAccess().getTypeDataTypeSTDateLiteralTypeParserRuleCall_0_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTDateLiteralType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateLiteralAccess().getTypeDataTypeSTDateLiteralTypeParserRuleCall_0_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateLiteralAccess().getTypeDataTypeCrossReference_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateLiteral__TypeAssignment_0"


    // $ANTLR start "rule__STDateLiteral__ValueAssignment_2"
    // InternalSTCoreParser.g:12027:1: rule__STDateLiteral__ValueAssignment_2 : ( ruleDate ) ;
    public final void rule__STDateLiteral__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:12031:1: ( ( ruleDate ) )
            // InternalSTCoreParser.g:12032:2: ( ruleDate )
            {
            // InternalSTCoreParser.g:12032:2: ( ruleDate )
            // InternalSTCoreParser.g:12033:3: ruleDate
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateLiteralAccess().getValueDateParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleDate();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateLiteralAccess().getValueDateParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateLiteral__ValueAssignment_2"


    // $ANTLR start "rule__STTimeLiteral__TypeAssignment_0"
    // InternalSTCoreParser.g:12042:1: rule__STTimeLiteral__TypeAssignment_0 : ( ( ruleSTTimeLiteralType ) ) ;
    public final void rule__STTimeLiteral__TypeAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:12046:1: ( ( ( ruleSTTimeLiteralType ) ) )
            // InternalSTCoreParser.g:12047:2: ( ( ruleSTTimeLiteralType ) )
            {
            // InternalSTCoreParser.g:12047:2: ( ( ruleSTTimeLiteralType ) )
            // InternalSTCoreParser.g:12048:3: ( ruleSTTimeLiteralType )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeLiteralAccess().getTypeDataTypeCrossReference_0_0()); 
            }
            // InternalSTCoreParser.g:12049:3: ( ruleSTTimeLiteralType )
            // InternalSTCoreParser.g:12050:4: ruleSTTimeLiteralType
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeLiteralAccess().getTypeDataTypeSTTimeLiteralTypeParserRuleCall_0_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTTimeLiteralType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeLiteralAccess().getTypeDataTypeSTTimeLiteralTypeParserRuleCall_0_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeLiteralAccess().getTypeDataTypeCrossReference_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeLiteral__TypeAssignment_0"


    // $ANTLR start "rule__STTimeLiteral__ValueAssignment_2"
    // InternalSTCoreParser.g:12061:1: rule__STTimeLiteral__ValueAssignment_2 : ( ruleTime ) ;
    public final void rule__STTimeLiteral__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:12065:1: ( ( ruleTime ) )
            // InternalSTCoreParser.g:12066:2: ( ruleTime )
            {
            // InternalSTCoreParser.g:12066:2: ( ruleTime )
            // InternalSTCoreParser.g:12067:3: ruleTime
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeLiteralAccess().getValueTimeParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleTime();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeLiteralAccess().getValueTimeParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeLiteral__ValueAssignment_2"


    // $ANTLR start "rule__STTimeOfDayLiteral__TypeAssignment_0"
    // InternalSTCoreParser.g:12076:1: rule__STTimeOfDayLiteral__TypeAssignment_0 : ( ( ruleSTTimeOfDayType ) ) ;
    public final void rule__STTimeOfDayLiteral__TypeAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:12080:1: ( ( ( ruleSTTimeOfDayType ) ) )
            // InternalSTCoreParser.g:12081:2: ( ( ruleSTTimeOfDayType ) )
            {
            // InternalSTCoreParser.g:12081:2: ( ( ruleSTTimeOfDayType ) )
            // InternalSTCoreParser.g:12082:3: ( ruleSTTimeOfDayType )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeOfDayLiteralAccess().getTypeDataTypeCrossReference_0_0()); 
            }
            // InternalSTCoreParser.g:12083:3: ( ruleSTTimeOfDayType )
            // InternalSTCoreParser.g:12084:4: ruleSTTimeOfDayType
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeOfDayLiteralAccess().getTypeDataTypeSTTimeOfDayTypeParserRuleCall_0_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTTimeOfDayType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeOfDayLiteralAccess().getTypeDataTypeSTTimeOfDayTypeParserRuleCall_0_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeOfDayLiteralAccess().getTypeDataTypeCrossReference_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeOfDayLiteral__TypeAssignment_0"


    // $ANTLR start "rule__STTimeOfDayLiteral__ValueAssignment_2"
    // InternalSTCoreParser.g:12095:1: rule__STTimeOfDayLiteral__ValueAssignment_2 : ( ruleTimeOfDay ) ;
    public final void rule__STTimeOfDayLiteral__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:12099:1: ( ( ruleTimeOfDay ) )
            // InternalSTCoreParser.g:12100:2: ( ruleTimeOfDay )
            {
            // InternalSTCoreParser.g:12100:2: ( ruleTimeOfDay )
            // InternalSTCoreParser.g:12101:3: ruleTimeOfDay
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTTimeOfDayLiteralAccess().getValueTimeOfDayParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleTimeOfDay();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTTimeOfDayLiteralAccess().getValueTimeOfDayParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STTimeOfDayLiteral__ValueAssignment_2"


    // $ANTLR start "rule__STDateAndTimeLiteral__TypeAssignment_0"
    // InternalSTCoreParser.g:12110:1: rule__STDateAndTimeLiteral__TypeAssignment_0 : ( ( ruleSTDateAndTimeType ) ) ;
    public final void rule__STDateAndTimeLiteral__TypeAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:12114:1: ( ( ( ruleSTDateAndTimeType ) ) )
            // InternalSTCoreParser.g:12115:2: ( ( ruleSTDateAndTimeType ) )
            {
            // InternalSTCoreParser.g:12115:2: ( ( ruleSTDateAndTimeType ) )
            // InternalSTCoreParser.g:12116:3: ( ruleSTDateAndTimeType )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateAndTimeLiteralAccess().getTypeDataTypeCrossReference_0_0()); 
            }
            // InternalSTCoreParser.g:12117:3: ( ruleSTDateAndTimeType )
            // InternalSTCoreParser.g:12118:4: ruleSTDateAndTimeType
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateAndTimeLiteralAccess().getTypeDataTypeSTDateAndTimeTypeParserRuleCall_0_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTDateAndTimeType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateAndTimeLiteralAccess().getTypeDataTypeSTDateAndTimeTypeParserRuleCall_0_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateAndTimeLiteralAccess().getTypeDataTypeCrossReference_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateAndTimeLiteral__TypeAssignment_0"


    // $ANTLR start "rule__STDateAndTimeLiteral__ValueAssignment_2"
    // InternalSTCoreParser.g:12129:1: rule__STDateAndTimeLiteral__ValueAssignment_2 : ( ruleDateAndTime ) ;
    public final void rule__STDateAndTimeLiteral__ValueAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:12133:1: ( ( ruleDateAndTime ) )
            // InternalSTCoreParser.g:12134:2: ( ruleDateAndTime )
            {
            // InternalSTCoreParser.g:12134:2: ( ruleDateAndTime )
            // InternalSTCoreParser.g:12135:3: ruleDateAndTime
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTDateAndTimeLiteralAccess().getValueDateAndTimeParserRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleDateAndTime();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTDateAndTimeLiteralAccess().getValueDateAndTimeParserRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STDateAndTimeLiteral__ValueAssignment_2"


    // $ANTLR start "rule__STStringLiteral__TypeAssignment_0_0"
    // InternalSTCoreParser.g:12144:1: rule__STStringLiteral__TypeAssignment_0_0 : ( ( ruleSTAnyCharsType ) ) ;
    public final void rule__STStringLiteral__TypeAssignment_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:12148:1: ( ( ( ruleSTAnyCharsType ) ) )
            // InternalSTCoreParser.g:12149:2: ( ( ruleSTAnyCharsType ) )
            {
            // InternalSTCoreParser.g:12149:2: ( ( ruleSTAnyCharsType ) )
            // InternalSTCoreParser.g:12150:3: ( ruleSTAnyCharsType )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStringLiteralAccess().getTypeDataTypeCrossReference_0_0_0()); 
            }
            // InternalSTCoreParser.g:12151:3: ( ruleSTAnyCharsType )
            // InternalSTCoreParser.g:12152:4: ruleSTAnyCharsType
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStringLiteralAccess().getTypeDataTypeSTAnyCharsTypeParserRuleCall_0_0_0_1()); 
            }
            pushFollow(FOLLOW_2);
            ruleSTAnyCharsType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStringLiteralAccess().getTypeDataTypeSTAnyCharsTypeParserRuleCall_0_0_0_1()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStringLiteralAccess().getTypeDataTypeCrossReference_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStringLiteral__TypeAssignment_0_0"


    // $ANTLR start "rule__STStringLiteral__ValueAssignment_1"
    // InternalSTCoreParser.g:12163:1: rule__STStringLiteral__ValueAssignment_1 : ( RULE_STRING ) ;
    public final void rule__STStringLiteral__ValueAssignment_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalSTCoreParser.g:12167:1: ( ( RULE_STRING ) )
            // InternalSTCoreParser.g:12168:2: ( RULE_STRING )
            {
            // InternalSTCoreParser.g:12168:2: ( RULE_STRING )
            // InternalSTCoreParser.g:12169:3: RULE_STRING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getSTStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); 
            }
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getSTStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__STStringLiteral__ValueAssignment_1"

    // $ANTLR start synpred10_InternalSTCoreParser
    public final void synpred10_InternalSTCoreParser_fragment() throws RecognitionException {   
        // InternalSTCoreParser.g:2170:2: ( ( ( ruleSTAssignmentStatement ) ) )
        // InternalSTCoreParser.g:2170:2: ( ( ruleSTAssignmentStatement ) )
        {
        // InternalSTCoreParser.g:2170:2: ( ( ruleSTAssignmentStatement ) )
        // InternalSTCoreParser.g:2171:3: ( ruleSTAssignmentStatement )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getSTStatementAccess().getSTAssignmentStatementParserRuleCall_0_0_5()); 
        }
        // InternalSTCoreParser.g:2172:3: ( ruleSTAssignmentStatement )
        // InternalSTCoreParser.g:2172:4: ruleSTAssignmentStatement
        {
        pushFollow(FOLLOW_2);
        ruleSTAssignmentStatement();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred10_InternalSTCoreParser

    // $ANTLR start synpred11_InternalSTCoreParser
    public final void synpred11_InternalSTCoreParser_fragment() throws RecognitionException {   
        // InternalSTCoreParser.g:2176:2: ( ( ruleSTCallStatement ) )
        // InternalSTCoreParser.g:2176:2: ( ruleSTCallStatement )
        {
        // InternalSTCoreParser.g:2176:2: ( ruleSTCallStatement )
        // InternalSTCoreParser.g:2177:3: ruleSTCallStatement
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getSTStatementAccess().getSTCallStatementParserRuleCall_0_0_6()); 
        }
        pushFollow(FOLLOW_2);
        ruleSTCallStatement();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred11_InternalSTCoreParser

    // $ANTLR start synpred16_InternalSTCoreParser
    public final void synpred16_InternalSTCoreParser_fragment() throws RecognitionException {   
        // InternalSTCoreParser.g:2236:2: ( ( ( ruleSTAccessExpression ) ) )
        // InternalSTCoreParser.g:2236:2: ( ( ruleSTAccessExpression ) )
        {
        // InternalSTCoreParser.g:2236:2: ( ( ruleSTAccessExpression ) )
        // InternalSTCoreParser.g:2237:3: ( ruleSTAccessExpression )
        {
        if ( state.backtracking==0 ) {
           before(grammarAccess.getSTUnaryExpressionAccess().getSTAccessExpressionParserRuleCall_0()); 
        }
        // InternalSTCoreParser.g:2238:3: ( ruleSTAccessExpression )
        // InternalSTCoreParser.g:2238:4: ruleSTAccessExpression
        {
        pushFollow(FOLLOW_2);
        ruleSTAccessExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred16_InternalSTCoreParser

    // $ANTLR start synpred112_InternalSTCoreParser
    public final void synpred112_InternalSTCoreParser_fragment() throws RecognitionException {   
        // InternalSTCoreParser.g:5790:3: ( rule__STCaseCases__StatementsAssignment_3 )
        // InternalSTCoreParser.g:5790:3: rule__STCaseCases__StatementsAssignment_3
        {
        pushFollow(FOLLOW_2);
        rule__STCaseCases__StatementsAssignment_3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred112_InternalSTCoreParser

    // $ANTLR start synpred129_InternalSTCoreParser
    public final void synpred129_InternalSTCoreParser_fragment() throws RecognitionException {   
        // InternalSTCoreParser.g:8544:3: ( rule__STFeatureExpression__Group_2__0 )
        // InternalSTCoreParser.g:8544:3: rule__STFeatureExpression__Group_2__0
        {
        pushFollow(FOLLOW_2);
        rule__STFeatureExpression__Group_2__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_InternalSTCoreParser

    // $ANTLR start synpred132_InternalSTCoreParser
    public final void synpred132_InternalSTCoreParser_fragment() throws RecognitionException {   
        // InternalSTCoreParser.g:8814:3: ( rule__STBuiltinFeatureExpression__Group_2__0 )
        // InternalSTCoreParser.g:8814:3: rule__STBuiltinFeatureExpression__Group_2__0
        {
        pushFollow(FOLLOW_2);
        rule__STBuiltinFeatureExpression__Group_2__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred132_InternalSTCoreParser

    // $ANTLR start synpred139_InternalSTCoreParser
    public final void synpred139_InternalSTCoreParser_fragment() throws RecognitionException {   
        // InternalSTCoreParser.g:9786:3: ( rule__Number__Group_2__0 )
        // InternalSTCoreParser.g:9786:3: rule__Number__Group_2__0
        {
        pushFollow(FOLLOW_2);
        rule__Number__Group_2__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred139_InternalSTCoreParser

    // $ANTLR start synpred141_InternalSTCoreParser
    public final void synpred141_InternalSTCoreParser_fragment() throws RecognitionException {   
        // InternalSTCoreParser.g:10353:3: ( rule__DateAndTime__Group_11__0 )
        // InternalSTCoreParser.g:10353:3: rule__DateAndTime__Group_11__0
        {
        pushFollow(FOLLOW_2);
        rule__DateAndTime__Group_11__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred141_InternalSTCoreParser

    // $ANTLR start synpred142_InternalSTCoreParser
    public final void synpred142_InternalSTCoreParser_fragment() throws RecognitionException {   
        // InternalSTCoreParser.g:10569:3: ( rule__TimeOfDay__Group_5__0 )
        // InternalSTCoreParser.g:10569:3: rule__TimeOfDay__Group_5__0
        {
        pushFollow(FOLLOW_2);
        rule__TimeOfDay__Group_5__0();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_InternalSTCoreParser

    // Delegated rules

    public final boolean synpred11_InternalSTCoreParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalSTCoreParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_InternalSTCoreParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_InternalSTCoreParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_InternalSTCoreParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_InternalSTCoreParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_InternalSTCoreParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_InternalSTCoreParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_InternalSTCoreParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_InternalSTCoreParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalSTCoreParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalSTCoreParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_InternalSTCoreParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_InternalSTCoreParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_InternalSTCoreParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_InternalSTCoreParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalSTCoreParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalSTCoreParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA77 dfa77 = new DFA77(this);
    static final String dfa_1s = "\16\uffff";
    static final String dfa_2s = "\2\10\2\uffff\11\151\1\uffff";
    static final String dfa_3s = "\2\u00ab\2\uffff\11\u009b\1\uffff";
    static final String dfa_4s = "\2\uffff\1\1\1\2\11\uffff\1\3";
    static final String dfa_5s = "\16\uffff}>";
    static final String[] dfa_6s = {
            "\1\2\1\uffff\1\2\4\uffff\1\2\2\uffff\1\2\45\uffff\1\2\10\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\uffff\6\2\1\uffff\2\2\1\uffff\2\2\1\uffff\3\2\2\uffff\2\2\1\uffff\2\2\2\uffff\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\17\uffff\1\2\1\uffff\2\2\2\uffff\1\2\3\uffff\1\1\2\uffff\1\2\1\uffff\1\2\7\uffff\2\2\1\3\2\uffff\3\2\11\uffff\2\2",
            "\1\2\1\uffff\1\2\4\uffff\1\2\2\uffff\1\2\45\uffff\1\2\10\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\uffff\6\2\1\uffff\2\2\1\uffff\2\2\1\uffff\3\2\2\uffff\2\2\1\uffff\2\2\2\uffff\3\2\1\uffff\1\2\1\uffff\1\2\1\6\1\uffff\2\2\1\11\1\2\1\uffff\1\2\1\uffff\1\10\17\uffff\1\13\1\uffff\1\14\1\5\2\uffff\1\7\3\uffff\1\2\2\uffff\1\2\1\uffff\1\2\7\uffff\1\12\1\2\3\uffff\3\2\11\uffff\1\4\1\2",
            "",
            "",
            "\1\2\3\uffff\1\2\4\uffff\1\2\5\uffff\2\2\1\15\2\2\1\uffff\1\2\11\uffff\1\2\2\uffff\5\2\1\uffff\3\2\2\uffff\3\2\2\uffff\1\2",
            "\1\2\3\uffff\1\2\4\uffff\1\2\5\uffff\2\2\1\15\2\2\1\uffff\1\2\11\uffff\1\2\1\uffff\6\2\1\uffff\3\2\2\uffff\3\2\2\uffff\1\2",
            "\1\2\3\uffff\1\2\4\uffff\1\2\5\uffff\2\2\1\15\2\2\1\uffff\1\2\11\uffff\1\2\2\uffff\5\2\1\uffff\3\2\2\uffff\3\2\2\uffff\1\2",
            "\1\2\3\uffff\1\2\4\uffff\1\2\5\uffff\2\2\1\15\2\2\1\uffff\1\2\11\uffff\1\2\2\uffff\5\2\1\uffff\3\2\2\uffff\3\2\2\uffff\1\2",
            "\1\2\3\uffff\1\2\4\uffff\1\2\5\uffff\2\2\1\15\2\2\1\uffff\1\2\11\uffff\1\2\2\uffff\5\2\1\uffff\3\2\2\uffff\3\2\2\uffff\1\2",
            "\1\2\3\uffff\1\2\4\uffff\1\2\5\uffff\2\2\1\15\2\2\1\uffff\1\2\11\uffff\1\2\2\uffff\5\2\1\uffff\3\2\2\uffff\3\2\2\uffff\1\2",
            "\1\2\3\uffff\1\2\4\uffff\1\2\5\uffff\2\2\1\15\2\2\1\uffff\1\2\11\uffff\1\2\1\uffff\6\2\1\uffff\3\2\2\uffff\3\2\2\uffff\1\2",
            "\1\2\3\uffff\1\2\4\uffff\1\2\5\uffff\2\2\1\15\2\2\1\uffff\1\2\11\uffff\1\2\1\uffff\6\2\1\uffff\3\2\2\uffff\3\2\2\uffff\1\2",
            "\1\2\3\uffff\1\2\4\uffff\1\2\5\uffff\2\2\1\15\2\2\1\uffff\1\2\11\uffff\1\2\1\uffff\6\2\1\uffff\3\2\2\uffff\3\2\2\uffff\1\2",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "2087:1: rule__STInitializerExpression__Alternatives : ( ( ruleSTElementaryInitializerExpression ) | ( ruleSTArrayInitializerExpression ) | ( ruleSTStructInitializerExpression ) );";
        }
    }
    static final String dfa_7s = "\75\uffff";
    static final String dfa_8s = "\1\10\5\uffff\62\0\5\uffff";
    static final String dfa_9s = "\1\u00ab\5\uffff\62\0\5\uffff";
    static final String dfa_10s = "\1\uffff\1\1\1\2\1\3\1\4\1\5\62\uffff\1\10\1\11\1\12\1\6\1\7";
    static final String dfa_11s = "\6\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\5\uffff}>";
    static final String[] dfa_12s = {
            "\1\61\1\uffff\1\60\4\uffff\1\55\2\uffff\1\54\25\uffff\1\71\17\uffff\1\64\4\uffff\1\5\1\uffff\1\70\1\uffff\1\63\3\uffff\1\24\1\uffff\1\41\1\uffff\1\50\1\37\1\52\1\25\1\34\1\35\1\uffff\1\32\1\66\1\4\1\21\1\22\1\2\1\65\1\47\1\30\1\uffff\1\72\1\31\1\57\1\uffff\1\36\1\26\2\uffff\1\20\1\51\1\40\1\uffff\1\33\1\uffff\1\23\1\11\1\3\1\27\1\62\1\14\2\uffff\1\56\1\uffff\1\13\17\uffff\1\16\1\1\1\17\1\10\2\uffff\1\12\3\uffff\1\6\2\uffff\1\42\1\uffff\1\43\7\uffff\1\15\1\53\3\uffff\1\46\1\44\1\45\11\uffff\1\7\1\67",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "2135:1: rule__STStatement__Alternatives_0_0 : ( ( ruleSTIfStatement ) | ( ruleSTCaseStatement ) | ( ruleSTForStatement ) | ( ruleSTWhileStatement ) | ( ruleSTRepeatStatement ) | ( ( ruleSTAssignmentStatement ) ) | ( ruleSTCallStatement ) | ( ( rule__STStatement__Group_0_0_7__0 ) ) | ( ( rule__STStatement__Group_0_0_8__0 ) ) | ( ( rule__STStatement__Group_0_0_9__0 ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA4_11 = input.LA(1);

                         
                        int index4_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA4_13 = input.LA(1);

                         
                        int index4_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalSTCoreParser()) ) {s = 59;}

                        else if ( (synpred11_InternalSTCoreParser()) ) {s = 60;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_13s = "\100\uffff";
    static final String dfa_14s = "\1\1\77\uffff";
    static final String dfa_15s = "\1\10\1\uffff\62\0\14\uffff";
    static final String dfa_16s = "\1\u00ab\1\uffff\62\0\14\uffff";
    static final String dfa_17s = "\1\uffff\1\2\65\uffff\1\1\10\uffff";
    static final String dfa_18s = "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\14\uffff}>";
    static final String[] dfa_19s = {
            "\1\55\1\uffff\1\54\4\uffff\1\51\2\uffff\1\50\25\uffff\1\67\1\1\16\uffff\1\60\4\uffff\1\67\1\uffff\1\67\1\uffff\1\57\3\uffff\1\20\1\uffff\1\35\1\uffff\1\44\1\33\1\46\1\21\1\30\1\31\1\uffff\1\26\1\62\1\67\1\15\1\16\1\67\1\61\1\43\1\24\1\1\1\67\1\25\1\53\1\uffff\1\32\1\22\2\uffff\1\14\1\45\1\34\1\uffff\1\27\1\uffff\1\17\1\5\1\67\1\23\1\56\1\10\1\1\1\uffff\1\52\1\uffff\1\7\17\uffff\1\12\1\67\1\13\1\4\2\uffff\1\6\3\uffff\1\2\2\uffff\1\36\1\uffff\1\37\3\uffff\1\67\3\uffff\1\11\1\47\3\uffff\1\42\1\40\1\41\11\uffff\1\3\1\63",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final short[] dfa_14 = DFA.unpackEncodedString(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[][] dfa_19 = unpackEncodedStringArray(dfa_19s);

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = dfa_13;
            this.eof = dfa_14;
            this.min = dfa_15;
            this.max = dfa_16;
            this.accept = dfa_17;
            this.special = dfa_18;
            this.transition = dfa_19;
        }
        public String getDescription() {
            return "()* loopback of 5790:2: ( rule__STCaseCases__StatementsAssignment_3 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA57_2 = input.LA(1);

                         
                        int index57_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA57_3 = input.LA(1);

                         
                        int index57_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA57_4 = input.LA(1);

                         
                        int index57_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA57_5 = input.LA(1);

                         
                        int index57_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA57_6 = input.LA(1);

                         
                        int index57_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA57_7 = input.LA(1);

                         
                        int index57_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA57_8 = input.LA(1);

                         
                        int index57_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA57_9 = input.LA(1);

                         
                        int index57_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA57_10 = input.LA(1);

                         
                        int index57_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA57_11 = input.LA(1);

                         
                        int index57_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA57_12 = input.LA(1);

                         
                        int index57_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA57_13 = input.LA(1);

                         
                        int index57_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA57_14 = input.LA(1);

                         
                        int index57_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA57_15 = input.LA(1);

                         
                        int index57_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA57_16 = input.LA(1);

                         
                        int index57_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA57_17 = input.LA(1);

                         
                        int index57_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA57_18 = input.LA(1);

                         
                        int index57_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA57_19 = input.LA(1);

                         
                        int index57_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA57_20 = input.LA(1);

                         
                        int index57_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA57_21 = input.LA(1);

                         
                        int index57_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA57_22 = input.LA(1);

                         
                        int index57_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA57_23 = input.LA(1);

                         
                        int index57_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA57_24 = input.LA(1);

                         
                        int index57_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA57_25 = input.LA(1);

                         
                        int index57_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA57_26 = input.LA(1);

                         
                        int index57_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA57_27 = input.LA(1);

                         
                        int index57_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA57_28 = input.LA(1);

                         
                        int index57_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA57_29 = input.LA(1);

                         
                        int index57_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA57_30 = input.LA(1);

                         
                        int index57_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA57_31 = input.LA(1);

                         
                        int index57_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA57_32 = input.LA(1);

                         
                        int index57_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA57_33 = input.LA(1);

                         
                        int index57_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA57_34 = input.LA(1);

                         
                        int index57_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA57_35 = input.LA(1);

                         
                        int index57_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA57_36 = input.LA(1);

                         
                        int index57_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA57_37 = input.LA(1);

                         
                        int index57_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA57_38 = input.LA(1);

                         
                        int index57_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA57_39 = input.LA(1);

                         
                        int index57_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA57_40 = input.LA(1);

                         
                        int index57_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA57_41 = input.LA(1);

                         
                        int index57_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA57_42 = input.LA(1);

                         
                        int index57_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA57_43 = input.LA(1);

                         
                        int index57_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA57_44 = input.LA(1);

                         
                        int index57_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA57_45 = input.LA(1);

                         
                        int index57_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA57_46 = input.LA(1);

                         
                        int index57_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA57_47 = input.LA(1);

                         
                        int index57_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA57_48 = input.LA(1);

                         
                        int index57_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA57_49 = input.LA(1);

                         
                        int index57_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA57_50 = input.LA(1);

                         
                        int index57_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA57_51 = input.LA(1);

                         
                        int index57_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalSTCoreParser()) ) {s = 55;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 57, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_20s = "\43\uffff";
    static final String dfa_21s = "\1\2\42\uffff";
    static final String dfa_22s = "\1\24\1\0\41\uffff";
    static final String dfa_23s = "\1\u009c\1\0\41\uffff";
    static final String dfa_24s = "\2\uffff\1\2\37\uffff\1\1";
    static final String dfa_25s = "\1\uffff\1\0\41\uffff}>";
    static final String[] dfa_26s = {
            "\1\2\114\uffff\1\2\7\uffff\1\2\3\uffff\1\2\4\uffff\1\2\5\uffff\5\2\1\uffff\1\2\1\uffff\2\2\4\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\1\14\2\2\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final short[] dfa_21 = DFA.unpackEncodedString(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final char[] dfa_23 = DFA.unpackEncodedStringToUnsignedChars(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[][] dfa_26 = unpackEncodedStringArray(dfa_26s);

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = dfa_20;
            this.eof = dfa_21;
            this.min = dfa_22;
            this.max = dfa_23;
            this.accept = dfa_24;
            this.special = dfa_25;
            this.transition = dfa_26;
        }
        public String getDescription() {
            return "8544:2: ( rule__STFeatureExpression__Group_2__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA74_1 = input.LA(1);

                         
                        int index74_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalSTCoreParser()) ) {s = 34;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index74_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 74, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = dfa_20;
            this.eof = dfa_21;
            this.min = dfa_22;
            this.max = dfa_23;
            this.accept = dfa_24;
            this.special = dfa_25;
            this.transition = dfa_26;
        }
        public String getDescription() {
            return "8814:2: ( rule__STBuiltinFeatureExpression__Group_2__0 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA77_1 = input.LA(1);

                         
                        int index77_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalSTCoreParser()) ) {s = 34;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xA100010000048500L,0x00053F5CDDFF7EA2L,0x00000C01C622913CL});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0xA100010000048502L,0x00053F5CDDFF7EA2L,0x00000C01C622913CL});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0100000000048500L,0x00011948D9DB7E2AL,0x0000040000000004L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L,0x0000000008200000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0100000000048500L,0x00057B5CD9DB7EA2L,0x00000C01C6029134L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010010000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0100000000048500L,0x00057B5CD9DB7EA2L,0x00000C01CE029134L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000012000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000000L,0x0004220000000000L,0x0000040002000134L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0xA100010000048500L,0x00053F5CDDFF7EA2L,0x00000C01C602913CL});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0xA500010000048500L,0x00053F5CDFFF7EE2L,0x00000C01C622913CL});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000020000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0100000000048502L,0x00057B5CD9DB7EA2L,0x00000C01C6029134L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000110000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0xA104010000048500L,0x00053F5CDDFF7EA2L,0x00000C01C622913CL});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0xA100010100048500L,0x00053F5CDDFF7EA2L,0x00000C01C622913CL});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0xA100010000048500L,0x00053F5CDDFFFEA2L,0x00000C01C622913CL});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000000L,0x4800000000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000002L,0x4800000000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000028000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000028000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L,0x0000000000084000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008040000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008040000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000000L,0x00FC220000000000L,0x0000040082001134L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0100000000048500L,0x00057B5CD9DB7EA2L,0x00000C01C602B134L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000000L,0x00000950C91974A0L,0x00000001C0028000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400028000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0100000000048500L,0x00053B5CD9DB7EA2L,0x00000C01C6029134L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000180028000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});

}