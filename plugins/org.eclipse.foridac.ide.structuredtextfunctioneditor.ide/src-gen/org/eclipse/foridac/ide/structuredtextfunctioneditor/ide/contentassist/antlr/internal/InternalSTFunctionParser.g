/*
 * generated by Xtext 2.25.0
 */
parser grammar InternalSTFunctionParser;

options {
	tokenVocab=InternalSTFunctionLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@header {
package org.eclipse.foridac.ide.structuredtextfunctioneditor.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.foridac.ide.structuredtextfunctioneditor.services.STFunctionGrammarAccess;

}
@members {
	private STFunctionGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("NumberSign", "'#'");
		tokenNameToValue.put("Ampersand", "'&'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("AsteriskAsterisk", "'**'");
		tokenNameToValue.put("FullStopFullStop", "'..'");
		tokenNameToValue.put("ColonEqualsSign", "':='");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("AT", "'AT'");
		tokenNameToValue.put("BY", "'BY'");
		tokenNameToValue.put("D", "'D#'");
		tokenNameToValue.put("DO", "'DO'");
		tokenNameToValue.put("IF", "'IF'");
		tokenNameToValue.put("OF", "'OF'");
		tokenNameToValue.put("OR", "'OR'");
		tokenNameToValue.put("T", "'T#'");
		tokenNameToValue.put("TO", "'TO'");
		tokenNameToValue.put("B", "'.\%B'");
		tokenNameToValue.put("D_1", "'.\%D'");
		tokenNameToValue.put("L", "'.\%L'");
		tokenNameToValue.put("W", "'.\%W'");
		tokenNameToValue.put("X", "'.\%X'");
		tokenNameToValue.put("AND", "'AND'");
		tokenNameToValue.put("DT", "'DT#'");
		tokenNameToValue.put("FOR", "'FOR'");
		tokenNameToValue.put("LD", "'LD#'");
		tokenNameToValue.put("LT", "'LT#'");
		tokenNameToValue.put("MOD", "'MOD'");
		tokenNameToValue.put("NOT", "'NOT'");
		tokenNameToValue.put("VAR", "'VAR'");
		tokenNameToValue.put("XOR", "'XOR'");
		tokenNameToValue.put("CASE", "'CASE'");
		tokenNameToValue.put("ELSE", "'ELSE'");
		tokenNameToValue.put("EXIT", "'EXIT'");
		tokenNameToValue.put("INT", "'INT#'");
		tokenNameToValue.put("LDT", "'LDT#'");
		tokenNameToValue.put("THEN", "'THEN'");
		tokenNameToValue.put("TOD", "'TOD#'");
		tokenNameToValue.put("ARRAY", "'ARRAY'");
		tokenNameToValue.put("BOOL", "'BOOL#'");
		tokenNameToValue.put("BYTE", "'BYTE#'");
		tokenNameToValue.put("CHAR", "'CHAR#'");
		tokenNameToValue.put("DATE", "'DATE#'");
		tokenNameToValue.put("DINT", "'DINT#'");
		tokenNameToValue.put("ELSIF", "'ELSIF'");
		tokenNameToValue.put("LINT", "'LINT#'");
		tokenNameToValue.put("LTOD", "'LTOD#'");
		tokenNameToValue.put("REAL", "'REAL#'");
		tokenNameToValue.put("SINT", "'SINT#'");
		tokenNameToValue.put("TIME", "'TIME#'");
		tokenNameToValue.put("UINT", "'UINT#'");
		tokenNameToValue.put("UNTIL", "'UNTIL'");
		tokenNameToValue.put("WHILE", "'WHILE'");
		tokenNameToValue.put("WORD", "'WORD#'");
		tokenNameToValue.put("DWORD", "'DWORD#'");
		tokenNameToValue.put("END_IF", "'END_IF'");
		tokenNameToValue.put("LDATE", "'LDATE#'");
		tokenNameToValue.put("LREAL", "'LREAL#'");
		tokenNameToValue.put("LTIME", "'LTIME#'");
		tokenNameToValue.put("LWORD", "'LWORD#'");
		tokenNameToValue.put("REPEAT", "'REPEAT'");
		tokenNameToValue.put("RETURN", "'RETURN'");
		tokenNameToValue.put("UDINT", "'UDINT#'");
		tokenNameToValue.put("ULINT", "'ULINT#'");
		tokenNameToValue.put("USINT", "'USINT#'");
		tokenNameToValue.put("WCHAR", "'WCHAR#'");
		tokenNameToValue.put("END_FOR", "'END_FOR'");
		tokenNameToValue.put("END_VAR", "'END_VAR'");
		tokenNameToValue.put("STRING", "'STRING#'");
		tokenNameToValue.put("CONSTANT", "'CONSTANT'");
		tokenNameToValue.put("CONTINUE", "'CONTINUE'");
		tokenNameToValue.put("END_CASE", "'END_CASE'");
		tokenNameToValue.put("FUNCTION", "'FUNCTION'");
		tokenNameToValue.put("VAR_TEMP", "'VAR_TEMP'");
		tokenNameToValue.put("WSTRING", "'WSTRING#'");
		tokenNameToValue.put("END_WHILE", "'END_WHILE'");
		tokenNameToValue.put("VAR_INPUT", "'VAR_INPUT'");
		tokenNameToValue.put("END_REPEAT", "'END_REPEAT'");
		tokenNameToValue.put("VAR_OUTPUT", "'VAR_OUTPUT'");
		tokenNameToValue.put("END_FUNCTION", "'END_FUNCTION'");
		tokenNameToValue.put("TIME_OF_DAY", "'TIME_OF_DAY#'");
		tokenNameToValue.put("DATE_AND_TIME", "'DATE_AND_TIME#'");
		tokenNameToValue.put("LDATE_AND_TIME", "'LDATE_AND_TIME#'");
	}

	public void setGrammarAccess(STFunctionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleSTFunction
entryRuleSTFunction
:
{ before(grammarAccess.getSTFunctionRule()); }
	 ruleSTFunction
{ after(grammarAccess.getSTFunctionRule()); } 
	 EOF 
;

// Rule STFunction
ruleSTFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTFunctionAccess().getFunctionsAssignment()); }
		(rule__STFunction__FunctionsAssignment)*
		{ after(grammarAccess.getSTFunctionAccess().getFunctionsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition
:
{ before(grammarAccess.getFunctionDefinitionRule()); }
	 ruleFunctionDefinition
{ after(grammarAccess.getFunctionDefinitionRule()); } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
		(rule__FunctionDefinition__Group__0)
		{ after(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarTempDeclarationBlock
entryRuleVarTempDeclarationBlock
:
{ before(grammarAccess.getVarTempDeclarationBlockRule()); }
	 ruleVarTempDeclarationBlock
{ after(grammarAccess.getVarTempDeclarationBlockRule()); } 
	 EOF 
;

// Rule VarTempDeclarationBlock
ruleVarTempDeclarationBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarTempDeclarationBlockAccess().getGroup()); }
		(rule__VarTempDeclarationBlock__Group__0)
		{ after(grammarAccess.getVarTempDeclarationBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarInputDeclarationBlock
entryRuleVarInputDeclarationBlock
:
{ before(grammarAccess.getVarInputDeclarationBlockRule()); }
	 ruleVarInputDeclarationBlock
{ after(grammarAccess.getVarInputDeclarationBlockRule()); } 
	 EOF 
;

// Rule VarInputDeclarationBlock
ruleVarInputDeclarationBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarInputDeclarationBlockAccess().getGroup()); }
		(rule__VarInputDeclarationBlock__Group__0)
		{ after(grammarAccess.getVarInputDeclarationBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarOutputDeclarationBlock
entryRuleVarOutputDeclarationBlock
:
{ before(grammarAccess.getVarOutputDeclarationBlockRule()); }
	 ruleVarOutputDeclarationBlock
{ after(grammarAccess.getVarOutputDeclarationBlockRule()); } 
	 EOF 
;

// Rule VarOutputDeclarationBlock
ruleVarOutputDeclarationBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarOutputDeclarationBlockAccess().getGroup()); }
		(rule__VarOutputDeclarationBlock__Group__0)
		{ after(grammarAccess.getVarOutputDeclarationBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup()); }
		(rule__VarDeclaration__Group__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInitializerExpression
entryRuleInitializerExpression
:
{ before(grammarAccess.getInitializerExpressionRule()); }
	 ruleInitializerExpression
{ after(grammarAccess.getInitializerExpressionRule()); } 
	 EOF 
;

// Rule InitializerExpression
ruleInitializerExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInitializerExpressionAccess().getAlternatives()); }
		(rule__InitializerExpression__Alternatives)
		{ after(grammarAccess.getInitializerExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArrayInitializerExpression
entryRuleArrayInitializerExpression
:
{ before(grammarAccess.getArrayInitializerExpressionRule()); }
	 ruleArrayInitializerExpression
{ after(grammarAccess.getArrayInitializerExpressionRule()); } 
	 EOF 
;

// Rule ArrayInitializerExpression
ruleArrayInitializerExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayInitializerExpressionAccess().getGroup()); }
		(rule__ArrayInitializerExpression__Group__0)
		{ after(grammarAccess.getArrayInitializerExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArrayInitElement
entryRuleArrayInitElement
:
{ before(grammarAccess.getArrayInitElementRule()); }
	 ruleArrayInitElement
{ after(grammarAccess.getArrayInitElementRule()); } 
	 EOF 
;

// Rule ArrayInitElement
ruleArrayInitElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayInitElementAccess().getGroup()); }
		(rule__ArrayInitElement__Group__0)
		{ after(grammarAccess.getArrayInitElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTStatement
entryRuleSTStatement
:
{ before(grammarAccess.getSTStatementRule()); }
	 ruleSTStatement
{ after(grammarAccess.getSTStatementRule()); } 
	 EOF 
;

// Rule STStatement
ruleSTStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTStatementAccess().getAlternatives()); }
		(rule__STStatement__Alternatives)
		{ after(grammarAccess.getSTStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTAssignmentStatement
entryRuleSTAssignmentStatement
:
{ before(grammarAccess.getSTAssignmentStatementRule()); }
	 ruleSTAssignmentStatement
{ after(grammarAccess.getSTAssignmentStatementRule()); } 
	 EOF 
;

// Rule STAssignmentStatement
ruleSTAssignmentStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTAssignmentStatementAccess().getGroup()); }
		(rule__STAssignmentStatement__Group__0)
		{ after(grammarAccess.getSTAssignmentStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTBranchStatement
entryRuleSTBranchStatement
:
{ before(grammarAccess.getSTBranchStatementRule()); }
	 ruleSTBranchStatement
{ after(grammarAccess.getSTBranchStatementRule()); } 
	 EOF 
;

// Rule STBranchStatement
ruleSTBranchStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTBranchStatementAccess().getAlternatives()); }
		(rule__STBranchStatement__Alternatives)
		{ after(grammarAccess.getSTBranchStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTIfStatment
entryRuleSTIfStatment
:
{ before(grammarAccess.getSTIfStatmentRule()); }
	 ruleSTIfStatment
{ after(grammarAccess.getSTIfStatmentRule()); } 
	 EOF 
;

// Rule STIfStatment
ruleSTIfStatment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTIfStatmentAccess().getGroup()); }
		(rule__STIfStatment__Group__0)
		{ after(grammarAccess.getSTIfStatmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTElseIfPart
entryRuleSTElseIfPart
:
{ before(grammarAccess.getSTElseIfPartRule()); }
	 ruleSTElseIfPart
{ after(grammarAccess.getSTElseIfPartRule()); } 
	 EOF 
;

// Rule STElseIfPart
ruleSTElseIfPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTElseIfPartAccess().getGroup()); }
		(rule__STElseIfPart__Group__0)
		{ after(grammarAccess.getSTElseIfPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTCaseStatement
entryRuleSTCaseStatement
:
{ before(grammarAccess.getSTCaseStatementRule()); }
	 ruleSTCaseStatement
{ after(grammarAccess.getSTCaseStatementRule()); } 
	 EOF 
;

// Rule STCaseStatement
ruleSTCaseStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTCaseStatementAccess().getGroup()); }
		(rule__STCaseStatement__Group__0)
		{ after(grammarAccess.getSTCaseStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTCaseCases
entryRuleSTCaseCases
:
{ before(grammarAccess.getSTCaseCasesRule()); }
	 ruleSTCaseCases
{ after(grammarAccess.getSTCaseCasesRule()); } 
	 EOF 
;

// Rule STCaseCases
ruleSTCaseCases 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTCaseCasesAccess().getGroup()); }
		(rule__STCaseCases__Group__0)
		{ after(grammarAccess.getSTCaseCasesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTElsePart
entryRuleSTElsePart
:
{ before(grammarAccess.getSTElsePartRule()); }
	 ruleSTElsePart
{ after(grammarAccess.getSTElsePartRule()); } 
	 EOF 
;

// Rule STElsePart
ruleSTElsePart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTElsePartAccess().getGroup()); }
		(rule__STElsePart__Group__0)
		{ after(grammarAccess.getSTElsePartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTLoopStatement
entryRuleSTLoopStatement
:
{ before(grammarAccess.getSTLoopStatementRule()); }
	 ruleSTLoopStatement
{ after(grammarAccess.getSTLoopStatementRule()); } 
	 EOF 
;

// Rule STLoopStatement
ruleSTLoopStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTLoopStatementAccess().getAlternatives()); }
		(rule__STLoopStatement__Alternatives)
		{ after(grammarAccess.getSTLoopStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTForStatement
entryRuleSTForStatement
:
{ before(grammarAccess.getSTForStatementRule()); }
	 ruleSTForStatement
{ after(grammarAccess.getSTForStatementRule()); } 
	 EOF 
;

// Rule STForStatement
ruleSTForStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTForStatementAccess().getGroup()); }
		(rule__STForStatement__Group__0)
		{ after(grammarAccess.getSTForStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTWhileStatement
entryRuleSTWhileStatement
:
{ before(grammarAccess.getSTWhileStatementRule()); }
	 ruleSTWhileStatement
{ after(grammarAccess.getSTWhileStatementRule()); } 
	 EOF 
;

// Rule STWhileStatement
ruleSTWhileStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTWhileStatementAccess().getGroup()); }
		(rule__STWhileStatement__Group__0)
		{ after(grammarAccess.getSTWhileStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTRepeatStatement
entryRuleSTRepeatStatement
:
{ before(grammarAccess.getSTRepeatStatementRule()); }
	 ruleSTRepeatStatement
{ after(grammarAccess.getSTRepeatStatementRule()); } 
	 EOF 
;

// Rule STRepeatStatement
ruleSTRepeatStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTRepeatStatementAccess().getGroup()); }
		(rule__STRepeatStatement__Group__0)
		{ after(grammarAccess.getSTRepeatStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTExpression
entryRuleSTExpression
:
{ before(grammarAccess.getSTExpressionRule()); }
	 ruleSTExpression
{ after(grammarAccess.getSTExpressionRule()); } 
	 EOF 
;

// Rule STExpression
ruleSTExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTExpressionAccess().getSTSubrangeExpressionParserRuleCall()); }
		ruleSTSubrangeExpression
		{ after(grammarAccess.getSTExpressionAccess().getSTSubrangeExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTSubrangeExpression
entryRuleSTSubrangeExpression
:
{ before(grammarAccess.getSTSubrangeExpressionRule()); }
	 ruleSTSubrangeExpression
{ after(grammarAccess.getSTSubrangeExpressionRule()); } 
	 EOF 
;

// Rule STSubrangeExpression
ruleSTSubrangeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTSubrangeExpressionAccess().getGroup()); }
		(rule__STSubrangeExpression__Group__0)
		{ after(grammarAccess.getSTSubrangeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTOrExpression
entryRuleSTOrExpression
:
{ before(grammarAccess.getSTOrExpressionRule()); }
	 ruleSTOrExpression
{ after(grammarAccess.getSTOrExpressionRule()); } 
	 EOF 
;

// Rule STOrExpression
ruleSTOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTOrExpressionAccess().getGroup()); }
		(rule__STOrExpression__Group__0)
		{ after(grammarAccess.getSTOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTXorExpression
entryRuleSTXorExpression
:
{ before(grammarAccess.getSTXorExpressionRule()); }
	 ruleSTXorExpression
{ after(grammarAccess.getSTXorExpressionRule()); } 
	 EOF 
;

// Rule STXorExpression
ruleSTXorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTXorExpressionAccess().getGroup()); }
		(rule__STXorExpression__Group__0)
		{ after(grammarAccess.getSTXorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTAndExpression
entryRuleSTAndExpression
:
{ before(grammarAccess.getSTAndExpressionRule()); }
	 ruleSTAndExpression
{ after(grammarAccess.getSTAndExpressionRule()); } 
	 EOF 
;

// Rule STAndExpression
ruleSTAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTAndExpressionAccess().getGroup()); }
		(rule__STAndExpression__Group__0)
		{ after(grammarAccess.getSTAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTEqualityExpression
entryRuleSTEqualityExpression
:
{ before(grammarAccess.getSTEqualityExpressionRule()); }
	 ruleSTEqualityExpression
{ after(grammarAccess.getSTEqualityExpressionRule()); } 
	 EOF 
;

// Rule STEqualityExpression
ruleSTEqualityExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTEqualityExpressionAccess().getGroup()); }
		(rule__STEqualityExpression__Group__0)
		{ after(grammarAccess.getSTEqualityExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTComparisonExpression
entryRuleSTComparisonExpression
:
{ before(grammarAccess.getSTComparisonExpressionRule()); }
	 ruleSTComparisonExpression
{ after(grammarAccess.getSTComparisonExpressionRule()); } 
	 EOF 
;

// Rule STComparisonExpression
ruleSTComparisonExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTComparisonExpressionAccess().getGroup()); }
		(rule__STComparisonExpression__Group__0)
		{ after(grammarAccess.getSTComparisonExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTAddSubExpression
entryRuleSTAddSubExpression
:
{ before(grammarAccess.getSTAddSubExpressionRule()); }
	 ruleSTAddSubExpression
{ after(grammarAccess.getSTAddSubExpressionRule()); } 
	 EOF 
;

// Rule STAddSubExpression
ruleSTAddSubExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTAddSubExpressionAccess().getGroup()); }
		(rule__STAddSubExpression__Group__0)
		{ after(grammarAccess.getSTAddSubExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTMulDivModExpression
entryRuleSTMulDivModExpression
:
{ before(grammarAccess.getSTMulDivModExpressionRule()); }
	 ruleSTMulDivModExpression
{ after(grammarAccess.getSTMulDivModExpressionRule()); } 
	 EOF 
;

// Rule STMulDivModExpression
ruleSTMulDivModExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTMulDivModExpressionAccess().getGroup()); }
		(rule__STMulDivModExpression__Group__0)
		{ after(grammarAccess.getSTMulDivModExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTPowerExpression
entryRuleSTPowerExpression
:
{ before(grammarAccess.getSTPowerExpressionRule()); }
	 ruleSTPowerExpression
{ after(grammarAccess.getSTPowerExpressionRule()); } 
	 EOF 
;

// Rule STPowerExpression
ruleSTPowerExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTPowerExpressionAccess().getGroup()); }
		(rule__STPowerExpression__Group__0)
		{ after(grammarAccess.getSTPowerExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTSignumExpression
entryRuleSTSignumExpression
:
{ before(grammarAccess.getSTSignumExpressionRule()); }
	 ruleSTSignumExpression
{ after(grammarAccess.getSTSignumExpressionRule()); } 
	 EOF 
;

// Rule STSignumExpression
ruleSTSignumExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTSignumExpressionAccess().getAlternatives()); }
		(rule__STSignumExpression__Alternatives)
		{ after(grammarAccess.getSTSignumExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTSelectionExpression
entryRuleSTSelectionExpression
:
{ before(grammarAccess.getSTSelectionExpressionRule()); }
	 ruleSTSelectionExpression
{ after(grammarAccess.getSTSelectionExpressionRule()); } 
	 EOF 
;

// Rule STSelectionExpression
ruleSTSelectionExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTSelectionExpressionAccess().getGroup()); }
		(rule__STSelectionExpression__Group__0)
		{ after(grammarAccess.getSTSelectionExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultibitPartialAccess
entryRuleMultibitPartialAccess
:
{ before(grammarAccess.getMultibitPartialAccessRule()); }
	 ruleMultibitPartialAccess
{ after(grammarAccess.getMultibitPartialAccessRule()); } 
	 EOF 
;

// Rule MultibitPartialAccess
ruleMultibitPartialAccess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultibitPartialAccessAccess().getGroup()); }
		(rule__MultibitPartialAccess__Group__0)
		{ after(grammarAccess.getMultibitPartialAccessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTAtomicExpression
entryRuleSTAtomicExpression
:
{ before(grammarAccess.getSTAtomicExpressionRule()); }
	 ruleSTAtomicExpression
{ after(grammarAccess.getSTAtomicExpressionRule()); } 
	 EOF 
;

// Rule STAtomicExpression
ruleSTAtomicExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTAtomicExpressionAccess().getAlternatives()); }
		(rule__STAtomicExpression__Alternatives)
		{ after(grammarAccess.getSTAtomicExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTLiteralExpressions
entryRuleSTLiteralExpressions
:
{ before(grammarAccess.getSTLiteralExpressionsRule()); }
	 ruleSTLiteralExpressions
{ after(grammarAccess.getSTLiteralExpressionsRule()); } 
	 EOF 
;

// Rule STLiteralExpressions
ruleSTLiteralExpressions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getAlternatives()); }
		(rule__STLiteralExpressions__Alternatives)
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBOOL_LITERAL
entryRuleBOOL_LITERAL
:
{ before(grammarAccess.getBOOL_LITERALRule()); }
	 ruleBOOL_LITERAL
{ after(grammarAccess.getBOOL_LITERALRule()); } 
	 EOF 
;

// Rule BOOL_LITERAL
ruleBOOL_LITERAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBOOL_LITERALAccess().getGroup()); }
		(rule__BOOL_LITERAL__Group__0)
		{ after(grammarAccess.getBOOL_LITERALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNUMERIC_LITERAL
entryRuleNUMERIC_LITERAL
:
{ before(grammarAccess.getNUMERIC_LITERALRule()); }
	 ruleNUMERIC_LITERAL
{ after(grammarAccess.getNUMERIC_LITERALRule()); } 
	 EOF 
;

// Rule NUMERIC_LITERAL
ruleNUMERIC_LITERAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getGroup()); }
		(rule__NUMERIC_LITERAL__Group__0)
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDATE_LITERAL
entryRuleDATE_LITERAL
:
{ before(grammarAccess.getDATE_LITERALRule()); }
	 ruleDATE_LITERAL
{ after(grammarAccess.getDATE_LITERALRule()); } 
	 EOF 
;

// Rule DATE_LITERAL
ruleDATE_LITERAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDATE_LITERALAccess().getGroup()); }
		(rule__DATE_LITERAL__Group__0)
		{ after(grammarAccess.getDATE_LITERALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTIME_LITERAL
entryRuleTIME_LITERAL
:
{ before(grammarAccess.getTIME_LITERALRule()); }
	 ruleTIME_LITERAL
{ after(grammarAccess.getTIME_LITERALRule()); } 
	 EOF 
;

// Rule TIME_LITERAL
ruleTIME_LITERAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTIME_LITERALAccess().getGroup()); }
		(rule__TIME_LITERAL__Group__0)
		{ after(grammarAccess.getTIME_LITERALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTIME_OF_DAY_LITERAL
entryRuleTIME_OF_DAY_LITERAL
:
{ before(grammarAccess.getTIME_OF_DAY_LITERALRule()); }
	 ruleTIME_OF_DAY_LITERAL
{ after(grammarAccess.getTIME_OF_DAY_LITERALRule()); } 
	 EOF 
;

// Rule TIME_OF_DAY_LITERAL
ruleTIME_OF_DAY_LITERAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTIME_OF_DAY_LITERALAccess().getGroup()); }
		(rule__TIME_OF_DAY_LITERAL__Group__0)
		{ after(grammarAccess.getTIME_OF_DAY_LITERALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDATE_AND_TIME_LITERAL
entryRuleDATE_AND_TIME_LITERAL
:
{ before(grammarAccess.getDATE_AND_TIME_LITERALRule()); }
	 ruleDATE_AND_TIME_LITERAL
{ after(grammarAccess.getDATE_AND_TIME_LITERALRule()); } 
	 EOF 
;

// Rule DATE_AND_TIME_LITERAL
ruleDATE_AND_TIME_LITERAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDATE_AND_TIME_LITERALAccess().getGroup()); }
		(rule__DATE_AND_TIME_LITERAL__Group__0)
		{ after(grammarAccess.getDATE_AND_TIME_LITERALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTRING_LITERAL
entryRuleSTRING_LITERAL
:
{ before(grammarAccess.getSTRING_LITERALRule()); }
	 ruleSTRING_LITERAL
{ after(grammarAccess.getSTRING_LITERALRule()); } 
	 EOF 
;

// Rule STRING_LITERAL
ruleSTRING_LITERAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTRING_LITERALAccess().getGroup()); }
		(rule__STRING_LITERAL__Group__0)
		{ after(grammarAccess.getSTRING_LITERALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleINTEGER
entryRuleINTEGER
:
{ before(grammarAccess.getINTEGERRule()); }
	 ruleINTEGER
{ after(grammarAccess.getINTEGERRule()); } 
	 EOF 
;

// Rule INTEGER
ruleINTEGER 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getINTEGERAccess().getGroup()); }
		(rule__INTEGER__Group__0)
		{ after(grammarAccess.getINTEGERAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleREAL
entryRuleREAL
:
{ before(grammarAccess.getREALRule()); }
	 ruleREAL
{ after(grammarAccess.getREALRule()); } 
	 EOF 
;

// Rule REAL
ruleREAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getREALAccess().getGroup()); }
		(rule__REAL__Group__0)
		{ after(grammarAccess.getREALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDATE
entryRuleDATE
:
{ before(grammarAccess.getDATERule()); }
	 ruleDATE
{ after(grammarAccess.getDATERule()); } 
	 EOF 
;

// Rule DATE
ruleDATE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDATEAccess().getGroup()); }
		(rule__DATE__Group__0)
		{ after(grammarAccess.getDATEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTIME_OF_DAY
entryRuleTIME_OF_DAY
:
{ before(grammarAccess.getTIME_OF_DAYRule()); }
	 ruleTIME_OF_DAY
{ after(grammarAccess.getTIME_OF_DAYRule()); } 
	 EOF 
;

// Rule TIME_OF_DAY
ruleTIME_OF_DAY 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTIME_OF_DAYAccess().getGroup()); }
		(rule__TIME_OF_DAY__Group__0)
		{ after(grammarAccess.getTIME_OF_DAYAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule MultiBitAccessSpecifier
ruleMultiBitAccessSpecifier
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiBitAccessSpecifierAccess().getAlternatives()); }
		(rule__MultiBitAccessSpecifier__Alternatives)
		{ after(grammarAccess.getMultiBitAccessSpecifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getVarDeclarationsAssignment_3_0()); }
		(rule__FunctionDefinition__VarDeclarationsAssignment_3_0)
		{ after(grammarAccess.getFunctionDefinitionAccess().getVarDeclarationsAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getVarTempDeclarationsAssignment_3_1()); }
		(rule__FunctionDefinition__VarTempDeclarationsAssignment_3_1)
		{ after(grammarAccess.getFunctionDefinitionAccess().getVarTempDeclarationsAssignment_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getVarInpuDeclarationsAssignment_3_2()); }
		(rule__FunctionDefinition__VarInpuDeclarationsAssignment_3_2)
		{ after(grammarAccess.getFunctionDefinitionAccess().getVarInpuDeclarationsAssignment_3_2()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getVarOutputDeclarationsAssignment_3_3()); }
		(rule__FunctionDefinition__VarOutputDeclarationsAssignment_3_3)
		{ after(grammarAccess.getFunctionDefinitionAccess().getVarOutputDeclarationsAssignment_3_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Alternatives_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup_3_1_0()); }
		(rule__VarDeclaration__Group_3_1_0__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup_3_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup_3_1_1()); }
		(rule__VarDeclaration__Group_3_1_1__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup_3_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitializerExpressionAccess().getSTExpressionParserRuleCall_0()); }
		ruleSTExpression
		{ after(grammarAccess.getInitializerExpressionAccess().getSTExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInitializerExpressionAccess().getArrayInitializerExpressionParserRuleCall_1()); }
		ruleArrayInitializerExpression
		{ after(grammarAccess.getInitializerExpressionAccess().getArrayInitializerExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTStatementAccess().getGroup_0()); }
		(rule__STStatement__Group_0__0)
		{ after(grammarAccess.getSTStatementAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getGroup_1()); }
		(rule__STStatement__Group_1__0)
		{ after(grammarAccess.getSTStatementAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getGroup_2()); }
		(rule__STStatement__Group_2__0)
		{ after(grammarAccess.getSTStatementAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getGroup_3()); }
		(rule__STStatement__Group_3__0)
		{ after(grammarAccess.getSTStatementAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getGroup_4()); }
		(rule__STStatement__Group_4__0)
		{ after(grammarAccess.getSTStatementAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getGroup_5()); }
		(rule__STStatement__Group_5__0)
		{ after(grammarAccess.getSTStatementAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getSTStatementAccess().getGroup_6()); }
		(rule__STStatement__Group_6__0)
		{ after(grammarAccess.getSTStatementAccess().getGroup_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STBranchStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTBranchStatementAccess().getSTIfStatmentParserRuleCall_0()); }
		ruleSTIfStatment
		{ after(grammarAccess.getSTBranchStatementAccess().getSTIfStatmentParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTBranchStatementAccess().getSTCaseStatementParserRuleCall_1()); }
		ruleSTCaseStatement
		{ after(grammarAccess.getSTBranchStatementAccess().getSTCaseStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLoopStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTLoopStatementAccess().getSTForStatementParserRuleCall_0()); }
		ruleSTForStatement
		{ after(grammarAccess.getSTLoopStatementAccess().getSTForStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTLoopStatementAccess().getSTWhileStatementParserRuleCall_1()); }
		ruleSTWhileStatement
		{ after(grammarAccess.getSTLoopStatementAccess().getSTWhileStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTLoopStatementAccess().getSTRepeatStatementParserRuleCall_2()); }
		ruleSTRepeatStatement
		{ after(grammarAccess.getSTLoopStatementAccess().getSTRepeatStatementParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__OpAlternatives_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAndExpressionAccess().getOpAmpersandKeyword_1_0_1_0_0()); }
		Ampersand
		{ after(grammarAccess.getSTAndExpressionAccess().getOpAmpersandKeyword_1_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTAndExpressionAccess().getOpANDKeyword_1_0_1_0_1()); }
		AND
		{ after(grammarAccess.getSTAndExpressionAccess().getOpANDKeyword_1_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__OpAlternatives_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTEqualityExpressionAccess().getOpEqualsSignKeyword_1_0_1_0_0()); }
		EqualsSign
		{ after(grammarAccess.getSTEqualityExpressionAccess().getOpEqualsSignKeyword_1_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTEqualityExpressionAccess().getOpLessThanSignGreaterThanSignKeyword_1_0_1_0_1()); }
		LessThanSignGreaterThanSign
		{ after(grammarAccess.getSTEqualityExpressionAccess().getOpLessThanSignGreaterThanSignKeyword_1_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__OpAlternatives_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTComparisonExpressionAccess().getOpLessThanSignKeyword_1_0_1_0_0()); }
		LessThanSign
		{ after(grammarAccess.getSTComparisonExpressionAccess().getOpLessThanSignKeyword_1_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTComparisonExpressionAccess().getOpGreaterThanSignKeyword_1_0_1_0_1()); }
		GreaterThanSign
		{ after(grammarAccess.getSTComparisonExpressionAccess().getOpGreaterThanSignKeyword_1_0_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTComparisonExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_1_0_2()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getSTComparisonExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getSTComparisonExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getSTComparisonExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__OpAlternatives_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAddSubExpressionAccess().getOpPlusSignKeyword_1_0_1_0_0()); }
		PlusSign
		{ after(grammarAccess.getSTAddSubExpressionAccess().getOpPlusSignKeyword_1_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTAddSubExpressionAccess().getOpHyphenMinusKeyword_1_0_1_0_1()); }
		HyphenMinus
		{ after(grammarAccess.getSTAddSubExpressionAccess().getOpHyphenMinusKeyword_1_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__OpAlternatives_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTMulDivModExpressionAccess().getOpAsteriskKeyword_1_0_1_0_0()); }
		Asterisk
		{ after(grammarAccess.getSTMulDivModExpressionAccess().getOpAsteriskKeyword_1_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTMulDivModExpressionAccess().getOpSolidusKeyword_1_0_1_0_1()); }
		Solidus
		{ after(grammarAccess.getSTMulDivModExpressionAccess().getOpSolidusKeyword_1_0_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTMulDivModExpressionAccess().getOpMODKeyword_1_0_1_0_2()); }
		MOD
		{ after(grammarAccess.getSTMulDivModExpressionAccess().getOpMODKeyword_1_0_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSignumExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSignumExpressionAccess().getSTLiteralExpressionsParserRuleCall_0()); }
		ruleSTLiteralExpressions
		{ after(grammarAccess.getSTSignumExpressionAccess().getSTLiteralExpressionsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTSignumExpressionAccess().getSTSelectionExpressionParserRuleCall_1()); }
		ruleSTSelectionExpression
		{ after(grammarAccess.getSTSignumExpressionAccess().getSTSelectionExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTSignumExpressionAccess().getGroup_2()); }
		(rule__STSignumExpression__Group_2__0)
		{ after(grammarAccess.getSTSignumExpressionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSignumExpression__SignumAlternatives_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSignumExpressionAccess().getSignumHyphenMinusKeyword_2_1_0_0()); }
		HyphenMinus
		{ after(grammarAccess.getSTSignumExpressionAccess().getSignumHyphenMinusKeyword_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTSignumExpressionAccess().getSignumPlusSignKeyword_2_1_0_1()); }
		PlusSign
		{ after(grammarAccess.getSTSignumExpressionAccess().getSignumPlusSignKeyword_2_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTSignumExpressionAccess().getSignumNOTKeyword_2_1_0_2()); }
		NOT
		{ after(grammarAccess.getSTSignumExpressionAccess().getSignumNOTKeyword_2_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSelectionExpressionAccess().getGroup_1_1_0()); }
		(rule__STSelectionExpression__Group_1_1_0__0)
		{ after(grammarAccess.getSTSelectionExpressionAccess().getGroup_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTSelectionExpressionAccess().getGroup_1_1_1()); }
		(rule__STSelectionExpression__Group_1_1_1__0)
		{ after(grammarAccess.getSTSelectionExpressionAccess().getGroup_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAtomicExpressionAccess().getGroup_0()); }
		(rule__STAtomicExpression__Group_0__0)
		{ after(grammarAccess.getSTAtomicExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTAtomicExpressionAccess().getGroup_1()); }
		(rule__STAtomicExpression__Group_1__0)
		{ after(grammarAccess.getSTAtomicExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getGroup_0()); }
		(rule__STLiteralExpressions__Group_0__0)
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getGroup_1()); }
		(rule__STLiteralExpressions__Group_1__0)
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getGroup_2()); }
		(rule__STLiteralExpressions__Group_2__0)
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getGroup_3()); }
		(rule__STLiteralExpressions__Group_3__0)
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getGroup_4()); }
		(rule__STLiteralExpressions__Group_4__0)
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getGroup_5()); }
		(rule__STLiteralExpressions__Group_5__0)
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getGroup_6()); }
		(rule__STLiteralExpressions__Group_6__0)
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getGroup_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMERIC_LITERAL__KeywordAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordBYTEKeyword_1_0_0()); }
		BYTE
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordBYTEKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordWORDKeyword_1_0_1()); }
		WORD
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordWORDKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordDWORDKeyword_1_0_2()); }
		DWORD
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordDWORDKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordLWORDKeyword_1_0_3()); }
		LWORD
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordLWORDKeyword_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordSINTKeyword_1_0_4()); }
		SINT
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordSINTKeyword_1_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordINTKeyword_1_0_5()); }
		INT
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordINTKeyword_1_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordDINTKeyword_1_0_6()); }
		DINT
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordDINTKeyword_1_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordLINTKeyword_1_0_7()); }
		LINT
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordLINTKeyword_1_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordUSINTKeyword_1_0_8()); }
		USINT
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordUSINTKeyword_1_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordUINTKeyword_1_0_9()); }
		UINT
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordUINTKeyword_1_0_9()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordUDINTKeyword_1_0_10()); }
		UDINT
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordUDINTKeyword_1_0_10()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordULINTKeyword_1_0_11()); }
		ULINT
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordULINTKeyword_1_0_11()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordREALKeyword_1_0_12()); }
		REAL
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordREALKeyword_1_0_12()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordLREALKeyword_1_0_13()); }
		LREAL
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordLREALKeyword_1_0_13()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMERIC_LITERAL__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getIntValueAssignment_2_0()); }
		(rule__NUMERIC_LITERAL__IntValueAssignment_2_0)
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getIntValueAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getRealValueAssignment_2_1()); }
		(rule__NUMERIC_LITERAL__RealValueAssignment_2_1)
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getRealValueAssignment_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getHexValueAssignment_2_2()); }
		(rule__NUMERIC_LITERAL__HexValueAssignment_2_2)
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getHexValueAssignment_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_LITERAL__KeywordAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDATE_LITERALAccess().getKeywordDATEKeyword_0_0_0()); }
		DATE
		{ after(grammarAccess.getDATE_LITERALAccess().getKeywordDATEKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDATE_LITERALAccess().getKeywordLDATEKeyword_0_0_1()); }
		LDATE
		{ after(grammarAccess.getDATE_LITERALAccess().getKeywordLDATEKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getDATE_LITERALAccess().getKeywordDKeyword_0_0_2()); }
		D
		{ after(grammarAccess.getDATE_LITERALAccess().getKeywordDKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getDATE_LITERALAccess().getKeywordLDKeyword_0_0_3()); }
		LD
		{ after(grammarAccess.getDATE_LITERALAccess().getKeywordLDKeyword_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_LITERAL__KeywordAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTIME_LITERALAccess().getKeywordTIMEKeyword_0_0_0()); }
		TIME
		{ after(grammarAccess.getTIME_LITERALAccess().getKeywordTIMEKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTIME_LITERALAccess().getKeywordLTIMEKeyword_0_0_1()); }
		LTIME
		{ after(grammarAccess.getTIME_LITERALAccess().getKeywordLTIMEKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTIME_LITERALAccess().getKeywordTKeyword_0_0_2()); }
		T
		{ after(grammarAccess.getTIME_LITERALAccess().getKeywordTKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getTIME_LITERALAccess().getKeywordLTKeyword_0_0_3()); }
		LT
		{ after(grammarAccess.getTIME_LITERALAccess().getKeywordLTKeyword_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY_LITERAL__KeywordAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTIME_OF_DAY_LITERALAccess().getKeywordTIME_OF_DAYKeyword_0_0_0()); }
		TIME_OF_DAY
		{ after(grammarAccess.getTIME_OF_DAY_LITERALAccess().getKeywordTIME_OF_DAYKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTIME_OF_DAY_LITERALAccess().getKeywordTODKeyword_0_0_1()); }
		TOD
		{ after(grammarAccess.getTIME_OF_DAY_LITERALAccess().getKeywordTODKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTIME_OF_DAY_LITERALAccess().getKeywordLTODKeyword_0_0_2()); }
		LTOD
		{ after(grammarAccess.getTIME_OF_DAY_LITERALAccess().getKeywordLTODKeyword_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_AND_TIME_LITERAL__KeywordAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordDATE_AND_TIMEKeyword_0_0_0()); }
		DATE_AND_TIME
		{ after(grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordDATE_AND_TIMEKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordLDATE_AND_TIMEKeyword_0_0_1()); }
		LDATE_AND_TIME
		{ after(grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordLDATE_AND_TIMEKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordDTKeyword_0_0_2()); }
		DT
		{ after(grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordDTKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordLDTKeyword_0_0_3()); }
		LDT
		{ after(grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordLDTKeyword_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRING_LITERAL__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTRING_LITERALAccess().getKeywordAssignment_0_0()); }
		(rule__STRING_LITERAL__KeywordAssignment_0_0)
		{ after(grammarAccess.getSTRING_LITERALAccess().getKeywordAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTRING_LITERALAccess().getWSTRINGKeyword_0_1()); }
		WSTRING
		{ after(grammarAccess.getSTRING_LITERALAccess().getWSTRINGKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSTRING_LITERALAccess().getCHARKeyword_0_2()); }
		CHAR
		{ after(grammarAccess.getSTRING_LITERALAccess().getCHARKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getSTRING_LITERALAccess().getWCHARKeyword_0_3()); }
		WCHAR
		{ after(grammarAccess.getSTRING_LITERALAccess().getWCHARKeyword_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__INTEGER__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getINTEGERAccess().getPlusSignKeyword_0_0()); }
		PlusSign
		{ after(grammarAccess.getINTEGERAccess().getPlusSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getINTEGERAccess().getHyphenMinusKeyword_0_1()); }
		HyphenMinus
		{ after(grammarAccess.getINTEGERAccess().getHyphenMinusKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getREALAccess().getEXT_INTTerminalRuleCall_2_0()); }
		RULE_EXT_INT
		{ after(grammarAccess.getREALAccess().getEXT_INTTerminalRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_2_1()); }
		RULE_INT
		{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiBitAccessSpecifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiBitAccessSpecifierAccess().getLwordAccessEnumLiteralDeclaration_0()); }
		(L)
		{ after(grammarAccess.getMultiBitAccessSpecifierAccess().getLwordAccessEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiBitAccessSpecifierAccess().getDwordAccessEnumLiteralDeclaration_1()); }
		(D_1)
		{ after(grammarAccess.getMultiBitAccessSpecifierAccess().getDwordAccessEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiBitAccessSpecifierAccess().getWordAccessEnumLiteralDeclaration_2()); }
		(W)
		{ after(grammarAccess.getMultiBitAccessSpecifierAccess().getWordAccessEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getMultiBitAccessSpecifierAccess().getByteAccessEnumLiteralDeclaration_3()); }
		(B)
		{ after(grammarAccess.getMultiBitAccessSpecifierAccess().getByteAccessEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getMultiBitAccessSpecifierAccess().getBitAccessEnumLiteralDeclaration_4()); }
		(X)
		{ after(grammarAccess.getMultiBitAccessSpecifierAccess().getBitAccessEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getMultiBitAccessSpecifierAccess().getBitAccessShortcutEnumLiteralDeclaration_5()); }
		(FullStop)
		{ after(grammarAccess.getMultiBitAccessSpecifierAccess().getBitAccessShortcutEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__0__Impl
	rule__FunctionDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getFUNCTIONKeyword_0()); }
	FUNCTION
	{ after(grammarAccess.getFunctionDefinitionAccess().getFUNCTIONKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__1__Impl
	rule__FunctionDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_1()); }
	(rule__FunctionDefinition__NameAssignment_1)
	{ after(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__2__Impl
	rule__FunctionDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getGroup_2()); }
	(rule__FunctionDefinition__Group_2__0)?
	{ after(grammarAccess.getFunctionDefinitionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__3__Impl
	rule__FunctionDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getAlternatives_3()); }
	(rule__FunctionDefinition__Alternatives_3)*
	{ after(grammarAccess.getFunctionDefinitionAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__4__Impl
	rule__FunctionDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getCodeAssignment_4()); }
	(rule__FunctionDefinition__CodeAssignment_4)*
	{ after(grammarAccess.getFunctionDefinitionAccess().getCodeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getEND_FUNCTIONKeyword_5()); }
	END_FUNCTION
	{ after(grammarAccess.getFunctionDefinitionAccess().getEND_FUNCTIONKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group_2__0__Impl
	rule__FunctionDefinition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getColonKeyword_2_0()); }
	Colon
	{ after(grammarAccess.getFunctionDefinitionAccess().getColonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDefinition__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefinitionAccess().getReturnTypeAssignment_2_1()); }
	(rule__FunctionDefinition__ReturnTypeAssignment_2_1)
	{ after(grammarAccess.getFunctionDefinitionAccess().getReturnTypeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarTempDeclarationBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarTempDeclarationBlock__Group__0__Impl
	rule__VarTempDeclarationBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationBlockAction_0()); }
	()
	{ after(grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarTempDeclarationBlock__Group__1__Impl
	rule__VarTempDeclarationBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarTempDeclarationBlockAccess().getVAR_TEMPKeyword_1()); }
	VAR_TEMP
	{ after(grammarAccess.getVarTempDeclarationBlockAccess().getVAR_TEMPKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarTempDeclarationBlock__Group__2__Impl
	rule__VarTempDeclarationBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarTempDeclarationBlockAccess().getConstantAssignment_2()); }
	(rule__VarTempDeclarationBlock__ConstantAssignment_2)?
	{ after(grammarAccess.getVarTempDeclarationBlockAccess().getConstantAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarTempDeclarationBlock__Group__3__Impl
	rule__VarTempDeclarationBlock__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationsAssignment_3()); }
	(rule__VarTempDeclarationBlock__VarDeclarationsAssignment_3)*
	{ after(grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarTempDeclarationBlock__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarTempDeclarationBlockAccess().getEND_VARKeyword_4()); }
	END_VAR
	{ after(grammarAccess.getVarTempDeclarationBlockAccess().getEND_VARKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarInputDeclarationBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarInputDeclarationBlock__Group__0__Impl
	rule__VarInputDeclarationBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInputDeclarationBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarInputDeclarationBlockAccess().getVarDeclarationBlockAction_0()); }
	()
	{ after(grammarAccess.getVarInputDeclarationBlockAccess().getVarDeclarationBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInputDeclarationBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarInputDeclarationBlock__Group__1__Impl
	rule__VarInputDeclarationBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInputDeclarationBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarInputDeclarationBlockAccess().getVAR_INPUTKeyword_1()); }
	VAR_INPUT
	{ after(grammarAccess.getVarInputDeclarationBlockAccess().getVAR_INPUTKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInputDeclarationBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarInputDeclarationBlock__Group__2__Impl
	rule__VarInputDeclarationBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInputDeclarationBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarInputDeclarationBlockAccess().getConstantAssignment_2()); }
	(rule__VarInputDeclarationBlock__ConstantAssignment_2)?
	{ after(grammarAccess.getVarInputDeclarationBlockAccess().getConstantAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInputDeclarationBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarInputDeclarationBlock__Group__3__Impl
	rule__VarInputDeclarationBlock__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInputDeclarationBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarInputDeclarationBlockAccess().getVarDeclarationsAssignment_3()); }
	(rule__VarInputDeclarationBlock__VarDeclarationsAssignment_3)*
	{ after(grammarAccess.getVarInputDeclarationBlockAccess().getVarDeclarationsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInputDeclarationBlock__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarInputDeclarationBlock__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInputDeclarationBlock__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarInputDeclarationBlockAccess().getEND_VARKeyword_4()); }
	END_VAR
	{ after(grammarAccess.getVarInputDeclarationBlockAccess().getEND_VARKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarOutputDeclarationBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarOutputDeclarationBlock__Group__0__Impl
	rule__VarOutputDeclarationBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOutputDeclarationBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarOutputDeclarationBlockAccess().getVarDeclarationBlockAction_0()); }
	()
	{ after(grammarAccess.getVarOutputDeclarationBlockAccess().getVarDeclarationBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOutputDeclarationBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarOutputDeclarationBlock__Group__1__Impl
	rule__VarOutputDeclarationBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOutputDeclarationBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarOutputDeclarationBlockAccess().getVAR_OUTPUTKeyword_1()); }
	VAR_OUTPUT
	{ after(grammarAccess.getVarOutputDeclarationBlockAccess().getVAR_OUTPUTKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOutputDeclarationBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarOutputDeclarationBlock__Group__2__Impl
	rule__VarOutputDeclarationBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOutputDeclarationBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarOutputDeclarationBlockAccess().getConstantAssignment_2()); }
	(rule__VarOutputDeclarationBlock__ConstantAssignment_2)?
	{ after(grammarAccess.getVarOutputDeclarationBlockAccess().getConstantAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOutputDeclarationBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarOutputDeclarationBlock__Group__3__Impl
	rule__VarOutputDeclarationBlock__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOutputDeclarationBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarOutputDeclarationBlockAccess().getVarDeclarationsAssignment_3()); }
	(rule__VarOutputDeclarationBlock__VarDeclarationsAssignment_3)*
	{ after(grammarAccess.getVarOutputDeclarationBlockAccess().getVarDeclarationsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOutputDeclarationBlock__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarOutputDeclarationBlock__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOutputDeclarationBlock__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarOutputDeclarationBlockAccess().getEND_VARKeyword_4()); }
	END_VAR
	{ after(grammarAccess.getVarOutputDeclarationBlockAccess().getEND_VARKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__0__Impl
	rule__VarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getNameAssignment_0()); }
	(rule__VarDeclaration__NameAssignment_0)
	{ after(grammarAccess.getVarDeclarationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__1__Impl
	rule__VarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_1()); }
	(rule__VarDeclaration__Group_1__0)?
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__2__Impl
	rule__VarDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getColonKeyword_2()); }
	Colon
	{ after(grammarAccess.getVarDeclarationAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__3__Impl
	rule__VarDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_3()); }
	(rule__VarDeclaration__Group_3__0)?
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__4__Impl
	rule__VarDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getTypeAssignment_4()); }
	(rule__VarDeclaration__TypeAssignment_4)
	{ after(grammarAccess.getVarDeclarationAccess().getTypeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__5__Impl
	rule__VarDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_5()); }
	(rule__VarDeclaration__Group_5__0)?
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__6__Impl
	rule__VarDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_6()); }
	(rule__VarDeclaration__Group_6__0)?
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getSemicolonKeyword_7()); }
	Semicolon
	{ after(grammarAccess.getVarDeclarationAccess().getSemicolonKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_1__0__Impl
	rule__VarDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getATKeyword_1_0()); }
	AT
	{ after(grammarAccess.getVarDeclarationAccess().getATKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getLocatedAtAssignment_1_1()); }
	(rule__VarDeclaration__LocatedAtAssignment_1_1)
	{ after(grammarAccess.getVarDeclarationAccess().getLocatedAtAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3__0__Impl
	rule__VarDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getArrayAssignment_3_0()); }
	(rule__VarDeclaration__ArrayAssignment_3_0)
	{ after(grammarAccess.getVarDeclarationAccess().getArrayAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3__1__Impl
	rule__VarDeclaration__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getAlternatives_3_1()); }
	(rule__VarDeclaration__Alternatives_3_1)
	{ after(grammarAccess.getVarDeclarationAccess().getAlternatives_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getOFKeyword_3_2()); }
	OF
	{ after(grammarAccess.getVarDeclarationAccess().getOFKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_3_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3_1_0__0__Impl
	rule__VarDeclaration__Group_3_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_3_1_0_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_3_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3_1_0__1__Impl
	rule__VarDeclaration__Group_3_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getRangesAssignment_3_1_0_1()); }
	(rule__VarDeclaration__RangesAssignment_3_1_0_1)
	{ after(grammarAccess.getVarDeclarationAccess().getRangesAssignment_3_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3_1_0__2__Impl
	rule__VarDeclaration__Group_3_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_3_1_0_2()); }
	(rule__VarDeclaration__Group_3_1_0_2__0)*
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_3_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_3_1_0_3()); }
	RightSquareBracket
	{ after(grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_3_1_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_3_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3_1_0_2__0__Impl
	rule__VarDeclaration__Group_3_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getCommaKeyword_3_1_0_2_0()); }
	Comma
	{ after(grammarAccess.getVarDeclarationAccess().getCommaKeyword_3_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getRangesAssignment_3_1_0_2_1()); }
	(rule__VarDeclaration__RangesAssignment_3_1_0_2_1)
	{ after(grammarAccess.getVarDeclarationAccess().getRangesAssignment_3_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_3_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3_1_1__0__Impl
	rule__VarDeclaration__Group_3_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_3_1_1_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_3_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3_1_1__1__Impl
	rule__VarDeclaration__Group_3_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getCountAssignment_3_1_1_1()); }
	(rule__VarDeclaration__CountAssignment_3_1_1_1)
	{ after(grammarAccess.getVarDeclarationAccess().getCountAssignment_3_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3_1_1__2__Impl
	rule__VarDeclaration__Group_3_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_3_1_1_2()); }
	(rule__VarDeclaration__Group_3_1_1_2__0)*
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_3_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_3_1_1_3()); }
	RightSquareBracket
	{ after(grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_3_1_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_3_1_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3_1_1_2__0__Impl
	rule__VarDeclaration__Group_3_1_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getCommaKeyword_3_1_1_2_0()); }
	Comma
	{ after(grammarAccess.getVarDeclarationAccess().getCommaKeyword_3_1_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_3_1_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_3_1_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getCountAssignment_3_1_1_2_1()); }
	(rule__VarDeclaration__CountAssignment_3_1_1_2_1)
	{ after(grammarAccess.getVarDeclarationAccess().getCountAssignment_3_1_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_5__0__Impl
	rule__VarDeclaration__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_5_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_5__1__Impl
	rule__VarDeclaration__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getMaxLengthAssignment_5_1()); }
	(rule__VarDeclaration__MaxLengthAssignment_5_1)
	{ after(grammarAccess.getVarDeclarationAccess().getMaxLengthAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_5_2()); }
	RightSquareBracket
	{ after(grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_6__0__Impl
	rule__VarDeclaration__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getColonEqualsSignKeyword_6_0()); }
	ColonEqualsSign
	{ after(grammarAccess.getVarDeclarationAccess().getColonEqualsSignKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getDefaultValueAssignment_6_1()); }
	(rule__VarDeclaration__DefaultValueAssignment_6_1)
	{ after(grammarAccess.getVarDeclarationAccess().getDefaultValueAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializerExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitializerExpression__Group__0__Impl
	rule__ArrayInitializerExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitializerExpressionAccess().getLeftSquareBracketKeyword_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getArrayInitializerExpressionAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitializerExpression__Group__1__Impl
	rule__ArrayInitializerExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitializerExpressionAccess().getValuesAssignment_1()); }
	(rule__ArrayInitializerExpression__ValuesAssignment_1)
	{ after(grammarAccess.getArrayInitializerExpressionAccess().getValuesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitializerExpression__Group__2__Impl
	rule__ArrayInitializerExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitializerExpressionAccess().getGroup_2()); }
	(rule__ArrayInitializerExpression__Group_2__0)*
	{ after(grammarAccess.getArrayInitializerExpressionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitializerExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitializerExpressionAccess().getRightSquareBracketKeyword_3()); }
	RightSquareBracket
	{ after(grammarAccess.getArrayInitializerExpressionAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializerExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitializerExpression__Group_2__0__Impl
	rule__ArrayInitializerExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitializerExpressionAccess().getCommaKeyword_2_0()); }
	Comma
	{ after(grammarAccess.getArrayInitializerExpressionAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitializerExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitializerExpressionAccess().getValuesAssignment_2_1()); }
	(rule__ArrayInitializerExpression__ValuesAssignment_2_1)
	{ after(grammarAccess.getArrayInitializerExpressionAccess().getValuesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitElement__Group__0__Impl
	rule__ArrayInitElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitElementAccess().getIndexOrInitExpressionAssignment_0()); }
	(rule__ArrayInitElement__IndexOrInitExpressionAssignment_0)
	{ after(grammarAccess.getArrayInitElementAccess().getIndexOrInitExpressionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitElementAccess().getGroup_1()); }
	(rule__ArrayInitElement__Group_1__0)?
	{ after(grammarAccess.getArrayInitElementAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitElement__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitElement__Group_1__0__Impl
	rule__ArrayInitElement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitElementAccess().getLeftParenthesisKeyword_1_0()); }
	LeftParenthesis
	{ after(grammarAccess.getArrayInitElementAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitElement__Group_1__1__Impl
	rule__ArrayInitElement__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitElementAccess().getInitExpressionAssignment_1_1()); }
	(rule__ArrayInitElement__InitExpressionAssignment_1_1)
	{ after(grammarAccess.getArrayInitElementAccess().getInitExpressionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayInitElement__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayInitElementAccess().getRightParenthesisKeyword_1_2()); }
	RightParenthesis
	{ after(grammarAccess.getArrayInitElementAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STStatement__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_0__0__Impl
	rule__STStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSTBranchStatementParserRuleCall_0_0()); }
	ruleSTBranchStatement
	{ after(grammarAccess.getSTStatementAccess().getSTBranchStatementParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSemicolonKeyword_0_1()); }
	Semicolon
	{ after(grammarAccess.getSTStatementAccess().getSemicolonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STStatement__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_1__0__Impl
	rule__STStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSTLoopStatementParserRuleCall_1_0()); }
	ruleSTLoopStatement
	{ after(grammarAccess.getSTStatementAccess().getSTLoopStatementParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSemicolonKeyword_1_1()); }
	Semicolon
	{ after(grammarAccess.getSTStatementAccess().getSemicolonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_2__0__Impl
	rule__STStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSTAssignmentStatementParserRuleCall_2_0()); }
	ruleSTAssignmentStatement
	{ after(grammarAccess.getSTStatementAccess().getSTAssignmentStatementParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSemicolonKeyword_2_1()); }
	Semicolon
	{ after(grammarAccess.getSTStatementAccess().getSemicolonKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STStatement__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_3__0__Impl
	rule__STStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSTNopAction_3_0()); }
	()
	{ after(grammarAccess.getSTStatementAccess().getSTNopAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSemicolonKeyword_3_1()); }
	Semicolon
	{ after(grammarAccess.getSTStatementAccess().getSemicolonKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STStatement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_4__0__Impl
	rule__STStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSTReturnAction_4_0()); }
	()
	{ after(grammarAccess.getSTStatementAccess().getSTReturnAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_4__1__Impl
	rule__STStatement__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getRETURNKeyword_4_1()); }
	RETURN
	{ after(grammarAccess.getSTStatementAccess().getRETURNKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSemicolonKeyword_4_2()); }
	Semicolon
	{ after(grammarAccess.getSTStatementAccess().getSemicolonKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STStatement__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_5__0__Impl
	rule__STStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSTContinueAction_5_0()); }
	()
	{ after(grammarAccess.getSTStatementAccess().getSTContinueAction_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_5__1__Impl
	rule__STStatement__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getCONTINUEKeyword_5_1()); }
	CONTINUE
	{ after(grammarAccess.getSTStatementAccess().getCONTINUEKeyword_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSemicolonKeyword_5_2()); }
	Semicolon
	{ after(grammarAccess.getSTStatementAccess().getSemicolonKeyword_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STStatement__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_6__0__Impl
	rule__STStatement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSTExitAction_6_0()); }
	()
	{ after(grammarAccess.getSTStatementAccess().getSTExitAction_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_6__1__Impl
	rule__STStatement__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getEXITKeyword_6_1()); }
	EXIT
	{ after(grammarAccess.getSTStatementAccess().getEXITKeyword_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STStatement__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STStatement__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTStatementAccess().getSemicolonKeyword_6_2()); }
	Semicolon
	{ after(grammarAccess.getSTStatementAccess().getSemicolonKeyword_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAssignmentStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAssignmentStatement__Group__0__Impl
	rule__STAssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAssignmentStatementAccess().getLhsAssignment_0()); }
	(rule__STAssignmentStatement__LhsAssignment_0)
	{ after(grammarAccess.getSTAssignmentStatementAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAssignmentStatement__Group__1__Impl
	rule__STAssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAssignmentStatementAccess().getColonEqualsSignKeyword_1()); }
	ColonEqualsSign
	{ after(grammarAccess.getSTAssignmentStatementAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAssignmentStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAssignmentStatementAccess().getRhsAssignment_2()); }
	(rule__STAssignmentStatement__RhsAssignment_2)
	{ after(grammarAccess.getSTAssignmentStatementAccess().getRhsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STIfStatment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__0__Impl
	rule__STIfStatment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getIFKeyword_0()); }
	IF
	{ after(grammarAccess.getSTIfStatmentAccess().getIFKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__1__Impl
	rule__STIfStatment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getConditionAssignment_1()); }
	(rule__STIfStatment__ConditionAssignment_1)
	{ after(grammarAccess.getSTIfStatmentAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__2__Impl
	rule__STIfStatment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getTHENKeyword_2()); }
	THEN
	{ after(grammarAccess.getSTIfStatmentAccess().getTHENKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__3__Impl
	rule__STIfStatment__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getStatementsAssignment_3()); }
	(rule__STIfStatment__StatementsAssignment_3)*
	{ after(grammarAccess.getSTIfStatmentAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__4__Impl
	rule__STIfStatment__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getElseifsAssignment_4()); }
	(rule__STIfStatment__ElseifsAssignment_4)*
	{ after(grammarAccess.getSTIfStatmentAccess().getElseifsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__5__Impl
	rule__STIfStatment__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getElseAssignment_5()); }
	(rule__STIfStatment__ElseAssignment_5)?
	{ after(grammarAccess.getSTIfStatmentAccess().getElseAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STIfStatment__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTIfStatmentAccess().getEND_IFKeyword_6()); }
	END_IF
	{ after(grammarAccess.getSTIfStatmentAccess().getEND_IFKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STElseIfPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElseIfPart__Group__0__Impl
	rule__STElseIfPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElseIfPartAccess().getELSIFKeyword_0()); }
	ELSIF
	{ after(grammarAccess.getSTElseIfPartAccess().getELSIFKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElseIfPart__Group__1__Impl
	rule__STElseIfPart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElseIfPartAccess().getConditionAssignment_1()); }
	(rule__STElseIfPart__ConditionAssignment_1)
	{ after(grammarAccess.getSTElseIfPartAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElseIfPart__Group__2__Impl
	rule__STElseIfPart__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElseIfPartAccess().getTHENKeyword_2()); }
	THEN
	{ after(grammarAccess.getSTElseIfPartAccess().getTHENKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElseIfPart__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElseIfPartAccess().getStatementsAssignment_3()); }
	(rule__STElseIfPart__StatementsAssignment_3)*
	{ after(grammarAccess.getSTElseIfPartAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STCaseStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseStatement__Group__0__Impl
	rule__STCaseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseStatementAccess().getCASEKeyword_0()); }
	CASE
	{ after(grammarAccess.getSTCaseStatementAccess().getCASEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseStatement__Group__1__Impl
	rule__STCaseStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseStatementAccess().getSelectorAssignment_1()); }
	(rule__STCaseStatement__SelectorAssignment_1)
	{ after(grammarAccess.getSTCaseStatementAccess().getSelectorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseStatement__Group__2__Impl
	rule__STCaseStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseStatementAccess().getOFKeyword_2()); }
	OF
	{ after(grammarAccess.getSTCaseStatementAccess().getOFKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseStatement__Group__3__Impl
	rule__STCaseStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSTCaseStatementAccess().getCasesAssignment_3()); }
		(rule__STCaseStatement__CasesAssignment_3)
		{ after(grammarAccess.getSTCaseStatementAccess().getCasesAssignment_3()); }
	)
	(
		{ before(grammarAccess.getSTCaseStatementAccess().getCasesAssignment_3()); }
		(rule__STCaseStatement__CasesAssignment_3)*
		{ after(grammarAccess.getSTCaseStatementAccess().getCasesAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseStatement__Group__4__Impl
	rule__STCaseStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseStatementAccess().getElseAssignment_4()); }
	(rule__STCaseStatement__ElseAssignment_4)?
	{ after(grammarAccess.getSTCaseStatementAccess().getElseAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseStatementAccess().getEND_CASEKeyword_5()); }
	END_CASE
	{ after(grammarAccess.getSTCaseStatementAccess().getEND_CASEKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STCaseCases__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseCases__Group__0__Impl
	rule__STCaseCases__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseCasesAccess().getConditionsAssignment_0()); }
	(rule__STCaseCases__ConditionsAssignment_0)
	{ after(grammarAccess.getSTCaseCasesAccess().getConditionsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseCases__Group__1__Impl
	rule__STCaseCases__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseCasesAccess().getGroup_1()); }
	(rule__STCaseCases__Group_1__0)*
	{ after(grammarAccess.getSTCaseCasesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseCases__Group__2__Impl
	rule__STCaseCases__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseCasesAccess().getColonKeyword_2()); }
	Colon
	{ after(grammarAccess.getSTCaseCasesAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseCases__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseCasesAccess().getStatementsAssignment_3()); }
	(rule__STCaseCases__StatementsAssignment_3)*
	{ after(grammarAccess.getSTCaseCasesAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STCaseCases__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseCases__Group_1__0__Impl
	rule__STCaseCases__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseCasesAccess().getCommaKeyword_1_0()); }
	Comma
	{ after(grammarAccess.getSTCaseCasesAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STCaseCases__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTCaseCasesAccess().getConditionsAssignment_1_1()); }
	(rule__STCaseCases__ConditionsAssignment_1_1)
	{ after(grammarAccess.getSTCaseCasesAccess().getConditionsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STElsePart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElsePart__Group__0__Impl
	rule__STElsePart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STElsePart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElsePartAccess().getSTElsePartAction_0()); }
	()
	{ after(grammarAccess.getSTElsePartAccess().getSTElsePartAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElsePart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElsePart__Group__1__Impl
	rule__STElsePart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STElsePart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElsePartAccess().getELSEKeyword_1()); }
	ELSE
	{ after(grammarAccess.getSTElsePartAccess().getELSEKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElsePart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STElsePart__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STElsePart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTElsePartAccess().getStatementsAssignment_2()); }
	(rule__STElsePart__StatementsAssignment_2)*
	{ after(grammarAccess.getSTElsePartAccess().getStatementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STForStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__0__Impl
	rule__STForStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getFORKeyword_0()); }
	FOR
	{ after(grammarAccess.getSTForStatementAccess().getFORKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__1__Impl
	rule__STForStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getForAssignment_1()); }
	(rule__STForStatement__ForAssignment_1)
	{ after(grammarAccess.getSTForStatementAccess().getForAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__2__Impl
	rule__STForStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getTOKeyword_2()); }
	TO
	{ after(grammarAccess.getSTForStatementAccess().getTOKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__3__Impl
	rule__STForStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getToAssignment_3()); }
	(rule__STForStatement__ToAssignment_3)
	{ after(grammarAccess.getSTForStatementAccess().getToAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__4__Impl
	rule__STForStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getGroup_4()); }
	(rule__STForStatement__Group_4__0)?
	{ after(grammarAccess.getSTForStatementAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__5__Impl
	rule__STForStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getDOKeyword_5()); }
	DO
	{ after(grammarAccess.getSTForStatementAccess().getDOKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__6__Impl
	rule__STForStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getStatementsAssignment_6()); }
	(rule__STForStatement__StatementsAssignment_6)*
	{ after(grammarAccess.getSTForStatementAccess().getStatementsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getEND_FORKeyword_7()); }
	END_FOR
	{ after(grammarAccess.getSTForStatementAccess().getEND_FORKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STForStatement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group_4__0__Impl
	rule__STForStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getBYKeyword_4_0()); }
	BY
	{ after(grammarAccess.getSTForStatementAccess().getBYKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STForStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTForStatementAccess().getByAssignment_4_1()); }
	(rule__STForStatement__ByAssignment_4_1)
	{ after(grammarAccess.getSTForStatementAccess().getByAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STWhileStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STWhileStatement__Group__0__Impl
	rule__STWhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTWhileStatementAccess().getWHILEKeyword_0()); }
	WHILE
	{ after(grammarAccess.getSTWhileStatementAccess().getWHILEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STWhileStatement__Group__1__Impl
	rule__STWhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTWhileStatementAccess().getConditionAssignment_1()); }
	(rule__STWhileStatement__ConditionAssignment_1)
	{ after(grammarAccess.getSTWhileStatementAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STWhileStatement__Group__2__Impl
	rule__STWhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTWhileStatementAccess().getDOKeyword_2()); }
	DO
	{ after(grammarAccess.getSTWhileStatementAccess().getDOKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STWhileStatement__Group__3__Impl
	rule__STWhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTWhileStatementAccess().getStatementsAssignment_3()); }
	(rule__STWhileStatement__StatementsAssignment_3)*
	{ after(grammarAccess.getSTWhileStatementAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STWhileStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTWhileStatementAccess().getEND_WHILEKeyword_4()); }
	END_WHILE
	{ after(grammarAccess.getSTWhileStatementAccess().getEND_WHILEKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STRepeatStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STRepeatStatement__Group__0__Impl
	rule__STRepeatStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTRepeatStatementAccess().getREPEATKeyword_0()); }
	REPEAT
	{ after(grammarAccess.getSTRepeatStatementAccess().getREPEATKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STRepeatStatement__Group__1__Impl
	rule__STRepeatStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTRepeatStatementAccess().getStatementsAssignment_1()); }
	(rule__STRepeatStatement__StatementsAssignment_1)*
	{ after(grammarAccess.getSTRepeatStatementAccess().getStatementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STRepeatStatement__Group__2__Impl
	rule__STRepeatStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTRepeatStatementAccess().getUNTILKeyword_2()); }
	UNTIL
	{ after(grammarAccess.getSTRepeatStatementAccess().getUNTILKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STRepeatStatement__Group__3__Impl
	rule__STRepeatStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTRepeatStatementAccess().getConditionAssignment_3()); }
	(rule__STRepeatStatement__ConditionAssignment_3)
	{ after(grammarAccess.getSTRepeatStatementAccess().getConditionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STRepeatStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTRepeatStatementAccess().getEND_REPEATKeyword_4()); }
	END_REPEAT
	{ after(grammarAccess.getSTRepeatStatementAccess().getEND_REPEATKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSubrangeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSubrangeExpression__Group__0__Impl
	rule__STSubrangeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSubrangeExpressionAccess().getSTOrExpressionParserRuleCall_0()); }
	ruleSTOrExpression
	{ after(grammarAccess.getSTSubrangeExpressionAccess().getSTOrExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSubrangeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSubrangeExpressionAccess().getGroup_1()); }
	(rule__STSubrangeExpression__Group_1__0)*
	{ after(grammarAccess.getSTSubrangeExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSubrangeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSubrangeExpression__Group_1__0__Impl
	rule__STSubrangeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSubrangeExpressionAccess().getGroup_1_0()); }
	(rule__STSubrangeExpression__Group_1_0__0)
	{ after(grammarAccess.getSTSubrangeExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSubrangeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSubrangeExpressionAccess().getUpperBoundAssignment_1_1()); }
	(rule__STSubrangeExpression__UpperBoundAssignment_1_1)
	{ after(grammarAccess.getSTSubrangeExpressionAccess().getUpperBoundAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSubrangeExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSubrangeExpression__Group_1_0__0__Impl
	rule__STSubrangeExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSubrangeExpressionAccess().getSTSubrangeExpressionLowerBoundAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTSubrangeExpressionAccess().getSTSubrangeExpressionLowerBoundAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSubrangeExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSubrangeExpressionAccess().getFullStopFullStopKeyword_1_0_1()); }
	FullStopFullStop
	{ after(grammarAccess.getSTSubrangeExpressionAccess().getFullStopFullStopKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STOrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STOrExpression__Group__0__Impl
	rule__STOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOrExpressionAccess().getSTXorExpressionParserRuleCall_0()); }
	ruleSTXorExpression
	{ after(grammarAccess.getSTOrExpressionAccess().getSTXorExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOrExpressionAccess().getGroup_1()); }
	(rule__STOrExpression__Group_1__0)*
	{ after(grammarAccess.getSTOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STOrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STOrExpression__Group_1__0__Impl
	rule__STOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOrExpressionAccess().getGroup_1_0()); }
	(rule__STOrExpression__Group_1_0__0)
	{ after(grammarAccess.getSTOrExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STOrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOrExpressionAccess().getRightAssignment_1_1()); }
	(rule__STOrExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTOrExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STOrExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STOrExpression__Group_1_0__0__Impl
	rule__STOrExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOrExpressionAccess().getSTOrExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTOrExpressionAccess().getSTOrExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STOrExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOrExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STOrExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTOrExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STXorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STXorExpression__Group__0__Impl
	rule__STXorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTXorExpressionAccess().getSTAndExpressionParserRuleCall_0()); }
	ruleSTAndExpression
	{ after(grammarAccess.getSTXorExpressionAccess().getSTAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STXorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTXorExpressionAccess().getGroup_1()); }
	(rule__STXorExpression__Group_1__0)*
	{ after(grammarAccess.getSTXorExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STXorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STXorExpression__Group_1__0__Impl
	rule__STXorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTXorExpressionAccess().getGroup_1_0()); }
	(rule__STXorExpression__Group_1_0__0)
	{ after(grammarAccess.getSTXorExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STXorExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTXorExpressionAccess().getRightAssignment_1_1()); }
	(rule__STXorExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTXorExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STXorExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STXorExpression__Group_1_0__0__Impl
	rule__STXorExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTXorExpressionAccess().getSTXorExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTXorExpressionAccess().getSTXorExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STXorExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTXorExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STXorExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTXorExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAndExpression__Group__0__Impl
	rule__STAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAndExpressionAccess().getSTEqualityExpressionParserRuleCall_0()); }
	ruleSTEqualityExpression
	{ after(grammarAccess.getSTAndExpressionAccess().getSTEqualityExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAndExpressionAccess().getGroup_1()); }
	(rule__STAndExpression__Group_1__0)*
	{ after(grammarAccess.getSTAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAndExpression__Group_1__0__Impl
	rule__STAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAndExpressionAccess().getGroup_1_0()); }
	(rule__STAndExpression__Group_1_0__0)
	{ after(grammarAccess.getSTAndExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAndExpressionAccess().getRightAssignment_1_1()); }
	(rule__STAndExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTAndExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAndExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAndExpression__Group_1_0__0__Impl
	rule__STAndExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAndExpressionAccess().getSTAndExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTAndExpressionAccess().getSTAndExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAndExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAndExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STAndExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTAndExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STEqualityExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STEqualityExpression__Group__0__Impl
	rule__STEqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTEqualityExpressionAccess().getSTComparisonExpressionParserRuleCall_0()); }
	ruleSTComparisonExpression
	{ after(grammarAccess.getSTEqualityExpressionAccess().getSTComparisonExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STEqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTEqualityExpressionAccess().getGroup_1()); }
	(rule__STEqualityExpression__Group_1__0)*
	{ after(grammarAccess.getSTEqualityExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STEqualityExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STEqualityExpression__Group_1__0__Impl
	rule__STEqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTEqualityExpressionAccess().getGroup_1_0()); }
	(rule__STEqualityExpression__Group_1_0__0)
	{ after(grammarAccess.getSTEqualityExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STEqualityExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTEqualityExpressionAccess().getRightAssignment_1_1()); }
	(rule__STEqualityExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTEqualityExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STEqualityExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STEqualityExpression__Group_1_0__0__Impl
	rule__STEqualityExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTEqualityExpressionAccess().getSTEqualityExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTEqualityExpressionAccess().getSTEqualityExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STEqualityExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTEqualityExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STEqualityExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTEqualityExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STComparisonExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STComparisonExpression__Group__0__Impl
	rule__STComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTComparisonExpressionAccess().getSTAddSubExpressionParserRuleCall_0()); }
	ruleSTAddSubExpression
	{ after(grammarAccess.getSTComparisonExpressionAccess().getSTAddSubExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTComparisonExpressionAccess().getGroup_1()); }
	(rule__STComparisonExpression__Group_1__0)*
	{ after(grammarAccess.getSTComparisonExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STComparisonExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STComparisonExpression__Group_1__0__Impl
	rule__STComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTComparisonExpressionAccess().getGroup_1_0()); }
	(rule__STComparisonExpression__Group_1_0__0)
	{ after(grammarAccess.getSTComparisonExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STComparisonExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTComparisonExpressionAccess().getRightAssignment_1_1()); }
	(rule__STComparisonExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTComparisonExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STComparisonExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STComparisonExpression__Group_1_0__0__Impl
	rule__STComparisonExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTComparisonExpressionAccess().getSTComparisonExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTComparisonExpressionAccess().getSTComparisonExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STComparisonExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTComparisonExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STComparisonExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTComparisonExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAddSubExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAddSubExpression__Group__0__Impl
	rule__STAddSubExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAddSubExpressionAccess().getSTMulDivModExpressionParserRuleCall_0()); }
	ruleSTMulDivModExpression
	{ after(grammarAccess.getSTAddSubExpressionAccess().getSTMulDivModExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAddSubExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAddSubExpressionAccess().getGroup_1()); }
	(rule__STAddSubExpression__Group_1__0)*
	{ after(grammarAccess.getSTAddSubExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAddSubExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAddSubExpression__Group_1__0__Impl
	rule__STAddSubExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAddSubExpressionAccess().getGroup_1_0()); }
	(rule__STAddSubExpression__Group_1_0__0)
	{ after(grammarAccess.getSTAddSubExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAddSubExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAddSubExpressionAccess().getRightAssignment_1_1()); }
	(rule__STAddSubExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTAddSubExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAddSubExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAddSubExpression__Group_1_0__0__Impl
	rule__STAddSubExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAddSubExpressionAccess().getSTAddSubExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTAddSubExpressionAccess().getSTAddSubExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAddSubExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAddSubExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STAddSubExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTAddSubExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STMulDivModExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMulDivModExpression__Group__0__Impl
	rule__STMulDivModExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMulDivModExpressionAccess().getSTPowerExpressionParserRuleCall_0()); }
	ruleSTPowerExpression
	{ after(grammarAccess.getSTMulDivModExpressionAccess().getSTPowerExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMulDivModExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMulDivModExpressionAccess().getGroup_1()); }
	(rule__STMulDivModExpression__Group_1__0)*
	{ after(grammarAccess.getSTMulDivModExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STMulDivModExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMulDivModExpression__Group_1__0__Impl
	rule__STMulDivModExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMulDivModExpressionAccess().getGroup_1_0()); }
	(rule__STMulDivModExpression__Group_1_0__0)
	{ after(grammarAccess.getSTMulDivModExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMulDivModExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMulDivModExpressionAccess().getRightAssignment_1_1()); }
	(rule__STMulDivModExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTMulDivModExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STMulDivModExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMulDivModExpression__Group_1_0__0__Impl
	rule__STMulDivModExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMulDivModExpressionAccess().getSTMulDivModExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTMulDivModExpressionAccess().getSTMulDivModExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STMulDivModExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTMulDivModExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STMulDivModExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTMulDivModExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STPowerExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPowerExpression__Group__0__Impl
	rule__STPowerExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPowerExpressionAccess().getSTSignumExpressionParserRuleCall_0()); }
	ruleSTSignumExpression
	{ after(grammarAccess.getSTPowerExpressionAccess().getSTSignumExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPowerExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPowerExpressionAccess().getGroup_1()); }
	(rule__STPowerExpression__Group_1__0)*
	{ after(grammarAccess.getSTPowerExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STPowerExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPowerExpression__Group_1__0__Impl
	rule__STPowerExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPowerExpressionAccess().getGroup_1_0()); }
	(rule__STPowerExpression__Group_1_0__0)
	{ after(grammarAccess.getSTPowerExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPowerExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPowerExpressionAccess().getRightAssignment_1_1()); }
	(rule__STPowerExpression__RightAssignment_1_1)
	{ after(grammarAccess.getSTPowerExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STPowerExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPowerExpression__Group_1_0__0__Impl
	rule__STPowerExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPowerExpressionAccess().getSTPowerExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSTPowerExpressionAccess().getSTPowerExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STPowerExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTPowerExpressionAccess().getOpAssignment_1_0_1()); }
	(rule__STPowerExpression__OpAssignment_1_0_1)
	{ after(grammarAccess.getSTPowerExpressionAccess().getOpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSignumExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSignumExpression__Group_2__0__Impl
	rule__STSignumExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSignumExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSignumExpressionAccess().getSTSignumExpressionAction_2_0()); }
	()
	{ after(grammarAccess.getSTSignumExpressionAccess().getSTSignumExpressionAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSignumExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSignumExpression__Group_2__1__Impl
	rule__STSignumExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STSignumExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSignumExpressionAccess().getSignumAssignment_2_1()); }
	(rule__STSignumExpression__SignumAssignment_2_1)
	{ after(grammarAccess.getSTSignumExpressionAccess().getSignumAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSignumExpression__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSignumExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSignumExpression__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSignumExpressionAccess().getExpressionAssignment_2_2()); }
	(rule__STSignumExpression__ExpressionAssignment_2_2)
	{ after(grammarAccess.getSTSignumExpressionAccess().getExpressionAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSelectionExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group__0__Impl
	rule__STSelectionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getSTAtomicExpressionParserRuleCall_0()); }
	ruleSTAtomicExpression
	{ after(grammarAccess.getSTSelectionExpressionAccess().getSTAtomicExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getGroup_1()); }
	(rule__STSelectionExpression__Group_1__0)*
	{ after(grammarAccess.getSTSelectionExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSelectionExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1__0__Impl
	rule__STSelectionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getSTMemberSelectionReceiverAction_1_0()); }
	()
	{ after(grammarAccess.getSTSelectionExpressionAccess().getSTMemberSelectionReceiverAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1__1__Impl
	rule__STSelectionExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getAlternatives_1_1()); }
	(rule__STSelectionExpression__Alternatives_1_1)
	{ after(grammarAccess.getSTSelectionExpressionAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1__2__Impl
	rule__STSelectionExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getGroup_1_2()); }
	(rule__STSelectionExpression__Group_1_2__0)?
	{ after(grammarAccess.getSTSelectionExpressionAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getBitaccessorAssignment_1_3()); }
	(rule__STSelectionExpression__BitaccessorAssignment_1_3)?
	{ after(grammarAccess.getSTSelectionExpressionAccess().getBitaccessorAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSelectionExpression__Group_1_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_1_0__0__Impl
	rule__STSelectionExpression__Group_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getStructAccessAssignment_1_1_0_0()); }
	(rule__STSelectionExpression__StructAccessAssignment_1_1_0_0)
	{ after(grammarAccess.getSTSelectionExpressionAccess().getStructAccessAssignment_1_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getMemberAssignment_1_1_0_1()); }
	(rule__STSelectionExpression__MemberAssignment_1_1_0_1)
	{ after(grammarAccess.getSTSelectionExpressionAccess().getMemberAssignment_1_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSelectionExpression__Group_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_1_1__0__Impl
	rule__STSelectionExpression__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getArrayAccessAssignment_1_1_1_0()); }
	(rule__STSelectionExpression__ArrayAccessAssignment_1_1_1_0)
	{ after(grammarAccess.getSTSelectionExpressionAccess().getArrayAccessAssignment_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_1_1__1__Impl
	rule__STSelectionExpression__Group_1_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getIndexAssignment_1_1_1_1()); }
	(rule__STSelectionExpression__IndexAssignment_1_1_1_1)
	{ after(grammarAccess.getSTSelectionExpressionAccess().getIndexAssignment_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_1_1__2__Impl
	rule__STSelectionExpression__Group_1_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getGroup_1_1_1_2()); }
	(rule__STSelectionExpression__Group_1_1_1_2__0)*
	{ after(grammarAccess.getSTSelectionExpressionAccess().getGroup_1_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getRightSquareBracketKeyword_1_1_1_3()); }
	RightSquareBracket
	{ after(grammarAccess.getSTSelectionExpressionAccess().getRightSquareBracketKeyword_1_1_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSelectionExpression__Group_1_1_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_1_1_2__0__Impl
	rule__STSelectionExpression__Group_1_1_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_1_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getCommaKeyword_1_1_1_2_0()); }
	Comma
	{ after(grammarAccess.getSTSelectionExpressionAccess().getCommaKeyword_1_1_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_1_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_1_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_1_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getIndexAssignment_1_1_1_2_1()); }
	(rule__STSelectionExpression__IndexAssignment_1_1_1_2_1)
	{ after(grammarAccess.getSTSelectionExpressionAccess().getIndexAssignment_1_1_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSelectionExpression__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_2__0__Impl
	rule__STSelectionExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getPoeInvocationAssignment_1_2_0()); }
	(rule__STSelectionExpression__PoeInvocationAssignment_1_2_0)
	{ after(grammarAccess.getSTSelectionExpressionAccess().getPoeInvocationAssignment_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_2__1__Impl
	rule__STSelectionExpression__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getGroup_1_2_1()); }
	(rule__STSelectionExpression__Group_1_2_1__0)?
	{ after(grammarAccess.getSTSelectionExpressionAccess().getGroup_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getRightParenthesisKeyword_1_2_2()); }
	RightParenthesis
	{ after(grammarAccess.getSTSelectionExpressionAccess().getRightParenthesisKeyword_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSelectionExpression__Group_1_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_2_1__0__Impl
	rule__STSelectionExpression__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getParametersAssignment_1_2_1_0()); }
	(rule__STSelectionExpression__ParametersAssignment_1_2_1_0)
	{ after(grammarAccess.getSTSelectionExpressionAccess().getParametersAssignment_1_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getGroup_1_2_1_1()); }
	(rule__STSelectionExpression__Group_1_2_1_1__0)*
	{ after(grammarAccess.getSTSelectionExpressionAccess().getGroup_1_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STSelectionExpression__Group_1_2_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_2_1_1__0__Impl
	rule__STSelectionExpression__Group_1_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_2_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getCommaKeyword_1_2_1_1_0()); }
	Comma
	{ after(grammarAccess.getSTSelectionExpressionAccess().getCommaKeyword_1_2_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_2_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STSelectionExpression__Group_1_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__Group_1_2_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTSelectionExpressionAccess().getParametersAssignment_1_2_1_1_1()); }
	(rule__STSelectionExpression__ParametersAssignment_1_2_1_1_1)
	{ after(grammarAccess.getSTSelectionExpressionAccess().getParametersAssignment_1_2_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultibitPartialAccess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultibitPartialAccess__Group__0__Impl
	rule__MultibitPartialAccess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultibitPartialAccess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultibitPartialAccessAccess().getAccessSpecifierAssignment_0()); }
	(rule__MultibitPartialAccess__AccessSpecifierAssignment_0)
	{ after(grammarAccess.getMultibitPartialAccessAccess().getAccessSpecifierAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultibitPartialAccess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultibitPartialAccess__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultibitPartialAccess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultibitPartialAccessAccess().getIndexAssignment_1()); }
	(rule__MultibitPartialAccess__IndexAssignment_1)
	{ after(grammarAccess.getMultibitPartialAccessAccess().getIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAtomicExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_0__0__Impl
	rule__STAtomicExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getLeftParenthesisKeyword_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getSTAtomicExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_0__1__Impl
	rule__STAtomicExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getSTExpressionParserRuleCall_0_1()); }
	ruleSTExpression
	{ after(grammarAccess.getSTAtomicExpressionAccess().getSTExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getRightParenthesisKeyword_0_2()); }
	RightParenthesis
	{ after(grammarAccess.getSTAtomicExpressionAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAtomicExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1__0__Impl
	rule__STAtomicExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getSTSymbolAction_1_0()); }
	()
	{ after(grammarAccess.getSTAtomicExpressionAccess().getSTSymbolAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1__1__Impl
	rule__STAtomicExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getGroup_1_1()); }
	(rule__STAtomicExpression__Group_1_1__0)?
	{ after(grammarAccess.getSTAtomicExpressionAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1__2__Impl
	rule__STAtomicExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getSymbolAssignment_1_2()); }
	(rule__STAtomicExpression__SymbolAssignment_1_2)
	{ after(grammarAccess.getSTAtomicExpressionAccess().getSymbolAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1__3__Impl
	rule__STAtomicExpression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getBitaccessorAssignment_1_3()); }
	(rule__STAtomicExpression__BitaccessorAssignment_1_3)?
	{ after(grammarAccess.getSTAtomicExpressionAccess().getBitaccessorAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getGroup_1_4()); }
	(rule__STAtomicExpression__Group_1_4__0)?
	{ after(grammarAccess.getSTAtomicExpressionAccess().getGroup_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAtomicExpression__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1_1__0__Impl
	rule__STAtomicExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getTypeAssignment_1_1_0()); }
	(rule__STAtomicExpression__TypeAssignment_1_1_0)
	{ after(grammarAccess.getSTAtomicExpressionAccess().getTypeAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getNumberSignKeyword_1_1_1()); }
	NumberSign
	{ after(grammarAccess.getSTAtomicExpressionAccess().getNumberSignKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAtomicExpression__Group_1_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1_4__0__Impl
	rule__STAtomicExpression__Group_1_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getPoeInvocationAssignment_1_4_0()); }
	(rule__STAtomicExpression__PoeInvocationAssignment_1_4_0)
	{ after(grammarAccess.getSTAtomicExpressionAccess().getPoeInvocationAssignment_1_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1_4__1__Impl
	rule__STAtomicExpression__Group_1_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getGroup_1_4_1()); }
	(rule__STAtomicExpression__Group_1_4_1__0)?
	{ after(grammarAccess.getSTAtomicExpressionAccess().getGroup_1_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getRightParenthesisKeyword_1_4_2()); }
	RightParenthesis
	{ after(grammarAccess.getSTAtomicExpressionAccess().getRightParenthesisKeyword_1_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAtomicExpression__Group_1_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1_4_1__0__Impl
	rule__STAtomicExpression__Group_1_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getParametersAssignment_1_4_1_0()); }
	(rule__STAtomicExpression__ParametersAssignment_1_4_1_0)
	{ after(grammarAccess.getSTAtomicExpressionAccess().getParametersAssignment_1_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getGroup_1_4_1_1()); }
	(rule__STAtomicExpression__Group_1_4_1_1__0)*
	{ after(grammarAccess.getSTAtomicExpressionAccess().getGroup_1_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STAtomicExpression__Group_1_4_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1_4_1_1__0__Impl
	rule__STAtomicExpression__Group_1_4_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_4_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getCommaKeyword_1_4_1_1_0()); }
	Comma
	{ after(grammarAccess.getSTAtomicExpressionAccess().getCommaKeyword_1_4_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_4_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STAtomicExpression__Group_1_4_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__Group_1_4_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTAtomicExpressionAccess().getParametersAssignment_1_4_1_1_1()); }
	(rule__STAtomicExpression__ParametersAssignment_1_4_1_1_1)
	{ after(grammarAccess.getSTAtomicExpressionAccess().getParametersAssignment_1_4_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STLiteralExpressions__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_0__0__Impl
	rule__STLiteralExpressions__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getSTBoolLiteralAction_0_0()); }
	()
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getSTBoolLiteralAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getBoolLiteralAssignment_0_1()); }
	(rule__STLiteralExpressions__BoolLiteralAssignment_0_1)
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getBoolLiteralAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STLiteralExpressions__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_1__0__Impl
	rule__STLiteralExpressions__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getSTNumericLiteralAction_1_0()); }
	()
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getSTNumericLiteralAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getNumericLiteralAssignment_1_1()); }
	(rule__STLiteralExpressions__NumericLiteralAssignment_1_1)
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getNumericLiteralAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STLiteralExpressions__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_2__0__Impl
	rule__STLiteralExpressions__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getSTDateLiteralAction_2_0()); }
	()
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getSTDateLiteralAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getDateLiteralAssignment_2_1()); }
	(rule__STLiteralExpressions__DateLiteralAssignment_2_1)
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getDateLiteralAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STLiteralExpressions__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_3__0__Impl
	rule__STLiteralExpressions__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeLiteralAction_3_0()); }
	()
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeLiteralAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getTimeLiteralAssignment_3_1()); }
	(rule__STLiteralExpressions__TimeLiteralAssignment_3_1)
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getTimeLiteralAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STLiteralExpressions__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_4__0__Impl
	rule__STLiteralExpressions__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeOfDayLiteralAction_4_0()); }
	()
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getSTTimeOfDayLiteralAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getTimeOfDayLiteralAssignment_4_1()); }
	(rule__STLiteralExpressions__TimeOfDayLiteralAssignment_4_1)
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getTimeOfDayLiteralAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STLiteralExpressions__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_5__0__Impl
	rule__STLiteralExpressions__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getSTDateAndTimeLiteralAction_5_0()); }
	()
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getSTDateAndTimeLiteralAction_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getTimeLiteralAssignment_5_1()); }
	(rule__STLiteralExpressions__TimeLiteralAssignment_5_1)
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getTimeLiteralAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STLiteralExpressions__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_6__0__Impl
	rule__STLiteralExpressions__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getSTStringLiteralAction_6_0()); }
	()
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getSTStringLiteralAction_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STLiteralExpressions__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTLiteralExpressionsAccess().getStringLiteralAssignment_6_1()); }
	(rule__STLiteralExpressions__StringLiteralAssignment_6_1)
	{ after(grammarAccess.getSTLiteralExpressionsAccess().getStringLiteralAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BOOL_LITERAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BOOL_LITERAL__Group__0__Impl
	rule__BOOL_LITERAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOL_LITERAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBOOL_LITERALAccess().getNotAssignment_0()); }
	(rule__BOOL_LITERAL__NotAssignment_0)?
	{ after(grammarAccess.getBOOL_LITERALAccess().getNotAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOL_LITERAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BOOL_LITERAL__Group__1__Impl
	rule__BOOL_LITERAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOL_LITERAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBOOL_LITERALAccess().getBOOLKeyword_1()); }
	(BOOL)?
	{ after(grammarAccess.getBOOL_LITERALAccess().getBOOLKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOL_LITERAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BOOL_LITERAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOL_LITERAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBOOL_LITERALAccess().getKeyWordValueAssignment_2()); }
	(rule__BOOL_LITERAL__KeyWordValueAssignment_2)
	{ after(grammarAccess.getBOOL_LITERALAccess().getKeyWordValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NUMERIC_LITERAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMERIC_LITERAL__Group__0__Impl
	rule__NUMERIC_LITERAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMERIC_LITERAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMERIC_LITERALAccess().getNotAssignment_0()); }
	(rule__NUMERIC_LITERAL__NotAssignment_0)?
	{ after(grammarAccess.getNUMERIC_LITERALAccess().getNotAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMERIC_LITERAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMERIC_LITERAL__Group__1__Impl
	rule__NUMERIC_LITERAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMERIC_LITERAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordAssignment_1()); }
	(rule__NUMERIC_LITERAL__KeywordAssignment_1)?
	{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMERIC_LITERAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMERIC_LITERAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMERIC_LITERAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMERIC_LITERALAccess().getAlternatives_2()); }
	(rule__NUMERIC_LITERAL__Alternatives_2)
	{ after(grammarAccess.getNUMERIC_LITERALAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DATE_LITERAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DATE_LITERAL__Group__0__Impl
	rule__DATE_LITERAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_LITERAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDATE_LITERALAccess().getKeywordAssignment_0()); }
	(rule__DATE_LITERAL__KeywordAssignment_0)
	{ after(grammarAccess.getDATE_LITERALAccess().getKeywordAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_LITERAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DATE_LITERAL__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_LITERAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDATE_LITERALAccess().getValueAssignment_1()); }
	(rule__DATE_LITERAL__ValueAssignment_1)
	{ after(grammarAccess.getDATE_LITERALAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TIME_LITERAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME_LITERAL__Group__0__Impl
	rule__TIME_LITERAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_LITERAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIME_LITERALAccess().getKeywordAssignment_0()); }
	(rule__TIME_LITERAL__KeywordAssignment_0)
	{ after(grammarAccess.getTIME_LITERALAccess().getKeywordAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_LITERAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME_LITERAL__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_LITERAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIME_LITERALAccess().getValueAssignment_1()); }
	(rule__TIME_LITERAL__ValueAssignment_1)
	{ after(grammarAccess.getTIME_LITERALAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TIME_OF_DAY_LITERAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME_OF_DAY_LITERAL__Group__0__Impl
	rule__TIME_OF_DAY_LITERAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY_LITERAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIME_OF_DAY_LITERALAccess().getKeywordAssignment_0()); }
	(rule__TIME_OF_DAY_LITERAL__KeywordAssignment_0)
	{ after(grammarAccess.getTIME_OF_DAY_LITERALAccess().getKeywordAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY_LITERAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME_OF_DAY_LITERAL__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY_LITERAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIME_OF_DAY_LITERALAccess().getValueAssignment_1()); }
	(rule__TIME_OF_DAY_LITERAL__ValueAssignment_1)
	{ after(grammarAccess.getTIME_OF_DAY_LITERALAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DATE_AND_TIME_LITERAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DATE_AND_TIME_LITERAL__Group__0__Impl
	rule__DATE_AND_TIME_LITERAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_AND_TIME_LITERAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordAssignment_0()); }
	(rule__DATE_AND_TIME_LITERAL__KeywordAssignment_0)
	{ after(grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_AND_TIME_LITERAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DATE_AND_TIME_LITERAL__Group__1__Impl
	rule__DATE_AND_TIME_LITERAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_AND_TIME_LITERAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDATE_AND_TIME_LITERALAccess().getDateValueAssignment_1()); }
	(rule__DATE_AND_TIME_LITERAL__DateValueAssignment_1)
	{ after(grammarAccess.getDATE_AND_TIME_LITERALAccess().getDateValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_AND_TIME_LITERAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DATE_AND_TIME_LITERAL__Group__2__Impl
	rule__DATE_AND_TIME_LITERAL__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_AND_TIME_LITERAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDATE_AND_TIME_LITERALAccess().getHyphenMinusKeyword_2()); }
	HyphenMinus
	{ after(grammarAccess.getDATE_AND_TIME_LITERALAccess().getHyphenMinusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_AND_TIME_LITERAL__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DATE_AND_TIME_LITERAL__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_AND_TIME_LITERAL__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDATE_AND_TIME_LITERALAccess().getTimeOfDayValueAssignment_3()); }
	(rule__DATE_AND_TIME_LITERAL__TimeOfDayValueAssignment_3)
	{ after(grammarAccess.getDATE_AND_TIME_LITERALAccess().getTimeOfDayValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STRING_LITERAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STRING_LITERAL__Group__0__Impl
	rule__STRING_LITERAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STRING_LITERAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTRING_LITERALAccess().getAlternatives_0()); }
	(rule__STRING_LITERAL__Alternatives_0)?
	{ after(grammarAccess.getSTRING_LITERALAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRING_LITERAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STRING_LITERAL__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STRING_LITERAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTRING_LITERALAccess().getValueAssignment_1()); }
	(rule__STRING_LITERAL__ValueAssignment_1)
	{ after(grammarAccess.getSTRING_LITERALAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__INTEGER__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__INTEGER__Group__0__Impl
	rule__INTEGER__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__INTEGER__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getINTEGERAccess().getAlternatives_0()); }
	(rule__INTEGER__Alternatives_0)?
	{ after(grammarAccess.getINTEGERAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__INTEGER__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__INTEGER__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__INTEGER__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getINTEGERAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getINTEGERAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__0__Impl
	rule__REAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTEGERParserRuleCall_0()); }
	ruleINTEGER
	{ after(grammarAccess.getREALAccess().getINTEGERParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__1__Impl
	rule__REAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
	FullStop
	{ after(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getAlternatives_2()); }
	(rule__REAL__Alternatives_2)
	{ after(grammarAccess.getREALAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DATE__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DATE__Group__0__Impl
	rule__DATE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDATEAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getDATEAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DATE__Group__1__Impl
	rule__DATE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDATEAccess().getHyphenMinusKeyword_1()); }
	HyphenMinus
	{ after(grammarAccess.getDATEAccess().getHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DATE__Group__2__Impl
	rule__DATE__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDATEAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getDATEAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DATE__Group__3__Impl
	rule__DATE__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDATEAccess().getHyphenMinusKeyword_3()); }
	HyphenMinus
	{ after(grammarAccess.getDATEAccess().getHyphenMinusKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DATE__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDATEAccess().getINTTerminalRuleCall_4()); }
	RULE_INT
	{ after(grammarAccess.getDATEAccess().getINTTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TIME_OF_DAY__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME_OF_DAY__Group__0__Impl
	rule__TIME_OF_DAY__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIME_OF_DAYAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getTIME_OF_DAYAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME_OF_DAY__Group__1__Impl
	rule__TIME_OF_DAY__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIME_OF_DAYAccess().getColonKeyword_1()); }
	Colon
	{ after(grammarAccess.getTIME_OF_DAYAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME_OF_DAY__Group__2__Impl
	rule__TIME_OF_DAY__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIME_OF_DAYAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getTIME_OF_DAYAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME_OF_DAY__Group__3__Impl
	rule__TIME_OF_DAY__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIME_OF_DAYAccess().getColonKeyword_3()); }
	Colon
	{ after(grammarAccess.getTIME_OF_DAYAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME_OF_DAY__Group__4__Impl
	rule__TIME_OF_DAY__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIME_OF_DAYAccess().getINTTerminalRuleCall_4()); }
	RULE_INT
	{ after(grammarAccess.getTIME_OF_DAYAccess().getINTTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME_OF_DAY__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIME_OF_DAYAccess().getGroup_5()); }
	(rule__TIME_OF_DAY__Group_5__0)?
	{ after(grammarAccess.getTIME_OF_DAYAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TIME_OF_DAY__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME_OF_DAY__Group_5__0__Impl
	rule__TIME_OF_DAY__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIME_OF_DAYAccess().getFullStopKeyword_5_0()); }
	FullStop
	{ after(grammarAccess.getTIME_OF_DAYAccess().getFullStopKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME_OF_DAY__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIME_OF_DAYAccess().getINTTerminalRuleCall_5_1()); }
	RULE_INT
	{ after(grammarAccess.getTIME_OF_DAYAccess().getINTTerminalRuleCall_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STFunction__FunctionsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTFunctionAccess().getFunctionsFunctionDefinitionParserRuleCall_0()); }
		ruleFunctionDefinition
		{ after(grammarAccess.getSTFunctionAccess().getFunctionsFunctionDefinitionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__ReturnTypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getReturnTypeDataTypeCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getFunctionDefinitionAccess().getReturnTypeDataTypeIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionDefinitionAccess().getReturnTypeDataTypeIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getFunctionDefinitionAccess().getReturnTypeDataTypeCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__VarDeclarationsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getFunctionDefinitionAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__VarTempDeclarationsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getVarTempDeclarationsVarTempDeclarationBlockParserRuleCall_3_1_0()); }
		ruleVarTempDeclarationBlock
		{ after(grammarAccess.getFunctionDefinitionAccess().getVarTempDeclarationsVarTempDeclarationBlockParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__VarInpuDeclarationsAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getVarInpuDeclarationsVarInputDeclarationBlockParserRuleCall_3_2_0()); }
		ruleVarInputDeclarationBlock
		{ after(grammarAccess.getFunctionDefinitionAccess().getVarInpuDeclarationsVarInputDeclarationBlockParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__VarOutputDeclarationsAssignment_3_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getVarOutputDeclarationsVarOutputDeclarationBlockParserRuleCall_3_3_0()); }
		ruleVarOutputDeclarationBlock
		{ after(grammarAccess.getFunctionDefinitionAccess().getVarOutputDeclarationsVarOutputDeclarationBlockParserRuleCall_3_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__CodeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefinitionAccess().getCodeSTStatementParserRuleCall_4_0()); }
		ruleSTStatement
		{ after(grammarAccess.getFunctionDefinitionAccess().getCodeSTStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__ConstantAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarTempDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
		(
			{ before(grammarAccess.getVarTempDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
			CONSTANT
			{ after(grammarAccess.getVarTempDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
		)
		{ after(grammarAccess.getVarTempDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTempDeclarationBlock__VarDeclarationsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInputDeclarationBlock__ConstantAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarInputDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
		(
			{ before(grammarAccess.getVarInputDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
			CONSTANT
			{ after(grammarAccess.getVarInputDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
		)
		{ after(grammarAccess.getVarInputDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInputDeclarationBlock__VarDeclarationsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarInputDeclarationBlockAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getVarInputDeclarationBlockAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOutputDeclarationBlock__ConstantAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarOutputDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
		(
			{ before(grammarAccess.getVarOutputDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
			CONSTANT
			{ after(grammarAccess.getVarOutputDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
		)
		{ after(grammarAccess.getVarOutputDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOutputDeclarationBlock__VarDeclarationsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarOutputDeclarationBlockAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getVarOutputDeclarationBlockAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__LocatedAtAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getLocatedAtVarDeclarationCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getVarDeclarationAccess().getLocatedAtVarDeclarationIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVarDeclarationAccess().getLocatedAtVarDeclarationIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getVarDeclarationAccess().getLocatedAtVarDeclarationCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__ArrayAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getArrayARRAYKeyword_3_0_0()); }
		(
			{ before(grammarAccess.getVarDeclarationAccess().getArrayARRAYKeyword_3_0_0()); }
			ARRAY
			{ after(grammarAccess.getVarDeclarationAccess().getArrayARRAYKeyword_3_0_0()); }
		)
		{ after(grammarAccess.getVarDeclarationAccess().getArrayARRAYKeyword_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__RangesAssignment_3_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getRangesSTExpressionParserRuleCall_3_1_0_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getVarDeclarationAccess().getRangesSTExpressionParserRuleCall_3_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__RangesAssignment_3_1_0_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getRangesSTExpressionParserRuleCall_3_1_0_2_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getVarDeclarationAccess().getRangesSTExpressionParserRuleCall_3_1_0_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__CountAssignment_3_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_3_1_1_1_0()); }
		(
			{ before(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_3_1_1_1_0()); }
			Asterisk
			{ after(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_3_1_1_1_0()); }
		)
		{ after(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_3_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__CountAssignment_3_1_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_3_1_1_2_1_0()); }
		(
			{ before(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_3_1_1_2_1_0()); }
			Asterisk
			{ after(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_3_1_1_2_1_0()); }
		)
		{ after(grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_3_1_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__TypeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getTypeLibraryElementCrossReference_4_0()); }
		(
			{ before(grammarAccess.getVarDeclarationAccess().getTypeLibraryElementIDTerminalRuleCall_4_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVarDeclarationAccess().getTypeLibraryElementIDTerminalRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getVarDeclarationAccess().getTypeLibraryElementCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__MaxLengthAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getMaxLengthSTExpressionParserRuleCall_5_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getVarDeclarationAccess().getMaxLengthSTExpressionParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__DefaultValueAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getDefaultValueInitializerExpressionParserRuleCall_6_1_0()); }
		ruleInitializerExpression
		{ after(grammarAccess.getVarDeclarationAccess().getDefaultValueInitializerExpressionParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__ValuesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayInitializerExpressionAccess().getValuesArrayInitElementParserRuleCall_1_0()); }
		ruleArrayInitElement
		{ after(grammarAccess.getArrayInitializerExpressionAccess().getValuesArrayInitElementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializerExpression__ValuesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayInitializerExpressionAccess().getValuesArrayInitElementParserRuleCall_2_1_0()); }
		ruleArrayInitElement
		{ after(grammarAccess.getArrayInitializerExpressionAccess().getValuesArrayInitElementParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__IndexOrInitExpressionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayInitElementAccess().getIndexOrInitExpressionSTExpressionParserRuleCall_0_0()); }
		ruleSTExpression
		{ after(grammarAccess.getArrayInitElementAccess().getIndexOrInitExpressionSTExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitElement__InitExpressionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayInitElementAccess().getInitExpressionSTExpressionParserRuleCall_1_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getArrayInitElementAccess().getInitExpressionSTExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAssignmentStatementAccess().getLhsVarDeclarationCrossReference_0_0()); }
		(
			{ before(grammarAccess.getSTAssignmentStatementAccess().getLhsVarDeclarationIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSTAssignmentStatementAccess().getLhsVarDeclarationIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getSTAssignmentStatementAccess().getLhsVarDeclarationCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAssignmentStatement__RhsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAssignmentStatementAccess().getRhsSTExpressionParserRuleCall_2_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTAssignmentStatementAccess().getRhsSTExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTIfStatmentAccess().getConditionSTExpressionParserRuleCall_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTIfStatmentAccess().getConditionSTExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTIfStatmentAccess().getStatementsSTStatementParserRuleCall_3_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTIfStatmentAccess().getStatementsSTStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__ElseifsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTIfStatmentAccess().getElseifsSTElseIfPartParserRuleCall_4_0()); }
		ruleSTElseIfPart
		{ after(grammarAccess.getSTIfStatmentAccess().getElseifsSTElseIfPartParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STIfStatment__ElseAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTIfStatmentAccess().getElseSTElsePartParserRuleCall_5_0()); }
		ruleSTElsePart
		{ after(grammarAccess.getSTIfStatmentAccess().getElseSTElsePartParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTElseIfPartAccess().getConditionSTExpressionParserRuleCall_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTElseIfPartAccess().getConditionSTExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElseIfPart__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTElseIfPartAccess().getStatementsSTStatementParserRuleCall_3_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTElseIfPartAccess().getStatementsSTStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__SelectorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTCaseStatementAccess().getSelectorSTExpressionParserRuleCall_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTCaseStatementAccess().getSelectorSTExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__CasesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTCaseStatementAccess().getCasesSTCaseCasesParserRuleCall_3_0()); }
		ruleSTCaseCases
		{ after(grammarAccess.getSTCaseStatementAccess().getCasesSTCaseCasesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseStatement__ElseAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTCaseStatementAccess().getElseSTElsePartParserRuleCall_4_0()); }
		ruleSTElsePart
		{ after(grammarAccess.getSTCaseStatementAccess().getElseSTElsePartParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__ConditionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_0_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__ConditionsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_1_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STCaseCases__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTCaseCasesAccess().getStatementsSTStatementParserRuleCall_3_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTCaseCasesAccess().getStatementsSTStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STElsePart__StatementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTElsePartAccess().getStatementsSTStatementParserRuleCall_2_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTElsePartAccess().getStatementsSTStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__ForAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTForStatementAccess().getForSTExpressionParserRuleCall_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTForStatementAccess().getForSTExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__ToAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTForStatementAccess().getToSTExpressionParserRuleCall_3_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTForStatementAccess().getToSTExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__ByAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTForStatementAccess().getBySTExpressionParserRuleCall_4_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTForStatementAccess().getBySTExpressionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STForStatement__StatementsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTForStatementAccess().getStatementsSTStatementParserRuleCall_6_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTForStatementAccess().getStatementsSTStatementParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTWhileStatementAccess().getConditionSTExpressionParserRuleCall_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTWhileStatementAccess().getConditionSTExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STWhileStatement__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTWhileStatementAccess().getStatementsSTStatementParserRuleCall_3_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTWhileStatementAccess().getStatementsSTStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTRepeatStatementAccess().getStatementsSTStatementParserRuleCall_1_0()); }
		ruleSTStatement
		{ after(grammarAccess.getSTRepeatStatementAccess().getStatementsSTStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRepeatStatement__ConditionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTRepeatStatementAccess().getConditionSTExpressionParserRuleCall_3_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTRepeatStatementAccess().getConditionSTExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSubrangeExpression__UpperBoundAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSubrangeExpressionAccess().getUpperBoundSTOrExpressionParserRuleCall_1_1_0()); }
		ruleSTOrExpression
		{ after(grammarAccess.getSTSubrangeExpressionAccess().getUpperBoundSTOrExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTOrExpressionAccess().getOpORKeyword_1_0_1_0()); }
		(
			{ before(grammarAccess.getSTOrExpressionAccess().getOpORKeyword_1_0_1_0()); }
			OR
			{ after(grammarAccess.getSTOrExpressionAccess().getOpORKeyword_1_0_1_0()); }
		)
		{ after(grammarAccess.getSTOrExpressionAccess().getOpORKeyword_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STOrExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTOrExpressionAccess().getRightSTXorExpressionParserRuleCall_1_1_0()); }
		ruleSTXorExpression
		{ after(grammarAccess.getSTOrExpressionAccess().getRightSTXorExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTXorExpressionAccess().getOpXORKeyword_1_0_1_0()); }
		(
			{ before(grammarAccess.getSTXorExpressionAccess().getOpXORKeyword_1_0_1_0()); }
			XOR
			{ after(grammarAccess.getSTXorExpressionAccess().getOpXORKeyword_1_0_1_0()); }
		)
		{ after(grammarAccess.getSTXorExpressionAccess().getOpXORKeyword_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STXorExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTXorExpressionAccess().getRightSTAndExpressionParserRuleCall_1_1_0()); }
		ruleSTAndExpression
		{ after(grammarAccess.getSTXorExpressionAccess().getRightSTAndExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAndExpressionAccess().getOpAlternatives_1_0_1_0()); }
		(rule__STAndExpression__OpAlternatives_1_0_1_0)
		{ after(grammarAccess.getSTAndExpressionAccess().getOpAlternatives_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAndExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAndExpressionAccess().getRightSTEqualityExpressionParserRuleCall_1_1_0()); }
		ruleSTEqualityExpression
		{ after(grammarAccess.getSTAndExpressionAccess().getRightSTEqualityExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTEqualityExpressionAccess().getOpAlternatives_1_0_1_0()); }
		(rule__STEqualityExpression__OpAlternatives_1_0_1_0)
		{ after(grammarAccess.getSTEqualityExpressionAccess().getOpAlternatives_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STEqualityExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTEqualityExpressionAccess().getRightSTComparisonExpressionParserRuleCall_1_1_0()); }
		ruleSTComparisonExpression
		{ after(grammarAccess.getSTEqualityExpressionAccess().getRightSTComparisonExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTComparisonExpressionAccess().getOpAlternatives_1_0_1_0()); }
		(rule__STComparisonExpression__OpAlternatives_1_0_1_0)
		{ after(grammarAccess.getSTComparisonExpressionAccess().getOpAlternatives_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STComparisonExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTComparisonExpressionAccess().getRightSTAddSubExpressionParserRuleCall_1_1_0()); }
		ruleSTAddSubExpression
		{ after(grammarAccess.getSTComparisonExpressionAccess().getRightSTAddSubExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAddSubExpressionAccess().getOpAlternatives_1_0_1_0()); }
		(rule__STAddSubExpression__OpAlternatives_1_0_1_0)
		{ after(grammarAccess.getSTAddSubExpressionAccess().getOpAlternatives_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAddSubExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAddSubExpressionAccess().getRightSTMulDivModExpressionParserRuleCall_1_1_0()); }
		ruleSTMulDivModExpression
		{ after(grammarAccess.getSTAddSubExpressionAccess().getRightSTMulDivModExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTMulDivModExpressionAccess().getOpAlternatives_1_0_1_0()); }
		(rule__STMulDivModExpression__OpAlternatives_1_0_1_0)
		{ after(grammarAccess.getSTMulDivModExpressionAccess().getOpAlternatives_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STMulDivModExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTMulDivModExpressionAccess().getRightSTPowerExpressionParserRuleCall_1_1_0()); }
		ruleSTPowerExpression
		{ after(grammarAccess.getSTMulDivModExpressionAccess().getRightSTPowerExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__OpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTPowerExpressionAccess().getOpAsteriskAsteriskKeyword_1_0_1_0()); }
		(
			{ before(grammarAccess.getSTPowerExpressionAccess().getOpAsteriskAsteriskKeyword_1_0_1_0()); }
			AsteriskAsterisk
			{ after(grammarAccess.getSTPowerExpressionAccess().getOpAsteriskAsteriskKeyword_1_0_1_0()); }
		)
		{ after(grammarAccess.getSTPowerExpressionAccess().getOpAsteriskAsteriskKeyword_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STPowerExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTPowerExpressionAccess().getRightSTSignumExpressionParserRuleCall_1_1_0()); }
		ruleSTSignumExpression
		{ after(grammarAccess.getSTPowerExpressionAccess().getRightSTSignumExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSignumExpression__SignumAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSignumExpressionAccess().getSignumAlternatives_2_1_0()); }
		(rule__STSignumExpression__SignumAlternatives_2_1_0)
		{ after(grammarAccess.getSTSignumExpressionAccess().getSignumAlternatives_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSignumExpression__ExpressionAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSignumExpressionAccess().getExpressionSTSelectionExpressionParserRuleCall_2_2_0()); }
		ruleSTSelectionExpression
		{ after(grammarAccess.getSTSignumExpressionAccess().getExpressionSTSelectionExpressionParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__StructAccessAssignment_1_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSelectionExpressionAccess().getStructAccessFullStopKeyword_1_1_0_0_0()); }
		(
			{ before(grammarAccess.getSTSelectionExpressionAccess().getStructAccessFullStopKeyword_1_1_0_0_0()); }
			FullStop
			{ after(grammarAccess.getSTSelectionExpressionAccess().getStructAccessFullStopKeyword_1_1_0_0_0()); }
		)
		{ after(grammarAccess.getSTSelectionExpressionAccess().getStructAccessFullStopKeyword_1_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__MemberAssignment_1_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSelectionExpressionAccess().getMemberVarDeclarationCrossReference_1_1_0_1_0()); }
		(
			{ before(grammarAccess.getSTSelectionExpressionAccess().getMemberVarDeclarationIDTerminalRuleCall_1_1_0_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSTSelectionExpressionAccess().getMemberVarDeclarationIDTerminalRuleCall_1_1_0_1_0_1()); }
		)
		{ after(grammarAccess.getSTSelectionExpressionAccess().getMemberVarDeclarationCrossReference_1_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__ArrayAccessAssignment_1_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSelectionExpressionAccess().getArrayAccessLeftSquareBracketKeyword_1_1_1_0_0()); }
		(
			{ before(grammarAccess.getSTSelectionExpressionAccess().getArrayAccessLeftSquareBracketKeyword_1_1_1_0_0()); }
			LeftSquareBracket
			{ after(grammarAccess.getSTSelectionExpressionAccess().getArrayAccessLeftSquareBracketKeyword_1_1_1_0_0()); }
		)
		{ after(grammarAccess.getSTSelectionExpressionAccess().getArrayAccessLeftSquareBracketKeyword_1_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__IndexAssignment_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSelectionExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_1_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTSelectionExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__IndexAssignment_1_1_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSelectionExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_1_2_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTSelectionExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__PoeInvocationAssignment_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSelectionExpressionAccess().getPoeInvocationLeftParenthesisKeyword_1_2_0_0()); }
		(
			{ before(grammarAccess.getSTSelectionExpressionAccess().getPoeInvocationLeftParenthesisKeyword_1_2_0_0()); }
			LeftParenthesis
			{ after(grammarAccess.getSTSelectionExpressionAccess().getPoeInvocationLeftParenthesisKeyword_1_2_0_0()); }
		)
		{ after(grammarAccess.getSTSelectionExpressionAccess().getPoeInvocationLeftParenthesisKeyword_1_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__ParametersAssignment_1_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSelectionExpressionAccess().getParametersSTExpressionParserRuleCall_1_2_1_0_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTSelectionExpressionAccess().getParametersSTExpressionParserRuleCall_1_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__ParametersAssignment_1_2_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSelectionExpressionAccess().getParametersSTExpressionParserRuleCall_1_2_1_1_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTSelectionExpressionAccess().getParametersSTExpressionParserRuleCall_1_2_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STSelectionExpression__BitaccessorAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTSelectionExpressionAccess().getBitaccessorMultibitPartialAccessParserRuleCall_1_3_0()); }
		ruleMultibitPartialAccess
		{ after(grammarAccess.getSTSelectionExpressionAccess().getBitaccessorMultibitPartialAccessParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultibitPartialAccess__AccessSpecifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultibitPartialAccessAccess().getAccessSpecifierMultiBitAccessSpecifierEnumRuleCall_0_0()); }
		ruleMultiBitAccessSpecifier
		{ after(grammarAccess.getMultibitPartialAccessAccess().getAccessSpecifierMultiBitAccessSpecifierEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultibitPartialAccess__IndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultibitPartialAccessAccess().getIndexINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getMultibitPartialAccessAccess().getIndexINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__TypeAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAtomicExpressionAccess().getTypeDataTypeCrossReference_1_1_0_0()); }
		(
			{ before(grammarAccess.getSTAtomicExpressionAccess().getTypeDataTypeIDTerminalRuleCall_1_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSTAtomicExpressionAccess().getTypeDataTypeIDTerminalRuleCall_1_1_0_0_1()); }
		)
		{ after(grammarAccess.getSTAtomicExpressionAccess().getTypeDataTypeCrossReference_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__SymbolAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAtomicExpressionAccess().getSymbolVarDeclarationCrossReference_1_2_0()); }
		(
			{ before(grammarAccess.getSTAtomicExpressionAccess().getSymbolVarDeclarationIDTerminalRuleCall_1_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSTAtomicExpressionAccess().getSymbolVarDeclarationIDTerminalRuleCall_1_2_0_1()); }
		)
		{ after(grammarAccess.getSTAtomicExpressionAccess().getSymbolVarDeclarationCrossReference_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__BitaccessorAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAtomicExpressionAccess().getBitaccessorMultibitPartialAccessParserRuleCall_1_3_0()); }
		ruleMultibitPartialAccess
		{ after(grammarAccess.getSTAtomicExpressionAccess().getBitaccessorMultibitPartialAccessParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__PoeInvocationAssignment_1_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAtomicExpressionAccess().getPoeInvocationLeftParenthesisKeyword_1_4_0_0()); }
		(
			{ before(grammarAccess.getSTAtomicExpressionAccess().getPoeInvocationLeftParenthesisKeyword_1_4_0_0()); }
			LeftParenthesis
			{ after(grammarAccess.getSTAtomicExpressionAccess().getPoeInvocationLeftParenthesisKeyword_1_4_0_0()); }
		)
		{ after(grammarAccess.getSTAtomicExpressionAccess().getPoeInvocationLeftParenthesisKeyword_1_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__ParametersAssignment_1_4_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAtomicExpressionAccess().getParametersSTExpressionParserRuleCall_1_4_1_0_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTAtomicExpressionAccess().getParametersSTExpressionParserRuleCall_1_4_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STAtomicExpression__ParametersAssignment_1_4_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTAtomicExpressionAccess().getParametersSTExpressionParserRuleCall_1_4_1_1_1_0()); }
		ruleSTExpression
		{ after(grammarAccess.getSTAtomicExpressionAccess().getParametersSTExpressionParserRuleCall_1_4_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__BoolLiteralAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getBoolLiteralBOOL_LITERALParserRuleCall_0_1_0()); }
		ruleBOOL_LITERAL
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getBoolLiteralBOOL_LITERALParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__NumericLiteralAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getNumericLiteralNUMERIC_LITERALParserRuleCall_1_1_0()); }
		ruleNUMERIC_LITERAL
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getNumericLiteralNUMERIC_LITERALParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__DateLiteralAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getDateLiteralDATE_LITERALParserRuleCall_2_1_0()); }
		ruleDATE_LITERAL
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getDateLiteralDATE_LITERALParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__TimeLiteralAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getTimeLiteralTIME_LITERALParserRuleCall_3_1_0()); }
		ruleTIME_LITERAL
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getTimeLiteralTIME_LITERALParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__TimeOfDayLiteralAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getTimeOfDayLiteralTIME_OF_DAY_LITERALParserRuleCall_4_1_0()); }
		ruleTIME_OF_DAY_LITERAL
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getTimeOfDayLiteralTIME_OF_DAY_LITERALParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__TimeLiteralAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getTimeLiteralDATE_AND_TIME_LITERALParserRuleCall_5_1_0()); }
		ruleDATE_AND_TIME_LITERAL
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getTimeLiteralDATE_AND_TIME_LITERALParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STLiteralExpressions__StringLiteralAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTLiteralExpressionsAccess().getStringLiteralSTRING_LITERALParserRuleCall_6_1_0()); }
		ruleSTRING_LITERAL
		{ after(grammarAccess.getSTLiteralExpressionsAccess().getStringLiteralSTRING_LITERALParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOL_LITERAL__NotAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBOOL_LITERALAccess().getNotNOTKeyword_0_0()); }
		(
			{ before(grammarAccess.getBOOL_LITERALAccess().getNotNOTKeyword_0_0()); }
			NOT
			{ after(grammarAccess.getBOOL_LITERALAccess().getNotNOTKeyword_0_0()); }
		)
		{ after(grammarAccess.getBOOL_LITERALAccess().getNotNOTKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOL_LITERAL__KeyWordValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBOOL_LITERALAccess().getKeyWordValueBOOL_VALUESTerminalRuleCall_2_0()); }
		RULE_BOOL_VALUES
		{ after(grammarAccess.getBOOL_LITERALAccess().getKeyWordValueBOOL_VALUESTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMERIC_LITERAL__NotAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getNotNOTKeyword_0_0()); }
		(
			{ before(grammarAccess.getNUMERIC_LITERALAccess().getNotNOTKeyword_0_0()); }
			NOT
			{ after(grammarAccess.getNUMERIC_LITERALAccess().getNotNOTKeyword_0_0()); }
		)
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getNotNOTKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMERIC_LITERAL__KeywordAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getKeywordAlternatives_1_0()); }
		(rule__NUMERIC_LITERAL__KeywordAlternatives_1_0)
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getKeywordAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMERIC_LITERAL__IntValueAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getIntValueINTEGERParserRuleCall_2_0_0()); }
		ruleINTEGER
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getIntValueINTEGERParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMERIC_LITERAL__RealValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getRealValueREALParserRuleCall_2_1_0()); }
		ruleREAL
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getRealValueREALParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMERIC_LITERAL__HexValueAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNUMERIC_LITERALAccess().getHexValueNON_DECIMALTerminalRuleCall_2_2_0()); }
		RULE_NON_DECIMAL
		{ after(grammarAccess.getNUMERIC_LITERALAccess().getHexValueNON_DECIMALTerminalRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_LITERAL__KeywordAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDATE_LITERALAccess().getKeywordAlternatives_0_0()); }
		(rule__DATE_LITERAL__KeywordAlternatives_0_0)
		{ after(grammarAccess.getDATE_LITERALAccess().getKeywordAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_LITERAL__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDATE_LITERALAccess().getValueDATEParserRuleCall_1_0()); }
		ruleDATE
		{ after(grammarAccess.getDATE_LITERALAccess().getValueDATEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_LITERAL__KeywordAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTIME_LITERALAccess().getKeywordAlternatives_0_0()); }
		(rule__TIME_LITERAL__KeywordAlternatives_0_0)
		{ after(grammarAccess.getTIME_LITERALAccess().getKeywordAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_LITERAL__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTIME_LITERALAccess().getValueTIMETerminalRuleCall_1_0()); }
		RULE_TIME
		{ after(grammarAccess.getTIME_LITERALAccess().getValueTIMETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY_LITERAL__KeywordAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTIME_OF_DAY_LITERALAccess().getKeywordAlternatives_0_0()); }
		(rule__TIME_OF_DAY_LITERAL__KeywordAlternatives_0_0)
		{ after(grammarAccess.getTIME_OF_DAY_LITERALAccess().getKeywordAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME_OF_DAY_LITERAL__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTIME_OF_DAY_LITERALAccess().getValueTIME_OF_DAYParserRuleCall_1_0()); }
		ruleTIME_OF_DAY
		{ after(grammarAccess.getTIME_OF_DAY_LITERALAccess().getValueTIME_OF_DAYParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_AND_TIME_LITERAL__KeywordAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordAlternatives_0_0()); }
		(rule__DATE_AND_TIME_LITERAL__KeywordAlternatives_0_0)
		{ after(grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_AND_TIME_LITERAL__DateValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDATE_AND_TIME_LITERALAccess().getDateValueDATEParserRuleCall_1_0()); }
		ruleDATE
		{ after(grammarAccess.getDATE_AND_TIME_LITERALAccess().getDateValueDATEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DATE_AND_TIME_LITERAL__TimeOfDayValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDATE_AND_TIME_LITERALAccess().getTimeOfDayValueTIME_OF_DAYParserRuleCall_3_0()); }
		ruleTIME_OF_DAY
		{ after(grammarAccess.getDATE_AND_TIME_LITERALAccess().getTimeOfDayValueTIME_OF_DAYParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRING_LITERAL__KeywordAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTRING_LITERALAccess().getKeywordSTRINGKeyword_0_0_0()); }
		(
			{ before(grammarAccess.getSTRING_LITERALAccess().getKeywordSTRINGKeyword_0_0_0()); }
			STRING
			{ after(grammarAccess.getSTRING_LITERALAccess().getKeywordSTRINGKeyword_0_0_0()); }
		)
		{ after(grammarAccess.getSTRING_LITERALAccess().getKeywordSTRINGKeyword_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRING_LITERAL__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTRING_LITERALAccess().getValueSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSTRING_LITERALAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
