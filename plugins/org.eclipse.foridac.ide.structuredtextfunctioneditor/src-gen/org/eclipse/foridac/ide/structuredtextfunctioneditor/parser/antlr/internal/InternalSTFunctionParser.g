/*
 * generated by Xtext 2.25.0
 */
parser grammar InternalSTFunctionParser;

options {
	tokenVocab=InternalSTFunctionLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.eclipse.foridac.ide.structuredtextfunctioneditor.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.foridac.ide.structuredtextfunctioneditor.services.STFunctionGrammarAccess;

}

@members {

 	private STFunctionGrammarAccess grammarAccess;

    public InternalSTFunctionParser(TokenStream input, STFunctionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "STFunction";
   	}

   	@Override
   	protected STFunctionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSTFunction
entryRuleSTFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTFunctionRule()); }
	iv_ruleSTFunction=ruleSTFunction
	{ $current=$iv_ruleSTFunction.current; }
	EOF;

// Rule STFunction
ruleSTFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSTFunctionAccess().getFunctionsFunctionDefinitionParserRuleCall_0());
			}
			lv_functions_0_0=ruleFunctionDefinition
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSTFunctionRule());
				}
				add(
					$current,
					"functions",
					lv_functions_0_0,
					"org.eclipse.foridac.ide.structuredtextfunctioneditor.STFunction.FunctionDefinition");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDefinitionRule()); }
	iv_ruleFunctionDefinition=ruleFunctionDefinition
	{ $current=$iv_ruleFunctionDefinition.current; }
	EOF;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=FUNCTION
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionDefinitionAccess().getFUNCTIONKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.ID");
				}
			)
		)
		(
			otherlv_2=Colon
			{
				newLeafNode(otherlv_2, grammarAccess.getFunctionDefinitionAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionDefinitionRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getFunctionDefinitionAccess().getReturnTypeDataTypeCrossReference_2_1_0());
					}
				)
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0_0());
					}
					lv_varDeclarations_4_0=ruleVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
						}
						add(
							$current,
							"varDeclarations",
							lv_varDeclarations_4_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.VarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getVarTempDeclarationsVarTempDeclarationBlockParserRuleCall_3_1_0());
					}
					lv_varTempDeclarations_5_0=ruleVarTempDeclarationBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
						}
						add(
							$current,
							"varTempDeclarations",
							lv_varTempDeclarations_5_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.VarTempDeclarationBlock");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getVarInpuDeclarationsVarInputDeclarationBlockParserRuleCall_3_2_0());
					}
					lv_varInpuDeclarations_6_0=ruleVarInputDeclarationBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
						}
						add(
							$current,
							"varInpuDeclarations",
							lv_varInpuDeclarations_6_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.VarInputDeclarationBlock");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getVarOutputDeclarationsVarOutputDeclarationBlockParserRuleCall_3_3_0());
					}
					lv_varOutputDeclarations_7_0=ruleVarOutputDeclarationBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
						}
						add(
							$current,
							"varOutputDeclarations",
							lv_varOutputDeclarations_7_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.VarOutputDeclarationBlock");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getCodeSTStatementParserRuleCall_4_0());
				}
				lv_code_8_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
					}
					add(
						$current,
						"code",
						lv_code_8_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9=END_FUNCTION
		{
			newLeafNode(otherlv_9, grammarAccess.getFunctionDefinitionAccess().getEND_FUNCTIONKeyword_5());
		}
	)
;

// Entry rule entryRuleVarTempDeclarationBlock
entryRuleVarTempDeclarationBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarTempDeclarationBlockRule()); }
	iv_ruleVarTempDeclarationBlock=ruleVarTempDeclarationBlock
	{ $current=$iv_ruleVarTempDeclarationBlock.current; }
	EOF;

// Rule VarTempDeclarationBlock
ruleVarTempDeclarationBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationBlockAction_0(),
					$current);
			}
		)
		otherlv_1=VAR_TEMP
		{
			newLeafNode(otherlv_1, grammarAccess.getVarTempDeclarationBlockAccess().getVAR_TEMPKeyword_1());
		}
		(
			(
				lv_constant_2_0=CONSTANT
				{
					newLeafNode(lv_constant_2_0, grammarAccess.getVarTempDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarTempDeclarationBlockRule());
					}
					setWithLastConsumed($current, "constant", lv_constant_2_0 != null, "CONSTANT");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVarTempDeclarationBlockAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0());
				}
				lv_varDeclarations_3_0=ruleVarDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarTempDeclarationBlockRule());
					}
					add(
						$current,
						"varDeclarations",
						lv_varDeclarations_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.VarDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=END_VAR
		{
			newLeafNode(otherlv_4, grammarAccess.getVarTempDeclarationBlockAccess().getEND_VARKeyword_4());
		}
	)
;

// Entry rule entryRuleVarInputDeclarationBlock
entryRuleVarInputDeclarationBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarInputDeclarationBlockRule()); }
	iv_ruleVarInputDeclarationBlock=ruleVarInputDeclarationBlock
	{ $current=$iv_ruleVarInputDeclarationBlock.current; }
	EOF;

// Rule VarInputDeclarationBlock
ruleVarInputDeclarationBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVarInputDeclarationBlockAccess().getVarDeclarationBlockAction_0(),
					$current);
			}
		)
		otherlv_1=VAR_INPUT
		{
			newLeafNode(otherlv_1, grammarAccess.getVarInputDeclarationBlockAccess().getVAR_INPUTKeyword_1());
		}
		(
			(
				lv_constant_2_0=CONSTANT
				{
					newLeafNode(lv_constant_2_0, grammarAccess.getVarInputDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarInputDeclarationBlockRule());
					}
					setWithLastConsumed($current, "constant", lv_constant_2_0 != null, "CONSTANT");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVarInputDeclarationBlockAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0());
				}
				lv_varDeclarations_3_0=ruleVarDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarInputDeclarationBlockRule());
					}
					add(
						$current,
						"varDeclarations",
						lv_varDeclarations_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.VarDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=END_VAR
		{
			newLeafNode(otherlv_4, grammarAccess.getVarInputDeclarationBlockAccess().getEND_VARKeyword_4());
		}
	)
;

// Entry rule entryRuleVarOutputDeclarationBlock
entryRuleVarOutputDeclarationBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarOutputDeclarationBlockRule()); }
	iv_ruleVarOutputDeclarationBlock=ruleVarOutputDeclarationBlock
	{ $current=$iv_ruleVarOutputDeclarationBlock.current; }
	EOF;

// Rule VarOutputDeclarationBlock
ruleVarOutputDeclarationBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVarOutputDeclarationBlockAccess().getVarDeclarationBlockAction_0(),
					$current);
			}
		)
		otherlv_1=VAR_OUTPUT
		{
			newLeafNode(otherlv_1, grammarAccess.getVarOutputDeclarationBlockAccess().getVAR_OUTPUTKeyword_1());
		}
		(
			(
				lv_constant_2_0=CONSTANT
				{
					newLeafNode(lv_constant_2_0, grammarAccess.getVarOutputDeclarationBlockAccess().getConstantCONSTANTKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarOutputDeclarationBlockRule());
					}
					setWithLastConsumed($current, "constant", lv_constant_2_0 != null, "CONSTANT");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVarOutputDeclarationBlockAccess().getVarDeclarationsVarDeclarationParserRuleCall_3_0());
				}
				lv_varDeclarations_3_0=ruleVarDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarOutputDeclarationBlockRule());
					}
					add(
						$current,
						"varDeclarations",
						lv_varDeclarations_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.VarDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=END_VAR
		{
			newLeafNode(otherlv_4, grammarAccess.getVarOutputDeclarationBlockAccess().getEND_VARKeyword_4());
		}
	)
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current; }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.ID");
				}
			)
		)
		(
			otherlv_1=AT
			{
				newLeafNode(otherlv_1, grammarAccess.getVarDeclarationAccess().getATKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarDeclarationRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getVarDeclarationAccess().getLocatedAtVarDeclarationCrossReference_1_1_0());
					}
				)
			)
		)?
		otherlv_3=Colon
		{
			newLeafNode(otherlv_3, grammarAccess.getVarDeclarationAccess().getColonKeyword_2());
		}
		(
			(
				(
					lv_array_4_0=ARRAY
					{
						newLeafNode(lv_array_4_0, grammarAccess.getVarDeclarationAccess().getArrayARRAYKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarDeclarationRule());
						}
						setWithLastConsumed($current, "array", lv_array_4_0 != null, "ARRAY");
					}
				)
			)
			(
				(
					otherlv_5=LeftSquareBracket
					{
						newLeafNode(otherlv_5, grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_3_1_0_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVarDeclarationAccess().getRangesSTExpressionParserRuleCall_3_1_0_1_0());
							}
							lv_ranges_6_0=ruleSTExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
								}
								add(
									$current,
									"ranges",
									lv_ranges_6_0,
									"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_7=Comma
						{
							newLeafNode(otherlv_7, grammarAccess.getVarDeclarationAccess().getCommaKeyword_3_1_0_2_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getVarDeclarationAccess().getRangesSTExpressionParserRuleCall_3_1_0_2_1_0());
								}
								lv_ranges_8_0=ruleSTExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
									}
									add(
										$current,
										"ranges",
										lv_ranges_8_0,
										"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
					otherlv_9=RightSquareBracket
					{
						newLeafNode(otherlv_9, grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_3_1_0_3());
					}
				)
				    |
				(
					otherlv_10=LeftSquareBracket
					{
						newLeafNode(otherlv_10, grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_3_1_1_0());
					}
					(
						(
							lv_count_11_0=Asterisk
							{
								newLeafNode(lv_count_11_0, grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_3_1_1_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVarDeclarationRule());
								}
								addWithLastConsumed($current, "count", lv_count_11_0, "*");
							}
						)
					)
					(
						otherlv_12=Comma
						{
							newLeafNode(otherlv_12, grammarAccess.getVarDeclarationAccess().getCommaKeyword_3_1_1_2_0());
						}
						(
							(
								lv_count_13_0=Asterisk
								{
									newLeafNode(lv_count_13_0, grammarAccess.getVarDeclarationAccess().getCountAsteriskKeyword_3_1_1_2_1_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getVarDeclarationRule());
									}
									addWithLastConsumed($current, "count", lv_count_13_0, "*");
								}
							)
						)
					)*
					otherlv_14=RightSquareBracket
					{
						newLeafNode(otherlv_14, grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_3_1_1_3());
					}
				)
			)
			otherlv_15=OF
			{
				newLeafNode(otherlv_15, grammarAccess.getVarDeclarationAccess().getOFKeyword_3_2());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarDeclarationRule());
					}
				}
				otherlv_16=RULE_ID
				{
					newLeafNode(otherlv_16, grammarAccess.getVarDeclarationAccess().getTypeLibraryElementCrossReference_4_0());
				}
			)
		)
		(
			otherlv_17=LeftSquareBracket
			{
				newLeafNode(otherlv_17, grammarAccess.getVarDeclarationAccess().getLeftSquareBracketKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclarationAccess().getMaxLengthSTExpressionParserRuleCall_5_1_0());
					}
					lv_maxLength_18_0=ruleSTExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
						}
						set(
							$current,
							"maxLength",
							lv_maxLength_18_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_19=RightSquareBracket
			{
				newLeafNode(otherlv_19, grammarAccess.getVarDeclarationAccess().getRightSquareBracketKeyword_5_2());
			}
		)?
		(
			otherlv_20=ColonEqualsSign
			{
				newLeafNode(otherlv_20, grammarAccess.getVarDeclarationAccess().getColonEqualsSignKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclarationAccess().getDefaultValueInitializerExpressionParserRuleCall_6_1_0());
					}
					lv_defaultValue_21_0=ruleInitializerExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
						}
						set(
							$current,
							"defaultValue",
							lv_defaultValue_21_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.InitializerExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_22=Semicolon
		{
			newLeafNode(otherlv_22, grammarAccess.getVarDeclarationAccess().getSemicolonKeyword_7());
		}
	)
;

// Entry rule entryRuleInitializerExpression
entryRuleInitializerExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitializerExpressionRule()); }
	iv_ruleInitializerExpression=ruleInitializerExpression
	{ $current=$iv_ruleInitializerExpression.current; }
	EOF;

// Rule InitializerExpression
ruleInitializerExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInitializerExpressionAccess().getSTExpressionParserRuleCall_0());
		}
		this_STExpression_0=ruleSTExpression
		{
			$current = $this_STExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInitializerExpressionAccess().getArrayInitializerExpressionParserRuleCall_1());
		}
		this_ArrayInitializerExpression_1=ruleArrayInitializerExpression
		{
			$current = $this_ArrayInitializerExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArrayInitializerExpression
entryRuleArrayInitializerExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayInitializerExpressionRule()); }
	iv_ruleArrayInitializerExpression=ruleArrayInitializerExpression
	{ $current=$iv_ruleArrayInitializerExpression.current; }
	EOF;

// Rule ArrayInitializerExpression
ruleArrayInitializerExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LeftSquareBracket
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayInitializerExpressionAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayInitializerExpressionAccess().getValuesArrayInitElementParserRuleCall_1_0());
				}
				lv_values_1_0=ruleArrayInitElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayInitializerExpressionRule());
					}
					add(
						$current,
						"values",
						lv_values_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.ArrayInitElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=Comma
			{
				newLeafNode(otherlv_2, grammarAccess.getArrayInitializerExpressionAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayInitializerExpressionAccess().getValuesArrayInitElementParserRuleCall_2_1_0());
					}
					lv_values_3_0=ruleArrayInitElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayInitializerExpressionRule());
						}
						add(
							$current,
							"values",
							lv_values_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.ArrayInitElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=RightSquareBracket
		{
			newLeafNode(otherlv_4, grammarAccess.getArrayInitializerExpressionAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleArrayInitElement
entryRuleArrayInitElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayInitElementRule()); }
	iv_ruleArrayInitElement=ruleArrayInitElement
	{ $current=$iv_ruleArrayInitElement.current; }
	EOF;

// Rule ArrayInitElement
ruleArrayInitElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayInitElementAccess().getIndexOrInitExpressionSTExpressionParserRuleCall_0_0());
				}
				lv_indexOrInitExpression_0_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayInitElementRule());
					}
					set(
						$current,
						"indexOrInitExpression",
						lv_indexOrInitExpression_0_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=LeftParenthesis
			{
				newLeafNode(otherlv_1, grammarAccess.getArrayInitElementAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayInitElementAccess().getInitExpressionSTExpressionParserRuleCall_1_1_0());
					}
					lv_initExpression_2_0=ruleSTExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayInitElementRule());
						}
						set(
							$current,
							"initExpression",
							lv_initExpression_2_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=RightParenthesis
			{
				newLeafNode(otherlv_3, grammarAccess.getArrayInitElementAccess().getRightParenthesisKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleSTStatement
entryRuleSTStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTStatementRule()); }
	iv_ruleSTStatement=ruleSTStatement
	{ $current=$iv_ruleSTStatement.current; }
	EOF;

// Rule STStatement
ruleSTStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSTStatementAccess().getSTBranchStatementParserRuleCall_0_0());
			}
			this_STBranchStatement_0=ruleSTBranchStatement
			{
				$current = $this_STBranchStatement_0.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_1=Semicolon
			{
				newLeafNode(otherlv_1, grammarAccess.getSTStatementAccess().getSemicolonKeyword_0_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getSTStatementAccess().getSTLoopStatementParserRuleCall_1_0());
			}
			this_STLoopStatement_2=ruleSTLoopStatement
			{
				$current = $this_STLoopStatement_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=Semicolon
			{
				newLeafNode(otherlv_3, grammarAccess.getSTStatementAccess().getSemicolonKeyword_1_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getSTStatementAccess().getSTAssignmentStatementParserRuleCall_2_0());
			}
			this_STAssignmentStatement_4=ruleSTAssignmentStatement
			{
				$current = $this_STAssignmentStatement_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=Semicolon
			{
				newLeafNode(otherlv_5, grammarAccess.getSTStatementAccess().getSemicolonKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTStatementAccess().getSTNopAction_3_0(),
						$current);
				}
			)
			otherlv_7=Semicolon
			{
				newLeafNode(otherlv_7, grammarAccess.getSTStatementAccess().getSemicolonKeyword_3_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTStatementAccess().getSTReturnAction_4_0(),
						$current);
				}
			)
			otherlv_9=RETURN
			{
				newLeafNode(otherlv_9, grammarAccess.getSTStatementAccess().getRETURNKeyword_4_1());
			}
			otherlv_10=Semicolon
			{
				newLeafNode(otherlv_10, grammarAccess.getSTStatementAccess().getSemicolonKeyword_4_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTStatementAccess().getSTContinueAction_5_0(),
						$current);
				}
			)
			otherlv_12=CONTINUE
			{
				newLeafNode(otherlv_12, grammarAccess.getSTStatementAccess().getCONTINUEKeyword_5_1());
			}
			otherlv_13=Semicolon
			{
				newLeafNode(otherlv_13, grammarAccess.getSTStatementAccess().getSemicolonKeyword_5_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTStatementAccess().getSTExitAction_6_0(),
						$current);
				}
			)
			otherlv_15=EXIT
			{
				newLeafNode(otherlv_15, grammarAccess.getSTStatementAccess().getEXITKeyword_6_1());
			}
			otherlv_16=Semicolon
			{
				newLeafNode(otherlv_16, grammarAccess.getSTStatementAccess().getSemicolonKeyword_6_2());
			}
		)
	)
;

// Entry rule entryRuleSTAssignmentStatement
entryRuleSTAssignmentStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTAssignmentStatementRule()); }
	iv_ruleSTAssignmentStatement=ruleSTAssignmentStatement
	{ $current=$iv_ruleSTAssignmentStatement.current; }
	EOF;

// Rule STAssignmentStatement
ruleSTAssignmentStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSTAssignmentStatementRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getSTAssignmentStatementAccess().getLhsVarDeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1=ColonEqualsSign
		{
			newLeafNode(otherlv_1, grammarAccess.getSTAssignmentStatementAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTAssignmentStatementAccess().getRhsSTExpressionParserRuleCall_2_0());
				}
				lv_rhs_2_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTAssignmentStatementRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_2_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSTBranchStatement
entryRuleSTBranchStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTBranchStatementRule()); }
	iv_ruleSTBranchStatement=ruleSTBranchStatement
	{ $current=$iv_ruleSTBranchStatement.current; }
	EOF;

// Rule STBranchStatement
ruleSTBranchStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTBranchStatementAccess().getSTIfStatmentParserRuleCall_0());
		}
		this_STIfStatment_0=ruleSTIfStatment
		{
			$current = $this_STIfStatment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTBranchStatementAccess().getSTCaseStatementParserRuleCall_1());
		}
		this_STCaseStatement_1=ruleSTCaseStatement
		{
			$current = $this_STCaseStatement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSTIfStatment
entryRuleSTIfStatment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTIfStatmentRule()); }
	iv_ruleSTIfStatment=ruleSTIfStatment
	{ $current=$iv_ruleSTIfStatment.current; }
	EOF;

// Rule STIfStatment
ruleSTIfStatment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=IF
		{
			newLeafNode(otherlv_0, grammarAccess.getSTIfStatmentAccess().getIFKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTIfStatmentAccess().getConditionSTExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTIfStatmentRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=THEN
		{
			newLeafNode(otherlv_2, grammarAccess.getSTIfStatmentAccess().getTHENKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTIfStatmentAccess().getStatementsSTStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTIfStatmentRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSTIfStatmentAccess().getElseifsSTElseIfPartParserRuleCall_4_0());
				}
				lv_elseifs_4_0=ruleSTElseIfPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTIfStatmentRule());
					}
					add(
						$current,
						"elseifs",
						lv_elseifs_4_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STElseIfPart");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSTIfStatmentAccess().getElseSTElsePartParserRuleCall_5_0());
				}
				lv_else_5_0=ruleSTElsePart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTIfStatmentRule());
					}
					set(
						$current,
						"else",
						lv_else_5_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STElsePart");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_6=END_IF
		{
			newLeafNode(otherlv_6, grammarAccess.getSTIfStatmentAccess().getEND_IFKeyword_6());
		}
	)
;

// Entry rule entryRuleSTElseIfPart
entryRuleSTElseIfPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTElseIfPartRule()); }
	iv_ruleSTElseIfPart=ruleSTElseIfPart
	{ $current=$iv_ruleSTElseIfPart.current; }
	EOF;

// Rule STElseIfPart
ruleSTElseIfPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=ELSIF
		{
			newLeafNode(otherlv_0, grammarAccess.getSTElseIfPartAccess().getELSIFKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTElseIfPartAccess().getConditionSTExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTElseIfPartRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=THEN
		{
			newLeafNode(otherlv_2, grammarAccess.getSTElseIfPartAccess().getTHENKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTElseIfPartAccess().getStatementsSTStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTElseIfPartRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSTCaseStatement
entryRuleSTCaseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTCaseStatementRule()); }
	iv_ruleSTCaseStatement=ruleSTCaseStatement
	{ $current=$iv_ruleSTCaseStatement.current; }
	EOF;

// Rule STCaseStatement
ruleSTCaseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=CASE
		{
			newLeafNode(otherlv_0, grammarAccess.getSTCaseStatementAccess().getCASEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTCaseStatementAccess().getSelectorSTExpressionParserRuleCall_1_0());
				}
				lv_selector_1_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTCaseStatementRule());
					}
					set(
						$current,
						"selector",
						lv_selector_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=OF
		{
			newLeafNode(otherlv_2, grammarAccess.getSTCaseStatementAccess().getOFKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTCaseStatementAccess().getCasesSTCaseCasesParserRuleCall_3_0());
				}
				lv_cases_3_0=ruleSTCaseCases
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTCaseStatementRule());
					}
					add(
						$current,
						"cases",
						lv_cases_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STCaseCases");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getSTCaseStatementAccess().getElseSTElsePartParserRuleCall_4_0());
				}
				lv_else_4_0=ruleSTElsePart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTCaseStatementRule());
					}
					set(
						$current,
						"else",
						lv_else_4_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STElsePart");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=END_CASE
		{
			newLeafNode(otherlv_5, grammarAccess.getSTCaseStatementAccess().getEND_CASEKeyword_5());
		}
	)
;

// Entry rule entryRuleSTCaseCases
entryRuleSTCaseCases returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTCaseCasesRule()); }
	iv_ruleSTCaseCases=ruleSTCaseCases
	{ $current=$iv_ruleSTCaseCases.current; }
	EOF;

// Rule STCaseCases
ruleSTCaseCases returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_0_0());
				}
				lv_conditions_0_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTCaseCasesRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_0_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=Comma
			{
				newLeafNode(otherlv_1, grammarAccess.getSTCaseCasesAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSTCaseCasesAccess().getConditionsSTExpressionParserRuleCall_1_1_0());
					}
					lv_conditions_2_0=ruleSTExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTCaseCasesRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_2_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_3=Colon
		{
			newLeafNode(otherlv_3, grammarAccess.getSTCaseCasesAccess().getColonKeyword_2());
		}
		(
			((
				ruleSTStatement
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getSTCaseCasesAccess().getStatementsSTStatementParserRuleCall_3_0());
				}
				lv_statements_4_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTCaseCasesRule());
					}
					add(
						$current,
						"statements",
						lv_statements_4_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSTElsePart
entryRuleSTElsePart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTElsePartRule()); }
	iv_ruleSTElsePart=ruleSTElsePart
	{ $current=$iv_ruleSTElsePart.current; }
	EOF;

// Rule STElsePart
ruleSTElsePart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSTElsePartAccess().getSTElsePartAction_0(),
					$current);
			}
		)
		otherlv_1=ELSE
		{
			newLeafNode(otherlv_1, grammarAccess.getSTElsePartAccess().getELSEKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTElsePartAccess().getStatementsSTStatementParserRuleCall_2_0());
				}
				lv_statements_2_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTElsePartRule());
					}
					add(
						$current,
						"statements",
						lv_statements_2_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSTLoopStatement
entryRuleSTLoopStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTLoopStatementRule()); }
	iv_ruleSTLoopStatement=ruleSTLoopStatement
	{ $current=$iv_ruleSTLoopStatement.current; }
	EOF;

// Rule STLoopStatement
ruleSTLoopStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTLoopStatementAccess().getSTForStatementParserRuleCall_0());
		}
		this_STForStatement_0=ruleSTForStatement
		{
			$current = $this_STForStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTLoopStatementAccess().getSTWhileStatementParserRuleCall_1());
		}
		this_STWhileStatement_1=ruleSTWhileStatement
		{
			$current = $this_STWhileStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTLoopStatementAccess().getSTRepeatStatementParserRuleCall_2());
		}
		this_STRepeatStatement_2=ruleSTRepeatStatement
		{
			$current = $this_STRepeatStatement_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSTForStatement
entryRuleSTForStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTForStatementRule()); }
	iv_ruleSTForStatement=ruleSTForStatement
	{ $current=$iv_ruleSTForStatement.current; }
	EOF;

// Rule STForStatement
ruleSTForStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=FOR
		{
			newLeafNode(otherlv_0, grammarAccess.getSTForStatementAccess().getFORKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTForStatementAccess().getForSTExpressionParserRuleCall_1_0());
				}
				lv_for_1_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTForStatementRule());
					}
					set(
						$current,
						"for",
						lv_for_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=TO
		{
			newLeafNode(otherlv_2, grammarAccess.getSTForStatementAccess().getTOKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTForStatementAccess().getToSTExpressionParserRuleCall_3_0());
				}
				lv_to_3_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTForStatementRule());
					}
					set(
						$current,
						"to",
						lv_to_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=BY
			{
				newLeafNode(otherlv_4, grammarAccess.getSTForStatementAccess().getBYKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSTForStatementAccess().getBySTExpressionParserRuleCall_4_1_0());
					}
					lv_by_5_0=ruleSTExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTForStatementRule());
						}
						set(
							$current,
							"by",
							lv_by_5_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6=DO
		{
			newLeafNode(otherlv_6, grammarAccess.getSTForStatementAccess().getDOKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTForStatementAccess().getStatementsSTStatementParserRuleCall_6_0());
				}
				lv_statements_7_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTForStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_7_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8=END_FOR
		{
			newLeafNode(otherlv_8, grammarAccess.getSTForStatementAccess().getEND_FORKeyword_7());
		}
	)
;

// Entry rule entryRuleSTWhileStatement
entryRuleSTWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTWhileStatementRule()); }
	iv_ruleSTWhileStatement=ruleSTWhileStatement
	{ $current=$iv_ruleSTWhileStatement.current; }
	EOF;

// Rule STWhileStatement
ruleSTWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=WHILE
		{
			newLeafNode(otherlv_0, grammarAccess.getSTWhileStatementAccess().getWHILEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTWhileStatementAccess().getConditionSTExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTWhileStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=DO
		{
			newLeafNode(otherlv_2, grammarAccess.getSTWhileStatementAccess().getDOKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTWhileStatementAccess().getStatementsSTStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTWhileStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=END_WHILE
		{
			newLeafNode(otherlv_4, grammarAccess.getSTWhileStatementAccess().getEND_WHILEKeyword_4());
		}
	)
;

// Entry rule entryRuleSTRepeatStatement
entryRuleSTRepeatStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTRepeatStatementRule()); }
	iv_ruleSTRepeatStatement=ruleSTRepeatStatement
	{ $current=$iv_ruleSTRepeatStatement.current; }
	EOF;

// Rule STRepeatStatement
ruleSTRepeatStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=REPEAT
		{
			newLeafNode(otherlv_0, grammarAccess.getSTRepeatStatementAccess().getREPEATKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTRepeatStatementAccess().getStatementsSTStatementParserRuleCall_1_0());
				}
				lv_statements_1_0=ruleSTStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTRepeatStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2=UNTIL
		{
			newLeafNode(otherlv_2, grammarAccess.getSTRepeatStatementAccess().getUNTILKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTRepeatStatementAccess().getConditionSTExpressionParserRuleCall_3_0());
				}
				lv_condition_3_0=ruleSTExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTRepeatStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=END_REPEAT
		{
			newLeafNode(otherlv_4, grammarAccess.getSTRepeatStatementAccess().getEND_REPEATKeyword_4());
		}
	)
;

// Entry rule entryRuleSTExpression
entryRuleSTExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTExpressionRule()); }
	iv_ruleSTExpression=ruleSTExpression
	{ $current=$iv_ruleSTExpression.current; }
	EOF;

// Rule STExpression
ruleSTExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getSTExpressionAccess().getSTSubrangeExpressionParserRuleCall());
	}
	this_STSubrangeExpression_0=ruleSTSubrangeExpression
	{
		$current = $this_STSubrangeExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSTSubrangeExpression
entryRuleSTSubrangeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTSubrangeExpressionRule()); }
	iv_ruleSTSubrangeExpression=ruleSTSubrangeExpression
	{ $current=$iv_ruleSTSubrangeExpression.current; }
	EOF;

// Rule STSubrangeExpression
ruleSTSubrangeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTSubrangeExpressionAccess().getSTOrExpressionParserRuleCall_0());
		}
		this_STOrExpression_0=ruleSTOrExpression
		{
			$current = $this_STOrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTSubrangeExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTSubrangeExpressionAccess().getOpSubrangeOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleSubrangeOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTSubrangeExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.SubrangeOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTSubrangeExpressionAccess().getRightSTOrExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTSubrangeExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTOrExpression
entryRuleSTOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTOrExpressionRule()); }
	iv_ruleSTOrExpression=ruleSTOrExpression
	{ $current=$iv_ruleSTOrExpression.current; }
	EOF;

// Rule STOrExpression
ruleSTOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTOrExpressionAccess().getSTXorExpressionParserRuleCall_0());
		}
		this_STXorExpression_0=ruleSTXorExpression
		{
			$current = $this_STXorExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTOrExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTOrExpressionAccess().getOpOrOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleOrOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTOrExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.OrOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTOrExpressionAccess().getRightSTXorExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTXorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STXorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTXorExpression
entryRuleSTXorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTXorExpressionRule()); }
	iv_ruleSTXorExpression=ruleSTXorExpression
	{ $current=$iv_ruleSTXorExpression.current; }
	EOF;

// Rule STXorExpression
ruleSTXorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTXorExpressionAccess().getSTAndExpressionParserRuleCall_0());
		}
		this_STAndExpression_0=ruleSTAndExpression
		{
			$current = $this_STAndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTXorExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTXorExpressionAccess().getOpXorOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleXorOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTXorExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.XorOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTXorExpressionAccess().getRightSTAndExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTXorExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STAndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTAndExpression
entryRuleSTAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTAndExpressionRule()); }
	iv_ruleSTAndExpression=ruleSTAndExpression
	{ $current=$iv_ruleSTAndExpression.current; }
	EOF;

// Rule STAndExpression
ruleSTAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTAndExpressionAccess().getSTEqualityExpressionParserRuleCall_0());
		}
		this_STEqualityExpression_0=ruleSTEqualityExpression
		{
			$current = $this_STEqualityExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTAndExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTAndExpressionAccess().getOpAndOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleAndOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTAndExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.AndOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTAndExpressionAccess().getRightSTEqualityExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTEqualityExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STEqualityExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTEqualityExpression
entryRuleSTEqualityExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTEqualityExpressionRule()); }
	iv_ruleSTEqualityExpression=ruleSTEqualityExpression
	{ $current=$iv_ruleSTEqualityExpression.current; }
	EOF;

// Rule STEqualityExpression
ruleSTEqualityExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTEqualityExpressionAccess().getSTComparisonExpressionParserRuleCall_0());
		}
		this_STComparisonExpression_0=ruleSTComparisonExpression
		{
			$current = $this_STComparisonExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTEqualityExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleEqualityOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTEqualityExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.EqualityOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTEqualityExpressionAccess().getRightSTComparisonExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTComparisonExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTEqualityExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STComparisonExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTComparisonExpression
entryRuleSTComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTComparisonExpressionRule()); }
	iv_ruleSTComparisonExpression=ruleSTComparisonExpression
	{ $current=$iv_ruleSTComparisonExpression.current; }
	EOF;

// Rule STComparisonExpression
ruleSTComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTComparisonExpressionAccess().getSTAddSubExpressionParserRuleCall_0());
		}
		this_STAddSubExpression_0=ruleSTAddSubExpression
		{
			$current = $this_STAddSubExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTComparisonExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTComparisonExpressionAccess().getOpCompareOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleCompareOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTComparisonExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.CompareOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTComparisonExpressionAccess().getRightSTAddSubExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTAddSubExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTComparisonExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STAddSubExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTAddSubExpression
entryRuleSTAddSubExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTAddSubExpressionRule()); }
	iv_ruleSTAddSubExpression=ruleSTAddSubExpression
	{ $current=$iv_ruleSTAddSubExpression.current; }
	EOF;

// Rule STAddSubExpression
ruleSTAddSubExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTAddSubExpressionAccess().getSTMulDivModExpressionParserRuleCall_0());
		}
		this_STMulDivModExpression_0=ruleSTMulDivModExpression
		{
			$current = $this_STMulDivModExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTAddSubExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTAddSubExpressionAccess().getOpAddSubOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleAddSubOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTAddSubExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.AddSubOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTAddSubExpressionAccess().getRightSTMulDivModExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTMulDivModExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTAddSubExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STMulDivModExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTMulDivModExpression
entryRuleSTMulDivModExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTMulDivModExpressionRule()); }
	iv_ruleSTMulDivModExpression=ruleSTMulDivModExpression
	{ $current=$iv_ruleSTMulDivModExpression.current; }
	EOF;

// Rule STMulDivModExpression
ruleSTMulDivModExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTMulDivModExpressionAccess().getSTPowerExpressionParserRuleCall_0());
		}
		this_STPowerExpression_0=ruleSTPowerExpression
		{
			$current = $this_STPowerExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTMulDivModExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTMulDivModExpressionAccess().getOpMulDivModOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=ruleMulDivModOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTMulDivModExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.MulDivModOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTMulDivModExpressionAccess().getRightSTPowerExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTPowerExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTMulDivModExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STPowerExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTPowerExpression
entryRuleSTPowerExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTPowerExpressionRule()); }
	iv_ruleSTPowerExpression=ruleSTPowerExpression
	{ $current=$iv_ruleSTPowerExpression.current; }
	EOF;

// Rule STPowerExpression
ruleSTPowerExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTPowerExpressionAccess().getSTSignumExpressionParserRuleCall_0());
		}
		this_STSignumExpression_0=ruleSTSignumExpression
		{
			$current = $this_STSignumExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSTPowerExpressionAccess().getSTBinaryExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSTPowerExpressionAccess().getOpPowerOperatorEnumRuleCall_1_0_1_0());
						}
						lv_op_2_0=rulePowerOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSTPowerExpressionRule());
							}
							set(
								$current,
								"op",
								lv_op_2_0,
								"org.eclipse.fordiac.ide.structuredtextcore.STCore.PowerOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTPowerExpressionAccess().getRightSTSignumExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSTSignumExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTPowerExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STSignumExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSTSignumExpression
entryRuleSTSignumExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTSignumExpressionRule()); }
	iv_ruleSTSignumExpression=ruleSTSignumExpression
	{ $current=$iv_ruleSTSignumExpression.current; }
	EOF;

// Rule STSignumExpression
ruleSTSignumExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTSignumExpressionAccess().getSTLiteralExpressionsParserRuleCall_0());
		}
		this_STLiteralExpressions_0=ruleSTLiteralExpressions
		{
			$current = $this_STLiteralExpressions_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTSignumExpressionAccess().getSTSelectionExpressionParserRuleCall_1());
		}
		this_STSelectionExpression_1=ruleSTSelectionExpression
		{
			$current = $this_STSelectionExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTSignumExpressionAccess().getSTUnaryExpressionAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTSignumExpressionAccess().getOpUnaryOperatorEnumRuleCall_2_1_0());
					}
					lv_op_3_0=ruleUnaryOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTSignumExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.UnaryOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTSignumExpressionAccess().getExpressionSTSelectionExpressionParserRuleCall_2_2_0());
					}
					lv_expression_4_0=ruleSTSelectionExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTSignumExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_4_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STSelectionExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSTSelectionExpression
entryRuleSTSelectionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTSelectionExpressionRule()); }
	iv_ruleSTSelectionExpression=ruleSTSelectionExpression
	{ $current=$iv_ruleSTSelectionExpression.current; }
	EOF;

// Rule STSelectionExpression
ruleSTSelectionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTSelectionExpressionAccess().getSTAtomicExpressionParserRuleCall_0());
		}
		this_STAtomicExpression_0=ruleSTAtomicExpression
		{
			$current = $this_STAtomicExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSTSelectionExpressionAccess().getSTMemberSelectionReceiverAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						(
							lv_structAccess_2_0=FullStop
							{
								newLeafNode(lv_structAccess_2_0, grammarAccess.getSTSelectionExpressionAccess().getStructAccessFullStopKeyword_1_1_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getSTSelectionExpressionRule());
								}
								setWithLastConsumed($current, "structAccess", lv_structAccess_2_0 != null, ".");
							}
						)
					)
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getSTSelectionExpressionRule());
								}
							}
							otherlv_3=RULE_ID
							{
								newLeafNode(otherlv_3, grammarAccess.getSTSelectionExpressionAccess().getMemberVarDeclarationCrossReference_1_1_0_1_0());
							}
						)
					)
				)
				    |
				(
					(
						(
							lv_arrayAccess_4_0=LeftSquareBracket
							{
								newLeafNode(lv_arrayAccess_4_0, grammarAccess.getSTSelectionExpressionAccess().getArrayAccessLeftSquareBracketKeyword_1_1_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getSTSelectionExpressionRule());
								}
								setWithLastConsumed($current, "arrayAccess", lv_arrayAccess_4_0 != null, "[");
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getSTSelectionExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_1_1_0());
							}
							lv_index_5_0=ruleSTExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSTSelectionExpressionRule());
								}
								add(
									$current,
									"index",
									lv_index_5_0,
									"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_6=Comma
						{
							newLeafNode(otherlv_6, grammarAccess.getSTSelectionExpressionAccess().getCommaKeyword_1_1_1_2_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getSTSelectionExpressionAccess().getIndexSTExpressionParserRuleCall_1_1_1_2_1_0());
								}
								lv_index_7_0=ruleSTExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getSTSelectionExpressionRule());
									}
									add(
										$current,
										"index",
										lv_index_7_0,
										"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
					otherlv_8=RightSquareBracket
					{
						newLeafNode(otherlv_8, grammarAccess.getSTSelectionExpressionAccess().getRightSquareBracketKeyword_1_1_1_3());
					}
				)
			)
			(
				(
					((
						LeftParenthesis
					)
					)=>
					(
						lv_poeInvocation_9_0=LeftParenthesis
						{
							newLeafNode(lv_poeInvocation_9_0, grammarAccess.getSTSelectionExpressionAccess().getPoeInvocationLeftParenthesisKeyword_1_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSTSelectionExpressionRule());
							}
							setWithLastConsumed($current, "poeInvocation", lv_poeInvocation_9_0 != null, "(");
						}
					)
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getSTSelectionExpressionAccess().getParametersSTExpressionParserRuleCall_1_2_1_0_0());
							}
							lv_parameters_10_0=ruleSTExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSTSelectionExpressionRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_10_0,
									"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_11=Comma
						{
							newLeafNode(otherlv_11, grammarAccess.getSTSelectionExpressionAccess().getCommaKeyword_1_2_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getSTSelectionExpressionAccess().getParametersSTExpressionParserRuleCall_1_2_1_1_1_0());
								}
								lv_parameters_12_0=ruleSTExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getSTSelectionExpressionRule());
									}
									add(
										$current,
										"parameters",
										lv_parameters_12_0,
										"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_13=RightParenthesis
				{
					newLeafNode(otherlv_13, grammarAccess.getSTSelectionExpressionAccess().getRightParenthesisKeyword_1_2_2());
				}
			)?
			(
				((
					ruleMultibitPartialAccess
				)
				)=>
				(
					{
						newCompositeNode(grammarAccess.getSTSelectionExpressionAccess().getBitaccessorMultibitPartialAccessParserRuleCall_1_3_0());
					}
					lv_bitaccessor_14_0=ruleMultibitPartialAccess
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTSelectionExpressionRule());
						}
						set(
							$current,
							"bitaccessor",
							lv_bitaccessor_14_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.MultibitPartialAccess");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)*
	)
;

// Entry rule entryRuleMultibitPartialAccess
entryRuleMultibitPartialAccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultibitPartialAccessRule()); }
	iv_ruleMultibitPartialAccess=ruleMultibitPartialAccess
	{ $current=$iv_ruleMultibitPartialAccess.current; }
	EOF;

// Rule MultibitPartialAccess
ruleMultibitPartialAccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultibitPartialAccessAccess().getAccessSpecifierMultiBitAccessSpecifierEnumRuleCall_0_0());
				}
				lv_accessSpecifier_0_0=ruleMultiBitAccessSpecifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultibitPartialAccessRule());
					}
					set(
						$current,
						"accessSpecifier",
						lv_accessSpecifier_0_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.MultiBitAccessSpecifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_index_1_0=RULE_INT
				{
					newLeafNode(lv_index_1_0, grammarAccess.getMultibitPartialAccessAccess().getIndexINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultibitPartialAccessRule());
					}
					setWithLastConsumed(
						$current,
						"index",
						lv_index_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleSTAtomicExpression
entryRuleSTAtomicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTAtomicExpressionRule()); }
	iv_ruleSTAtomicExpression=ruleSTAtomicExpression
	{ $current=$iv_ruleSTAtomicExpression.current; }
	EOF;

// Rule STAtomicExpression
ruleSTAtomicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=LeftParenthesis
			{
				newLeafNode(otherlv_0, grammarAccess.getSTAtomicExpressionAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getSTAtomicExpressionAccess().getSTExpressionParserRuleCall_0_1());
			}
			this_STExpression_1=ruleSTExpression
			{
				$current = $this_STExpression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=RightParenthesis
			{
				newLeafNode(otherlv_2, grammarAccess.getSTAtomicExpressionAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTAtomicExpressionAccess().getSTSymbolAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSTAtomicExpressionRule());
							}
						}
						otherlv_4=RULE_ID
						{
							newLeafNode(otherlv_4, grammarAccess.getSTAtomicExpressionAccess().getTypeDataTypeCrossReference_1_1_0_0());
						}
					)
				)
				otherlv_5=NumberSign
				{
					newLeafNode(otherlv_5, grammarAccess.getSTAtomicExpressionAccess().getNumberSignKeyword_1_1_1());
				}
			)?
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSTAtomicExpressionRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getSTAtomicExpressionAccess().getSymbolVarDeclarationCrossReference_1_2_0());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTAtomicExpressionAccess().getBitaccessorMultibitPartialAccessParserRuleCall_1_3_0());
					}
					lv_bitaccessor_7_0=ruleMultibitPartialAccess
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTAtomicExpressionRule());
						}
						set(
							$current,
							"bitaccessor",
							lv_bitaccessor_7_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.MultibitPartialAccess");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					((
						LeftParenthesis
					)
					)=>
					(
						lv_poeInvocation_8_0=LeftParenthesis
						{
							newLeafNode(lv_poeInvocation_8_0, grammarAccess.getSTAtomicExpressionAccess().getPoeInvocationLeftParenthesisKeyword_1_4_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSTAtomicExpressionRule());
							}
							setWithLastConsumed($current, "poeInvocation", lv_poeInvocation_8_0 != null, "(");
						}
					)
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getSTAtomicExpressionAccess().getParametersSTExpressionParserRuleCall_1_4_1_0_0());
							}
							lv_parameters_9_0=ruleSTExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSTAtomicExpressionRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_9_0,
									"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_10=Comma
						{
							newLeafNode(otherlv_10, grammarAccess.getSTAtomicExpressionAccess().getCommaKeyword_1_4_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getSTAtomicExpressionAccess().getParametersSTExpressionParserRuleCall_1_4_1_1_1_0());
								}
								lv_parameters_11_0=ruleSTExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getSTAtomicExpressionRule());
									}
									add(
										$current,
										"parameters",
										lv_parameters_11_0,
										"org.eclipse.fordiac.ide.structuredtextcore.STCore.STExpression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_12=RightParenthesis
				{
					newLeafNode(otherlv_12, grammarAccess.getSTAtomicExpressionAccess().getRightParenthesisKeyword_1_4_2());
				}
			)?
		)
	)
;

// Entry rule entryRuleSTLiteralExpressions
entryRuleSTLiteralExpressions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTLiteralExpressionsRule()); }
	iv_ruleSTLiteralExpressions=ruleSTLiteralExpressions
	{ $current=$iv_ruleSTLiteralExpressions.current; }
	EOF;

// Rule STLiteralExpressions
ruleSTLiteralExpressions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTLiteralExpressionsAccess().getSTBoolLiteralAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTLiteralExpressionsAccess().getBoolLiteralBOOL_LITERALParserRuleCall_0_1_0());
					}
					lv_boolLiteral_1_0=ruleBOOL_LITERAL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTLiteralExpressionsRule());
						}
						set(
							$current,
							"boolLiteral",
							lv_boolLiteral_1_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.BOOL_LITERAL");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTLiteralExpressionsAccess().getSTNumericLiteralAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTLiteralExpressionsAccess().getNumericLiteralNUMERIC_LITERALParserRuleCall_1_1_0());
					}
					lv_numericLiteral_3_0=ruleNUMERIC_LITERAL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTLiteralExpressionsRule());
						}
						set(
							$current,
							"numericLiteral",
							lv_numericLiteral_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.NUMERIC_LITERAL");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTLiteralExpressionsAccess().getSTDateLiteralAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTLiteralExpressionsAccess().getDateLiteralDATE_LITERALParserRuleCall_2_1_0());
					}
					lv_dateLiteral_5_0=ruleDATE_LITERAL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTLiteralExpressionsRule());
						}
						set(
							$current,
							"dateLiteral",
							lv_dateLiteral_5_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.DATE_LITERAL");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTLiteralExpressionsAccess().getSTTimeLiteralAction_3_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTLiteralExpressionsAccess().getTimeLiteralTIME_LITERALParserRuleCall_3_1_0());
					}
					lv_timeLiteral_7_0=ruleTIME_LITERAL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTLiteralExpressionsRule());
						}
						set(
							$current,
							"timeLiteral",
							lv_timeLiteral_7_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.TIME_LITERAL");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTLiteralExpressionsAccess().getSTTimeOfDayLiteralAction_4_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTLiteralExpressionsAccess().getTimeOfDayLiteralTIME_OF_DAY_LITERALParserRuleCall_4_1_0());
					}
					lv_timeOfDayLiteral_9_0=ruleTIME_OF_DAY_LITERAL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTLiteralExpressionsRule());
						}
						set(
							$current,
							"timeOfDayLiteral",
							lv_timeOfDayLiteral_9_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.TIME_OF_DAY_LITERAL");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTLiteralExpressionsAccess().getSTDateAndTimeLiteralAction_5_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTLiteralExpressionsAccess().getTimeLiteralDATE_AND_TIME_LITERALParserRuleCall_5_1_0());
					}
					lv_timeLiteral_11_0=ruleDATE_AND_TIME_LITERAL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTLiteralExpressionsRule());
						}
						set(
							$current,
							"timeLiteral",
							lv_timeLiteral_11_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.DATE_AND_TIME_LITERAL");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getSTLiteralExpressionsAccess().getSTStringLiteralAction_6_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSTLiteralExpressionsAccess().getStringLiteralSTRING_LITERALParserRuleCall_6_1_0());
					}
					lv_stringLiteral_13_0=ruleSTRING_LITERAL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSTLiteralExpressionsRule());
						}
						set(
							$current,
							"stringLiteral",
							lv_stringLiteral_13_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.STRING_LITERAL");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleBOOL_LITERAL
entryRuleBOOL_LITERAL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBOOL_LITERALRule()); }
	iv_ruleBOOL_LITERAL=ruleBOOL_LITERAL
	{ $current=$iv_ruleBOOL_LITERAL.current; }
	EOF;

// Rule BOOL_LITERAL
ruleBOOL_LITERAL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_not_0_0=NOT
				{
					newLeafNode(lv_not_0_0, grammarAccess.getBOOL_LITERALAccess().getNotNOTKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBOOL_LITERALRule());
					}
					setWithLastConsumed($current, "not", lv_not_0_0, "NOT");
				}
			)
		)?
		(
			otherlv_1=BOOL
			{
				newLeafNode(otherlv_1, grammarAccess.getBOOL_LITERALAccess().getBOOLKeyword_1());
			}
		)?
		(
			(
				lv_keyWordValue_2_0=RULE_BOOL_VALUES
				{
					newLeafNode(lv_keyWordValue_2_0, grammarAccess.getBOOL_LITERALAccess().getKeyWordValueBOOL_VALUESTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBOOL_LITERALRule());
					}
					setWithLastConsumed(
						$current,
						"keyWordValue",
						lv_keyWordValue_2_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.BOOL_VALUES");
				}
			)
		)
	)
;

// Entry rule entryRuleNUMERIC_LITERAL
entryRuleNUMERIC_LITERAL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNUMERIC_LITERALRule()); }
	iv_ruleNUMERIC_LITERAL=ruleNUMERIC_LITERAL
	{ $current=$iv_ruleNUMERIC_LITERAL.current; }
	EOF;

// Rule NUMERIC_LITERAL
ruleNUMERIC_LITERAL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_not_0_0=NOT
				{
					newLeafNode(lv_not_0_0, grammarAccess.getNUMERIC_LITERALAccess().getNotNOTKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
					}
					setWithLastConsumed($current, "not", lv_not_0_0, "NOT");
				}
			)
		)?
		(
			(
				(
					lv_keyword_1_1=BYTE
					{
						newLeafNode(lv_keyword_1_1, grammarAccess.getNUMERIC_LITERALAccess().getKeywordBYTEKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_1, null);
					}
					    |
					lv_keyword_1_2=WORD
					{
						newLeafNode(lv_keyword_1_2, grammarAccess.getNUMERIC_LITERALAccess().getKeywordWORDKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_2, null);
					}
					    |
					lv_keyword_1_3=DWORD
					{
						newLeafNode(lv_keyword_1_3, grammarAccess.getNUMERIC_LITERALAccess().getKeywordDWORDKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_3, null);
					}
					    |
					lv_keyword_1_4=LWORD
					{
						newLeafNode(lv_keyword_1_4, grammarAccess.getNUMERIC_LITERALAccess().getKeywordLWORDKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_4, null);
					}
					    |
					lv_keyword_1_5=SINT
					{
						newLeafNode(lv_keyword_1_5, grammarAccess.getNUMERIC_LITERALAccess().getKeywordSINTKeyword_1_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_5, null);
					}
					    |
					lv_keyword_1_6=INT
					{
						newLeafNode(lv_keyword_1_6, grammarAccess.getNUMERIC_LITERALAccess().getKeywordINTKeyword_1_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_6, null);
					}
					    |
					lv_keyword_1_7=DINT
					{
						newLeafNode(lv_keyword_1_7, grammarAccess.getNUMERIC_LITERALAccess().getKeywordDINTKeyword_1_0_6());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_7, null);
					}
					    |
					lv_keyword_1_8=LINT
					{
						newLeafNode(lv_keyword_1_8, grammarAccess.getNUMERIC_LITERALAccess().getKeywordLINTKeyword_1_0_7());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_8, null);
					}
					    |
					lv_keyword_1_9=USINT
					{
						newLeafNode(lv_keyword_1_9, grammarAccess.getNUMERIC_LITERALAccess().getKeywordUSINTKeyword_1_0_8());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_9, null);
					}
					    |
					lv_keyword_1_10=UINT
					{
						newLeafNode(lv_keyword_1_10, grammarAccess.getNUMERIC_LITERALAccess().getKeywordUINTKeyword_1_0_9());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_10, null);
					}
					    |
					lv_keyword_1_11=UDINT
					{
						newLeafNode(lv_keyword_1_11, grammarAccess.getNUMERIC_LITERALAccess().getKeywordUDINTKeyword_1_0_10());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_11, null);
					}
					    |
					lv_keyword_1_12=ULINT
					{
						newLeafNode(lv_keyword_1_12, grammarAccess.getNUMERIC_LITERALAccess().getKeywordULINTKeyword_1_0_11());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_12, null);
					}
					    |
					lv_keyword_1_13=REAL
					{
						newLeafNode(lv_keyword_1_13, grammarAccess.getNUMERIC_LITERALAccess().getKeywordREALKeyword_1_0_12());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_13, null);
					}
					    |
					lv_keyword_1_14=LREAL
					{
						newLeafNode(lv_keyword_1_14, grammarAccess.getNUMERIC_LITERALAccess().getKeywordLREALKeyword_1_0_13());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_1_14, null);
					}
				)
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNUMERIC_LITERALAccess().getIntValueINTEGERParserRuleCall_2_0_0());
					}
					lv_intValue_2_0=ruleINTEGER
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNUMERIC_LITERALRule());
						}
						set(
							$current,
							"intValue",
							lv_intValue_2_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.INTEGER");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getNUMERIC_LITERALAccess().getRealValueREALParserRuleCall_2_1_0());
					}
					lv_realValue_3_0=ruleREAL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNUMERIC_LITERALRule());
						}
						set(
							$current,
							"realValue",
							lv_realValue_3_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.REAL");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_hexValue_4_0=RULE_NON_DECIMAL
					{
						newLeafNode(lv_hexValue_4_0, grammarAccess.getNUMERIC_LITERALAccess().getHexValueNON_DECIMALTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNUMERIC_LITERALRule());
						}
						setWithLastConsumed(
							$current,
							"hexValue",
							lv_hexValue_4_0,
							"org.eclipse.fordiac.ide.structuredtextcore.STCore.NON_DECIMAL");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDATE_LITERAL
entryRuleDATE_LITERAL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDATE_LITERALRule()); }
	iv_ruleDATE_LITERAL=ruleDATE_LITERAL
	{ $current=$iv_ruleDATE_LITERAL.current; }
	EOF;

// Rule DATE_LITERAL
ruleDATE_LITERAL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_keyword_0_1=DATE
					{
						newLeafNode(lv_keyword_0_1, grammarAccess.getDATE_LITERALAccess().getKeywordDATEKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDATE_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_1, null);
					}
					    |
					lv_keyword_0_2=LDATE
					{
						newLeafNode(lv_keyword_0_2, grammarAccess.getDATE_LITERALAccess().getKeywordLDATEKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDATE_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_2, null);
					}
					    |
					lv_keyword_0_3=D
					{
						newLeafNode(lv_keyword_0_3, grammarAccess.getDATE_LITERALAccess().getKeywordDKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDATE_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_3, null);
					}
					    |
					lv_keyword_0_4=LD
					{
						newLeafNode(lv_keyword_0_4, grammarAccess.getDATE_LITERALAccess().getKeywordLDKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDATE_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_4, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDATE_LITERALAccess().getValueDATEParserRuleCall_1_0());
				}
				lv_value_1_0=ruleDATE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDATE_LITERALRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.DATE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTIME_LITERAL
entryRuleTIME_LITERAL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTIME_LITERALRule()); }
	iv_ruleTIME_LITERAL=ruleTIME_LITERAL
	{ $current=$iv_ruleTIME_LITERAL.current; }
	EOF;

// Rule TIME_LITERAL
ruleTIME_LITERAL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_keyword_0_1=TIME
					{
						newLeafNode(lv_keyword_0_1, grammarAccess.getTIME_LITERALAccess().getKeywordTIMEKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTIME_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_1, null);
					}
					    |
					lv_keyword_0_2=LTIME
					{
						newLeafNode(lv_keyword_0_2, grammarAccess.getTIME_LITERALAccess().getKeywordLTIMEKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTIME_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_2, null);
					}
					    |
					lv_keyword_0_3=T
					{
						newLeafNode(lv_keyword_0_3, grammarAccess.getTIME_LITERALAccess().getKeywordTKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTIME_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_3, null);
					}
					    |
					lv_keyword_0_4=LT
					{
						newLeafNode(lv_keyword_0_4, grammarAccess.getTIME_LITERALAccess().getKeywordLTKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTIME_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_4, null);
					}
				)
			)
		)
		(
			(
				lv_value_1_0=RULE_TIME
				{
					newLeafNode(lv_value_1_0, grammarAccess.getTIME_LITERALAccess().getValueTIMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTIME_LITERALRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.TIME");
				}
			)
		)
	)
;

// Entry rule entryRuleTIME_OF_DAY_LITERAL
entryRuleTIME_OF_DAY_LITERAL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTIME_OF_DAY_LITERALRule()); }
	iv_ruleTIME_OF_DAY_LITERAL=ruleTIME_OF_DAY_LITERAL
	{ $current=$iv_ruleTIME_OF_DAY_LITERAL.current; }
	EOF;

// Rule TIME_OF_DAY_LITERAL
ruleTIME_OF_DAY_LITERAL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_keyword_0_1=TIME_OF_DAY
					{
						newLeafNode(lv_keyword_0_1, grammarAccess.getTIME_OF_DAY_LITERALAccess().getKeywordTIME_OF_DAYKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTIME_OF_DAY_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_1, null);
					}
					    |
					lv_keyword_0_2=TOD
					{
						newLeafNode(lv_keyword_0_2, grammarAccess.getTIME_OF_DAY_LITERALAccess().getKeywordTODKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTIME_OF_DAY_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_2, null);
					}
					    |
					lv_keyword_0_3=LTOD
					{
						newLeafNode(lv_keyword_0_3, grammarAccess.getTIME_OF_DAY_LITERALAccess().getKeywordLTODKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTIME_OF_DAY_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_3, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTIME_OF_DAY_LITERALAccess().getValueTIME_OF_DAYParserRuleCall_1_0());
				}
				lv_value_1_0=ruleTIME_OF_DAY
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTIME_OF_DAY_LITERALRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.TIME_OF_DAY");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDATE_AND_TIME_LITERAL
entryRuleDATE_AND_TIME_LITERAL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDATE_AND_TIME_LITERALRule()); }
	iv_ruleDATE_AND_TIME_LITERAL=ruleDATE_AND_TIME_LITERAL
	{ $current=$iv_ruleDATE_AND_TIME_LITERAL.current; }
	EOF;

// Rule DATE_AND_TIME_LITERAL
ruleDATE_AND_TIME_LITERAL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_keyword_0_1=DATE_AND_TIME
					{
						newLeafNode(lv_keyword_0_1, grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordDATE_AND_TIMEKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDATE_AND_TIME_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_1, null);
					}
					    |
					lv_keyword_0_2=LDATE_AND_TIME
					{
						newLeafNode(lv_keyword_0_2, grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordLDATE_AND_TIMEKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDATE_AND_TIME_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_2, null);
					}
					    |
					lv_keyword_0_3=DT
					{
						newLeafNode(lv_keyword_0_3, grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordDTKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDATE_AND_TIME_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_3, null);
					}
					    |
					lv_keyword_0_4=LDT
					{
						newLeafNode(lv_keyword_0_4, grammarAccess.getDATE_AND_TIME_LITERALAccess().getKeywordLDTKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDATE_AND_TIME_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_4, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDATE_AND_TIME_LITERALAccess().getDateValueDATEParserRuleCall_1_0());
				}
				lv_dateValue_1_0=ruleDATE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDATE_AND_TIME_LITERALRule());
					}
					set(
						$current,
						"dateValue",
						lv_dateValue_1_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.DATE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=HyphenMinus
		{
			newLeafNode(otherlv_2, grammarAccess.getDATE_AND_TIME_LITERALAccess().getHyphenMinusKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDATE_AND_TIME_LITERALAccess().getTimeOfDayValueTIME_OF_DAYParserRuleCall_3_0());
				}
				lv_timeOfDayValue_3_0=ruleTIME_OF_DAY
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDATE_AND_TIME_LITERALRule());
					}
					set(
						$current,
						"timeOfDayValue",
						lv_timeOfDayValue_3_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.TIME_OF_DAY");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSTRING_LITERAL
entryRuleSTRING_LITERAL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTRING_LITERALRule()); }
	iv_ruleSTRING_LITERAL=ruleSTRING_LITERAL
	{ $current=$iv_ruleSTRING_LITERAL.current; }
	EOF;

// Rule STRING_LITERAL
ruleSTRING_LITERAL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_keyword_0_0=STRING
					{
						newLeafNode(lv_keyword_0_0, grammarAccess.getSTRING_LITERALAccess().getKeywordSTRINGKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSTRING_LITERALRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_0, "STRING#");
					}
				)
			)
			    |
			otherlv_1=WSTRING
			{
				newLeafNode(otherlv_1, grammarAccess.getSTRING_LITERALAccess().getWSTRINGKeyword_0_1());
			}
			    |
			otherlv_2=CHAR
			{
				newLeafNode(otherlv_2, grammarAccess.getSTRING_LITERALAccess().getCHARKeyword_0_2());
			}
			    |
			otherlv_3=WCHAR
			{
				newLeafNode(otherlv_3, grammarAccess.getSTRING_LITERALAccess().getWCHARKeyword_0_3());
			}
		)?
		(
			(
				lv_value_4_0=RULE_STRING
				{
					newLeafNode(lv_value_4_0, grammarAccess.getSTRING_LITERALAccess().getValueSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSTRING_LITERALRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_4_0,
						"org.eclipse.fordiac.ide.structuredtextcore.STCore.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleINTEGER
entryRuleINTEGER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getINTEGERRule()); }
	iv_ruleINTEGER=ruleINTEGER
	{ $current=$iv_ruleINTEGER.current.getText(); }
	EOF;

// Rule INTEGER
ruleINTEGER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=PlusSign
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getINTEGERAccess().getPlusSignKeyword_0_0());
			}
			    |
			kw=HyphenMinus
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getINTEGERAccess().getHyphenMinusKeyword_0_1());
			}
		)?
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getINTEGERAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleREAL
entryRuleREAL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getREALRule()); }
	iv_ruleREAL=ruleREAL
	{ $current=$iv_ruleREAL.current.getText(); }
	EOF;

// Rule REAL
ruleREAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getREALAccess().getINTEGERParserRuleCall_0());
		}
		this_INTEGER_0=ruleINTEGER
		{
			$current.merge(this_INTEGER_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=FullStop
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getREALAccess().getFullStopKeyword_1());
		}
		(
			this_EXT_INT_2=RULE_EXT_INT
			{
				$current.merge(this_EXT_INT_2);
			}
			{
				newLeafNode(this_EXT_INT_2, grammarAccess.getREALAccess().getEXT_INTTerminalRuleCall_2_0());
			}
			    |
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getREALAccess().getINTTerminalRuleCall_2_1());
			}
		)
	)
;

// Entry rule entryRuleDATE
entryRuleDATE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDATERule()); }
	iv_ruleDATE=ruleDATE
	{ $current=$iv_ruleDATE.current.getText(); }
	EOF;

// Rule DATE
ruleDATE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getDATEAccess().getINTTerminalRuleCall_0());
		}
		kw=HyphenMinus
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDATEAccess().getHyphenMinusKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getDATEAccess().getINTTerminalRuleCall_2());
		}
		kw=HyphenMinus
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDATEAccess().getHyphenMinusKeyword_3());
		}
		this_INT_4=RULE_INT
		{
			$current.merge(this_INT_4);
		}
		{
			newLeafNode(this_INT_4, grammarAccess.getDATEAccess().getINTTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleTIME_OF_DAY
entryRuleTIME_OF_DAY returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTIME_OF_DAYRule()); }
	iv_ruleTIME_OF_DAY=ruleTIME_OF_DAY
	{ $current=$iv_ruleTIME_OF_DAY.current.getText(); }
	EOF;

// Rule TIME_OF_DAY
ruleTIME_OF_DAY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getTIME_OF_DAYAccess().getINTTerminalRuleCall_0());
		}
		kw=Colon
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTIME_OF_DAYAccess().getColonKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getTIME_OF_DAYAccess().getINTTerminalRuleCall_2());
		}
		kw=Colon
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTIME_OF_DAYAccess().getColonKeyword_3());
		}
		this_INT_4=RULE_INT
		{
			$current.merge(this_INT_4);
		}
		{
			newLeafNode(this_INT_4, grammarAccess.getTIME_OF_DAYAccess().getINTTerminalRuleCall_4());
		}
		(
			kw=FullStop
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTIME_OF_DAYAccess().getFullStopKeyword_5_0());
			}
			this_INT_6=RULE_INT
			{
				$current.merge(this_INT_6);
			}
			{
				newLeafNode(this_INT_6, grammarAccess.getTIME_OF_DAYAccess().getINTTerminalRuleCall_5_1());
			}
		)?
	)
;

// Rule SubrangeOperator
ruleSubrangeOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=FullStopFullStop
		{
			$current = grammarAccess.getSubrangeOperatorAccess().getRangeEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getSubrangeOperatorAccess().getRangeEnumLiteralDeclaration());
		}
	)
;

// Rule OrOperator
ruleOrOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=OR
		{
			$current = grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration());
		}
	)
;

// Rule XorOperator
ruleXorOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=XOR
		{
			$current = grammarAccess.getXorOperatorAccess().getXOREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getXorOperatorAccess().getXOREnumLiteralDeclaration());
		}
	)
;

// Rule AndOperator
ruleAndOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=AND
			{
				$current = grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Ampersand
			{
				$current = grammarAccess.getAndOperatorAccess().getAMPERSANDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAndOperatorAccess().getAMPERSANDEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule EqualityOperator
ruleEqualityOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=EqualsSign
			{
				$current = grammarAccess.getEqualityOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEqualityOperatorAccess().getEQEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=LessThanSignGreaterThanSign
			{
				$current = grammarAccess.getEqualityOperatorAccess().getNEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEqualityOperatorAccess().getNEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=LessThanSign
			{
				$current = grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=LessThanSignEqualsSign
			{
				$current = grammarAccess.getCompareOperatorAccess().getLEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompareOperatorAccess().getLEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=GreaterThanSign
			{
				$current = grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=GreaterThanSignEqualsSign
			{
				$current = grammarAccess.getCompareOperatorAccess().getGEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCompareOperatorAccess().getGEEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule AddSubOperator
ruleAddSubOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=PlusSign
			{
				$current = grammarAccess.getAddSubOperatorAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAddSubOperatorAccess().getADDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=HyphenMinus
			{
				$current = grammarAccess.getAddSubOperatorAccess().getSUBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAddSubOperatorAccess().getSUBEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MulDivModOperator
ruleMulDivModOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Asterisk
			{
				$current = grammarAccess.getMulDivModOperatorAccess().getMULEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMulDivModOperatorAccess().getMULEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Solidus
			{
				$current = grammarAccess.getMulDivModOperatorAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMulDivModOperatorAccess().getDIVEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=MOD
			{
				$current = grammarAccess.getMulDivModOperatorAccess().getMODEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMulDivModOperatorAccess().getMODEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule PowerOperator
rulePowerOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=AsteriskAsterisk
		{
			$current = grammarAccess.getPowerOperatorAccess().getPOWEREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getPowerOperatorAccess().getPOWEREnumLiteralDeclaration());
		}
	)
;

// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=HyphenMinus
			{
				$current = grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=PlusSign
			{
				$current = grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=NOT
			{
				$current = grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule MultiBitAccessSpecifier
ruleMultiBitAccessSpecifier returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=L
			{
				$current = grammarAccess.getMultiBitAccessSpecifierAccess().getLwordAccessEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMultiBitAccessSpecifierAccess().getLwordAccessEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=D_1
			{
				$current = grammarAccess.getMultiBitAccessSpecifierAccess().getDwordAccessEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMultiBitAccessSpecifierAccess().getDwordAccessEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=W
			{
				$current = grammarAccess.getMultiBitAccessSpecifierAccess().getWordAccessEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMultiBitAccessSpecifierAccess().getWordAccessEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=B
			{
				$current = grammarAccess.getMultiBitAccessSpecifierAccess().getByteAccessEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMultiBitAccessSpecifierAccess().getByteAccessEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4=X
			{
				$current = grammarAccess.getMultiBitAccessSpecifierAccess().getBitAccessEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getMultiBitAccessSpecifierAccess().getBitAccessEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5=FullStop
			{
				$current = grammarAccess.getMultiBitAccessSpecifierAccess().getBitAccessShortcutEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getMultiBitAccessSpecifierAccess().getBitAccessShortcutEnumLiteralDeclaration_5());
			}
		)
	)
;
