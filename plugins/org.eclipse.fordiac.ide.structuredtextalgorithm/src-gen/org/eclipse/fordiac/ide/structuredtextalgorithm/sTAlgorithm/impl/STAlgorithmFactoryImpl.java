/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.fordiac.ide.structuredtextalgorithm.sTAlgorithm.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.eclipse.fordiac.ide.structuredtextalgorithm.sTAlgorithm.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class STAlgorithmFactoryImpl extends EFactoryImpl implements STAlgorithmFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static STAlgorithmFactory init()
  {
    try
    {
      STAlgorithmFactory theSTAlgorithmFactory = (STAlgorithmFactory)EPackage.Registry.INSTANCE.getEFactory(STAlgorithmPackage.eNS_URI);
      if (theSTAlgorithmFactory != null)
      {
        return theSTAlgorithmFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new STAlgorithmFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public STAlgorithmFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case STAlgorithmPackage.ST_ALGORITHMS: return createSTAlgorithms();
      case STAlgorithmPackage.ST_ALGORITHM: return createSTAlgorithm();
      case STAlgorithmPackage.ST_ALGORITHM_BODY: return createSTAlgorithmBody();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STAlgorithms createSTAlgorithms()
  {
    STAlgorithmsImpl stAlgorithms = new STAlgorithmsImpl();
    return stAlgorithms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STAlgorithm createSTAlgorithm()
  {
    STAlgorithmImpl stAlgorithm = new STAlgorithmImpl();
    return stAlgorithm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STAlgorithmBody createSTAlgorithmBody()
  {
    STAlgorithmBodyImpl stAlgorithmBody = new STAlgorithmBodyImpl();
    return stAlgorithmBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STAlgorithmPackage getSTAlgorithmPackage()
  {
    return (STAlgorithmPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static STAlgorithmPackage getPackage()
  {
    return STAlgorithmPackage.eINSTANCE;
  }

} //STAlgorithmFactoryImpl
