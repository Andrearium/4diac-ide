/*
 * generated by Xtext 2.25.0
 */
package org.eclipse.fordiac.ide.structuredtextalgorithm.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.fordiac.ide.structuredtextalgorithm.services.STAlgorithmGrammarAccess;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public abstract class AbstractSTAlgorithmSyntacticSequencer extends AbstractSyntacticSequencer {

	protected STAlgorithmGrammarAccess grammarAccess;
	protected AbstractElementAlias match_STFeatureExpression___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_STPrimaryExpression_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_STPrimaryExpression_LeftParenthesisKeyword_0_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (STAlgorithmGrammarAccess) access;
		match_STFeatureExpression___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSTFeatureExpressionAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getSTFeatureExpressionAccess().getRightParenthesisKeyword_2_2()));
		match_STPrimaryExpression_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getSTPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
		match_STPrimaryExpression_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getSTPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_STFeatureExpression___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_STFeatureExpression___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_STPrimaryExpression_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_STPrimaryExpression_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_STPrimaryExpression_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_STPrimaryExpression_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     feature=[INamedElement|ID] (ambiguity) (rule end)
	 */
	protected void emit_STFeatureExpression___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) feature=[INamedElement|ID]
	 *     (rule start) (ambiguity) op=UnaryOperator
	 *     (rule start) (ambiguity) type=[DataType|STAnyCharsType]
	 *     (rule start) (ambiguity) type=[DataType|STDateAndTimeType]
	 *     (rule start) (ambiguity) type=[DataType|STDateLiteralType]
	 *     (rule start) (ambiguity) type=[DataType|STNumericLiteralType]
	 *     (rule start) (ambiguity) type=[DataType|STTimeLiteralType]
	 *     (rule start) (ambiguity) type=[DataType|STTimeOfDayType]
	 *     (rule start) (ambiguity) value=BoolLiteral
	 *     (rule start) (ambiguity) value=NON_DECIMAL
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {STArrayAccessExpression.receiver=}
	 *     (rule start) (ambiguity) {STBinaryExpression.left=}
	 *     (rule start) (ambiguity) {STMemberAccessExpression.receiver=}
	 */
	protected void emit_STPrimaryExpression_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) op=UnaryOperator
	 *     (rule start) (ambiguity) {STArrayAccessExpression.receiver=}
	 *     (rule start) (ambiguity) {STBinaryExpression.left=}
	 *     (rule start) (ambiguity) {STMemberAccessExpression.receiver=}
	 */
	protected void emit_STPrimaryExpression_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
