/**
 * *******************************************************************************
 *  Copyright (c) 2008 - 2017 Profactor GmbH, TU Wien ACIN, fortiss GmbH
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *    Gerhard Ebenhofer, Alois Zoitl, Ingo Hegny, Monika Wenger, Martin Jobst
 *      - initial API and implementation and/or initial documentation
 * *******************************************************************************
 */
package org.eclipse.fordiac.ide.model.Palette.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.fordiac.ide.model.Palette.util.PaletteAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support
 * Viewers. The adapters generated by this factory convert EMF adapter
 * notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The
 * adapters also support Eclipse property sheets. Note that most of the adapters
 * are shared among multiple instances. <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * 
 * @generated
 */
public class PaletteItemProviderAdapterFactory extends PaletteAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter
	 * factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement
	 * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by
	 * {@link #isFactoryForType isFactoryForType}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public PaletteItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.fordiac.ide.model.Palette.Palette} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected PaletteItemProvider paletteItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.fordiac.ide.model.Palette.Palette}. <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createPaletteAdapter() {
		if (paletteItemProvider == null) {
			paletteItemProvider = new PaletteItemProvider(this);
		}

		return paletteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StringToAdapterTypePaletteEntryMapItemProvider stringToAdapterTypePaletteEntryMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStringToAdapterTypePaletteEntryMapAdapter() {
		if (stringToAdapterTypePaletteEntryMapItemProvider == null) {
			stringToAdapterTypePaletteEntryMapItemProvider = new StringToAdapterTypePaletteEntryMapItemProvider(this);
		}

		return stringToAdapterTypePaletteEntryMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StringToFDeviceTypePaletteEntryMapItemProvider stringToFDeviceTypePaletteEntryMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStringToFDeviceTypePaletteEntryMapAdapter() {
		if (stringToFDeviceTypePaletteEntryMapItemProvider == null) {
			stringToFDeviceTypePaletteEntryMapItemProvider = new StringToFDeviceTypePaletteEntryMapItemProvider(this);
		}

		return stringToFDeviceTypePaletteEntryMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StringToFBTypePaletteEntryMapItemProvider stringToFBTypePaletteEntryMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStringToFBTypePaletteEntryMapAdapter() {
		if (stringToFBTypePaletteEntryMapItemProvider == null) {
			stringToFBTypePaletteEntryMapItemProvider = new StringToFBTypePaletteEntryMapItemProvider(this);
		}

		return stringToFBTypePaletteEntryMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StringToResourceTypeEntryMapItemProvider stringToResourceTypeEntryMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStringToResourceTypeEntryMapAdapter() {
		if (stringToResourceTypeEntryMapItemProvider == null) {
			stringToResourceTypeEntryMapItemProvider = new StringToResourceTypeEntryMapItemProvider(this);
		}

		return stringToResourceTypeEntryMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StringToSegmentTypePaletteEntryMapItemProvider stringToSegmentTypePaletteEntryMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStringToSegmentTypePaletteEntryMapAdapter() {
		if (stringToSegmentTypePaletteEntryMapItemProvider == null) {
			stringToSegmentTypePaletteEntryMapItemProvider = new StringToSegmentTypePaletteEntryMapItemProvider(this);
		}

		return stringToSegmentTypePaletteEntryMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StringToSubApplicationTypePaletteEntryMapItemProvider stringToSubApplicationTypePaletteEntryMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStringToSubApplicationTypePaletteEntryMapAdapter() {
		if (stringToSubApplicationTypePaletteEntryMapItemProvider == null) {
			stringToSubApplicationTypePaletteEntryMapItemProvider = new StringToSubApplicationTypePaletteEntryMapItemProvider(
					this);
		}

		return stringToSubApplicationTypePaletteEntryMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.fordiac.ide.model.Palette.FBTypePaletteEntry} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected FBTypePaletteEntryItemProvider fbTypePaletteEntryItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.fordiac.ide.model.Palette.FBTypePaletteEntry}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createFBTypePaletteEntryAdapter() {
		if (fbTypePaletteEntryItemProvider == null) {
			fbTypePaletteEntryItemProvider = new FBTypePaletteEntryItemProvider(this);
		}

		return fbTypePaletteEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.fordiac.ide.model.Palette.DeviceTypePaletteEntry}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected DeviceTypePaletteEntryItemProvider deviceTypePaletteEntryItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.fordiac.ide.model.Palette.DeviceTypePaletteEntry}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createDeviceTypePaletteEntryAdapter() {
		if (deviceTypePaletteEntryItemProvider == null) {
			deviceTypePaletteEntryItemProvider = new DeviceTypePaletteEntryItemProvider(this);
		}

		return deviceTypePaletteEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.fordiac.ide.model.Palette.ResourceTypeEntry} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ResourceTypeEntryItemProvider resourceTypeEntryItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.fordiac.ide.model.Palette.ResourceTypeEntry}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createResourceTypeEntryAdapter() {
		if (resourceTypeEntryItemProvider == null) {
			resourceTypeEntryItemProvider = new ResourceTypeEntryItemProvider(this);
		}

		return resourceTypeEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.fordiac.ide.model.Palette.SegmentTypePaletteEntry}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected SegmentTypePaletteEntryItemProvider segmentTypePaletteEntryItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.fordiac.ide.model.Palette.SegmentTypePaletteEntry}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createSegmentTypePaletteEntryAdapter() {
		if (segmentTypePaletteEntryItemProvider == null) {
			segmentTypePaletteEntryItemProvider = new SegmentTypePaletteEntryItemProvider(this);
		}

		return segmentTypePaletteEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.fordiac.ide.model.Palette.AdapterTypePaletteEntry}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected AdapterTypePaletteEntryItemProvider adapterTypePaletteEntryItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.fordiac.ide.model.Palette.AdapterTypePaletteEntry}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createAdapterTypePaletteEntryAdapter() {
		if (adapterTypePaletteEntryItemProvider == null) {
			adapterTypePaletteEntryItemProvider = new AdapterTypePaletteEntryItemProvider(this);
		}

		return adapterTypePaletteEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.fordiac.ide.model.Palette.SubApplicationTypePaletteEntry}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected SubApplicationTypePaletteEntryItemProvider subApplicationTypePaletteEntryItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.fordiac.ide.model.Palette.SubApplicationTypePaletteEntry}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createSubApplicationTypePaletteEntryAdapter() {
		if (subApplicationTypePaletteEntryItemProvider == null) {
			subApplicationTypePaletteEntryItemProvider = new SubApplicationTypePaletteEntryItemProvider(this);
		}

		return subApplicationTypePaletteEntryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the
	 * adapter. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to
	 * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void dispose() {
		if (paletteItemProvider != null)
			paletteItemProvider.dispose();
		if (stringToAdapterTypePaletteEntryMapItemProvider != null)
			stringToAdapterTypePaletteEntryMapItemProvider.dispose();
		if (stringToFDeviceTypePaletteEntryMapItemProvider != null)
			stringToFDeviceTypePaletteEntryMapItemProvider.dispose();
		if (stringToFBTypePaletteEntryMapItemProvider != null)
			stringToFBTypePaletteEntryMapItemProvider.dispose();
		if (stringToResourceTypeEntryMapItemProvider != null)
			stringToResourceTypeEntryMapItemProvider.dispose();
		if (stringToSegmentTypePaletteEntryMapItemProvider != null)
			stringToSegmentTypePaletteEntryMapItemProvider.dispose();
		if (stringToSubApplicationTypePaletteEntryMapItemProvider != null)
			stringToSubApplicationTypePaletteEntryMapItemProvider.dispose();
		if (adapterTypePaletteEntryItemProvider != null)
			adapterTypePaletteEntryItemProvider.dispose();
		if (deviceTypePaletteEntryItemProvider != null)
			deviceTypePaletteEntryItemProvider.dispose();
		if (fbTypePaletteEntryItemProvider != null)
			fbTypePaletteEntryItemProvider.dispose();
		if (resourceTypeEntryItemProvider != null)
			resourceTypeEntryItemProvider.dispose();
		if (segmentTypePaletteEntryItemProvider != null)
			segmentTypePaletteEntryItemProvider.dispose();
		if (subApplicationTypePaletteEntryItemProvider != null)
			subApplicationTypePaletteEntryItemProvider.dispose();
	}

}
